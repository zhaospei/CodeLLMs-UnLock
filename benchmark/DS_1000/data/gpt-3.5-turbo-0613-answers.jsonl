{"id": 0, "code": ["```python\ndf = df.iloc[List].reset_index(drop=True)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": ["<code>\ndf_shuffled = df.iloc[List].reset_index(drop=True)\nresult = (df_shuffled['Type'] != df['Type']).sum()\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": ["import pandas as pd\n\ndf = pd.DataFrame({'Qu1': ['apple', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'egg'],\n                   'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n                   'Qu3': ['apple', 'potato', 'sausage', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'egg']})\n\nvalue_counts = df.apply(pd.value_counts)\nvalues_to_keep = value_counts.columns[value_counts.ge(2).any()]\ndf = df.apply(lambda x: x if x.name in values_to_keep else 'other')\nresult = df\n"], "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": ["```python\n# Calculate value counts for each column\ncounts_qu1 = df['Qu1'].value_counts()\ncounts_qu2 = df['Qu2'].value_counts()\ncounts_qu3 = df['Qu3'].value_counts()\n\n# Determine values to keep for each column\nkeep_qu1 = counts_qu1[counts_qu1 >= 3].index.tolist()\nkeep_qu2 = counts_qu2[counts_qu2 >= 3].index.tolist()\nkeep_qu3 = counts_qu3[counts_qu3 >= 3].index.tolist()\n\n# Replace values not in keep list with 'other'\ndf['Qu1'] = df['Qu1'].apply(lambda x: x if x in keep_qu1 else 'other')\ndf['Qu2'] = df['Qu2'].apply(lambda x: x if x in keep_qu2 else 'other')\ndf['Qu3'] = df['Qu3'].apply(lambda x: x if x in keep_qu3 else 'other')\n\nresult = df\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": ["```python\n    for column in df.columns:\n        value_counts = df[column].value_counts()\n        for index, count in value_counts.items():\n            if count < 2:\n                df[column].replace(index, 'other', inplace=True)\n    return df\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": ["```python\n# Solution for Qu1 column\nqu1_counts = df['Qu1'].value_counts()\nqu1_others = qu1_counts[qu1_counts < 3].index\ndf['Qu1'] = df['Qu1'].replace(qu1_others, 'other')\n\n# Solution for Qu2 column\nqu2_counts = df['Qu2'].value_counts()\nqu2_others = qu2_counts[qu2_counts < 2].index\ndf['Qu2'] = df['Qu2'].replace(qu2_others, 'other')\n\n# Solution for Qu3 column\nqu3_counts = df['Qu3'].value_counts()\nqu3_others = qu3_counts[qu3_counts < 2].index\ndf['Qu3'] = df['Qu3'].replace(qu3_others, 'other')\n\nresult = df\n```\n```"], "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": ["```python\n# Calculate value counts for Qu1\ncounts_qu1 = df['Qu1'].value_counts()\n\n# Replace values in Qu1 based on value counts\ndf['Qu1'] = df['Qu1'].apply(lambda x: x if counts_qu1[x] >= 3 or x == 'apple' else 'other')\n\n# Calculate value counts for Qu2 and Qu3\ncounts_qu2 = df['Qu2'].value_counts()\ncounts_qu3 = df['Qu3'].value_counts()\n\n# Replace values in Qu2 and Qu3 based on value counts\ndf['Qu2'] = df['Qu2'].apply(lambda x: x if counts_qu2[x] >= 2 else 'other')\ndf['Qu3'] = df['Qu3'].apply(lambda x: x if counts_qu3[x] >= 2 else 'other')\n\nresult = df\n```\n```"], "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": ["```python\nresult = df.drop_duplicates(subset='url', keep='first').append(df[df['keep_if_dup'] == 'Yes'])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": ["<code>\nresult = df.drop_duplicates(subset='url', keep='first')\nresult = pd.concat([result, df[df['drop_if_dup'] == 'No']], ignore_index=True)\n</code>\n</code>"], "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": ["```python\nresult = df[df.duplicated(subset='url', keep='last') & (df['keep_if_dup'] != 'Yes')].index\ndf.drop(result, inplace=True)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": ["```python\nresult = df.groupby('name').apply(lambda x: x.set_index('name').T.to_dict('dict')).to_dict()\n``` \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": ["```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": ["```python\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    return df\n    ### END SOLUTION\n```"], "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": ["```python\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf = df.sort_values(by='datetime')\n```"], "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": ["```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values(by='datetime')\n```"], "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": ["df['message'] = df['message'].str.replace('[','').str.replace(']','').str.replace(':','').str.replace(',','')\ndf[['job','money','wife','group','kids']] = df['message'].str.split(expand=True)\ndf = df.drop('message', axis=1)\nresult = df\n"], "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": ["df.loc[df['product'].isin(products), 'score'] = df.loc[df['product'].isin(products), 'score'] * 10\n"], "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": ["```python\ndf.loc[~df['product'].isin(products), 'score'] *= 10\n``` \n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": ["```python\nfor product_range in products:\n    product_min, product_max = min(product_range), max(product_range)\n    df.loc[(df['product'] >= product_min) & (df['product'] <= product_max), 'score'] *= 10\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": ["df.loc[df['product'].isin(products), 'score'] = df.loc[df['product'].isin(products), 'score'].apply(lambda x: (x - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min()))\n"], "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": ["```python\ndf['category'] = df.idxmax(axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": ["df['category'] = df.apply(lambda row: row.idxmax(), axis=1)\n"], "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [1, 0, 0, 0, 1, 0],\n                   'B': [0, 1, 0, 0, 1, 1],\n                   'C': [1, 1, 1, 0, 1, 0],\n                   'D': [0, 0, 0, 1, 1, 0]})\n\n# Convert binary columns to a single categorical column of lists\ndf['category'] = df.apply(lambda x: [col for col in df.columns if x[col] == 1], axis=1)\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": ["```python\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n```\n```python\nEND SOLUTION\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": ["df['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n"], "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": ["```python\ndf = df[df['Date'].between('2019-01-17', '2019-02-20')]\ndf['Month_Year_Day'] = df['Date'].dt.strftime('%d-%b-%Y %A')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": ["```python\nshifted_values = df['#1'].shift(periods=-1)\nshifted_values.iloc[-1] = df['#1'].iloc[0]\ndf['#1'] = shifted_values\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": ["```python\ndf_shifted = df.shift(-1)\ndf_shifted.iloc[-1] = df.iloc[0]\ndf_shifted.iloc[0] = df.iloc[-1]\ndf = df_shifted\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": ["```python\n# Shift first column\nfirst_col_shifted = df['#1'].shift(-1)\nfirst_col_shifted.iloc[-1] = df['#1'].iloc[0]  # Set the last element to the first element\ndf['#1'] = first_col_shifted\n\n# Shift second column\nsecond_col_shifted = df['#2'].shift(1)\nsecond_col_shifted.iloc[0] = df['#2'].iloc[-1]  # Set the first element to the last element\ndf['#2'] = second_col_shifted\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": ["```python\nimport pandas as pd\nfrom sklearn.metrics import r2_score\n\ndf = pd.DataFrame({'#1': [11.6985, 43.6431, 54.9089, 63.1225, 72.4399],\n                   '#2': [126.0, 134.0, 130.0, 126.0, 120.0]},\n                  index=['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04', '1980-01-05'])\n\nmin_r2 = float('inf')\nbest_df = df.copy()\n\nfor _ in range(len(df)):\n    shifted_df = pd.concat([df.iloc[-1:], df.iloc[:-1]])\n    r2_col1 = r2_score(df['#1'], shifted_df['#1'])\n    r2_col2 = r2_score(df['#2'], shifted_df['#2'])\n    total_r2 = r2_col1 + r2_col2\n    if total_r2 < min_r2:\n        min_r2 = total_r2\n        best_df = shifted_df.copy()\n\ndf = best_df\n```\n```"], "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": ["<code>\ndf = df.rename(columns=lambda x: x + 'X')\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": ["```python\ndf = df.rename(columns=lambda x: 'X' + x)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": ["```python\ndf = df.rename(columns=lambda x: f\"X{x}\" if not x.endswith(\"X\") else f\"{x}X\")\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": ["```python\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"mean\" for col in df.columns if 'val' in col}})\n```"], "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": ["```python\nresult = df.groupby('group').agg({col: 'sum' for col in df.columns if 'val' in col})\n``` \n</code>"], "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": ["result = df.groupby('group').agg({\"group_color\": \"first\"})\nvalue_columns = [col for col in df.columns if col.startswith('val')]\nfor col in value_columns:\n    if col.endswith('2'):\n        result[col] = df.groupby('group')[col].mean()\n    else:\n        result[col] = df.groupby('group')[col].sum()\n"], "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": ["result = df.loc[row_list, column_list].mean()\n"], "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": ["```python\nresult = df.loc[row_list, column_list].sum()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": ["result = df.loc[row_list, column_list].sum()\nresult = result.drop(result.idxmax())\n"], "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": ["result = df.apply(pd.Series.value_counts).stack().astype(float)\n"], "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": ["result = df.isnull().sum()"], "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": ["```python\nresult = '\\n'.join([f'---- {col} ----\\n{df[col].value_counts()}\\n' for col in df.columns])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": ["```python\ndf.columns = df.iloc[0] + ' | ' + df.iloc[1]\ndf = df.drop([0, 1]).reset_index(drop=True)\n```\n```python\nEND SOLUTION\n```\n```python\nresult = df\n```"], "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": ["```python\ndf.columns = df.iloc[0] + ' | ' + df.iloc[1]\ndf = df.drop([0, 1]).reset_index(drop=True)\n```"], "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": ["```python\nresult = df.apply(lambda x: pd.Series(sorted(x.dropna().tolist() + x[x.isnull()].tolist())), axis=1)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": ["```python\nresult = df.apply(lambda x: np.where(x.isnull(), x.ffill(), x), axis=1)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": ["result = df.fillna(method='ffill')"], "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": ["```python\nthreshold = 6\nsmaller_than_threshold = df[df['value'] < threshold]\nif not smaller_than_threshold.empty:\n    df = df[~(df['value'] < threshold)]\n    df.loc['X'] = smaller_than_threshold.sum()\nresult = df\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nthresh = 6\n\n# Identify rows whose value is greater than the threshold\nmask = df['value'] > thresh\n\n# Calculate the average of the rows whose value is greater than the threshold\navg_value = df.loc[mask, 'value'].mean()\n\n# Substitute the rows whose value is greater than the threshold with a single row\n# containing the average value\ndf_agg = df[~mask].append(pd.DataFrame({'value': [avg_value]}, index=['X']))\n\nresult = df_agg\n```"], "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": ["```python\nmask = (df['value'] < section_left) | (df['value'] > section_right)\naggregated_value = df[~mask]['value'].mean()\ndf = df[mask].append(pd.DataFrame({'lab': ['X'], 'value': [aggregated_value]}).set_index('lab'))\n```"], "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": ["result = df.copy()\nfor col in df.columns:\n    result[f\"inv_{col}\"] = 1 / df[col]\n"], "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": ["result = df.copy()\nfor col in df.columns:\n    result[f\"exp_{col}\"] = df[col].apply(lambda x: math.exp(x))\n"], "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": ["result = df.copy()\nfor col in df.columns:\n    if col != '0':\n        result['inv_' + col] = 1 / df[col]\n    else:\n        result['inv_' + col] = df[col]\n"], "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": ["```python\nimport numpy as np\n\nresult = df.copy()\nfor column in df.columns:\n    result[f\"sigmoid_{column}\"] = 1 / (1 + np.exp(-df[column]))\n\nresult\n```"], "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": ["```python\nmask = (df == df.max()).cumsum() == 1\nresult = df[mask].idxmax()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": ["```python\nmask = df.cummax() == df\nmask.idxmax()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": ["```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\ndate_range = pd.date_range(min_date, max_date)\n\nexpanded_df = pd.DataFrame({'dt': date_range})\nexpanded_df['user'] = df['user'].unique()[0]  # Assuming each group has the same user\nexpanded_df = expanded_df.merge(df, on=['dt', 'user'], how='left').fillna(0)\n```\n```python\nEND SOLUTION\n```\n```python\nresult = expanded_df\n```\n"], "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": ["<code>\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\ndate_range = pd.date_range(start=min_date, end=max_date)\nexpanded_df = pd.DataFrame({'dt': date_range})\n\nresult = df.merge(expanded_df, on='dt', how='right').fillna({'val': 0})\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": ["<code>\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nall_dates = pd.date_range(start=min_date, end=max_date)\nexpanded_df = pd.DataFrame({'dt': all_dates, 'user': df['user'].unique(), 'val': 233})\n\nresult = pd.merge(expanded_df, df, on=['dt', 'user'], how='left').fillna({'val': 233})\n</code>\n</code>"], "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": ["```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\ndate_range = pd.date_range(start=min_date, end=max_date, freq='D')\n\nexpanded_df = pd.DataFrame({'dt': date_range})\nexpanded_df['user'] = df['user'].unique()[0]\nexpanded_df['val'] = df['val'].max()\n\nresult = pd.merge(expanded_df, df[['user', 'dt', 'val']], on=['user', 'dt'], how='left').fillna(method='ffill')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": ["min_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nexpanded_dates = pd.date_range(start=min_date, end=max_date, freq='D')\n\nexpanded_df = pd.DataFrame({'dt': expanded_dates})\nexpanded_df['user'] = df['user'].unique()\n\nexpanded_df = expanded_df.merge(df, on='user', how='left')\nexpanded_df['val'] = expanded_df['val'].fillna(method='ffill')\n\nexpanded_df['dt'] = expanded_df['dt'].dt.strftime('%d-%b-%Y')\n\nresult = expanded_df\n"], "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": ["```python\ndf['name'] = df['name'].astype('category').cat.codes + 1\nresult = df\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": ["```python\ndf['a'] = df['name'].astype('category').cat.codes + 1\n```\n```python\nEND SOLUTION\nresult = df\n```"], "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": ["<code>\nimport pandas as pd\n\nexample_df = pd.DataFrame({'name': ['Aaron', 'Aaron', 'Aaron', 'Brave', 'Brave'],\n                   'a': [3, 3, 3, 4, 3],\n                   'b': [5, 6, 6, 6, 6],\n                   'c': [7, 9, 10, 0, 1]})\n\ndef f(df=example_df):\n    # Mapping unique IDs to names\n    name_id_mapping = {name: i for i, name in enumerate(df['name'].unique(), start=1)}\n    \n    # Replacing names with IDs\n    df['name'] = df['name'].map(name_id_mapping)\n    \n    return df\n\nresult = f()\nprint(result)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": ["</code>\nEND SOLUTION"], "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": ["```python\ndf_melted = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf_melted['date'] = pd.to_datetime(df_melted['date'], format='%d/%m/%y')\ndf_melted['value'] = df_melted['value'].abs() # Take absolute value to handle negative values\ndf = df_melted.sort_values(by='user').reset_index(drop=True)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": ["```python\n# Python version: 3.x\nimport pandas as pd\n\ndf = pd.DataFrame({'user': ['u1', 'u2', 'u3'],\n                   '01/12/15': [100, 200, -50],\n                   '02/12/15': [300, -100, 200],\n                   'someBool': [True, False, True]})\n\n# Reshape the DataFrame using melt function\ndf = df.melt(id_vars=['user'], var_name='others', value_name='value')\n```\n```python\n# END SOLUTION\n</code>"], "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": ["df = pd.melt(df, id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna(subset=['value'])\ndf['date'] = pd.to_datetime(df['date'], format='%d/%m/%y')\ndf = df.sort_values(by=['user', 'date'])\ndf = df.reset_index(drop=True)\n"], "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": ["```python\nresult = df[df['c'] > 0.5][columns].to_numpy()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": ["```python\nresult = df.loc[df['c'] > 0.45, columns].to_numpy()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": ["import pandas as pd\n\ndef f(df, columns=['b', 'e']):\n    # filter rows where value for column 'c' is greater than 0.5\n    filtered_df = df[df['c'] > 0.5]\n    \n    # select only the specified columns\n    selected_df = filtered_df[columns]\n    \n    # convert the result to a numpy array\n    result = selected_df.to_numpy()\n    \n    return result"], "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": ["```python\nimport pandas as pd\n\ndef f(df, columns=['b', 'e']):\n    # Selecting rows where the value for column 'c' is greater than 0.5\n    filtered_df = df[df['c'] > 0.5]\n    \n    # Selecting only the desired columns\n    selected_cols = filtered_df[columns]\n    \n    # Adding a new column 'sum' which contains the sum of the selected columns\n    selected_cols['sum'] = selected_cols.sum(axis=1)\n    \n    return selected_cols\n\n# Test the function\ndf = pd.DataFrame({'a': [0.945686, 0.919359, 0.976163, 0.459039],\n                   'b': [0.000710, 0.667057, 0.621712, 0.788318],\n                   'c': [0.909158, 0.462478, 0.208423, 0.309892],\n                   'd': [0.892892, 0.008204, 0.980471, 0.100539],\n                   'e': [0.326670, 0.473096, 0.048334, 0.753992]})\nresult = f(df)\nprint(result)\n```\n</code>"], "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": ["<code>\nresult = df[df['c'] > 0.5][columns]\nreturn result"], "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": ["import datetime\n\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\n\nfiltered_rows = []\nfor index, row in df.iterrows():\n    if not any((row['date'] - df['date'][i]).days <= X for i in filtered_rows):\n        filtered_rows.append(index)\n\nresult = df.loc[filtered_rows]\n"], "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": ["import datetime\n\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\n\nfiltered_dates = []\nfor index, row in df.iterrows():\n    if not any((row['date'] - date).days <= X*7 for date in filtered_dates):\n        filtered_dates.append(row['date'])\n\nresult = df[df['date'].isin(filtered_dates)]\n"], "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": ["import datetime\n\n# Convert date column to datetime format\ndf['date'] = pd.to_datetime(df['date'])\n\n# Sort dataframe by date\ndf = df.sort_values('date')\n\n# Initialize a list to store the filtered rows\nfiltered_rows = []\n\n# Iterate over each row in the dataframe\nfor index, row in df.iterrows():\n    # Check if the current row overlaps with any of the previous rows\n    overlap = False\n    for filtered_row in filtered_rows:\n        if (row['date'] - filtered_row['date']).days <= X*7:\n            overlap = True\n            break\n    \n    # If the current row does not overlap, add it to the filtered rows\n    if not overlap:\n        filtered_rows.append(row)\n\n# Create a new dataframe with the filtered rows\nfiltered_df = pd.DataFrame(filtered_rows)\n\n# Convert date column back to string format\nfiltered_df['date'] = filtered_df['date'].dt.strftime('%d-%b-%Y')\n\n# Reset the index of the dataframe\nfiltered_df = filtered_df.reset_index(drop=True)\n\n# Print the filtered dataframe\nprint(filtered_df)\n"], "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0]})\nresult = df['col1'].groupby(df.index // 3).mean()\n```"], "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": ["```python\nresult = df.groupby(df.index // 3).mean()\n```"], "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": ["result = df.groupby(df.index // 4).sum()"], "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0]})\n\nresult = df[::-1].rolling(3).mean().dropna()[::-1]\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": ["import pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0, 2, 1, 3, 1]})\n\nresult = pd.Series()\nfor i in range(0, len(df), 5):\n    if i + 2 < len(df):\n        result = result.append(pd.Series(df.loc[i:i+2, 'col1'].sum()))\n    if i + 4 < len(df):\n        result = result.append(pd.Series(df.loc[i+3:i+4, 'col1'].mean()))\n\nresult.reset_index(drop=True, inplace=True)\nresult = pd.DataFrame({'col1': result})\nresult.reset_index(drop=True, inplace=True)\nresult"], "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0, 2, 1, 3, 1]})\n\n# Get the sum for every 3 rows\nsum_result = df.groupby(df.index // 3 * 3)['col1'].sum()\n\n# Get the average for every 2 rows\navg_result = df.groupby(df.index[::-1] // 2 * 2)['col1'].mean()\n\n# Concatenate the results\nresult = pd.concat([sum_result, avg_result]).sort_index()\n</code>"], "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": ["<code>\nimport pandas as pd\n\n\nindex = range(14)\ndata = [1, 0, 0, 2, 0, 4, 6, 8, 0, 0, 0, 0, 2, 1]\ndf = pd.DataFrame(data=data, index=index, columns=['A'])\n\ndf['A'] = df['A'].replace(0, method='ffill')\n</code>"], "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": ["df['A'] = df['A'].replace(0, method='ffill')\n"], "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": ["df['A'] = df['A'].replace(0, pd.NA).fillna(method='ffill').fillna(method='bfill')\n"], "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['7 year', '2day', '4 week', '8 month']},\n                  index=list(range(1,5)))\n\ndf['number'] = df['duration'].str.extract('(\\d+)')\ndf['time'] = df['duration'].str.extract('([a-zA-Z]+)')\ndf['time_days'] = df['time'].map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n\ndf\n```\n"], "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']},\n                  index=list(range(1,5)))\n\ndf['number'] = df['duration'].str.extract('(\\d+)')\ndf['time'] = df['duration'].str.extract('([a-zA-Z]+)')\ntime_conversion = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_day'] = df['time'].map(time_conversion)\n\ndf\n```\n```"], "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": ["```python\n    df['number'] = df['duration'].str.extract(r'(\\d+)')\n    df['time'] = df['duration'].str.extract(r'(\\w+)')\n    time_mapping = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\n    df['time_days'] = df['time'].map(time_mapping)\n    return df\n### END SOLUTION\n```"], "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']}, index=list(range(1, 5)))\n\ndf['number'] = df['duration'].str.extract(r'(\\d+)')\ndf['time'] = df['duration'].str.extract(r'(\\D+)')\ntime_dict = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_day'] = df['time'].map(time_dict) * df['number'].astype(int)\n```\n```"], "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": ["```python\nimport numpy as np\n\nresult = np.where(~np.any(df1[columns_check_list] != df2[columns_check_list], axis=1))[0].tolist()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": ["```python\ncheck = [(df1[column] == df2[column]).all() for column in columns_check_list]\n```\n```python\nEND SOLUTION\nresult = check\n```"], "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": ["df.index.levels[1] = pd.to_datetime(df.index.levels[1])\n"], "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": ["```python\ndf.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1, inplace=True)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": ["```python\nimport pandas as pd\n\ndef f(df):\n    # return the solution in this function\n    # df = f(df)\n    ### BEGIN SOLUTION\n    df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1, inplace=True)\n    return df.reset_index().values\n    ### END SOLUTION\n\n# Sample usage:\n# df = pd.DataFrame({'x': [100, 90, 80], 'y': [7, 8, 9]}, index=pd.MultiIndex.from_tuples([('abc', '3/1/1994'), ('abc', '9/1/1994'), ('abc', '3/1/1995')], names=['id', 'date']))\n# result = f(df)\n# print(result)\n```\n</code>"], "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": ["```python\nimport pandas as pd\n\ndef f(df):\n    df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=0, inplace=True)\n    df = df.swaplevel()\n    return df\n\n# Example usage:\n# df = f(df)\n```"], "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": ["```python\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf.columns.name = None\ndf = df.rename_axis(None, axis=1).reset_index(drop=True)\n```\n"], "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": ["```python\ndf_long = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf_long['year'] = df_long['year'].astype(int)\ndf_long = df_long.pivot_table(index=['Variable', 'Country', 'year'], columns='Variable', values='value').reset_index()\ndf_long.columns.name = None\ndf_long = df_long.rename(columns={'var1': 'Var1', 'var2': 'Var2'})\ndf_long = df_long[['Variable', 'Country', 'year', 'Var1', 'Var2']]\ndf_long = df_long.sort_values(by='year', ascending=False).reset_index(drop=True)\ndf = df_long\n```\n```"], "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": ["df_filtered = df[(df.filter(like='Value').abs() < 1).all(axis=1)]\n"], "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": ["df = df[(abs(df.filter(like='Value')) > 1).any(axis=1)]\n"], "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": ["```python\nvalue_columns = [col for col in df.columns if col.startswith('Value_')]\ndf_abs = df[(df[value_columns].abs() > 1).any(axis=1)]\ndf = df_abs.rename(columns=lambda x: x.replace('Value_', ''))\n```\n```python\nEND SOLUTION\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": ["```python\ndf = df.replace('&AMP;', '&', regex=True)\n``` \n</code>"], "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": ["```python\ndf = df.applymap(lambda x: x.replace('&LT', '<') if isinstance(x, str) else x)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": ["```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({'A': ['Good &AMP; bad', 'BB', 'CC', 'DD', 'Good &AMP; bad'], 'B': range(5), 'C': ['Good &AMP; bad'] * 5})\ndef f(df=example_df):\n    # return the solution in this function\n    # result = f(df)\n    for col in df.columns:\n        if df[col].dtype == object:\n            df[col] = df[col].str.replace('&AMP;', '&')\n    return df\n### END SOLUTION\n\nresult = f()\nprint(result)\n```"], "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": ["df = df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n"], "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": ["```python\ndf = df.replace('&AMP;', '&', regex=True)\n```\n```python\ndf['Title'] = df['Title'].str.replace('&AMP;', '&').str.replace('&', ' = 0')\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": ["```python\nimport pandas as pd\nimport re\n\nname_df = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane Smith', 'Juan de la Cruz']})\n\ndef validate_single_space_name(name: str) -> str:\n    pattern = re.compile(r'^.*( ){1}.*$')\n    match_obj = re.match(pattern, name)\n    if match_obj:\n        return name\n    else:\n        return None\n\nname_df['first_name'] = name_df['name'].apply(lambda x: x.split(' ')[0] if ' ' in x else x)\nname_df['last_name'] = name_df['name'].apply(lambda x: x.split(' ')[1] if ' ' in x else None)\n\nprint(name_df)\n```\n```python\n   first_name last_name\n0        Jack      Fine\n1  Kim Q. Danger      None\n2        Jane     Smith\n3  Juan de la Cruz      None\n```"], "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": ["```python\nimport pandas as pd\nimport re\n\nname_df = pd.DataFrame({'name': ['Jack Fine', 'Kim Q. Danger', 'Jane Smith', 'Juan de la Cruz']})\n\ndef validate_single_space_name(name: str) -> str:\n    pattern = re.compile(r'^.*\\s{1}.*$')\n    match_obj = re.match(pattern, name)\n    if match_obj:\n        return name\n    else:\n        return None\n\nname_df['1_name'] = name_df['name'].apply(lambda x: x.split(' ')[0] if validate_single_space_name(x) else x)\nname_df['2_name'] = name_df['name'].apply(lambda x: x.split(' ')[1] if validate_single_space_name(x) else '')\n\nname_df.drop('name', axis=1, inplace=True)\n\nprint(name_df)\n```\n```python\ndf = name_df\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": ["```python\nimport pandas as pd\nimport re\n\ndf = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane 114 514 Smith', 'Zhongli']})\n\ndef split_name(name):\n    if ' ' in name:\n        parts = name.split(' ')\n        first_name = parts[0]\n        last_name = parts[-1]\n        middle_name = ' '.join(parts[1:-1]) if len(parts) > 2 else None\n        return first_name, middle_name, last_name\n    else:\n        return name, None, None\n\ndf[['first_name', 'middle_name', 'last_name']] = df['name'].apply(lambda x: pd.Series(split_name(x)))\n\ndf.drop(columns=['name'], inplace=True)\n```\n```"], "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": ["```python\nresult = pd.merge_asof(df2, df1, on='Timestamp')\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": ["```python\nresult = pd.merge_asof(df1, df2, on='Timestamp')\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": ["```python\ndef calculate_state(row):\n    if row['col2'] <= 50 and row['col3'] <= 50:\n        return row['col1']\n    else:\n        return max(row['col1'], row['col2'], row['col3'])\n\ndf['state'] = df.apply(calculate_state, axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": ["```python\ndef calculate_state(row):\n    if row['col2'] > 50 and row['col3'] > 50:\n        return row['col1']\n    else:\n        return row['col1'] + row['col2'] + row['col3']\n\ndf['state'] = df.apply(calculate_state, axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```\n```python\n   datetime  col1  col2  col3  state\n0 2021-04-10 01:00:00    25    50    50    125\n1 2021-04-10 02:00:00    25    50    50    125\n2 2021-04-10 03:00:00    25   100    50    175\n3 2021-04-10 04:00:00    50    50   100    200\n4 2021-04-10 05:00:00   100   100   100    100\n```"], "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": ["```python\nerror_values = []\nfor index, row in df.iterrows():\n    if not str(row['Field1']).isdigit():\n        error_values.append(row['Field1'])\nEND SOLUTION\n```\n```python\ndf = error_values\n```"], "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": ["```python\ninteger_values = []\n\nfor index, row in df.iterrows():\n    value = row['Field1']\n    if isinstance(value, int):\n        integer_values.append(value)\n    elif str(value).isnumeric():\n        integer_values.append(int(value))\n\ndf = integer_values\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": ["```python\n    error_values = []\n    for index, row in df.iterrows():\n        if not isinstance(row['Field1'], int):\n            error_values.append(row['Field1'])\n    return error_values\n### END SOLUTION\n```"], "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": ["```python\ndf_percentages = df.set_index('cat').div(df.sum(axis=1), axis=0)\ndf = df_percentages.reset_index()\n```\n"], "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": ["<code>\ndf_percentage = df.set_index('cat').div(df.sum(axis=1), axis=0)\n</code>\ndf = df_percentage.reset_index()\n</code>"], "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": ["```python\nresult = df.loc[test]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": ["```python\nresult = df.loc[test]\n```\n```"], "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": ["df = df.drop(test)\nresult = df"], "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": ["import pandas as pd\n\ndef f(df, test):\n    # return the solution in this function\n    result = df.loc[test].drop_duplicates()\n    return result"], "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": ["import numpy as np\n\n# Calculate pairwise distances between cars\ndistances = []\nfor i in range(len(df)):\n    x1 = df.loc[i, 'x']\n    y1 = df.loc[i, 'y']\n    car1 = df.loc[i, 'car']\n    dist = []\n    for j in range(len(df)):\n        if i != j:\n            x2 = df.loc[j, 'x']\n            y2 = df.loc[j, 'y']\n            car2 = df.loc[j, 'car']\n            distance = np.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            dist.append((car2, distance))\n    distances.append((car1, dist))\n\n# Find nearest neighbour for each car\nnearest_neighbours = []\nfor i in range(len(distances)):\n    car1 = distances[i][0]\n    dist = distances[i][1]\n    dist.sort(key=lambda x: x[1])\n    nearest_neighbour = dist[0][0]\n    nearest_neighbours.append((car1, nearest_neighbour))\n\n# Calculate average distance for each time point\naverage_distances = []\nfor time in df['time'].unique():\n    df_time = df[df['time'] == time]\n    total_distance = 0\n    count = 0\n    for i in range(len(df_time)):\n        car1 = df_time.loc[i, 'car']\n        nearest_neighbour = [x[1] for x in nearest_neighbours if x[0] == car1][0]\n        total_distance += nearest_neighbour\n        count += 1\n    average_distance = total_distance / count\n    average_distances.append((time, average_distance))\n\n# Create new dataframe with results\ndf2 = pd.DataFrame(columns=['car', 'nearest_neighbour', 'euclidean_distance'])\nfor i in range(len(df)):\n    car = df.loc[i, 'car']\n    time = df.loc[i, 'time']\n    nearest_neighbour = [x[1] for x in nearest_neighbours if x[0] == car][0]\n    euclidean_distance = [x[1] for x in distances if x[0] == car][0]\n    df2.loc[i] = [car, nearest_neighbour, euclidean_distance]\n\n# Group by time and calculate average distance\ndf2 = df2.groupby('time').mean().reset_index()\n"], "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ntime = [0, 0, 0, 1, 1, 2, 2]\nx = [216, 218, 217, 280, 290, 130, 132]\ny = [13, 12, 12, 110, 109, 3, 56]\ncar = [1, 2, 3, 1, 3, 4, 5]\ndf = pd.DataFrame({'time': time, 'x': x, 'y': y, 'car': car})\n\n# Calculate pairwise distances between cars\ndf['xy'] = list(zip(df['x'], df['y']))\ndf['distances'] = df.groupby('time')['xy'].transform(lambda x: np.linalg.norm(x - x[:, np.newaxis], axis=0))\n\n# Find the farthest neighbor for each car at each time point\ndf2 = pd.DataFrame(columns=['time', 'car', 'farthest_neighbor', 'euclidean_distance'])\nfor t in df['time'].unique():\n    df_t = df[df['time'] == t]\n    for _, row in df_t.iterrows():\n        other_cars = df_t[df_t['car'] != row['car']]\n        farthest_neighbor = other_cars.loc[other_cars['distances'].idxmax()]\n        distance = row['distances'][farthest_neighbor.name]\n        df2 = df2.append({'time': t, 'car': row['car'], 'farthest_neighbor': farthest_neighbor['car'], 'euclidean_distance': distance}, ignore_index=True)\n\ndf2['euclidean_distance'] = df2['euclidean_distance'].astype(float)\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": ["```python\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df[cols].apply(lambda row: \",\".join(row.dropna()), axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": ["```python\ncols = [df.keywords_0, df.keywords_1, df.keywords_2, df.keywords_3]\ndf[\"keywords_all\"] = df.apply(lambda row: \"-\".join(row.dropna()), axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": ["```python\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf['keywords_all'] = df[cols].apply(lambda row: '-'.join(row.dropna()), axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": ["cols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf['keywords_all'] = df[cols].apply(lambda row: '-'.join(row.dropna()), axis=1)\n"], "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": ["```python\ndf_altered = df.sample(frac=0.2, random_state=0)\ndf.loc[df_altered.index, 'Quantity'] = 0\n```"], "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": ["```python\ndf_sampled = df.sample(frac=0.2, random_state=0)\ndf.loc[df_sampled.index, 'ProductId'] = 0\n```"], "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": ["df_altered = df.groupby('UserId').apply(lambda x: x.sample(frac=0.2, random_state=0))\ndf_altered['Quantity'] = 0\ndf = pd.concat([df, df_altered]).drop_duplicates(keep=False).reset_index(drop=True)\ndf = df.sort_values('UserId').reset_index(drop=True)\n"], "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": ["duplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index[0]\n"], "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": ["duplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index\n"], "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": ["```python\nimport pandas as pd\n\nexample_df=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])\ndef f(df=example_df):\n    # return the solution in this function\n    # result = f(df)\n    ### BEGIN SOLUTION\n    duplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\n    duplicate = df.loc[duplicate_bool]\n    duplicate['index_original'] = df.reset_index().index[duplicate_bool]\n    return duplicate\n    ### END SOLUTION\n\nprint(f())  # Output will be the same as in the question\n```"], "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": ["import pandas as pd\n\ndf=pd.DataFrame(data=[[1,1,2,5],[1,3,4,1],[4,1,2,5],[5,1,4,9],[1,1,2,5]],columns=['val', 'col1','col2','3col'])\n\nduplicate_bool = df.duplicated(subset=['col1','col2', '3col'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\n\nduplicate['index_original'] = duplicate.index[0]\n\nresult = duplicate"], "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": ["```python\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\ndf['index_original'] = df.index\nduplicate = df.loc[duplicate_bool == True]\n```"], "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": ["<code>\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": ["```python\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": ["```python\nresult = df[df['count'] == df.groupby(['Sp', 'Mt'])['count'].transform('min')]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": ["<code>\nresult = df.loc[df.groupby(['Sp', 'Value'])['count'].idxmax()]\n</code>"], "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": ["result = df[df['Category'].isin(filter_list)]\n"], "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": ["```python\nresult = df.query(\"Category not in @filter_list\")\n```  \n</code>\n```"], "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'col1': {0: 'a', 1: 'b', 2: 'c'},\n                   'col2': {0: 1, 1: 3, 2: 5},\n                   'col3': {0: 2, 1: 4, 2: 6},\n                   'col4': {0: 3, 1: 6, 2: 2},\n                   'col5': {0: 7, 1: 2, 2: 3},\n                   'col6': {0: 2, 1: 9, 2: 5},\n                  })\ndf.columns = [list('AAAAAA'), list('BBCCDD'), list('EFGHIJ')]\n\nresult = pd.melt(df, value_vars=df.columns)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": ["```python\nmelt_columns = [('_'.join(col),) + ('value',) for col in df.columns.to_flat_index()]\nresult = df.melt(value_vars=melt_columns, var_name=None, ignore_index=False)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": ["```python\ndf['cummax'] = df.groupby('id')['val'].cummax()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\ndf['cumsum'] = df['cumsum'].apply(lambda x: max(0, x))\n"], "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": ["```python\nresult = df.groupby('l')['v'].sum(min_count=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": ["```python\nresult = df.groupby('r')['v'].sum(min_count=1)\n``` \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": ["```python\nresult = df.groupby('l')['v'].apply(lambda x: np.nan if x.isnull().any() else x.sum()).reset_index()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": ["```python\nimport itertools\n\nrelations = []\n\nfor col1, col2 in itertools.permutations(df.columns, 2):\n    unique1 = df[col1].nunique()\n    unique2 = df[col2].nunique()\n    common = len(set(df[col1]) & set(df[col2]))\n    \n    if unique1 == common and unique2 == common:\n        relations.append(f\"{col1} {col2} one-to-one\")\n    elif unique1 == common:\n        relations.append(f\"{col1} {col2} one-to-many\")\n    elif unique2 == common:\n        relations.append(f\"{col1} {col2} many-to-one\")\n    else:\n        relations.append(f\"{col1} {col2} many-to-many\")\n\nresult = relations\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'Column1': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Column2': [4, 3, 6, 8, 3, 4, 1, 4, 3],\n    'Column3': [7, 3, 3, 1, 2, 2, 3, 2, 7],\n    'Column4': [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'Column5': [1, 1, 1, 1, 1, 1, 1, 1, 1]})\n\nrelationships = []\n\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            relation = \"\"\n            if df[col1].nunique() == df[col2].nunique():\n                relation += \"many-2-many\"\n            elif df[col1].nunique() > df[col2].nunique():\n                relation += \"many-2-one\"\n            else:\n                relation += \"one-2-many\"\n            \n            relationships.append(f\"{col1} {col2} {relation}\")\n\nresult = relationships\n```\n```"], "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": ["import numpy as np\n\n# Initialize the result DataFrame with NaN values\nresult = pd.DataFrame(np.nan, index=df.columns, columns=df.columns)\n\n# Iterate over each pair of columns\nfor col1 in df.columns:\n    for col2 in df.columns:\n        # Check if the columns are the same\n        if col1 == col2:\n            result.loc[col1, col2] = np.nan\n        else:\n            # Check if the columns have a one-to-one relationship\n            if df[col1].nunique() == df[col2].nunique() == len(df):\n                result.loc[col1, col2] = 'one-to-one'\n            # Check if the columns have a one-to-many relationship\n            elif df[col1].nunique() == len(df) and df[col2].nunique() < len(df):\n                result.loc[col1, col2] = 'one-to-many'\n            # Check if the columns have a many-to-one relationship\n            elif df[col1].nunique() < len(df) and df[col2].nunique() == len(df):\n                result.loc[col1, col2] = 'many-to-one'\n            # Check if the columns have a many-to-many relationship\n            else:\n                result.loc[col1, col2] = 'many-to-many'\n"], "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": ["```python\ndef relationship_type(df):\n    relationship = df.apply(lambda x: df.apply(lambda y: \n                      'one-2-many' if x.equals(y) and not (x == y).all() else \n                      'many-2-one' if (x == y).sum() == len(x) and not (x == y).all() else \n                      'one-2-one' if x.equals(y) and (x == y).all() else \n                      'many-2-many', axis=0), axis=1)\n    return relationship\n\nresult = relationship_type(df)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": ["```python\n# Sort dataframe by 'bank' column with NaN values at the bottom\ndf_sorted = df.sort_values(by='bank', na_position='last')\n\n# Drop duplicates keeping the last occurrence (which will have a bank account if any)\ndf_deduped = df_sorted.drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='last')\n\nresult = df_deduped\n</code>\n```"], "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": ["```python\ndf = pd.DataFrame({'Revenue': ['24.73', '18.73', '17.56', '29.14', '22.67', '95.85', '84.58', '58.33', '29.63', '243.91', '230.77', '216.58', '206.23', '192.82', '741.15', '556.28', '414.51', '308.82', '2,144.78', '2,036.62', '1,916.60', '1,809.40', '1,711.97', '6,667.22', '5,373.59', '4,071.00', '3,050.20', '-0.06', '-1.88', '', '-0.13', '', '-0.14', '0.07', '0', '0'],\n                   'Other, Net': ['-0.06', '-1.88', '', '-0.13', '', '-0.14', '0.07', '0', '0', '-0.8', '-1.12', '1.32', '-0.05', '-0.34', '-1.37', '-1.9', '-1.48', '0.1', '41.98', '35', '-11.66', '27.09', '-3.44', '14.13', '-18.69', '-4.87', '-5.7']}, \n                  index=['2016-09-30', '2016-06-30', '2016-03-31', '2015-12-31', '2015-09-30', '2015-12-31', '2014-12-31', '2013-12-31', '2012-12-31', '2016-09-30', '2016-06-30', '2016-03-31', '2015-12-31', '2015-09-30', '2015-12-31', '2014-12-31', '2013-12-31', '2012-12-31', '2016-10-31', '2016-07-31', '2016-04-30', '2016-01-31', '2015-10-31', '2016-01-31', '2015-01-31', '2014-01-31', '2013-01-31'])\n\ndf['Revenue'] = pd.to_numeric(df['Revenue'].str.replace(',', ''), errors='coerce')\ndf['Other, Net'] = pd.to_numeric(df['Other, Net'].str.replace(',', ''), errors='coerce')\nprint(df)\n```"], "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": ["result = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0))['Survived'].mean()\n"], "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": ["result = df.groupby(((df['Survived'] > 0) | (df['Parch'] > 0)).map({True: 'Has Family', False: 'No Family'}))['SibSp'].mean()\n"], "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": ["```python\nresult = df.groupby((df['SibSp'] == 1) & (df['Parch'] == 1)).mean().rename({True: 'Has Family', False: 'No Family'}).iloc[:, 0]\nresult.index = ['Has Family', 'No Family']\nresult.loc['New Family'] = df.loc[(df['SibSp'] == 0) & (df['Parch'] == 1), 'Survived'].mean()\nresult.loc['Old Family'] = df.loc[(df['SibSp'] == 1) & (df['Parch'] == 0), 'Survived'].mean()\n```\n"], "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": ["<code>\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A')).reset_index(drop=True)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": ["```python\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A')).reset_index(drop=True)\n```  \n```"], "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": ["```python\n# Solution:\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Lower'])\n```"], "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": ["```python\n# Reshape the DataFrame\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Middle', 'Lower'])\ndf = df.stack(level=['Caps', 'Middle', 'Lower']).unstack(level='Caps')\ndf.columns = df.columns.droplevel()\n```\n"], "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": ["df.columns = pd.MultiIndex.from_tuples(df.columns)\ndf"], "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": ["```python\nimport numpy as np\nimport pandas as pd\n\nnp.random.seed(123)\nbirds = np.random.choice(['African Swallow', 'Dead Parrot', 'Exploding Penguin'], size=int(5e4))\nsomeTuple = np.unique(birds, return_counts=True)\n\n# Construct DataFrame\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n```\n```"], "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": ["import numpy as np\n\nstdMean = lambda x: np.std(np.mean(x))\nresult = df.groupby('a').b.agg([('mean', 'mean'), ('std', stdMean)])\n"], "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[12,13,23,22,23,24,30,35,55], 'b':[1,1,1,2,2,2,3,3,3]})\n\nstdMeann = lambda x: np.std(x.mean())\n\nresult = df.groupby('b')['a'].agg(['mean', stdMeann])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": ["import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[1,1,1,2,2,2,3,3,3], 'b':[12,13,23,22,23,24,30,35,55]})\n\n# Calculate softmax\ndf['softmax'] = df.groupby('a')['b'].transform(lambda x: np.exp(x) / np.sum(np.exp(x)))\n\n# Calculate min-max normalization\ndf['min-max'] = df.groupby('a')['b'].transform(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)))\n\ndf"], "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": ["```python\nresult = df.loc[(df != 0).any(axis=1), (df != 0).any(axis=0)]\n```"], "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": ["result = df.loc[(df.sum(axis=1) != 0), (df.sum(axis=0) != 0)]\n"], "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": ["```python\ndf = df.loc[(df <= 2).all(axis=1), (df <= 2).all()]\n```\n```python\nEND SOLUTION\nresult = df\n```"], "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": ["```python\ndf[df.max(axis=1) > 2] = 0\ndf.loc[:, df.max() > 2] = 0\nresult = df\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": ["result = s.sort_values(ascending=True).sort_index()\n"], "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": ["df = pd.DataFrame({'index': s.index, '1': s.values}).sort_values(by=['1', 'index'], ascending=[True, True])\n"], "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": ["result = df[df['A'].apply(lambda x: isinstance(x, (int, float)))]\n"], "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": ["result = df[df['A'].apply(lambda x: isinstance(x, str))]\n"], "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": ["result = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].max()])\n"], "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": ["result = df.groupby(['Sp','Mt']).apply(lambda x: x[x['count'] == x['count'].max()])\n"], "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": ["```python\nresult = df[df['count'] == df.groupby(['Sp', 'Mt'])['count'].transform('min')]\n``` \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": ["result = df.groupby(['Sp','Value']).apply(lambda x: x[x['count'] == x['count'].max()])\n"], "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": ["df['Date'] = df['Member'].map(dict)\ndf['Date'] = df['Date'].fillna(df['Member'])\n"], "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": ["```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\nexample_dict = {'abc': '1/2/2003', 'def': '1/5/2017', 'ghi': '4/10/2013'}\nexample_df = pd.DataFrame({'Member': ['xyz', 'uvw', 'abc', 'def', 'ghi'],\n                           'Group': ['A', 'B', 'A', 'B', 'B'],\n                           'Date': [np.nan, np.nan, np.nan, np.nan, np.nan]})\n\n\ndef f(dict=example_dict, df=example_df):\n    df['Date'] = df['Member'].map(dict)\n    return df\n\n\n### END SOLUTION\n```"], "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": ["```python\ndf['Date'] = df['Member'].map(lambda x: dict.get(x, '17/8/1926'))\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y').dt.strftime('%d-%b-%Y')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": ["```python\nimport pandas as pd\n\nd = ({\n    'Date' : ['1/1/18','1/1/18','2/1/18','3/1/18','1/2/18','1/3/18','2/1/19','3/1/19'],                 \n    'Val' : ['A','B','C','D','A','B','C','D'],                                      \n     })\ndf = pd.DataFrame(data=d)\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\n\ndf['Count_m'] = df['Date'].dt.to_period('M').map(df.groupby(df['Date'].dt.to_period('M')).size())\ndf['Count_y'] = df['Date'].dt.to_period('Y').map(df.groupby(df['Date'].dt.to_period('Y')).size())\n\nprint(df)\n```\n```"], "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Date'].transform('count')\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')])['Date'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Date'].transform('count')\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Date'].transform('count')\n```\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date').transform('size')\ndf['Count_m'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month]).transform('size')\ndf['Count_y'] = df.groupby(df['Date'].dt.year).transform('size')\ndf['Count_w'] = df.groupby(df['Date'].dt.strftime('%A')).transform('size')\ndf['Count_Val'] = df.groupby(['Date', 'Val']).transform('size')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": ["result1 = df[df == 0].groupby('Date').count()\nresult2 = df[df != 0].groupby('Date').count()\n"], "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": ["```python\nresult1 = df.groupby('Date').apply(lambda x: x[x % 2 == 0].count())\nresult2 = df.groupby('Date').apply(lambda x: x[x % 2 != 0].count())\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": ["result = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": ["```python\nresult = pd.pivot_table(df, values={'D': np.sum, 'E': np.mean}, index='B')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": ["result = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n"], "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": ["```python\nresult = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.max, 'E': np.min})\n```\n```"], "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": ["```python\nimport dask.dataframe as dd\nimport pandas as pd\n\n# Read the csv file into a dask dataframe\nddf = dd.read_csv('your_file.csv')\n\n# Define a function to split a string and explode it into multiple rows\ndef split_and_explode(row):\n    var1 = row['var1']\n    var2 = row['var2']\n    var2_list = var2.split(',')\n    return pd.DataFrame({'id': [row['id']] * len(var2_list), 'var1': [var1] * len(var2_list), 'var2': var2_list})\n\n# Apply the function to each row and concatenate the results\nresult = dd.from_pandas(ddf.apply(split_and_explode, axis=1, meta={'id': int, 'var1': str, 'var2': str}).compute(), npartitions=10)\n```\n```python\nEND SOLUTION\n```\n```python\n# Visualize the result\nprint(result)\n```"], "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": ["```python\nimport dask.dataframe as dd\n\n# Assuming df is your Dask DataFrame\ndf = dd.from_pandas(df, npartitions=4)\n\n# Splitting the column var2 by comma and explode\nresult = df.assign(var2=df['var2'].str.split(',')).explode('var2')\n\n# Converting back to pandas DataFrame if needed\nresult = result.compute()\n```\n```python\nresult\n```\n```python\n  var1 var2\n1    A    Z\n1    A    Y\n2    B    X\n3    C    W\n3    C    U\n3    C    V\n```\n```python\nEND SOLUTION\n```\n```python\nresult\n```"], "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": ["import dask.dataframe as dd\n\n# Read the CSV file into a Dask DataFrame\ndf = dd.read_csv('file.csv')\n\n# Split the var2 column into multiple rows\ndf = df.assign(var2=df.var2.str.split('-'))\n\n# Explode the var2 column to create multiple rows\ndf = df.explode('var2')\n\n# Reset the index\ndf = df.reset_index(drop=True)\n\n# Show the resulting DataFrame\ndf"], "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'str': ['Aa', 'Bb', '?? ?', '###', '{}xxa;']})\n\ndef count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if not string[i].isalnum() and not string[i].isspace():\n            special_char += 1\n    return special_char\n\ndf[\"new\"] = df[\"str\"].apply(count_special_char)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": ["```python\ndef count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if not string[i].isalpha():\n            special_char += 1\n    return special_char\n\ndf[\"new\"] = df[\"str\"].apply(count_special_char)\n```\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": ["df[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n"], "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": ["```python\ndf[['fips', 'row']] = df['row'].str.split(n=1, expand=True)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": ["df[['fips', 'medi', 'row']] = df['row'].str.split(' ', n=2, expand=True)\n"], "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": ["```python\ndf.set_index('Name', inplace=True)\ndf = df.apply(lambda row: row[row != 0].expanding().mean(), axis=1).fillna(df)\ndf.reset_index(inplace=True)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": ["```python\n# Calculating cumulative average for each row from end to head\ndf = df.set_index('Name')\ndf = df.iloc[:, ::-1]  # Reverse columns order\n\n# Cumulative sum ignoring zeros\ncum_sum = df.cumsum(axis=1)\nnon_zero_count = (df != 0).cumsum(axis=1)\n\n# Calculate cumulative average, ignoring zeros\ncum_avg = cum_sum / non_zero_count\ncum_avg[non_zero_count == 0] = 0  # Replace NaNs with zeros for rows with all zeros\n\ndf = cum_avg.iloc[:, ::-1]  # Reverse columns order back to original\ndf = df.reset_index()\n</code>\n```"], "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": ["```python\n    df.set_index('Name', inplace=True)\n    df.replace(0, pd.np.nan, inplace=True)\n    df = df.cumsum(axis=1)\n    counts = df.count(axis=1)\n    df = df.div(counts, axis=0)\n    df.fillna(0, inplace=True)\n    return df.reset_index()\n### END SOLUTION\n```"], "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'Name': ['Name1', 'Name2', 'Name3'],\n                   '2001': [2, 1, 0],\n                   '2002': [5, 4, 5],\n                   '2003': [0, 2, 0],\n                   '2004': [0, 0, 0],\n                   '2005': [4, 4, 0],\n                   '2006': [6, 0, 2]})\n\ndf.iloc[:, 1:] = df.iloc[:, 1:][::-1].cumsum(axis=1) / (df.iloc[:, 1:] != 0).cumsum(axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": ["```python\ndf['Label'] = (df['Close'].diff() > 0).astype(int)\ndf.loc[0, 'Label'] = 1\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": ["```python\ndf['label'] = (df['Close'].diff() > 0).astype(int).replace({True: 1, False: -1})\ndf.loc[0, 'label'] = 1\ndf['label'] = df['label'].fillna(0).astype(int)\n```"], "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": ["```python\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf['label'] = (df['Close'] - df['Close'].shift()).fillna(0).apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": ["```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": ["```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = (df['departure_time'].shift(-1) - df['arrival_time']).dt.total_seconds()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": ["```python\n# Convert arrival_time and departure_time to datetime\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\n# Calculate time difference in seconds\ndf['Duration'] = (df['departure_time'].shift(-1) - df['arrival_time']).dt.total_seconds()\n\n# Format arrival_time and departure_time\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": ["result = df[df['key2'] == 'one'].groupby('key1').size().reset_index(name='count')\nresult = result.merge(df['key1'].drop_duplicates(), how='right').fillna(0)\n"], "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": ["```python\nresult = df[df['key2'] == 'two'].groupby('key1').size().reset_index(name='count')\n``` \n```"], "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": ["result = df[df['key2'].str.endswith(\"e\")].groupby('key1').size().reset_index(name='count')\nresult = result.reindex(columns=['key1', 'count']).fillna(0)\n"], "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": ["max_result = df.index.max()\nmin_result = df.index.min()\n"], "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": ["mode_result = df.index.mode()[0]\nmedian_result = df.index.median()\n"], "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": ["```python\nresult = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": ["```python\nresult = df[~((df['closing_price'] >= 99) & (df['closing_price'] <= 101))]\n```"], "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": ["```python\nresult = df.loc[df.groupby('item')['diff'].idxmin()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": ["```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[0])\n```  \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": ["```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[-1] if '_' in x else x)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": ["```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.rsplit('_', n=1).str[0]\n```\n### END SOLUTION\nreturn df"], "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": ["df['Column_x'] = df['Column_x'].fillna(0)\nn = df['Column_x'].isnull().sum()\ndf.loc[df['Column_x'].isnull().index[:n//2], 'Column_x'] = 0\ndf.loc[df['Column_x'].isnull().index[n//2:], 'Column_x'] = 1\n"], "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": ["df['Column_x'] = df['Column_x'].fillna(0)\nnum_nan = df['Column_x'].isnull().sum()\nnum_fill_0 = int(num_nan * 0.3)\nnum_fill_05 = int(num_nan * 0.3)\nnum_fill_1 = num_nan - num_fill_0 - num_fill_05\n\ndf.loc[df['Column_x'].isnull()[:num_fill_0], 'Column_x'] = 0\ndf.loc[df['Column_x'].isnull()[num_fill_0:num_fill_0+num_fill_05], 'Column_x'] = 0.5\ndf.loc[df['Column_x'].isnull()[num_fill_0+num_fill_05:], 'Column_x'] = 1\n"], "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": ["```python\n# Count the number of NaN values\nnan_count = df['Column_x'].isna().sum()\n\n# Calculate the number of '0's and '1's to fill\nnum_zeros = nan_count // 2\nnum_ones = nan_count - num_zeros\n\n# Fill NaN values with '0' first\ndf['Column_x'].fillna(0, inplace=True)\n\n# Find the remaining NaN values and fill with '1'\nremaining_nans = df['Column_x'].isna()\ndf.loc[remaining_nans, 'Column_x'] = 1\n\n# Ensure we fill only the required number of '1's\nnum_remaining_ones = num_ones - sum(remaining_nans)\ndf.loc[remaining_nans[:num_remaining_ones], 'Column_x'] = 1\n</code>\n```"], "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": ["```python\nresult = pd.DataFrame(list(zip(*[tuple(zip(a_col, b_col)) for a_col, b_col in zip(a.values, b.values)])), columns=a.columns)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": ["```python\nresult = pd.DataFrame([list(zip(*x)) for x in zip(a.values, b.values, c.values)], columns=a.columns)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": ["import pandas as pd\nimport numpy as np\n\na = pd.DataFrame(np.array([[1, 2],[3, 4]]), columns=['one', 'two'])\nb = pd.DataFrame(np.array([[5, 6],[7, 8],[9, 10]]), columns=['one', 'two'])\n\n# Get the maximum length of the dataframes\nmax_length = max(len(a), len(b))\n\n# Create an empty dataframe with the same columns as a and b\na_b = pd.DataFrame(columns=a.columns)\n\n# Iterate over the range of max_length\nfor i in range(max_length):\n    # Get the tuples from a and b, filling with np.nan if necessary\n    tuple_a = tuple(a.iloc[i]) if i < len(a) else (np.nan, np.nan)\n    tuple_b = tuple(b.iloc[i]) if i < len(b) else (np.nan, np.nan)\n    \n    # Append the tuples to the a_b dataframe\n    a_b = a_b.append(pd.Series([tuple_a, tuple_b], index=a.columns), ignore_index=True)\n\nresult = a_b\n"], "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": ["```python\ngroups = df.groupby(['username', pd.cut(df['views'], bins)])\nresult = groups.size().unstack(fill_value=0)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": ["```python\nresult = df.pivot_table(index='username', columns=pd.cut(df.views, bins, labels=['(1, 10]', '(10, 25]', '(25, 50]', '(50, 100]']), aggfunc='size', fill_value=0)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": ["```python\nresult = df.groupby(['username', pd.cut(df['views'], bins)]).size().unstack(fill_value=0)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": ["```python\nresult = pd.DataFrame({'text': [', '.join(df['text'])]})\n```\n```plaintext\nEND SOLUTION\n```"], "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": ["result = df['text'].str.cat(sep='-')\n"], "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": ["```python\nresult = df['text'].str.cat(sep=', ')[::-1].replace(',', ', ', df['text'].str.count(',').max() - 1)[::-1]\n```\n```python\nresult = pd.DataFrame({'text': [result]})\n```"], "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": ["```python\nresult = df['text'].str.cat(sep=', ')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": ["result = df['text'].str.cat(sep='-')\n"], "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": ["result = pd.concat([df1, df2], axis=0)\nresult = result.fillna(method='ffill')\n"], "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": ["```python\n# Concatenate dfs\nresult = pd.concat([df1, df2], axis=0)\n\n# Convert date to datetime format\nresult['date'] = pd.to_datetime(result['date'])\n\n# Sort by id and date\nresult = result.sort_values(by=['id', 'date'])\n\n# Fill missing values in city and district based on id from previous rows\nresult[['city', 'district']] = result[['city', 'district']].fillna(method='ffill')\n\n# Convert date to desired format\nresult['date'] = result['date'].dt.strftime('%d-%b-%Y')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": ["```python\nresult = pd.concat([df1, df2], axis=0).sort_values(by=['id', 'date']).reset_index(drop=True)\n```"], "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": ["```python\nresult = pd.concat([C.set_index('A'), D.set_index('A')], axis=1).fillna(method='ffill', axis=1).iloc[:, -1].reset_index()\n``` "], "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": ["```python\nresult = pd.merge(C, D, how='outer', on='A').fillna({'B_x': C['B']}).drop(columns=['B_y']).rename(columns={'B_x': 'B'})\n```  \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": ["```python\nC['dulplicated'] = C['A'].isin(D['A'])\nresult = pd.merge(C, D, how='left', on='A', suffixes=('_C', '_D')).fillna({'B_D': C['B'], 'dulplicated': False})\nresult = result[['A', 'B_D', 'dulplicated']].rename(columns={'B_D': 'B'})\n```\n"], "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": ["result = df.groupby('user').apply(lambda x: x[['time', 'amount']].values.tolist()).rename('transactions')\n"], "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": ["```python\nresult = df.groupby('user').apply(lambda x: x[['time', 'amount']].to_records(index=False).tolist())\n```"], "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": ["```python\nresult = df.groupby('user').apply(lambda x: x[['amount', 'time']].apply(tuple, axis=1).tolist())\n``` "], "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": ["<code>\ndf = pd.DataFrame(series.tolist(), index=series.index)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": ["```python\ndf = pd.DataFrame(series.tolist(), index=series.index, columns=[0, 1, 2, 3]).reset_index()\ndf.columns = ['name', 0, 1, 2, 3]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": ["```python\nimport pandas as pd\n\ndata = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]}\ndf = pd.DataFrame(data)\ns = 'spike'\n\nresult = [col for col in df.columns if s in col and col != s]\n\n```"], "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": ["```python\nimport pandas as pd\n\ndata = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]}\ndf = pd.DataFrame(data)\ns = 'spike'\n\n# Find columns containing 'spike' but not exactly matching\nresult = [col for col in df.columns if s in col and col.replace(s, '', 1).strip('-') == '']\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": ["```python\nresult = [col for col in df.columns if s in col][0]\ndf.rename(columns={result: s + str(i+1) for i, col in enumerate(df.columns) if s in col}, inplace=True)\n```"], "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": ["```python\ndf_expanded = df['codes'].apply(pd.Series)\ndf_expanded.columns = [f\"code_{i}\" for i in range(df_expanded.shape[1])]\nresult = pd.concat([df.drop('codes', axis=1), df_expanded], axis=1)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": ["```python\ndf_expanded = df['codes'].apply(pd.Series)\ndf_expanded.columns = [f'code_{i+1}' for i in range(len(df_expanded.columns))]\nresult = pd.concat([df, df_expanded], axis=1).drop(columns=['codes'])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": ["```python\ndf['codes'] = df['codes'].apply(lambda x: x + [float('nan')] * (3 - len(x)))\ndf[['code_1', 'code_2', 'code_3']] = pd.DataFrame(df['codes'].tolist(), index=df.index)\ndf.drop(columns=['codes'], inplace=True)\nresult = df\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": ["import pandas as pd\n\ndf = pd.DataFrame(dict(col1=[[1, 2, 3]] * 2))\n\nresult = []\nfor lst in df['col1']:\n    result.extend(lst)\n"], "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": ["result = ','.join([','.join(map(str, lst[::-1])) for lst in df['col1']])\n"], "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": ["<code>\nresult = ','.join(map(str, df['col1'].explode()))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": ["df['Time'] = df['Time'].dt.floor('2min')\ndf = df.groupby('Time').mean().reset_index()\n"], "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": ["df['Time'] = df['Time'].dt.floor('3min')\ndf = df.groupby('Time').sum().reset_index()\n"], "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": ["```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n``` "], "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'ID': ['01', '01', '01', '02', '02'],\n                   'TIME': ['2018-07-11 11:12:20', '2018-07-12 12:00:23', '2018-07-13 12:00:00', '2019-09-11 11:00:00', '2019-09-12 12:00:00']})\n\ndf['TIME'] = pd.to_datetime(df['TIME'])  # Convert 'TIME' column to datetime type\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)  # Add 'RANK' column based on grouping by 'ID' and ranking 'TIME' values\n```\n```"], "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": ["```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\ndf['TIME'] = df['TIME'].dt.strftime('%d-%b-%Y %a %H:%M:%S')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": ["```python\nresult = df[filt[df.index.get_level_values('a')].values]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": ["result = df[filt[df.index.get_level_values('a')]]\n"], "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": ["import pandas as pd\nimport numpy as np\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n\nresult = df.loc[[0, 8]].isnull().any()"], "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": ["```python\nresult = df.columns[(df.iloc[0].equals(df.iloc[8])) & df.iloc[0].isna()]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": ["```python\nresult = df.columns[(df.iloc[0] != df.iloc[8]) | df.iloc[0].isnull() & df.iloc[8].notnull() | df.iloc[0].notnull() & df.iloc[8].isnull()].tolist()\n```"], "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": ["```python\nresult = [(df.iloc[0, col], df.iloc[8, col]) for col in range(len(df.columns)) if df.iloc[0, col] != df.iloc[8, col]]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": ["ts = pd.Series(df['Value'].values, index=df['Date'])\n"], "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]],columns=['A','B','C','D','E'])\n\ndf = pd.DataFrame(df.values.ravel(), index=(df.columns + '_' + (df.index + 1).astype(str)).repeat(df.shape[1]), columns=['Result']).T\n```\n```"], "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": ["df = pd.DataFrame(df.values.flatten(), columns=[f\"{col}_{i}\" for i in range(len(df.columns))])"], "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": ["```python\ndf['dogs'] = df['dogs'].round(2)\n```  \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": ["```python\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\ndf['cats'] = df['cats'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": ["df['Sum'] = df[list_of_my_columns].sum(axis=1)\n"], "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": ["```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": ["```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": ["df_sorted = df.sort_index(level='time')\n"], "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": ["```python\nresult = df.sort_values(by=['VIM'], kind='mergesort')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": ["```python\ndates_to_delete = ['2020-02-17', '2020-02-18']\nfor date in dates_to_delete:\n    df = df[~df.index.strftime('%Y-%m-%d').isin([date])]\nresult = df\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": ["```python\n# Deleting particular days from the dataframe\ndates_to_delete = ['2020-02-17', '2020-02-18']\ndf = df[~df.index.date.isin(pd.to_datetime(dates_to_delete).date)]\n\n# Formatting dates to desired format\ndf['Day_of_Week'] = df.index.strftime('%d-%b-%Y %A')\n\nresult = df\n```\n```"], "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": ["result = corr[corr > 0.3].stack().reset_index()\nresult.columns = ['Col1', 'Col2', 'Pearson Correlation Coefficient']\nresult = result[['Col1', 'Col2', 'Pearson Correlation Coefficient']]\n"], "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": ["```python\nresult = corr[(corr > 0.3) & (corr < 1.0)].stack().reset_index()\nresult.columns = ['Index1', 'Index2', 'Value']\nresult = result[result['Value'].notnull()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": ["```python\nlast_column_name = df.columns[-1]\ndf.rename(columns={last_column_name: 'Test'}, inplace=True)\n```\n```python\nEND SOLUTION\nresult = df\n```"], "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": ["```python\ndf.rename(columns={df.columns[0]: 'Test'}, inplace=True)\n```"], "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": ["```python\n# Define a function to find the most frequent value in a row\ndef find_most_frequent(row):\n    return row.value_counts().idxmax()\n\n# Apply the function to each row and create 'frequent' column\ndf['frequent'] = df.apply(find_most_frequent, axis=1)\n\n# Count the frequency of the most frequent value in each row and create 'freq_count' column\ndf['freq_count'] = df.apply(lambda row: row.value_counts().max(), axis=1)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": ["df['frequent'] = df.mode(axis=1).iloc[:, 0]\ndf['freq_count'] = df.apply(lambda row: row.value_counts().max(), axis=1)\n"], "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'bit1': [0, 2, 4],\n                   'bit2': [0, 2, 0],\n                   'bit3': [3, 0, 4],\n                   'bit4': [3, 0, 4],\n                   'bit5': [0, 2, 4],\n                   'bit6': [3, 0, 5]})\n```\n```python\n# Calculating frequent values and their counts\nfrequent_values = df.apply(lambda x: x.value_counts().index.tolist(), axis=1)\nfreq_count = df.apply(lambda x: x.value_counts().max(), axis=1)\n\n# Assigning results to DataFrame\ndf['frequent'] = frequent_values\ndf['freq_count'] = freq_count\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": ["```python\nresult = df.replace('NULL', pd.NA).astype({'bar': 'float'}).groupby([\"id1\", \"id2\"]).mean()\n``` \n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"foo\":[8,5,3,4,7,9,5,7], \n                   \"id1\":[1,1,1,1,1,1,1,1], \n                   \"bar\":['NULL','NULL','NULL',1,3,4,2,3], \n                   \"id2\":[1,1,1,2,2,3,3,1]})\n\n# Replace 'NULL' with 0\ndf['bar'] = df['bar'].replace('NULL', 0)\n\n# Group by id1 and id2 and calculate mean for both 'foo' and 'bar'\nresult = df.groupby([\"id1\",\"id2\"]).agg({'foo': 'mean', 'bar': 'mean'})\n```\n```python\n# If you want to fill missing values with 0 instead of replacing 'NULL'\nresult = result.fillna(0)\n```\n```python\n# If you want to round the result to two decimal places\nresult = result.round(2)\n```\n```python\n# If you want to rename the columns\nresult.columns = ['foo', 'bar']\n```\n```python\n# If you want to reset index\nresult.reset_index(inplace=True)\n```\n```python\n# If you want to set index with id1 and id2\nresult.set_index(['id1', 'id2'], inplace=True)\n```\n```python\n# If you want to reset index and set index with id1 and id2 in one line\nresult = result.set_index(['id1', 'id2'], inplace=False)\n```\n```python\n# If you want the solution in a single line\nresult = df.replace('NULL', 0).groupby([\"id1\",\"id2\"]).mean()\n```"], "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": ["```python\nresult = pd.merge(df_a, df_b[['EntityNum', 'a_col']], on='EntityNum')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": ["```python\nresult = pd.merge(df_a[['EntityNum', 'foo']], df_b[['EntityNum', 'b_col']], on='EntityNum')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": ["```python\nresult = a.shape\n```\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": ["<code>\nx = x[~np.isnan(x)]\n</code>\n</code>"], "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": ["```python\nx = np.where(np.isnan(x), np.inf, x)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": ["```python\nimport numpy as np\n\nx = np.array([[1400, 1500, 1600, np.nan], [1800, np.nan, np.nan, 1700]])\n\nresult = [list(filter(lambda a: not np.isnan(a), sublist)) for sublist in x]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": ["```python\n# Define the maximum value in array a\nmax_val = np.max(a)\n\n# Initialize b with zeros\nb = np.zeros((a.size, max_val+1))\n\n# Fill b with one-hot encoding\nb[np.arange(a.size), a] = 1\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": ["```python\nimport numpy as np\n\na = np.array([1, 0, 3])\n\n# Get the maximum value in 'a' and add 1 for creating the one-hot array\nmax_val = np.max(a) + 1\n\n# Create an identity matrix with size (max_val, max_val)\nb = np.eye(max_val)[a]\n\n# Remove the first column since it corresponds to 0\nb = b[:, 1:]\n\n# Transpose 'b' to match the desired output\nb = b.T\n\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": ["import numpy as np\n\na = np.array([-1, 0, 3])\n\n# Find the minimum and maximum values in a\nmin_val = np.min(a)\nmax_val = np.max(a)\n\n# Calculate the number of unique values in a\nnum_unique = max_val - min_val + 1\n\n# Create an empty 2D array with the appropriate shape\nb = np.zeros((a.shape[0], num_unique), dtype=int)\n\n# Calculate the indices to set to 1\nindices = a - min_val\n\n# Set the corresponding indices to 1\nb[np.arange(a.shape[0]), indices] = 1\n\n# Print the result\nprint(b)\n"], "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": ["```python\na = np.array([1.5, -0.4, 1.3])\nmin_val = np.min(a)\nmax_val = np.max(a)\nnum_elements = len(a)\nb = np.zeros((num_elements, num_elements), dtype=int)\nindices = ((a - min_val) / (max_val - min_val) * (num_elements - 1)).astype(int)\nb[np.arange(num_elements), indices] = 1\n```\n```python\nEND SOLUTION\n```\n```python\nprint(b)\n```"], "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": ["<code>\nb = np.eye(a.max() + 1, dtype=int)[a.flatten()].reshape(a.shape + (-1,))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": ["```python\nresult = np.percentile(a, p)\n``` \nEND SOLUTION\n</code>"], "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": ["B = np.reshape(A, (-1, ncol))\n"], "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": ["B = np.reshape(A, (nrow, -1))\n"], "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": ["B = np.reshape(A, (-1, ncol))\n"], "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": ["B = np.reshape(A[-len(A)%ncol:], (-1, ncol))\n"], "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": ["```python\nresult = np.concatenate((np.full(abs(shift), np.nan), a[:-abs(shift) if shift < 0 else None]))\n```\n```python\n# END SOLUTION\n</code>\n```"], "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": ["```python\nresult = np.roll(xs, shift, axis=1)\n``` \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": ["```python\nresult = np.array([np.roll(row, s) for row, s in zip(a, shift)])\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": ["```python\nimport numpy as np\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n```\n"], "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": ["```python\nresult = np.argmax(a)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": ["result = np.unravel_index(np.argmin(a), a.shape)\n"], "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": ["```python\nindices = np.argmax(a)\nresult = np.unravel_index(indices, a.shape, order='F')\n```\n```plaintext\nEND SOLUTION\n```"], "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": ["```python\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\nresult = np.unravel_index(np.argmax(a), a.shape)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": ["```python\n    indices = np.unravel_index(np.argmax(a), a.shape)\n    flattened_index = np.ravel_multi_index(indices, a.shape, order='C')\n    return flattened_index\n### END SOLUTION\n```"], "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": ["import numpy as np\na = np.array([[10,50,30],[60,20,40]])\n\n# Find the second largest value in the array\nsecond_largest = np.partition(a.flatten(), -2)[-2]\n\n# Get the indices of the second largest value\nindices = np.where(a == second_largest)\n\n# Convert the indices to C order\nindices_c_order = np.ravel_multi_index(indices, a.shape, order='C')\n\nresult = indices_c_order"], "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": ["```python\na = np.delete(a, np.where(np.any(np.isnan(a), axis=0)), axis=1)\n```\n```"], "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": ["import numpy as np\na = np.array([[np.nan, 2., 3., np.nan],\n              [1., 2., 3., 9]])\n\na = a[~np.isnan(a).any(axis=1)]\n"], "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": ["result = np.array(a)\n"], "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": ["```python\na = a[:, permutation]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": ["```python\nresult = np.take(a, permutation, axis=0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": ["```python\nmin_index = np.unravel_index(np.argmin(a), a.shape)\nresult = min_index\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": ["result = np.unravel_index(np.argmax(a), a.shape)\n"], "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": ["```python\nresult = np.unravel_index(np.argsort(a, axis=None), a.shape)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": ["```python\nresult = np.sin(np.radians(degree))\n```\n```"], "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": ["```python\nresult = np.cos(np.deg2rad(degree))\n```\n```"], "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": ["```python\nimport numpy as np\nnumber = np.random.randint(0, 360)\nsine_degree = np.sin(np.deg2rad(number))\nsine_radian = np.sin(number)\nresult = 0 if sine_degree > sine_radian else 1\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": ["result = np.arcsin(value) * 180 / np.pi"], "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": ["```python\nresult = np.pad(A, (0, length - len(A)), mode='constant', constant_values=0)\n```"], "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": ["```python\nresult = np.pad(A, (0, max(0, length - len(A))), mode='constant')\n```"], "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": ["```python\na = np.power(a, power)\n```\n```"], "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": ["<code>\n    result = np.power(a, power)\n    ### END SOLUTION\n    return result\nprint(f())\n</code>"], "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": ["```python\nfrom fractions import Fraction\n\nnumerator = 98\ndenominator = 42\n\nresult = Fraction(numerator, denominator)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": ["```python\nimport numpy as np\n\ndef f(numerator=98, denominator=42):\n    gcd = np.gcd(numerator, denominator)\n    reduced_numerator = numerator // gcd\n    reduced_denominator = denominator // gcd\n    return (reduced_numerator, reduced_denominator)\n\n### END SOLUTION\n```"], "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": ["```python\nfrom fractions import Fraction\n\nnumerator = 98\ndenominator = 42\n\nif denominator == 0:\n    result = (float('NaN'), float('NaN'))\nelse:\n    reduced_fraction = Fraction(numerator, denominator)\n    result = (reduced_fraction.numerator, reduced_fraction.denominator)\n```\n"], "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": ["result = (a + b + c) / 3\n"], "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": ["```python\nresult = np.maximum(np.maximum(a, b), c)\n```  \n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": ["result = np.diag(np.fliplr(a))\n"], "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": ["```python\n# Calculate the diagonal indices starting from the top right\ndiagonal_indices = np.diag_indices(a.shape[0])[::-1]\n\n# Extract diagonal elements using calculated indices\nresult = a[diagonal_indices]\n```\n```"], "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": ["```python\nresult = np.diag(np.fliplr(a))\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": ["```python\nresult = np.diag(np.fliplr(a), k=0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": ["```python\nresult = list(X.flatten())\n```\n```plaintext\n```\n```python\nEND SOLUTION\n```\n```plaintext\n```"], "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": ["<code>\nimport numpy as np\nX = np.random.randint(2, 10, (5, 6))\nresult = X.flatten(order='C').tolist()\n</code>\n</code>"], "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": ["<code>\nimport numpy as np\n\nexample_X = np.random.randint(2, 10, (5, 6))\n\ndef f(X = example_X):\n    result = []\n    for row in X:\n        for element in row:\n            result.append(element)\n    return result"], "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": ["```python\nresult = list(X.flatten(order='F'))\n```  \n</code>"], "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": ["result = np.array([int(digit) for digit in mystr])\n"], "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": ["result = np.cumsum(a[:, col] * multiply_number)\n"], "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": ["result = np.cumsum(a[row] * multiply_number)\n"], "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": ["```python\nrow_array = a[row] / divide_number\nresult = np.prod(row_array)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": ["```python\nimport numpy as np\n\na = np.array([[0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]])\n\n# Perform QR decomposition to get the orthogonal basis\nq, r = np.linalg.qr(a.T)\n\n# Extract linearly independent vectors\nresult = q.T[:np.linalg.matrix_rank(a)]\n\nprint(result)\n```\n```python\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": ["```python\nresult = a.shape[1]\n```\n```"], "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": ["```python\nfrom scipy.stats import ttest_ind\nimport numpy as np\n\na = np.random.randn(40)\nb = 4 * np.random.randn(50)\n\n_, p_value = ttest_ind(a, b, equal_var=False)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": ["```python\nimport numpy as np\nimport scipy.stats\n\na = np.random.randn(40)\nb = 4 * np.random.randn(50)\n\na_clean = a[~np.isnan(a)]\nb_clean = b[~np.isnan(b)]\n\n_, p_value = scipy.stats.ttest_ind(a_clean, b_clean, equal_var=False)\n```\n```python\nEND SOLUTION\n```\n```python\np_value\n```"], "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": ["p_value = scipy.stats.ttest_ind_from_stats(amean, np.sqrt(avar), anobs, bmean, np.sqrt(bvar), bnobs, equal_var=False).pvalue"], "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": ["```python\noutput = [x for x in A if not any(np.array_equal(x, y) for y in B)]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": ["output = np.concatenate((np.setdiff1d(A, B), np.setdiff1d(B, A)))"], "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": ["```python\nsort_indices = np.argsort(a, axis=0)\nc = b[sort_indices, np.arange(b.shape[1])[:, None], np.arange(b.shape[2])]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(c)\nprint(\"Desired shape of b[sort_indices]: (3, 3, 3).\")\nprint(\"Actual shape of b[sort_indices]:\", c.shape)\n```"], "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": ["```python\nsort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(\"Desired shape of b[sort_indices]: (3, 3, 3).\")\nprint(\"Actual shape of b[sort_indices]:\", c.shape)\n```\n"], "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": ["```python\nsort_indices = np.argsort(a, axis=0)[::-1]\nc = b[sort_indices]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(\"Desired shape of b[sort_indices]: (3, 3, 3).\")\nprint(\"Actual shape of b[sort_indices]:\")\nprint(c.shape)\n```"], "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": ["import numpy as np\n\na = np.random.rand(3, 3, 3)\nb = np.arange(3*3*3).reshape((3, 3, 3))\n\nsum_a = np.sum(a, axis=(1, 2))\nsorted_indices = np.argsort(sum_a)\n\nresult = b[sorted_indices]\n\nprint(result)"], "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": ["import numpy as np\na = np.delete(arr, 2, axis=1)\n"], "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": ["```python\na = np.delete(a, 2, axis=0)\n```\n```"], "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": ["```python\na = np.delete(arr, [0, 2], axis=1)\n```\n```"], "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": ["```python\nresult = np.delete(a, del_col[del_col < a.shape[1]], axis=1)\n```\n```"], "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": ["```python\na = np.insert(a, pos, element)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": ["```python\na = np.insert(a, pos, element, axis=0)\n```\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": ["```python\n    a = np.insert(a, pos, element)\n    ### END SOLUTION\n    return a\nresult = f()\nprint(result)\n```"], "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": ["```python\nfor i, p in enumerate(pos):\n    a = np.insert(a, p + i, element[i], axis=0)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(a)\n```"], "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": ["```python\nresult = np.array([np.copy(arr) for arr in array_of_arrays])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": ["```python\nresult = np.all(np.all(a == a[0], axis=1))\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": ["```python\nresult = np.all(a[:, 1:] == a[:, :-1], axis=0)\n``` \n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": ["```python\nresult = np.all(np.all(a == a[0], axis=1))\n### END SOLUTION\nreturn result\n```"], "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": ["```python\nfrom scipy.integrate import simps\nimport numpy as np\n\nx = np.linspace(0, 1, 20)\ny = np.linspace(0, 1, 30)\ndx = x[1] - x[0]\ndy = y[1] - y[0]\n\n# Define the function to integrate\ndef f(x, y):\n    return np.cos(x)**4 + np.sin(y)**2\n\n# 2D Simpson's rule\nintegral = simps(simps(f(x[:, np.newaxis], y), dx=dy), dx=dx)\n\nresult = integral\n```\n```"], "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": ["<code>\nimport numpy as np\nfrom scipy.integrate import simps\n\nexample_x = np.linspace(0, 1, 20)\nexample_y = np.linspace(0, 1, 30)\n\ndef f(x, y):\n    return np.cos(x)**4 + np.sin(y)**2\n\ndef integrate_2d(func, x, y):\n    integral_x = simps(func, x)\n    integral_xy = simps(integral_x, y)\n    return integral_xy\n\nresult = integrate_2d(f(example_x[:, None], example_y), example_x, example_y)\nprint(result)\n</code>"], "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": ["```python\ndef ecdf(x):\n    x = x / np.sum(x)\n    return np.cumsum(np.sort(x))\n\nresult = ecdf(grades)(grades)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": ["```python\nimport numpy as np\n\ngrades = np.array((93.5, 93, 60.8, 94.5, 82, 87.5, 91.5, 99.5, 86, 93.5, 92.5, 78, 76, 69, 94.5,\n                   89.5, 92.8, 78, 65.5, 98, 98.5, 92.3, 95.5, 76, 91, 95, 61))\neval = np.array([88, 87, 62])\n\ndef ecdf(x):\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\nresult = ecdf(grades)(eval)\n```"], "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": ["<code>\nimport numpy as np\n\ndef ecdf(x):\n    # normalize X to sum to 1\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\ngrades = np.array((93.5, 93, 60.8, 94.5, 82, 87.5, 91.5, 99.5, 86, 93.5, 92.5, 78, 76, 69, 94.5,\n                   89.5, 92.8, 78, 65.5, 98, 98.5, 92.3, 95.5, 76, 91, 95, 61))\nthreshold = 0.5\n\n# Compute the ECDF\necdf_values = ecdf(grades)\n\n# Find the longest interval [low, high) where ECDF(x) < threshold\nlow = None\nhigh = None\nfor i in range(len(ecdf_values)):\n    if ecdf_values[i] < threshold:\n        low = grades[i]\n        break\n\nfor i in range(len(ecdf_values) - 1, -1, -1):\n    if ecdf_values[i] < threshold:\n        high = grades[i + 1]\n        break\n\nprint(\"Longest interval satisfying ECDF(x) < threshold:\", low, high)\n</code>\n</code>"], "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": ["nums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n"], "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": ["```python\na_np = a.numpy()\n```\n```"], "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": ["```python\na_pt = torch.from_numpy(a)\n```\n</code>"], "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": ["```python\na_np = a.numpy()\n``` \n</code>"], "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": ["a_tf = tf.convert_to_tensor(a)\n"], "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": ["result = np.argsort(a)[::-1]\n"], "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": ["```python\nresult = np.argsort(a)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": ["import numpy as np\na = np.array([4, 1, 0, 8, 5, 2])\nN = 3\n\n# Get the indices of the N largest elements in decreasing order\nresult = np.argsort(a)[-N:][::-1]\n\nprint(result)"], "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": ["result = np.power(A, n)\n"], "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": ["```python\nresult = np.array([a[i:i+2, j:j+2] for i in range(0, a.shape[0], 2) for j in range(0, a.shape[1], 2)])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": ["```python\nresult = [a[i:i+2, j:j+2] for i in range(a.shape[0]-1) for j in range(a.shape[1]-1)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": ["```python\nresult = np.array([a[i:i+2, j:j+2] for i in range(0, a.shape[0], 2) for j in range(0, a.shape[1], 2)])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": ["import numpy as np\n\na = np.array([[1,5,9,13,17],\n              [2,6,10,14,18],\n              [3,7,11,15,19],\n              [4,8,12,16,20]])\n\npatch_size = 2\n\nresult = np.array([a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0], patch_size) for j in range(0, a.shape[1], patch_size)])\n\nresult"], "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": ["```python\nresult = np.concatenate([np.concatenate(row, axis=1) for row in a], axis=0)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": ["```python\nimport numpy as np\n\na = np.array([[1,5,9,13,17],\n              [2,6,10,14,18],\n              [3,7,11,15,19],\n              [4,8,12,16,20]])\npatch_size = 2\n\nresult = np.array([a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0], patch_size) for j in range(0, a.shape[1], patch_size)])\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": ["```python\nresult = a[:, low:high]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": ["result = a[low:high+1]\n"], "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": ["```python\nresult = a[:, max(0, low):min(high, a.shape[1])]\n``` \n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": ["```python\nimport numpy as np\n\nstring = \"[[ 0.5544  0.4456], [ 0.8811  0.1189]]\"\n\n# Remove unnecessary characters and split the string into rows\ncleaned_string = string.replace('[', '').replace(']', '').replace(',', '').split()\n\n# Convert string elements to float and reshape into desired array shape\na = np.array(cleaned_string, dtype=float).reshape(2, 2)\n\n# Alternatively, using eval to directly evaluate the string\n# a = np.array(eval(string))\n\na\n```\n"], "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": ["```python\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n```  \n</code>"], "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": ["<code>\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": ["<code>\nimport numpy as np\n\ndef f(min=1, max=np.e, n=10000):\n    # Generate n random numbers between min and max\n    uniform_samples = np.random.uniform(low=min, high=max, size=n)\n    \n    # Transform the uniform samples to log-uniform distribution\n    log_uniform_samples = np.exp(uniform_samples)\n    \n    return log_uniform_samples"], "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": ["```python\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": ["```python\nimport numpy as np\nimport pandas as pd\n\n# Define input parameters\nA = pd.Series(np.random.randn(10,))\na = 2\nb = 3\nc = 4\n\n# Initialize B series\nB = pd.Series(index=A.index)\n\n# Perform recursive computation\nB[0] = a * A[0]\nB[1] = a * A[1] + b * B[0]\nfor t in range(2, len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n\nB\n```\n```"], "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": ["```python\nresult = np.array([], dtype=float).reshape((0,))\n```\n```"], "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": ["<code>\nimport numpy as np\n\nresult = np.empty((3, 0))\n</code>\n</code>"], "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": ["result = np.ravel_multi_index(index, dims, order='F') - 1"], "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": ["```python\nresult = np.ravel_multi_index(index, dims, order='C')\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": ["```python\nvalues = np.zeros((2,3), dtype=[('a', 'i4'), ('b', 'f4'), ('c', 'f4')])\ndf = pd.DataFrame(data=values, index=index, columns=columns)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": ["```python\nresult = np.bincount(accmap, weights=a)\n```\n```python\nEND SOLUTION\n```\n```python\n# Testing\nprint(result)\n# Output: array([13., 25., 17.])\n```"], "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": ["```python\nresult = [np.max(a[index == i]) for i in range(np.max(index) + 1)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": ["```python\nimport numpy as np\n\na = np.arange(1, 11)\naccmap = np.array([0, 1, 0, 0, 0, -1, -1, 2, 2, 1])\n\n_, idx = np.unique(accmap, return_inverse=True)\nresult = np.bincount(idx, weights=a)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": ["```python\nresult = [min(a[index == i]) for i in range(min(index), max(index)+1)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": ["```python\nz = np.vectorize(elementwise_function)(x, y)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": ["import numpy as np\n\nprobabilit = [0.333, 0.334, 0.333]\nlista_elegir = [(3, 3), (3, 4), (3, 5)]\nsamples = 1000\n\nresult = np.random.choice(range(len(lista_elegir)), samples, p=probabilit)\nresult = [lista_elegir[i] for i in result]\n"], "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": ["```python\nresult = a[max(0, low_index):min(a.shape[0], high_index), max(0, low_index):min(a.shape[1], high_index)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": ["result = x[x >= 0]\n"], "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": ["```python\nresult = x[np.iscomplex(x)]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": ["```python\nimport numpy as np\n\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n\n# Reshape the data array into bins of desired size\nnum_bins = len(data) // bin_size\ndata_reshaped = data[:num_bins*bin_size].reshape(num_bins, bin_size)\n\n# Calculate the mean along the specified axis (axis=1)\nbin_data_mean = np.mean(data_reshaped, axis=1)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": ["import numpy as np\n\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n\n# Reshape the data array into bins of size bin_size\nbin_data = data.reshape(-1, bin_size)\n\n# Calculate the maximum value of each bin\nbin_data_max = np.max(bin_data, axis=1)\n\nbin_data_max"], "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": ["```python\nimport numpy as np\n\ndata = np.array([[4, 2, 5, 6, 7],\n                 [5, 4, 3, 5, 7]])\nbin_size = 3\n\n# Reshape the data array into bins\nreshaped_data = data.reshape((data.shape[0], -1, bin_size))\n\n# Calculate the mean of each bin along the specified axis\nbin_data_mean = np.mean(reshaped_data, axis=2)\n```\n```python\n# END SOLUTION\n```\n```python\nprint(bin_data_mean)\n```\n"], "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": ["```python\nimport numpy as np\n\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n\n# Calculate the number of bins\nnum_bins = len(data) // bin_size\n\n# Trim data to fit evenly into bins\ndata_trimmed = data[:num_bins * bin_size]\n\n# Reshape data into bins\nbin_data = np.reshape(data_trimmed, (num_bins, bin_size))\n\n# Calculate mean of each bin\nbin_data_mean = np.mean(bin_data, axis=1)\n\nprint(bin_data_mean)\n```\n```"], "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": ["```python\nimport numpy as np\n\ndata = np.array([[4, 2, 5, 6, 7],\n                 [5, 4, 3, 5, 7]])\nbin_size = 3\n\n# Get the number of rows and columns in the data array\nnum_rows, num_cols = data.shape\n\n# Calculate how many bins we can create\nnum_bins = num_cols // bin_size\n\n# Truncate the data array to a length that's a multiple of bin_size\ntruncated_data = data[:, :(num_bins * bin_size)]\n\n# Reshape the truncated data into bins\nbins = truncated_data.reshape(num_rows, num_bins, bin_size)\n\n# Calculate the mean along the last axis (axis=-1) to get the mean of each bin\nbin_data_mean = np.mean(bins, axis=-1)\n```\n```"], "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": ["```python\nimport numpy as np\n\ndata = np.array([[4, 2, 5, 6, 7],\n                 [5, 4, 3, 5, 7]])\nbin_size = 3\n\n# Calculate the number of bins\nnum_bins = data.shape[1] // bin_size\n\n# Align data to the end\naligned_data = data[:, -num_bins * bin_size:]\n\n# Reshape data into bins\nbin_data = aligned_data.reshape(data.shape[0], num_bins, bin_size)\n\n# Calculate mean of each bin\nbin_data_mean = np.mean(bin_data, axis=2)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": ["```python\ndef smoothclamp(x, x_min, x_max):\n    t = max(0, min(1, (x - x_min) / (x_max - x_min)))\n    return x_min + t * (x_max - x_min) * (3 * t - 2 * t ** 2)\n```\n```"], "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": ["```python\ndef smoothclamp(x, x_min, x_max, N):\n    t = (x - x_min) / (x_max - x_min)\n    t = np.clip(t, 0, 1)\n    return x_min + (x_max - x_min) * np.polyval(np.polynomial.polynomial.Polynomial.fit([0, 0.5, 1], [0, 1, 0], deg=N), t)\n\n# Example usage:\nimport numpy as np\nx = 0.25\nx_min = 0\nx_max = 1\nN = 5\n\nprint(smoothclamp(x, x_min, x_max, N))\n```\n```"], "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": ["result = np.correlate(a, np.roll(b[::-1], 1), mode='valid')\n"], "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": ["```python\nresult = df.to_numpy().reshape(4, 15, 5).transpose(2, 1, 0)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": ["```python\nresult = df.values.reshape((15, 4, 5))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": ["```python\nresult = np.unpackbits(a[:, np.newaxis], axis=1)[:, -m:]\n``` \nEND SOLUTION\n</code>"], "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": ["```python\ndef convert_to_binary_arrays(nums, m):\n    binary_matrices = []\n    for num in nums:\n        binary_representation = format(num if num >= 0 else (1 << m) + num, '0{}b'.format(m))\n        binary_array = tuple(int(bit) for bit in binary_representation)\n        binary_matrices.append(binary_array)\n    return np.array(binary_matrices)\n\nresult = convert_to_binary_arrays(a, m)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": ["```python\ndef convert_to_binary_numpy_array(num, m):\n    binary_array = np.zeros(m, dtype=int)\n    binary_representation = format(num, 'b')\n    binary_array[-len(binary_representation):] = [int(digit) for digit in binary_representation]\n    return binary_array\n\nbinary_arrays = [convert_to_binary_numpy_array(num, m) for num in a]\nresult = np.bitwise_xor.reduce(binary_arrays)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": ["import numpy as np\n\na = np.array([0, 1, 2, 5, 6, 7, 8, 8, 8, 10, 29, 32, 45])\n\nmean = np.mean(a)\nstd = np.std(a)\n\nlower_bound = mean - 3 * std\nupper_bound = mean + 3 * std\n\nresult = (lower_bound, upper_bound)\n"], "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": ["```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 2 * std_dev, mean + 2 * std_dev)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": ["```python\n    mean = np.mean(a)\n    std_dev = np.std(a)\n    third_std_dev = 3 * std_dev\n    lower_bound = mean - third_std_dev\n    upper_bound = mean + third_std_dev\n    return (lower_bound, upper_bound)\n### END SOLUTION\n```"], "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": ["<code>\nmean = np.mean(a)\nstd_dev = np.std(a)\nupper_limit = mean + 2 * std_dev\nlower_limit = mean - 2 * std_dev\nresult = (a < lower_limit) | (a > upper_limit)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": ["```python\nmasked_data = np.ma.masked_less(DataArray, 0)\nprob = np.percentile(masked_data, percentile)\n``` \n```python\nEND SOLUTION\n</code>\n```\n"], "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": ["a[:, zero_cols] = 0\na[zero_rows, :] = 0\n"], "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": ["```python\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": ["a[1,:] = 0\na[:,0] = 0\n"], "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": ["```python\nimport numpy as np\na = np.array([[0, 1], [2, 1], [4, 8]])\n\n# Solution\nmask = (a == np.amax(a, axis=1)[:, np.newaxis])\n\n# END SOLUTION\n```\n"], "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": ["<code>\nimport numpy as np\na = np.array([[0, 1], [2, 1], [4, 8]])\n\nmask = (a == np.min(a, axis=1)[:, np.newaxis])\n</code>\n</code>"], "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": ["```python\nresult = np.corrcoef(post, distance)[0, 1]\n```  \n```python\nEND SOLUTION\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": ["result = np.einsum('ij,ik->jik', X, X)\n"], "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": ["```python\nX = np.sqrt(np.sum(Y, axis=2))\n```\n```"], "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": ["```python\nis_contained = number in a\n```\n```plaintext\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": ["C = np.setdiff1d(A, B)\n"], "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": ["```python\nC = A[np.isin(A, B)]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": ["C = A[np.logical_or(A > B[0], A < B[2])]\n"], "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": ["<code>\nresult = len(a) + 1 - rankdata(a).astype(int)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": ["result = len(a) - rankdata(a).astype(int)"], "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": ["import numpy as np\nfrom scipy.stats import rankdata\n\ndef reverse_rankdata(a):\n    ranks = rankdata(a)\n    max_rank = len(a) + 1\n    reverse_ranks = max_rank - ranks\n    return reverse_ranks.astype(int)\n\n# Example usage\na = [1,2,3,4,3,2,3,4]\nresult = reverse_rankdata(a)\nprint(result)"], "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": ["```python\ndists = np.dstack((x_dists, y_dists))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": ["dists = np.dstack((x_dists, y_dists))\n"], "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": ["result = a[:, second, :][:, :, third]\n"], "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": ["```python\narr = np.zeros((20, 10, 10, 2))\n```\n```"], "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": ["result = X / np.sum(np.abs(X), axis=1, keepdims=True)\n"], "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": ["result = X / np.linalg.norm(X, axis=1, keepdims=True)\n"], "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": ["```python\nresult = np.max(np.abs(X), axis=1)\nX_normalized = X / result[:, np.newaxis]\nprint(X_normalized)\n```\n```plaintext\n[[ 0.16666667 -0.33333333  0.5         1.        ]\n [ 0.57142857  0.71428571 -0.85714286  0.71428571]\n [-0.2         0.4         1.          1.        ]\n [ 0.16        0.2         0.4        -1.        ]\n [ 0.2        -0.08        0.4         1.        ]]\n```"], "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": ["```python\nresult = np.where(df['a'].astype(str).str.contains(target), choices[0], np.nan)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": ["```python\nfrom scipy.spatial.distance import cdist\n\na = np.array([[1,2,8],\n              [7,4,2],\n              [9,1,7],\n              [0,1,5],\n              [6,4,3]])\n\nresult = cdist(a, a)\n```\n```"], "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": ["```python\nimport numpy as np\n\n# Generate random input data\ndim = np.random.randint(4, 8)\na = np.random.rand(np.random.randint(5, 10), dim)\n\n# Function to calculate Euclidean distance between two points\ndef euclidean_distance(point1, point2):\n    return np.linalg.norm(point1 - point2)\n\n# Calculate distance matrix\nnum_points = a.shape[0]\nresult = np.zeros((num_points, num_points))\nfor i in range(num_points):\n    for j in range(num_points):\n        result[i, j] = euclidean_distance(a[i], a[j])\n\nresult\n```\n"], "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": ["import numpy as np\n\ndim = np.random.randint(4, 8)\na = np.random.rand(np.random.randint(5, 10), dim)\n\nresult = np.zeros((a.shape[0], a.shape[0]))\n\nfor i in range(a.shape[0]):\n    for j in range(i+1, a.shape[0]):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n\nprint(result)\n"], "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": ["```python\nA = [float(x) for x in A]\nAVG = np.mean(A)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(AVG)\n```"], "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": ["AVG = np.mean(NA.astype(float))\n"], "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": ["```python\nA = ['np.inf', '33.33', '33.33', '33.37']\nNA = np.array([eval(x) if isinstance(eval(x), float) else eval(x) for x in A])\nAVG = np.mean(NA, axis=0)\n```\n```python\nEND SOLUTION\nprint(AVG)\n```"], "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": ["```python\nimport numpy as np\na = np.array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3])\n\nnon_zero_indices = np.where(a != 0)[0]\nresult = [a[idx] for idx in range(len(non_zero_indices)) if idx == 0 or a[non_zero_indices[idx]] != a[non_zero_indices[idx - 1]]]\n\n```\n</code>"], "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": ["```python\nunique_values = np.unique(a)\nresult = unique_values[unique_values != 0].reshape(-1, 1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": ["```python\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\n```"], "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": ["import numpy as np\nimport pandas as pd\n\nexample_lat = np.array([[10, 20, 30],\n                        [20, 11, 33],\n                        [21, 20, 10]])\n\nexample_lon = np.array([[100, 102, 103],\n                        [105, 101, 102],\n                        [100, 102, 103]])\n\nexample_val = np.array([[17, 2, 11],\n                        [86, 84, 1],\n                        [9, 5, 10]])\n\ndef f(lat=example_lat, lon=example_lon, val=example_val):\n    # Create a dictionary with column names as keys and corresponding arrays as values\n    data = {'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()}\n    \n    # Create a pandas DataFrame from the dictionary\n    df = pd.DataFrame(data)\n    \n    return df\n\ndf = f()\nprint(df)"], "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": ["```python\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\ndf['maximum'] = df[['lat', 'lon', 'val']].max(axis=1)\n```\n"], "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": ["```python\n# Pad the array to handle edge effects\npadded_a = np.pad(a, ((1, 1), (1, 1)), mode='constant')\n\n# Initialize an empty list to store the results\nresult = []\n\n# Iterate over each cell in the original array\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        # Extract the subarray centered at (i, j)\n        subarray = padded_a[i:i+size[0], j:j+size[1]]\n        # Append the subarray to the result list\n        result.append(subarray)\n\n# Remove the padding from the result\nresult = [subarray[1:-1, 1:-1] for subarray in result]\n```\n```python\nEND SOLUTION\n```\n```python\n# Alternative solution using numpy.lib.stride_tricks.as_strided\nfrom numpy.lib.stride_tricks import as_strided\n\n# Compute strides for a sliding window view\nstrides = padded_a.strides + padded_a.strides\n\n# Generate a sliding window view of the padded array\nwindow_view = as_strided(padded_a, shape=(a.shape[0], a.shape[1], size[0], size[1]), strides=strides)\n\n# Reshape the view to get individual subarrays\nresult = window_view.reshape((-1, size[0], size[1]))[:, 1:-1, 1:-1]\n```"], "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": ["import numpy as np\n\na = np.array([[1,2,3,4],\n              [2,3,4,5],\n              [3,4,5,6],\n              [4,5,6,7]])\n\nsize = (3, 3)\n\nresult = []\n\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        window = a[max(0, i-size[0]//2):min(a.shape[0], i+size[0]//2+1),\n                   max(0, j-size[1]//2):min(a.shape[1], j+size[1]//2+1)]\n        result.append(window)\n\nresult"], "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": ["result = np.nanmean(a)\n"], "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": ["<code>\nimport numpy as np\n\ndef f(a=np.array([1 + 0j, 2 + 3j, np.inf + 0j])):\n    # return the solution in this function\n    result = np.nanmean(a)\n    return result\n### END SOLUTION\nprint(f())  # Example usage\n</code>"], "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": ["```python\nimport numpy as np\nZ = np.random.rand(*np.random.randint(2, 10, (np.random.randint(2, 10))))\n```\n```python\nresult = Z[..., -1:]\n```"], "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": ["```python\nimport numpy as np\na = np.random.rand(*np.random.randint(2, 10, (np.random.randint(2, 10))))\n\n# Assuming a is of unknown dimension\n# To slice the last dimension of a regardless of its shape\nresult = a[(-1,) + (slice(None),) * (a.ndim - 1):]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": ["```python\nresult = any(np.array_equal(c, cnt) for cnt in CNTS)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": ["result = any(np.array_equal(c, cnt) for cnt in CNTS)\n"], "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": ["```python\nf = intp.interp2d(x_new, y_new, a, kind='linear')\nx_new_dense = np.linspace(0, 2, 8)\ny_new_dense = np.linspace(0, 2, 8)\nresult = f(x_new_dense, y_new_dense)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": ["```python\ndf['Q_cum'] = df.groupby('D')['Q'].cumsum()\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": ["```python\ni = np.diag(i)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": ["a = np.triu(a) + np.tril(a.T)"], "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": ["```python\nimport numpy as np\nimport pandas as pd\n\nstart = pd.to_datetime(\"23-FEB-2015 23:09:19.445506\")\nend = pd.to_datetime(\"24-FEB-2015 01:09:22.404973\")\nn = 50\n\ndelta = (end - start) / (n - 1)\nresult = [start + i * delta for i in range(n)]\nresult = pd.DatetimeIndex(result)\n```\n```python\nEND SOLUTION\n```\n```python\nresult\n```"], "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": ["```python\nimport numpy as np\n\nx = np.array([0, 1, 1, 1, 3, 1, 5, 5, 5])\ny = np.array([0, 2, 3, 4, 2, 4, 3, 4, 5])\na = 1\nb = 4\n\nresult = np.where((x == a) & (y == b))[0][0] if np.any((x == a) & (y == b)) else -1\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": ["```python\nindices = np.where((x == a) & (y == b))[0]\nresult = indices if indices.size > 0 else np.array([])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": ["```python\nimport numpy as np\n\nx = np.array([-1, 2, 5, 100])\ny = np.array([123, 456, 789, 1255])\n\ncoefficients = np.polyfit(x, y, 2)\nresult = coefficients[::-1]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": ["```python\nimport numpy as np\n\nx = np.array([-1, 2, 5, 100])\ny = np.array([123, 456, 789, 1255])\ndegree = 3\n\ncoefficients = np.polyfit(x, y, degree)\nresult = coefficients[::-1]  # Reversing coefficients to match requested order\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": ["```python\ndf = df.apply(lambda row: row - temp_arr, axis=1)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": ["```python\nresult = np.einsum('ijk,kl->ijl', A, B)\n```\n```"], "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": ["scaler = MinMaxScaler()\nresult = scaler.fit_transform(a.flatten().reshape(-1, 1)).reshape(a.shape)\n"], "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": ["```python\nmin_vals = np.min(arr, axis=1, keepdims=True)\nmax_vals = np.max(arr, axis=1, keepdims=True)\nresult = (arr - min_vals) / (max_vals - min_vals)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": ["import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\na = np.array([[[1, 0.5, -2], [-0.5,1, 6], [1,1,1]], [[-2, -3, 1], [-0.5, 10, 6], [1,1,1]]])\n\nscaler = MinMaxScaler()\nresult = np.zeros_like(a)\n\nfor i in range(a.shape[0]):\n    result[i] = scaler.fit_transform(a[i])\n\nresult\n"], "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": ["import numpy as np\n\narr = (np.random.rand(100, 50)-0.5) * 50\n\nmask1 = arr < -10\nmask2 = arr >= 15\n\narr[mask1] = 0\narr[mask2] = 30\narr[~(mask1 | mask2)] += 5\n"], "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": ["```python\nimport numpy as np\n\narr = (np.random.rand(5, 50) - 0.5) * 50\nn1 = [1, 2, 3, 4, 5]\nn2 = [6, 7, 8, 9, 10]\n\nfor i in range(arr.shape[0]):\n    arr_temp = arr[i].copy()\n    mask = arr_temp < n1[i]\n    mask2 = arr_temp >= n2[i]\n    mask3 = mask | mask2\n    arr_temp[mask] = 0\n    arr_temp[~mask3] += 5\n    arr_temp[mask2] = 30\n    arr[i] = arr_temp\n\n```\n```"], "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": ["```python\nresult = np.count_nonzero(np.abs(s1 - s2) > np.finfo(float).eps)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": ["```python\nimport numpy as np\n\nn = 20\nm = 10\ntag = np.random.rand(n, m)\ns1 = np.sum(tag, axis=1)\ns2 = np.sum(tag[:, ::-1], axis=1)\ns1 = np.append(s1, np.nan)\ns2 = np.append(s2, np.nan)\n\n# Handle NaN values to regard them as equal elements\ns1[np.isnan(s1)] = -1\ns2[np.isnan(s2)] = -1\n\n# Check for truly different elements\nresult = np.sum(s1 != s2)\n```\n```"], "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": ["result = all(np.array_equal(a[i], a[i+1]) for i in range(len(a)-1))\n"], "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": ["```python\nimport numpy as np\na = [np.array([np.nan,2,3]),np.array([1,np.nan,3]),np.array([1,2,np.nan])]\n```\n```python\nresult = all(np.isnan(arr).all() for arr in a)\n```"], "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": ["```python\nimport numpy as np\n\na = np.ones((41, 13))\nshape = (93, 13)\n\n# Calculate padding sizes\npad_rows = shape[0] - a.shape[0]\npad_cols = shape[1] - a.shape[1]\n\n# Pad array with zeros\npadded_a = np.pad(a, ((0, pad_rows), (0, pad_cols)), mode='constant', constant_values=0)\n\nresult = padded_a\n```\n"], "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": ["import numpy as np\n\na = np.ones((41, 12))\nshape = (93, 13)\n\n# Calculate the padding required for each dimension\npad_rows = shape[0] - a.shape[0]\npad_cols = shape[1] - a.shape[1]\n\n# Pad the array with zeros\npadded_a = np.pad(a, ((0, pad_rows), (0, pad_cols)), mode='constant')\n\nresult = padded_a\n"], "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": ["import numpy as np\n\na = np.ones((41, 12))\nshape = (93, 13)\nelement = 5\n\n# Calculate the padding required for each dimension\npad_rows = shape[0] - a.shape[0]\npad_cols = shape[1] - a.shape[1]\n\n# Pad the array with the specified element\npadded_array = np.pad(a, ((0, pad_rows), (0, pad_cols)), constant_values=element)\n\nresult = padded_array\n"], "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": ["<code>\nimport numpy as np\n\nexample_arr = np.ones((41, 13))\n\ndef f(arr=example_arr, shape=(93, 13)):\n    padded_arr = np.zeros(shape)\n    padded_arr[:arr.shape[0], :arr.shape[1]] = arr\n    return padded_arr\n\nresult = f()\nprint(result.shape)\n</code>"], "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": ["import numpy as np\n\na = np.ones((41, 12))\nshape = (93, 13)\n\n# Calculate the padding needed for each dimension\npad_rows = shape[0] - a.shape[0]\npad_cols = shape[1] - a.shape[1]\n\n# Pad the array with zeros\npadded_array = np.pad(a, ((0, pad_rows), (0, pad_cols)), mode='constant')\n\nresult = padded_array\n"], "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": ["```python\na = a.reshape((a.shape[0] // 3, 3))\n```\n```"], "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": ["```python\nresult = a[np.arange(a.shape[0])[:, None, None], np.arange(a.shape[1])[None, :, None], b]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": ["```python\nresult = a[:,:,1] * b\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": ["result = a[np.arange(b.shape[0])[:, None], np.arange(b.shape[1]), b]\n"], "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": ["```python\nresult = np.sum(a[np.arange(b.shape[0])[:, None, None], np.arange(b.shape[1])[None, :, None], b])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": ["result = np.sum(a[np.arange(a.shape[0])[:, np.newaxis], np.arange(a.shape[1]), b])\n"], "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": ["```python\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n```\n```python\nEND SOLUTION\nprint(result.tolist())\n```"], "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": ["```python\nimport numpy as np\n\nim = np.array([[0,0,0,0,0,0],\n               [0,0,1,1,1,0],\n               [0,1,1,0,1,0],\n               [0,0,0,1,1,0],\n               [0,0,0,0,0,0]])\n\n# Find non-zero indices along rows and columns\nnon_zero_rows = np.any(im, axis=1)\nnon_zero_cols = np.any(im, axis=0)\n\n# Slice the image based on non-zero rows and columns\nresult = im[non_zero_rows][:, non_zero_cols]\n```\n```python\n</code>\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": ["import numpy as np\n\nA = np.array([[0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 1, 0, 0, 0, 0],\n              [0, 0, 1, 1, 0, 0, 0],\n              [0, 0, 0, 0, 1, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0]])\n\n# Find the indices of the non-zero elements\nnonzero_indices = np.nonzero(A)\n\n# Get the minimum and maximum indices along each axis\nmin_row = np.min(nonzero_indices[0])\nmax_row = np.max(nonzero_indices[0])\nmin_col = np.min(nonzero_indices[1])\nmax_col = np.max(nonzero_indices[1])\n\n# Slice the array to get the bounding box\nresult = A[min_row:max_row+1, min_col:max_col+1]\n"], "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": ["```python\nimport numpy as np\n\nim = np.array([[1,1,1,1,1,5],\n               [1,0,0,1,2,0],\n               [2,1,0,0,1,0],\n               [1,0,0,7,1,0],\n               [1,0,0,0,0,0]])\n\nresult = im[(im != 0).any(axis=1)][:, (im != 0).any(axis=0)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": ["<code>\nimport numpy as np\n\nim = np.array([[0,0,0,0,0,0],\n               [0,0,5,1,2,0],\n               [0,1,8,0,1,0],\n               [0,0,0,7,1,0],\n               [0,0,0,0,0,0]])\n\n# Find rows and columns with all zeros\nrows_to_keep = ~np.all(im == 0, axis=1)\ncols_to_keep = ~np.all(im == 0, axis=0)\n\n# Select only the rows and columns that are not all zeros\nresult = im[rows_to_keep][:, cols_to_keep]\n</code>\n</code>"], "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": ["```python\nplt.scatter(x, y, label=\"x-y\")\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": ["<code>\nplt.minorticks_on()\nplt.grid(which='both', linestyle='--', linewidth=0.5)\nplt.gca().yaxis.set_minor_locator(plt.MultipleLocator(0.1))\nplt.show()\n</code>"], "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": ["<code>\nplt.minorticks_on()\n# SOLUTION END\nplt.show()\n</code>"], "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": ["<code>\nplt.minorticks_on()\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()\n</code>"], "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": ["<code>\nstyles = ['solid', 'dashed', 'dashdot', 'dotted']\nfor style in styles:\n    y = np.random.randn(10)\n    plt.plot(x, y, linestyle=style)\nplt.show()\n</code>"], "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": ["```python\nfor style in ['solid', 'dashed', 'dashdot', 'dotted']:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=style)\nplt.legend()\nplt.show()\n```\n"], "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": ["<code>\nplt.plot(x, y, marker='D', linestyle='-', linewidth=1)\nplt.show()\n"], "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": ["<code>\nplt.plot(x, y, marker='D', markersize=10, linewidth=2)\nplt.show()\n</code>"], "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": ["<code>\nax.set(ylim=(0, 40))\nplt.show()\n</code>"], "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": ["<code>\nplt.axvspan(2, 4, color='red', alpha=0.5)\nplt.show()\n</code>"], "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": ["<code>\nplt.plot([0, 1], [0, 2])\nplt.show()\n"], "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# draw a line segment from (0,0) to (1,2)\n# SOLUTION START\nplt.plot([0, 1], [0, 2])\nplt.show()\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": ["```python\nseaborn.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n```\n"], "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": ["<code>\nsns.set(style=\"whitegrid\")\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Plot of y vs x\")\nplt.show()\n"], "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": ["```python\nsns.set(style=\"whitegrid\")\ndf = pd.DataFrame({'x': x, 'y': y})\nsns.lineplot(data=df, x='x', y='y')\nplt.show()\n```"], "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": ["```python\nplt.plot(x, y, marker='+', markersize=10, linewidth=7)\nplt.show()\n```"], "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": ["```python\nplt.legend(fontsize=20)\nplt.show()\n# SOLUTION END\n```"], "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": ["<code>\nplt.plot(x, y, label='cos(x)')\nplt.legend(title='xyz', title_fontsize=20)\nplt.show()\n"], "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": ["<code>\n    l.set_markerfacecolor([0, 0, 1, 0.2])\n    plt.show()\n</code>"], "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": ["<code>\nfor marker in l.get_children():\n    marker.set_markeredgecolor('black')\nplt.show()\n</code>"], "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": ["<code>\nl.set_color('red')\nl.set_markerfacecolor('red')\n# SOLUTION END\nplt.show()\n</code>"], "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": ["```python\nplt.xticks(rotation=45, ha='right')\n# SOLUTION END\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": ["```python\nplt.xticks(rotation=45, ha='left')\n# SOLUTION END\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": ["```python\nplt.xticks(np.arange(0, 2*np.pi+1, np.pi))\n# SOLUTION END\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": ["```python\nplt.legend()\nplt.show()\n# SOLUTION END\n```"], "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": ["```python\nplt.imshow(H, cmap='viridis')\nplt.colorbar()\nplt.show()\n```\n"], "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": ["<code>\nplt.imshow(H, cmap='gray')\nplt.show()\n</code>"], "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\", loc='right')\nplt.show()\n</code>"], "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": ["<code>\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\nplt.show()\n</code>"], "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": ["<code>\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.set_title(myTitle)\nplt.show()\n</code>"], "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": ["<code>\nplt.plot(x, y)\nplt.gca().invert_yaxis()\nplt.show()\n"], "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": ["<code>\nplt.xticks([0, 1.5])\nplt.show()\n</code>"], "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put y ticks at -1 and 1 only\n# SOLUTION START\nplt.yticks([-1, 1])\n# SOLUTION END\n\nplt.show()\n</code>"], "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": ["```python\nplt.plot(x, z, 'r-', alpha=0.5)\nplt.plot(x, y, 'g-', alpha=0.75)\nplt.plot(x, x, 'b-', alpha=1.0)\nplt.show()\n```\n"], "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": ["<code>\nplt.scatter(x, y, edgecolor='black', facecolor='blue')\nplt.show()\n"], "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make all axes ticks integers\n# SOLUTION START\nplt.plot(x, y)\nplt.gca().xaxis.set_major_locator(plt.MaxNLocator(integer=True))\nplt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))\nplt.show()\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": ["```python\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()\n```\n"], "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": ["<code>\nax.plot(x, y, linestyle='--')\nplt.show()\n"], "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n\nax1.plot(x, y1)\nax1.set_title('Sine')\n\nax2.plot(x, y2)\nax2.set_title('Cosine')\n\nplt.show()\n```"], "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6))\n\nax1.plot(x, y1)\nax1.set_title('sin(x)')\nax1.set_xlabel('x')\nax1.set_ylabel('y1')\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\n\nax2.plot(x, y2)\nax2.set_title('cos(x)')\nax2.set_xlabel('x')\nax2.set_ylabel('y2')\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\n\nplt.tight_layout()\nplt.show()\n"], "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": ["<code>\nsns.lineplot(x=\"x\", y=\"y\", data=df)\nplt.xlabel('')\n</code>"], "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x tick labels\n# SOLUTION START\nplt.xticks([], [])\nplt.show()\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": ["<code>\nplt.xticks([3, 4])\nplt.grid(axis='x')\nplt.show()\n"], "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": ["<code>\nplt.yticks([3, 4])\nplt.grid(axis='y')\nplt.show()\n"], "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": ["```python\nplt.yticks([3, 4])\nplt.xticks([1, 2])\nplt.grid(axis='x', which='major')\nplt.grid(axis='y', which='major')\nplt.show()\n```\n"], "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": ["plt.grid(True)\n"], "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": ["```python\nplt.legend(loc=\"lower right\")\n# SOLUTION END\nplt.show()\n```"], "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": ["fig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6), subplot_kw={'pad': 0.5})\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.show()\nplt.clf()\n"], "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\n\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": ["<code>\nax.xaxis.tick_top()\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_xticklabels(column_labels, minor=False)\n# SOLUTION END\n\nplt.show()\n</code>"], "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\nplt.show()\n"], "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": ["<code>\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n</code>"], "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": ["<code>\nplt.plot(x, y)\nplt.tick_params(axis='y', labelright=True)\nplt.show()\n"], "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": ["```python\nplt.plot(x, y)\nplt.ylabel(\"Y\")\nplt.tick_params(axis='y', labelright=True, labelleft=False)\nplt.show()\n```"], "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": ["```python\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', scatter_kws={'color':'green'}, line_kws={'color':'green'}, marginal_kws={'color':'blue'})\nplt.show()\n```\n"], "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": ["<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', joint_kws={'color': 'blue'})\nplt.show()\n</code>"], "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": ["<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg')\nplt.show()\n</code>"], "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": ["<code>\nplt.bar(df['celltype'], df['s1'], label='s1')\nplt.bar(df['celltype'], df['s2'], label='s2')\nplt.xlabel('celltype')\nplt.xticks(rotation=0)\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": ["<code>\nplt.bar(df['celltype'], df['s1'], label='s1')\nplt.bar(df['celltype'], df['s2'], label='s2', alpha=0.5)\nplt.xlabel('celltype')\nplt.xticks(rotation=45)\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": ["```python\nplt.plot(x, y)\nplt.xlabel('X', color='red')\nplt.xticks(color='red')\nplt.show()\n```"], "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": ["```python\nplt.plot(x, y)\nplt.xlabel(\"X\")\nplt.axhline(0, color='r')\nplt.show()\n```\n"], "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": ["<code>\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation=90)\nplt.show()\n</code>"], "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": ["```python\nimport matplotlib.pyplot as plt\n\n# draw vertical lines at [0.22058956, 0.33088437, 2.20589566]\n# SOLUTION START\nx_values = [0.22058956, 0.33088437, 2.20589566]\nfor x in x_values:\n    plt.axvline(x=x, color='r', linestyle='--')\n# SOLUTION END\n\nplt.show()\n```"], "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": ["```python\nplt.imshow(rand_mat, cmap='hot', interpolation='nearest')\nplt.xticks(numpy.arange(len(xlabels)), xlabels)\nplt.yticks(numpy.arange(len(ylabels)), ylabels[::-1])\nplt.colorbar()\nplt.show()\n```"], "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": ["<code>\nfig = plt.figure()\n\n# First subplot\nax1 = fig.add_subplot(211)\nax1.plot(time, Swdown, \"-\", label=\"Swdown\")\nax1.plot(time, Rn, \"-\", label=\"Rn\")\nax1.legend(loc=0)\nax1.grid()\nax1.set_xlabel(\"Time (h)\")\nax1.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax1.set_ylim(-20, 100)\n\n# Second subplot\nax2 = fig.add_subplot(212)\nax2.plot(time, temp, \"-r\", label=\"temp\")\nax2.legend(loc=0)\nax2.grid()\nax2.set_xlabel(\"Time (h)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\n\nplt.show()\nplt.clf()\n"], "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": ["<code>\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\nfor i, ax in enumerate(axs):\n    ax.plot(x, y)\n    ax.set_title('Y')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": ["<code>\nsns.scatterplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", s=30)\nplt.show()\n"], "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\na = [2.56422, 3.77284, 3.52623]\nb = [0.15, 0.3, 0.45]\nc = [58, 651, 393]\n\n# make scatter plot of a over b and annotate each data point with corresponding numbers in c\nplt.scatter(b, a)\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (b[i], a[i]))\nplt.xlabel('b')\nplt.ylabel('a')\nplt.title('Scatter plot of a over b with annotations')\nplt.show()\n</code>"], "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": ["```python\nplt.plot(x, y, label='y over x')\nplt.legend(title='Legend')\nplt.show()\n```"], "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": ["<code>\nplt.plot(x, y, label='y over x')\nplt.legend(title='<b>Legend</b>')\nplt.show()\n</code>"], "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": ["<code>\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n</code>"], "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\nax1.plot(x, y)\nax2.plot(x, y)\nplt.show()\n```"], "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": ["<code>\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": ["```python\nplt.hist([x, y], bins=10, label=['x', 'y'])\nplt.legend()\nplt.show()\n```\n"], "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": ["<code>\nplt.plot([a, c], [b, d])\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.show()\n</code>"], "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nim1 = ax1.imshow(x, cmap='viridis')\nax1.set_title('X')\n\nim2 = ax2.imshow(y, cmap='plasma')\nax2.set_title('Y')\n\nfig.colorbar(im1, ax=[ax1, ax2])\n\nplt.show()\n"], "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": ["<code>\nplt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": ["<code>\nfig, axes = plt.subplots(nrows=2, ncols=1)\n\naxes[0].plot(x, y)\naxes[0].set_title('Y over X')\n\naxes[1].plot(a, z)\naxes[1].set_title('Z over A')\n\nplt.suptitle('Y and Z')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\npoints = [(3, 5), (5, 10), (10, 150)]\n\n# plot a line plot for points in points.\n# Make the y-axis log scale\n# SOLUTION START\n\nx, y = zip(*points)\nplt.plot(x, y)\nplt.yscale('log')\nplt.show()\n\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": ["```python\nplt.plot(x, y)\nplt.title(\"Plot of y over x\", fontsize=20)\nplt.xlabel(\"X\", fontsize=18)\nplt.ylabel(\"Y\", fontsize=16)\nplt.show()\n```\n"], "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": ["```python\nax.plot(x, y)\nax.set_xticks(x)\nax.set_xticklabels([str(i+1) for i in range(10)])\n# SOLUTION END\n\nplt.show()\n```"], "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": ["<code>\nfor line, color in zip(lines, c):\n    plt.plot(*line, color=color)\nplt.show()\n"], "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 1000, 50)\ny = np.arange(0, 1000, 50)\n\n# plot y over x on a log-log plot\n# mark the axes with numbers like 1, 10, 100. do not use scientific notation\n# SOLUTION START\nplt.figure()\nplt.loglog(x, y)\nplt.xticks([1, 10, 100, 1000], [1, 10, 100, 1000])\nplt.yticks([1, 10, 100, 1000], [1, 10, 100, 1000])\nplt.show()\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": ["<code>\nplt.plot(df.index, df['A'], marker='o', label='A')\nplt.plot(df.index, df['B'], marker='o', label='B')\nplt.plot(df.index, df['C'], marker='o', label='C')\nplt.plot(df.index, df['D'], marker='o', label='D')\n\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": ["<code>\nhist, bins = np.histogram(data, bins=10, density=True)\nwidth = 0.7 * (bins[1] - bins[0])\ncenter = (bins[:-1] + bins[1:]) / 2\n\nplt.bar(center, hist, align='center', width=width)\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\nplt.show()\n</code>"], "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": ["```python\nplt.plot(x, y, marker='o', alpha=0.5)\nplt.show()\n```\n"], "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.plot(x, y, label='y')\nax1.legend(loc='upper left')\nax2.plot(z, a, label='a')\nax2.legend(loc='upper left')\n\nfig.figlegend(loc='lower center', ncol=2)\nplt.show()\n```"], "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": ["<code>\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axes[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axes[1])\n\nplt.show()\n</code>"], "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": ["<code>\nplt.xticks([1, 2, 3, 4, 5, 6, 7, 8, 9], ['1', 'second', '3', '4', '5', '6', '7', '8', '9'])\n</code>"], "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": ["```python\nplt.plot(x, y, label='$\\lambda$')\nplt.legend()\nplt.show()\n```\n"], "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": ["<code>\nextra_ticks = [2.1, 3, 7.6]\nplt.xticks(list(plt.xticks()[0]) + extra_ticks)\nplt.show()\n</code>"], "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": ["<code>\nplt.xticks(rotation=-60, ha='left')\nplt.show()\n</code>"], "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": ["<code>\nplt.yticks(rotation=-60)\nplt.xticks(rotation=90, va='top')\nplt.show()\n</code>"], "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": ["<code>\nplt.xticks(alpha=0.5)\nplt.show()\n</code>"], "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": ["```python\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\nplt.show()\n```\n"], "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": ["<code>\nplt.subplots_adjust(top=0.95, bottom=0.1, left=0.1, right=0.95, hspace=0.2, wspace=0.2)\nplt.xticks(np.arange(0, 10, 2))\nplt.yticks(np.arange(0, 10, 2))\nplt.show()\n"], "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": ["<code>\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\nfig.suptitle(\"Figure\")\n\nax[0].plot(x, y)\nax[0].set_title(\"Subplot 1\")\n\nax[1].plot(x, y)\nax[1].set_title(\"Subplot 2\")\n\nplt.show()\n"], "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": ["<code>\nplt.plot(df.index, df[\"Type A\"], label=\"Type A\")\nplt.plot(df.index, df[\"Type B\"], label=\"Type B\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": ["```python\nplt.scatter(x, y, marker='|', hatch='|', edgecolors='black', s=100)\nplt.show()\n```"], "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": ["```python\nplt.scatter(x, y, edgecolor='none', marker='|', hatch='|')\nplt.show()\n```"], "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": ["<code>\nplt.scatter(x, y, marker='*', edgecolor='black')\nplt.show()\n</code>"], "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": ["```python\nplt.scatter(x, y, s=100, marker='*', hatch='|')\nplt.show()\n```\n"], "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": ["<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.random((10, 10))\n\n# Set xlim and ylim to be between 0 and 10\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n\n# Plot a heatmap of data in the rectangle where right is 5, left is 1, bottom is 1, and top is 4.\nplt.imshow(data, extent=[1, 5, 1, 4])\nplt.colorbar()\nplt.show()\n</code>"], "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": ["<code>\nplt.stem(x, y, orientation='horizontal')\nplt.show()\n</code>"], "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": ["<code>\n# Get the keys and values from dictionary `d`\nkeys = list(d.keys())\nvalues = list(d.values())\n\n# Get the colors for each key from dictionary `c`\ncolors = [c[key] for key in keys]\n\n# Create a bar plot\nplt.bar(keys, values, color=colors)\n\n# Show the plot\nplt.show()\n"], "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": ["<code>\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y, label='Data')\nplt.axvline(x=3, color='r', linestyle='-', label='Cutoff')\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": ["<code>\nplt.figure(figsize=(6, 6))\nax = plt.subplot(111, polar=True)\nbars = ax.bar(labels, height)\nfor bar in bars:\n    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height(), str(int(bar.get_height())), ha='center', va='bottom')\nplt.show()\n</code>"], "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": ["<code>\nplt.pie(data, labels=l, wedgeprops=dict(width=0.4))\nplt.gca().add_artist(plt.Circle((0,0),0.3,color='white'))\nplt.axis('equal')\nplt.show()\n</code>"], "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": ["<code>\nplt.plot(x, y)\nplt.grid(True, linestyle='--', color='blue')\nplt.show()\n"], "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": ["<code>\nplt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', color='gray')\nplt.grid(which='major', visible=False)\nplt.show()\n</code>"], "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": ["<code>\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')\nplt.show()\n</code>"], "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": ["```python\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title(\"Activities\")\nplt.axis('equal')\nplt.show()\n```\nSOLUTION END"], "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": ["<code>\nplt.plot(x, y, marker='o', linestyle='-', color='blue', alpha=0.5, markeredgecolor='black', markerfacecolor='none')\nplt.show()\n"], "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": ["<code>\nplt.axvline(x=55, color=\"green\")\nplt.show()\n"], "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": ["<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Specify the values of blue bars (height)\nblue_bar = (23, 25, 17)\n# Specify the values of orange bars (height)\norange_bar = (19, 18, 14)\n\n# Plot the blue bar and the orange bar side-by-side in the same bar plot.\n# Make sure the bars don't overlap with each other.\n\n# Define the width of the bars\nbar_width = 0.35\n\n# Define the x locations for the groups\nx = np.arange(len(blue_bar))\n\n# Plot bars\nplt.bar(x, blue_bar, width=bar_width, color='blue', align='center', label='Blue Bar')\nplt.bar(x + bar_width, orange_bar, width=bar_width, color='orange', align='center', label='Orange Bar')\n\n# Add labels, title, and legend\nplt.xlabel('Group')\nplt.ylabel('Values')\nplt.title('Blue and Orange Bars')\nplt.xticks(x + bar_width / 2, ('A', 'B', 'C'))\nplt.legend()\n\n# Show plot\nplt.show()\n</code>"], "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\n# Plot y over x in the first subplot\nax1.plot(x, y, label='y over x')\n\n# Plot z over a in the second subplot\nax2.plot(a, z, label='z over a')\n\n# Set titles for subplots\nax1.set_title('Subplot 1')\nax2.set_title('Subplot 2')\n\n# Set labels for x and y axes\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax2.set_xlabel('a')\nax2.set_ylabel('z')\n\n# Create a single legend for both subplots\nax1.legend()\n\n# Display the plots\nplt.show()\n</code>"], "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": ["```python\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar(label='Y Value')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter Plot of Y over X')\nplt.show()\n```"], "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": ["<code>\nplt.plot(x, y)\nplt.xticks(np.arange(0, 10, 1))\nplt.show()\n"], "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": ["<code>\nsns.catplot(data=df, x=\"sex\", y=\"bill_length_mm\", hue=\"species\", kind=\"bar\", col=\"species\", col_wrap=2, sharey=False)\nplt.show()\n</code>"], "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": ["<code>\ncircle = plt.Circle((0.5, 0.5), 0.2, color='blue')\nfig, ax = plt.subplots()\nax.add_artist(circle)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal', adjustable='box')\nplt.show()\n</code>"], "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": ["<code>\nplt.plot(x, y)\nplt.title(r'$\\mathbf{\\phi}$', fontsize=14, fontweight='bold')\nplt.show()\n"], "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": ["<code>\nplt.plot(x, y, label=\"Line\")\nplt.legend(markerfirst=False, labelspacing=0.1)\nplt.show()\n</code>"], "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": ["<code>\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\nplt.show()\n"], "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": ["<code>\nplt.legend(ncol=2)\nplt.show()\n</code>"], "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": ["```python\nplt.legend()\nplt.plot(x, y, marker=\"*\", label=\"Line\", markevery=[0, 9])\nplt.show()\n```\n"], "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": ["```python\nplt.imshow(data, cmap='viridis')\nplt.colorbar()\nplt.show()\n```\n"], "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": ["```python\nplt.plot(x, y)\nplt.title(\"Figure 1\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.show()\n```"], "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": ["<code>\nsns.pairplot(data=df, x_vars='x', y_vars='y', hue='id')\nplt.legend().remove()\nplt.show()\n"], "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": ["```python\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n```"], "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": ["<code>\nplt.scatter(x, y)\nplt.axis('auto')\nplt.show()\n"], "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": ["<code>\nplt.scatter(x, y, c='red', edgecolor='black')\nplt.show()\n</code>"], "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": ["<code>\nfig, axs = plt.subplots(2, 2, figsize=(15, 15))\n\nfor i in range(2):\n    for j in range(2):\n        axs[i, j].plot(x, y)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": ["<code>\nplt.hist(x, range=(0, 10), bins=5, width=2)\nplt.show()\n"], "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": ["<code>\nplt.plot(x, y, color='blue')\nplt.fill_between(x, y - error, y + error, color='lightblue')\nplt.show()\n</code>"], "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": ["<code>\nplt.axhline(0, color='white')\nplt.axvline(0, color='white')\n"], "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": ["<code>\nax.errorbar(box_position, box_height, yerr=box_errors, color=c, fmt=\"none\")\n"], "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y)\nax1.set_title(\"Y\")\n\nax2.plot(a, z)\nax2.set_title(\"Z\")\n\nfig.suptitle(\"Subplots\", y=1.05)\n\nplt.show()\n"], "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": ["<code>\nfig, axs = plt.subplots(4, 4, figsize=(5, 5))\n\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].tick_params(axis='both', which='both', labelsize=8)\n        if i < 3:\n            axs[i, j].tick_params(axis='x', which='both', labelbottom=False)\n        if j > 0:\n            axs[i, j].tick_params(axis='y', which='both', labelleft=False)\n\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\nplt.show()\n</code>"], "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": ["<code>\nplt.figure(figsize=(8, 8))\nplt.matshow(d)\nplt.show()\n</code>"], "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": ["```python\nfig, ax = plt.subplots(figsize=(8, 6))\nax.table(cellText=df.values, colLabels=df.columns, loc=\"center\")\nplt.axis(\"off\")\nplt.show()\n```"], "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": ["<code>\nplt.plot(x, y)\nplt.xticks(np.arange(10), np.arange(10))\nplt.tick_params(axis='x', top=True, bottom=True)\nplt.show()\n"], "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": ["```python\nplt.plot(x, y)\nplt.tick_params(axis='x', direction='inout')\nplt.show()\n```"], "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": ["<code>\nplt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False)\nplt.show()\n"], "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": ["```python\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.subplots_adjust(top=0.9)\nplt.suptitle(\"Group: Fat\", y=1.05)\nplt.subplots_adjust(top=0.9)\nplt.suptitle(\"Group: No Fat\", y=1.05)\nplt.show()\n```\n"], "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": ["```python\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"strip\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Pulse\")\nplt.show()\n```"], "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": ["```python\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\nplt.ylabel(\"\")\nplt.show()\n```\n"], "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": ["<code>\nplt.plot(x, y, label=\"y\")\nplt.legend(fontsize=8)\nplt.show()\n</code>"], "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": ["```python\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n```"], "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": ["<code>\nplt.plot(x, y, label='y')\nplt.legend(frameon=False)\nplt.show()\n</code>"], "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": ["<code>\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.legend()\nplt.xlabel('t')\nplt.ylabel('Value')\nplt.title('Plot of sin(t), cos(t), and sin(t) + cos(t)')\nplt.show()\n"], "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": ["```python\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, jitter=True)\nplt.legend().remove()\nplt.show()\n```"], "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": ["<code>\ng = sns.FacetGrid(df, row=\"b\", height=3, aspect=2)\ng.map(sns.pointplot, \"a\", \"c\", order=np.arange(1, 31), ci=None)\ng.set_xticks(np.arange(1, 31, 2))\ng.set_xticklabels(np.arange(1, 31, 2))\nplt.show()\n"], "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": ["<code>\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\n\nax.view_init(azim=100, elev=50)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\nplt.show()\n"], "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": ["<code>\ngs = gridspec.GridSpec(nrow, ncol, wspace=0.0, hspace=0.0)\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = plt.subplot(gs[i, j])\n        ax.imshow(x, cmap='viridis')\n        ax.axis('off')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": ["```python\nx.assign(1)\nresult = int(x.numpy())\n``` \nEND SOLUTION\n</code>"], "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": ["```python\nimport tensorflow as tf\n\nx = tf.Variable(0)\n\n# assign a new value to x\nx.assign(114514)\n\n# retrieve the value of x as an integer\nresult = int(x.numpy())\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": ["```python\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```\n```"], "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": ["```python\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\nclass_index = tf.constant(labels, dtype=tf.int32)\none_hot = tf.one_hot(class_index, depth=10, dtype=tf.int32)\nresult = tf.tile(tf.expand_dims(one_hot, axis=1), [1, 10, 1])\n```\n"], "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": ["import tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\n\n# Create a tensor of shape (len(labels), 10) filled with zeros\nresult = tf.zeros((len(labels), 10), dtype=tf.int32)\n\n# Set the corresponding indices to 1 based on the labels\nfor i, label in enumerate(labels):\n    result[i, label] = 1\n"], "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": ["```python\nimport tensorflow as tf\n\nexample_labels = [0, 6, 5, 4, 2]\n\ndef f(labels=example_labels):\n    # Create a tensor of shape (n, 10) filled with zeros\n    result = tf.zeros((len(labels), 10), dtype=tf.int32)\n    \n    # Iterate over the labels and set the corresponding element in the result tensor to 1\n    for i, label in enumerate(labels):\n        result[i, label] = 1\n    \n    return result\n\n# Test the function\nprint(f())\n```\n### END SOLUTION\n"], "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": ["```python\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\n\n# Convert labels to one-hot tensors\none_hot_labels = tf.one_hot(labels, depth=10, dtype=tf.int32)\n\n# Invert one-hot tensors to get the desired result\nresult = 1 - one_hot_labels\n\n# Print the result\nprint(result)\n```\n"], "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": ["```python\ndef my_map_func(i):\n    return [i, i+1, i+2]\n\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(my_map_func(x)))\nresult = list(ds.as_numpy_iterator())\n```\n```python\nEND SOLUTION\n</code>\nprint(result)\n```"], "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": ["<code>\ndef my_map_func(i):\n    return [i, i + 1, i + 2]\n\nds = tf.data.Dataset.from_tensor_slices(example_input)\nds = ds.interleave(lambda x: tf.data.Dataset.from_tensor_slices(my_map_func(x)), cycle_length=1, block_length=1)\n\nresult = []\nwith tf.compat.v1.Session() as sess:\n    for _ in range(9):\n        result.append(sess.run(ds))\nresult = [item.numpy() for item in result]\nresult = [item for sublist in result for item in sublist]\nprint(result)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": ["import tensorflow as tf\n\nlengths = [4, 3, 5, 2]\n\nmax_length = max(lengths)\nmask = tf.sequence_mask(lengths, maxlen=max_length)\npadded_mask = tf.pad(mask, [[0, 0], [0, 8 - max_length]])\n\nresult = tf.cast(padded_mask, dtype=tf.int32)\n"], "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": ["```python\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\n\nmax_length = 8\nmask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.bool)\nmask = tf.logical_not(mask)\nmask = tf.cast(mask, tf.int32)\nprint(mask.numpy())\n```"], "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": ["```python\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\n\nmax_length = 8\nmask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.float32)\n\nresult = mask\n```\n```"], "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": ["```python\nimport tensorflow as tf\n\nexample_lengths = [4, 3, 5, 2]\n\ndef f(lengths=example_lengths):\n    # Create a mask tensor of ones\n    mask = tf.sequence_mask(lengths, maxlen=8, dtype=tf.int32)\n    # Pad the mask tensor with zeros\n    padded_mask = tf.pad(mask, [[0, 0], [0, 8 - tf.reduce_max(lengths)]])\n    return padded_mask\n\n### END SOLUTION\nresult = f()\nprint(result.numpy())\n```"], "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": ["```python\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\n\nmax_length = max(lengths)\nmask = tf.sequence_mask(lengths, maxlen=max_length)\npadded_mask = tf.pad(mask, [[0, 0], [0, 8 - max_length]])\n\nresult = padded_mask\n```\n```"], "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": ["```python\nimport tensorflow as tf\n\na = tf.constant([1,2,3])\nb = tf.constant([4,5,6,7])\n\nresult = tf.transpose(tf.reshape(tf.stack(tf.meshgrid(a, b), axis=-1), (-1, 2)))\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": ["```python\nimport itertools\nimport tensorflow as tf\n\nexample_a = tf.constant([1,2,3])\nexample_b = tf.constant([4,5,6,7])\n\ndef f(a=example_a, b=example_b):\n    # Expand dimensions to allow broadcasting\n    a = tf.expand_dims(a, axis=1)\n    b = tf.expand_dims(b, axis=0)\n    \n    # Perform Cartesian product\n    cartesian_product = tf.concat([a, b], axis=-1)\n    \n    return cartesian_product\n\nresult = f()\nprint(result)\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": ["result = tf.squeeze(a, axis=2)\n"], "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": ["result = tf.expand_dims(a, axis=2)\n"], "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": ["```python\nresult = tf.expand_dims(tf.expand_dims(a, 0), 3)\n```\n```"], "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": ["```python\nresult = tf.reduce_sum(A, axis=1)\n```  \n```"], "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": ["```python\nresult = tf.math.reduce_prod(A, axis=1)\n```   \n```"], "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": ["```python\nresult = tf.math.reciprocal(A)\n``` \n</code>"], "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": ["result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n"], "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": ["result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)\n"], "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": ["import tensorflow as tf\n\nexample_a = tf.constant([\n  [1,1,1],\n  [1,1,1]\n])\nexample_b = tf.constant([\n  [0,0,0],\n  [1,1,1]\n])\n\ndef f(A=example_a,B=example_b):\n    # calculate the squared difference\n    squared_diff = tf.square(tf.subtract(A, B))\n    \n    # reduce the squared difference along the row axis\n    row_sum = tf.reduce_sum(squared_diff, axis=1)\n    \n    return row_sum\n\nresult = f()\nprint(result)"], "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": ["```python\nm = tf.gather_nd(x, tf.stack((y, z), axis=1))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": ["m = tf.gather_nd(x, tf.stack((row, col), axis=1))\n"], "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": ["```python\n    m = tf.gather_nd(x, tf.stack([y, z], axis=1))\n    return m\n```"], "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": ["```python\nresult = tf.tensordot(A, B, axes=[[2], [2]])\n```"], "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": ["C = tf.matmul(A, tf.transpose(B, perm=[0, 2, 1]))\n"], "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": ["```python\nresult = [s.decode('utf-8') for s in x]\n```\n```"], "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": ["```python\n    decoded_strings = [tf.strings.decode(bytes_str, 'utf-8').numpy().decode('utf-8') for bytes_str in x]\n    return decoded_strings\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": ["```python\nmask = tf.cast(tf.reduce_sum(tf.cast(x != 0, tf.int32), axis=-1) != 0, tf.float32)\nresult = tf.reduce_sum(x, axis=-2) / tf.reduce_sum(mask, axis=-1, keepdims=True)\n```"], "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": ["```python\nimport tensorflow as tf\n\nx = [[[[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [2, 0, 4], [3, 4, 5]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [0, 0, 0]]],\n     [[[1, 2, 3], [0, 1, 0], [0, 0, 0]],\n      [[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]\nx = tf.convert_to_tensor(x, dtype=tf.float32)\n```"], "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": ["```python\n    non_zero_count = tf.math.count_nonzero(x, axis=-1, keepdims=True)\n    x_sum = tf.reduce_sum(x, axis=-2)\n    x_avg = tf.where(non_zero_count > 0, x_sum / non_zero_count, tf.zeros_like(x_sum))\n    return x_avg\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": ["import tensorflow as tf\n\ntf.random.set_seed(10)\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\n\nresult = tf.reduce_sum(tf.matmul(A,B))\nEND SOLUTION\n<code>"], "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": ["```python\nimport tensorflow as tf\n\na = tf.constant(\n    [[0.3232, -0.2321, 0.2332, -0.1231, 0.2435, 0.6728],\n     [0.2323, -0.1231, -0.5321, -0.1452, 0.5435, 0.1722],\n     [0.9823, -0.1321, -0.6433, 0.1231, 0.023, 0.0711]]\n)\n\nresult = tf.argmax(a, axis=1)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": ["```python\nresult = tf.argmax(a, axis=1)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": ["```python\n    # Get the index of the maximum value along the last axis\n    indices = tf.argmax(a, axis=-1)\n    return indices\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": ["<code>\nresult = tf.argmax(a, axis=1)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": ["```python\nmodel.save(\"export/1\")\n```\n"], "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": ["```python\nimport tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=(10,), minval=1, maxval=5, dtype=tf.int32)\n```"], "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": ["import tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\n\nresult = tf.random.uniform(shape=(114,), minval=2, maxval=6, dtype=tf.int32)\n"], "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": ["```python\nimport tensorflow as tf\n\ndef f(seed_x=10):\n    tf.random.set_seed(seed_x)\n    random_integers = tf.random.uniform(shape=(10,), minval=1, maxval=5, dtype=tf.int32)\n    return random_integers\n\nresult = f()\nprint(result)\n```\n\nExplanation:\n- We import the `tensorflow` library.\n- We define a function `f` that takes an optional argument `seed_x` with a default value of 10.\n- We set the random seed using `tf.random.set_seed(seed_x)` to ensure reproducibility.\n- We generate 10 random integers using `tf.random.uniform` with the `minval` set to 1, `maxval` set to 5 (exclusive), and `dtype` set to `tf.int32`.\n- We return the generated random integers.\n- We call the function `f` and store the result in the variable `result`.\n- We print the result to see the generated random integers."], "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": ["import tensorflow as tf\n\nresult = tf.__version__\n"], "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": ["```python\ncoefficients = np.polyfit(np.log(x), y, 1)\nresult = coefficients[::-1]  # reversing coefficients order to match [A, B]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": ["result = np.polyfit(np.log(x), y, 1)\n"], "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": ["<code>\nimport numpy as np\nimport scipy.optimize\n\ny = np.array([1, 7, 20, 50, 79])\nx = np.array([10, 19, 30, 35, 51])\np0 = (4, 0.1, 1)\n\ndef func(x, A, B, C):\n    return A * np.exp(B * x) + C\n\nresult, _ = scipy.optimize.curve_fit(func, x, y, p0=p0)\n</code>"], "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": ["```python\nstatistic, p_value = stats.ks_2samp(x, y)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": ["<code>\nresult = stats.ks_2samp(x, y)\nreject_null_hypothesis = result.pvalue < alpha\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": ["```python\ndef f(params):\n    a, b, c = params\n    return ((a + b - c) - 2)**2 + ((3*a - b - c))**2 + sin(b) + cos(b) + 4\n\ninitial_guess = [-1, 0, -3]\n\nresult = optimize.minimize(f, initial_guess).x\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": ["```python\np_values = scipy.stats.norm.cdf(z_scores)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": ["p_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n"], "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": ["```python\nz_scores = scipy.stats.norm.ppf(p_values)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": ["```python\nresult = stats.lognorm.cdf(x, stddev, scale=np.exp(mu))\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": ["```python\nimport numpy as np\nfrom scipy.stats import lognorm\n\nstddev = 2.0785\nmu = 1.744\n\n# Calculate the scale parameter 's' from the given mean and standard deviation\ns = np.exp(mu)\n\n# Calculate the expected value of the lognormal distribution\nexpected_value = np.exp(mu + stddev**2 / 2)\n\n# Calculate the median of the lognormal distribution\nmedian = np.exp(mu)\n\n# Print the results\nprint(\"Expected Value:\", expected_value)\nprint(\"Median:\", median)\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": ["<code>\nresult = sa.multiply(sb)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": ["```python\nresult = sA.multiply(sB)\nreturn result\n### END SOLUTION\n```"], "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": ["```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)[0]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": ["```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": ["import numpy as np\nfrom scipy.ndimage import rotate\n\ndata_orig = misc.face()\nx0, y0 = 580, 300\n\nangle = 66\ndata_rot = rotate(data_orig, angle)\n\n# Calculate the center of the image\ncenter_x = data_orig.shape[1] / 2\ncenter_y = data_orig.shape[0] / 2\n\n# Calculate the displacement of the point (x0, y0) from the center\ndx = x0 - center_x\ndy = y0 - center_y\n\n# Apply the rotation to the displacement\ndx_rot = dx * np.cos(np.deg2rad(angle)) - dy * np.sin(np.deg2rad(angle))\ndy_rot = dx * np.sin(np.deg2rad(angle)) + dy * np.cos(np.deg2rad(angle))\n\n# Calculate the rotated coordinates (xrot, yrot)\nxrot = center_x + dx_rot\nyrot = center_y + dy_rot\n\n# Print the rotated coordinates\nprint(\"Rotated coordinates:\", xrot, yrot)\n"], "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": ["result = M.diagonal()"], "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": ["```python\nresult = stats.kstest((np.array(times) / T), 'uniform')\n```\n```"], "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": ["<code>\n    result = stats.kstest((np.array(times) / T), \"uniform\")\n    return result\n    ### END SOLUTION\n</code>"], "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": ["```python\nresult = stats.kstest(times, \"uniform\").pvalue >= 0.05\n```\n```python\n</code>\nEND SOLUTION\n```\n```python\n</code>\n```\n"], "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": ["Feature = sparse.hstack([c1, c2])\n"], "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": ["Feature = sparse.hstack([c1, c2])\n"], "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": ["```python\nFeature = sparse.vstack([c1, c2])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": ["import numpy as np\nimport scipy.spatial\nimport scipy.optimize\n\npoints1 = np.array([(x, y) for x in np.linspace(-1,1,7) for y in np.linspace(-1,1,7)])\nN = points1.shape[0]\npoints2 = 2*np.random.rand(N,2)-1\n\n# Define the objective function\ndef objective(x, points1, points2):\n    # Reshape the input vector into a matrix\n    x = x.reshape((-1, 2))\n    \n    # Calculate the pairwise distances between points1 and points2\n    distances = scipy.spatial.distance.cdist(points1, x)\n    \n    # Find the minimum distance for each point in points1\n    min_distances = np.min(distances, axis=1)\n    \n    # Return the sum of the minimum distances\n    return np.sum(min_distances)\n\n# Define the constraint function\ndef constraint(x):\n    # Reshape the input vector into a matrix\n    x = x.reshape((-1, 2))\n    \n    # Calculate the pairwise distances between points2\n    distances = scipy.spatial.distance.pdist(x)\n    \n    # Return the sum of the distances\n    return np.sum(distances)\n\n# Initialize the initial guess\nx0 = np.random.rand(N, 2)\n\n# Define the bounds for the variables\nbounds = [(None, None)] * (N * 2)\n\n# Define the equality constraint\nconstraint_eq = {'type': 'eq', 'fun': constraint}\n\n# Solve the optimization problem\nresult = scipy.optimize.minimize(objective, x0, args=(points1, points2), bounds=bounds, constraints=constraint_eq)\n\n# Extract the solution\nsolution = result.x.reshape((-1, 2))\n\n# Find the indices of the closest points in points2 for each point in points1\nindices = np.argmin(scipy.spatial.distance.cdist(points1, solution), axis=1)\n\n# Print the result\nprint(indices)"], "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": ["```python\n# Calculate Manhattan distance between two points\ndef manhattan_distance(point1, point2):\n    return np.abs(point1[0] - point2[0]) + np.abs(point1[1] - point2[1])\n\n# Function to find the minimum Manhattan distance matching\ndef find_min_distance_matching(points1, points2):\n    n = len(points1)\n    min_distance = np.inf\n    best_permutation = None\n    \n    # Generate all permutations of indices\n    permutations = itertools.permutations(range(n))\n    \n    # Iterate through each permutation\n    for perm in permutations:\n        distance = 0\n        for i in range(n):\n            distance += manhattan_distance(points1[i], points2[perm[i]])\n        if distance < min_distance:\n            min_distance = distance\n            best_permutation = perm\n            \n    return best_permutation\n\n# Main code\nimport numpy as np\nimport itertools\n\n# Given sets of points\npoints1 = np.array([(x, y) for x in np.linspace(-1,1,7) for y in np.linspace(-1,1,7)])\nN = points1.shape[0]\npoints2 = 2*np.random.rand(N,2)-1\n\n# Find the minimum Manhattan distance matching\nresult = find_min_distance_matching(points1, points2)\n```\n```"], "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": ["```python\nb.setdiag(0)\n```\n```python\nEND SOLUTION\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": ["```python\nlabeled_array, num_features = ndimage.label(img > threshold)\nresult = num_features\n```\n```python\nEND SOLUTION\n</code>\n```\n"], "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": ["import numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n\n# Label connected regions below threshold\nlabeled_img, num_regions = ndimage.label(img < threshold)\n\nresult = num_regions\n"], "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": ["```python\n# Convert the image to a binary mask based on the threshold\nbinary_mask = img > threshold\n\n# Label the connected regions in the binary mask\nlabels, num_regions = ndimage.label(binary_mask)\n\n# Count the number of regions that exceed the threshold\ncount = np.sum(img[labels > 0] > threshold)\n\nreturn count\n```\n### END SOLUTION\n"], "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": ["```python\nlabeled_array, num_features = ndimage.label(img > threshold)\ncenters_of_mass = ndimage.measurements.center_of_mass(img, labeled_array, range(1, num_features + 1))\n\ndistances = [np.sqrt((center[0])**2 + (center[1])**2) for center in centers_of_mass]\n```\n```python\nEND SOLUTION\nresult = distances\n```\n"], "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": ["```python\ndef make_symmetric(sparse_matrix):\n    coo_matrix = sparse_matrix.tocoo()\n    max_index = max(coo_matrix.row.max(), coo_matrix.col.max())\n    sym_data = coo_matrix.data\n    sym_row = coo_matrix.row\n    sym_col = coo_matrix.col\n    \n    sym_data = np.concatenate([sym_data, sym_data])\n    sym_row = np.concatenate([sym_row, sym_col])\n    sym_col = np.concatenate([sym_col, sym_row])\n    \n    sym_matrix = sparse.coo_matrix((sym_data, (sym_row, sym_col)), shape=(max_index+1, max_index+1))\n    return sym_matrix.tolil()\n\nM = make_symmetric(M)\n```\n```"], "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": ["```python\n    sA = sA + sA.T - sA.multiply(sA.T)\n    return sA\n### END SOLUTION\n```"], "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": ["```python\n# Solution\nimport numpy as np\nimport scipy.ndimage\n\ndef remove_isolated_cells(arr):\n    labeled_array, num_features = scipy.ndimage.label(arr)\n    for i in range(1, num_features + 1):\n        label_mask = labeled_array == i\n        if np.sum(label_mask) == 1:\n            arr[label_mask] = 0\n    return arr\n\nsquare = remove_isolated_cells(square)\n```\n```python\n# END SOLUTION\n```"], "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": ["```python\ndef remove_isolated_cells(array):\n    kernel = np.array([[1, 1, 1],\n                       [1, 0, 1],\n                       [1, 1, 1]])\n    labeled_array, num_features = scipy.ndimage.label(array)\n    for label in range(1, num_features + 1):\n        labeled_mask = labeled_array == label\n        if np.sum(labeled_mask) == 1:\n            array[labeled_mask] = 0\n    return array\n\nsquare = remove_isolated_cells(square)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": ["mean = col.mean()\nstandard_deviation = col.std()\n"], "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": ["```python\nMax, Min = col.max(), col.min()\n```\n```"], "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": ["import numpy as np\nfrom scipy.sparse import csr_matrix\n\nnp.random.seed(10)\narr = np.random.randint(4,size=(988,988))\nsA = csr_matrix(arr)\ncol = sA.getcol(0)\n\n# Calculate median\nmedian = np.median(col.data)\n\n# Calculate mode\nunique_values, counts = np.unique(col.data, return_counts=True)\nmode = unique_values[np.argmax(counts)]\n\nmedian, mode"], "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": ["```python\n# Fourier series definition\ndef fourier(x, *params):\n    result = 0\n    for i in range(1, len(params) + 1):\n        result += params[i - 1] * np.cos(i * np.pi / tau * x)\n    return result\n\n# Fitting data\np0 = [1.0] * degree  # Initial guess\npopt, pcov = curve_fit(fourier, z, Ua, p0=p0)\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": ["import numpy as np\nimport scipy.spatial.distance\n\nexample_array = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\n\n# Get the unique IDs in the array\nunique_ids = np.unique(example_array)\n\n# Create an empty array to store the pairwise distances\ndistances = np.zeros((len(unique_ids), len(unique_ids)))\n\n# Calculate the pairwise distances between all regions\nfor i in range(len(unique_ids)):\n    for j in range(i+1, len(unique_ids)):\n        # Get the indices of the cells with the current IDs\n        indices_i = np.where(example_array == unique_ids[i])\n        indices_j = np.where(example_array == unique_ids[j])\n        \n        # Get the coordinates of the cells with the current IDs\n        coords_i = np.column_stack((indices_i[0], indices_i[1]))\n        coords_j = np.column_stack((indices_j[0], indices_j[1]))\n        \n        # Calculate the pairwise distances between the coordinates\n        pairwise_distances = scipy.spatial.distance.cdist(coords_i, coords_j, metric='euclidean')\n        \n        # Get the minimum distance\n        min_distance = np.min(pairwise_distances)\n        \n        # Store the minimum distance in the distances array\n        distances[i, j] = min_distance\n        distances[j, i] = min_distance\n\nresult = distances\n"], "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": ["```python\nfrom scipy.spatial.distance import cdist\nimport numpy as np\n\n# Sample study area array\nexample_array = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\n\n# Get unique IDs\nunique_ids = np.unique(example_array)\nn_ids = len(unique_ids)\n\n# Initialize result array\nresult = np.zeros((n_ids, n_ids))\n\n# Iterate over unique IDs and calculate Manhattan distances\nfor i in range(n_ids):\n    for j in range(i+1, n_ids):\n        mask_i = example_array == unique_ids[i]\n        mask_j = example_array == unique_ids[j]\n        points_i = np.argwhere(mask_i)\n        points_j = np.argwhere(mask_j)\n        distances = cdist(points_i, points_j, metric='cityblock')\n        min_distance = np.min(distances)\n        result[i, j] = min_distance\n        result[j, i] = min_distance\n\nresult = result.astype(int)\n```\n```"], "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": ["```python\n    # Get unique IDs\n    unique_ids = np.unique(example_array)\n    \n    # Initialize result array\n    result = []\n    \n    # Loop through unique IDs to calculate pairwise distances\n    for from_id in unique_ids:\n        for to_id in unique_ids:\n            if from_id != to_id:\n                # Get coordinates of from_id and to_id patches\n                from_coords = np.array(np.where(example_array == from_id)).T\n                to_coords = np.array(np.where(example_array == to_id)).T\n                \n                # Calculate pairwise Euclidean distances between patches\n                distances = scipy.spatial.distance.cdist(from_coords, to_coords, 'euclidean')\n                \n                # Find minimum distance\n                min_distance = np.min(distances)\n                \n                # Append result as \"from ID, to ID, distance\"\n                result.append([from_id, to_id, min_distance])\n    \n    return result\n### END SOLUTION\n```"], "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": ["```python\nresult = np.zeros((5, 100))\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k=2, s=4)\n    y_ext = interpolate.splev(x_val, tck, ext=3)\n    result[i] = y_ext\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": ["```python\ndata = [x1, x2, x3, x4]\nstatistic, critical_values, significance_level = ss.anderson_ksamp(data)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": ["```python\nresult = ss.anderson_ksamp([x1, x2]).statistic < ss.anderson_ksamp([x1, x2]).critical_values[2]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": ["import pandas as pd\nimport numpy as np\nimport scipy.stats as stats\n\ndef kendalltau_rolling(df, window):\n    def tau1(x):\n        y = df['A']\n        tau, p_value = stats.kendalltau(x, y)\n        return tau\n    \n    df['AB'] = df['B'].rolling(window).apply(tau1)\n    df['AC'] = df['C'].rolling(window).apply(tau1)\n    df['BC'] = df['B'].rolling(window).apply(lambda x: stats.kendalltau(x, df['C'])[0])\n    \n    return df\n\ndf = kendalltau_rolling(df, 3)\ndf"], "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": ["```python\nresult = my_csr_matrix.nnz == 0\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": ["result = sa.nnz == 0"], "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": ["```python\nresult = block_diag(*a)\n```\n```"], "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": ["```python\np_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": ["<code>\nimport numpy as np\nfrom scipy import stats\n\nexample_pre_course_scores = np.random.randn(10)\nexample_during_course_scores = np.random.randn(10)\n\ndef f(pre_course_scores=example_pre_course_scores, during_course_scores=example_during_course_scores):\n    result = stats.ranksums(pre_course_scores, during_course_scores)\n    p_value = result.pvalue\n    return p_value"], "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": ["```python\nkurtosis_result = ((a - np.mean(a)) ** 4).mean() / (np.std(a) ** 4)\n``` \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": ["kurtosis_result = scipy.stats.kurtosis(a, fisher=False)\n"], "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": ["```python\nimport numpy as np\nimport scipy.interpolate\n\n# Given data\ns = np.linspace(-1, 1, 50)\nt = np.linspace(-2, 0, 50)\nx, y = np.ogrid[-1:1:10j, -2:0:10j]\nz = (x + y) * np.exp(-6.0 * (x * x + y * y))\n\n# Interpolation\ninterp_func = scipy.interpolate.interp2d(s, t, z, kind='cubic')\n\n# Measured points\ns_measured = np.array([s1, s2])  # Insert your measured speed values here\nt_measured = np.array([t1, t2])  # Insert your measured temperature values here\n\n# Interpolate at measured points\nresult = interp_func(s_measured, t_measured).flatten()\n</code>\n```"], "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": ["```python\n    f_interp = scipy.interpolate.interp2d(x, y, z, kind='cubic')\n    result = [f_interp(s_val, t_val)[0] for s_val, t_val in zip(s, t)]\n    return result\n### END SOLUTION\n```"], "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": ["import numpy as np\n\n# Initialize an array to store the indices of the regions\nresult = np.zeros(len(extraPoints), dtype=int)\n\n# Iterate over each extra point\nfor i, point in enumerate(extraPoints):\n    # Find the index of the Voronoi region that contains the point\n    region_index = vor.point_region[i]\n    \n    # Store the region index in the result array\n    result[i] = region_index\n\nresult\n"], "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": ["```python\nimport numpy as np\n\n# Find the Voronoi cells containing the extra points\ncell_indices = np.zeros(len(extraPoints), dtype=int)\nfor i, point in enumerate(extraPoints):\n    region_index = vor.point_region[scipy.spatial.distance.cdist([point], vor.points).argmin()]\n    cell_indices[i] = region_index\n\n# Count the number of extra points in each Voronoi cell\ncell_counts = np.bincount(cell_indices)\n\nresult = cell_counts\n```\n```python\n</code>\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": ["<code>\n# Solution\npadded_vectors = [np.pad(vector, (0, max_vector_size - len(vector)), 'constant') for vector in vectors]\nsparse_matrix = sparse.csr_matrix(padded_vectors)\nresult = sparse_matrix\n</code>"], "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": ["```python\nb = scipy.ndimage.median_filter(a, size=3, origin=1)\n``` \n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": ["```python\nresult = M[row, column]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": ["```python\nresult = [M[row[i], column[i]] for i in range(len(row))]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": ["```python\nimport numpy as np\nfrom scipy.interpolate import interp1d\n\n# Sample data\narray = np.random.randint(0, 9, size=(10, 10, 10))\nx = np.linspace(0, 10, 10)\nx_new = np.linspace(0, 10, 100)\n\n# Interpolation along the first axis without loops\ninterp_array = interp1d(x, array, axis=0, kind='linear')\nnew_array = interp_array(x_new)\n\n# Checking the shape of new_array\nprint(new_array.shape)\n```\n"], "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": ["```python\nimport scipy.integrate\nimport math\nimport numpy as np\n\ndef NDfx(x):\n    return((1/math.sqrt((2*math.pi)))*(math.e**((-.5)*(x**2))))\n\nx = 2.5\nu = 1\no2 = 3\n\ndef NormalDistro(u, o2, x):\n    dev = abs((x - u) / o2)\n    P_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer / 2\n    return P\n\nprob = NormalDistro(u, o2, x)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": ["```python\nimport scipy.integrate\nimport math\nimport numpy as np\n\ndef NDfx(x):\n    return (1 / math.sqrt(2 * math.pi)) * math.exp(-0.5 * (x ** 2))\n\ndef NormalDistro(u, o2, x):\n    dev = abs((x - u) / o2)\n    P_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer / 2\n    return P\n\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": ["```python\nimport numpy as np\nimport scipy.fft as sf\n\nN = 8\n\ndef dctmtx(N):\n    n = np.arange(N)\n    k = n.reshape((N, 1))\n    M = np.sqrt(2.0 / N) * np.cos((np.pi / N) * (k + 0.5) * n)\n    M[0] /= np.sqrt(2)\n    return M\n\nresult = dctmtx(N)\n```\n```"], "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": ["```python\nfrom scipy import sparse\nimport numpy as np\n\nmatrix = np.array([[3.5,   13. ,   28.5,   50. ,   77.5],\n                   [-5. ,  -23. ,  -53. ,  -95. , -149. ],\n                   [2.5,   11. ,   25.5,   46. ,   72.5]])\n\nresult = sparse.diags([matrix[0, 1:], matrix[1], matrix[2, :-1]], [-1, 0, 1], format='csr').toarray()\n```\n```python\nEND SOLUTION\n```\n```python\n# Verify the result\nprint(result)\n```"], "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": ["import numpy as np\nimport scipy.stats\n\nN = 3\np = 0.5\n\nresult = np.zeros((N+1, N+1))\n\nfor i in range(N+1):\n    for j in range(i+1):\n        result[i,j] = scipy.stats.binom.pmf(j, i, p)\n\nEND SOLUTION\n<code>"], "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": ["result = df.apply(stats.zscore, axis=1)\n"], "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": ["```python\nresult = df.apply(stats.zscore, axis=0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": ["```python\nzscore_df = df.apply(stats.zscore, axis=1, result_type='broadcast')\nresult = pd.concat([df, zscore_df.rename(index=lambda x: x + ' zscore')], axis=0)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": ["```python\n# Calculate z-scores for each column\nz_scores = stats.zscore(df, nan_policy='omit', axis=0)\n# Round z-scores to 3 decimal places\nz_scores_rounded = np.round(z_scores, 3)\n# Combine original data and z-scores into a single DataFrame\nresult = pd.concat([df, pd.DataFrame(z_scores_rounded, index=df.index, columns=df.columns, suffixes=('_data', '_zscore'))])\n# Add appropriate row names for data and z-score rows\nresult.index = pd.MultiIndex.from_product([result.index, ['data', 'zscore']], names=['probegenes', None])\n</code>\n```"], "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": ["<code>\nimport scipy\nimport scipy.optimize\nimport numpy as np\n\ndef test_func(x):\n    return (x[0])**2 + (x[1])**2\n\ndef test_grad(x):\n    return np.array([2*x[0], 2*x[1]])\n\nstarting_point = np.array([1.8, 1.7])\ndirection = np.array([-1, -1])\n\nresult = scipy.optimize.line_search(test_func, test_grad, starting_point, direction)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": ["import numpy as np\nfrom scipy.spatial import distance\n\ndef get_distance_2(y, x):\n    mid = np.array([[(shape[0]-1)/2, (shape[1]-1)/2]])\n    return distance.cdist(np.dstack((y, x)), mid)\n\ny, x = np.indices(shape)\nresult = get_distance_2(y, x)\nresult"], "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": ["```python\nrows, cols = shape\ncenter_y, center_x = rows // 2, cols // 2\ny, x = np.indices(shape)\nmid = np.array([[center_y, center_x]])\nresult = np.abs(y - center_y) + np.abs(x - center_x)\n```"], "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": ["import numpy as np\nfrom scipy.spatial import distance\n\ndef f(shape=(6, 6)):\n    # Create a 2-dimensional array with the same shape as the input shape\n    rows, cols = shape\n    center = (rows // 2, cols // 2)\n    y, x = np.indices(shape)\n    \n    # Compute the Euclidean distance from the center to every point in the array\n    distances = distance.cdist(np.dstack((y, x)), [center])\n    \n    return distances\n\nresult = f(shape=(6, 6))\nprint(result)"], "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": ["```python\nimport numpy as np\nimport scipy.ndimage\n\nx = np.arange(9).reshape(3, 3)\nshape = (6, 8)\nresult = scipy.ndimage.zoom(x, np.min(np.array(shape) / np.array(x.shape)), order=1)\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": ["```python\ndef objective(x, a, y):\n    return np.sum((a.dot(x ** 2) - y) ** 2)\n\nresult = scipy.optimize.minimize(objective, x0, args=(a, y))\nout = result.x\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": ["```python\ndef func(x, a):\n    return np.dot(a, x**2)\n\ndef objective(x, a, y):\n    return np.sum((func(x, a) - y)**2)\n\nx0 = np.array([2, 3, 1, 4, 20])\nbounds = [(0, None)] * len(x0)  # No upper bounds, lower bounds already defined\nresult = scipy.optimize.minimize(objective, x0, args=(a, y), bounds=bounds, method='L-BFGS-B')\nout = result.x\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": ["```python\nimport scipy.integrate\nimport numpy as np\n\ndef dN1_dt_time_variant(t, N1):\n    return -100 * N1 + np.sin(t)\n\nN0 = 10\ntime_span = [-0.1, 0.1]\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_time_variant, t_span=time_span, y0=[N0,])\nresult = sol.y\n```\n```"], "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": ["```python\ndef dN1_dt_varying(t, N1):\n    return -100 * N1 + t - np.sin(t) if 0 < t < 2 * np.pi else 2 * np.pi\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_varying, t_span=time_span, y0=[N0,])\nresult = sol.y\n```\n```"], "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": ["```python\nimport scipy.integrate\nimport numpy as np\n\ndef dN1_dt_timevarying(t, N1, N0):\n    return -100 * N1 - np.cos(t)\n\nN0 = 10\ntime_span = [-0.1, 0.1]\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_timevarying, t_span=time_span, y0=[N0,], args=(N0,))\nresult = sol.y\n```\n```"], "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": ["```python\nfor t in range(4):\n    def const(x, t=t):    \n        y = x[t]\n        return y\n    cons.append({'type': 'ineq', 'fun': const})\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": ["```python\nresult = sparse.vstack([sa, sb])\n```\n```"], "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": ["```python\nresult = sparse.hstack([sa, sb])\n```\n```"], "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": ["import scipy.integrate\n\nc_values = [1, 2, 3, 4, 5]  # example values for c\nI = []\n\nfor c in c_values:\n    # define the function to integrate\n    def f(x):\n        return 2 * c * x\n\n    # integrate the function\n    result, error = scipy.integrate.quad(f, low, high)\n    I.append(result)\n\nprint(I)\n"], "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": ["```python\nimport scipy.integrate\nimport numpy as np\n\ndef f(c_values, low=0, high=1):\n    integrals = []\n    for c in c_values:\n        # Define the function to be integrated\n        def integrand(x):\n            return 2 * c * x\n        \n        # Integrate the function\n        result, error = scipy.integrate.quad(integrand, low, high)\n        \n        # Append the result to the list\n        integrals.append(result)\n    \n    return np.array(integrals)\n\n# Example usage:\nfrom numpy import loadtxt\n\nfn = 'cooltemp.dat'\nc_values = loadtxt(fn, unpack=True, usecols=[1])\n\nintegrals_array = f(c_values)\nprint(integrals_array)\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": ["```python\nfor i, j in V.keys():\n    V[i, j] += x\n```\n```python\nEND SOLUTION\n```\n```python\nprint(V)\n```"], "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": ["V.data += x\n"], "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": ["```python\n# Convert V to COO format\nV = V.tocoo()\n\n# Identify non-zero elements in V\nnonzero_indices = V.data.nonzero()[0]\n\n# Create a COO matrix with same shape as V, filled with zeros\nx_matrix = sparse.coo_matrix((V.data.size,), shape=V.shape)\n\n# Add scalar value x only to non-zero elements in V\nx_matrix.data = x * np.ones_like(nonzero_indices)\n\n# Add scalar value y to V + x_matrix\nB_data = V.data.copy()\nB_data[nonzero_indices] += x + y\n\n# Create B as a COO matrix\nB = sparse.coo_matrix((B_data, (V.row, V.col)), shape=V.shape)\n\n# Return B\nB\n```\n```"], "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": ["```python\nsa = sa.tocsc()\nfor col in range(sa.shape[1]):\n    column = sa[:, col].data\n    column_squared = [x**2 for x in column]\n    length = math.sqrt(sum(column_squared))\n    sa[:, col] = (1 / length) * column\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": ["```python\nsa = sa.tocsr()\n\nfor col in range(sa.shape[1]):\n    column_data = sa[:, col].data\n    squared_values = [x ** 2 for x in column_data]\n    column_length = math.sqrt(sum(squared_values))\n    sa[:, col] = (1 / column_length) * sa[:, col]\n```\n```python\nEND SOLUTION\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": ["```python\nthreshold = 1\nbinary_matrix = np.where(a >= threshold, 1, 0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": ["```python\nthreshold = 1\nbinary_matrix = np.where(a > threshold, 1, 0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": ["import numpy as np\nimport scipy.spatial\n\ncentroids = np.random.rand(5, 3)\ndata = np.random.rand(100, 3)\n\nresult = []\nfor centroid in centroids:\n    distances = scipy.spatial.distance.cdist(data, [centroid])\n    closest_index = np.argmin(distances)\n    result.append(closest_index)\n\nresult = np.array(result)\nEND SOLUTION\n"], "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": ["```python\nresult = []\nfor centroid in centroids:\n    cluster_indices = np.argwhere(np.all(data == centroid, axis=1)).flatten()\n    cluster_points = data[cluster_indices]\n    closest_point_index = scipy.spatial.distance.cdist([centroid], cluster_points).argmin()\n    result.append(cluster_points[closest_point_index])\nresult = np.array(result)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": ["```python\nresult = []\nfor centroid in centroids:\n    distances = scipy.spatial.distance.cdist(data, [centroid])\n    cluster_indices = np.argpartition(distances[:, 0], k)[:k]\n    closest_indices = cluster_indices[np.argsort(distances[cluster_indices, 0])]\n    result.append(closest_indices)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": ["```python\nresult = []\nfor x_val, b_val in zip(xdata, bdata):\n    def eqn_to_solve(a):\n        return eqn(x_val, a, b_val)\n    root = fsolve(eqn_to_solve, x0=0.5)\n    result.append(root)\nresult = np.array(result)\n```\n```"], "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": ["```python\ndef solve_for_b(x, a):\n    def equation_to_solve(b, x, a):\n        return eqn(x, a, b)\n\n    return fsolve(equation_to_solve, x0=0.5, args=(x, a))\n\nresult = [solve_for_b(x, a) for x, a in zip(xdata, adata)]\n```\n"], "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": ["<code>\n# Define the cumulative distribution function (CDF) based on the Bekkers function\ndef bekkers_cdf(x, a, m, d):\n    cdf, _ = integrate.quad(bekkers, 0, x, args=(a, m, d))\n    return cdf\n\n# Perform the Kolmogorov-Smirnov test using the Bekkers CDF and sample data\nks_statistic, p_value = stats.kstest(sample_data, lambda x: bekkers_cdf(x, estimated_a, estimated_m, estimated_d))\n\nresult = ks_statistic, p_value\n</code>"], "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": ["import numpy as np\nimport scipy as sp\nfrom scipy import integrate,stats\n\ndef bekkers(x, a, m, d):\n    p = a*np.exp((-1*(x**(1/3) - m)**2)/(2*d**2))*x**(-2/3)\n    return(p)\n\nrange_start = 1\nrange_end = 10\nestimated_a, estimated_m, estimated_d = 1,1,1\nsample_data = [1.5,1.6,1.8,2.1,2.2,3.3,4,6,8,9]\n\n# Generate a continuous distribution function using the estimated parameters\ndef continuous_distribution(x):\n    return bekkers(x, estimated_a, estimated_m, estimated_d)\n\n# Perform the Kolmogorov-Smirnov test\nresult = stats.kstest(sample_data, continuous_distribution)\n\n# Check if the null hypothesis can be rejected at 95% confidence level\nif result.pvalue < 0.05:\n    reject = True\nelse:\n    reject = False\n\nresult = reject\n"], "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": ["integral_df = df['A'].rolling(window=3).apply(lambda x: integrate.trapz(x, df.index[:3]))\n"], "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": ["```python\nimport scipy.interpolate\n\nx = [(2,2), (1,2), (2,3), (3,2), (2,1)]\ny = [5,7,8,10,3]\neval = [(2.7, 2.3)]\n\nresult = scipy.interpolate.griddata(x, y, eval, method='linear')\n```\n```"], "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": ["```python\ndef multinomial_neg_log_likelihood(weights, counts):\n    log_likelihood = 0\n    for count, weight in zip(counts, weights):\n        log_likelihood += count * np.log(weight)\n    return -log_likelihood\n\ncounts = a['A1'].value_counts().sort_index().values\ninitial_guess = np.ones(len(counts)) / len(counts)\nresult = sciopt.minimize(multinomial_neg_log_likelihood, initial_guess, args=(counts,))\nweights = result.x\n\n# Normalize weights to sum up to 1\nweights /= np.sum(weights)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(\"Category:\", list(range(len(weights))))\nprint(\"Weights:\", weights)\n```\n"], "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": ["```python\npopt = sciopt.minimize(e, x0=[1.0, 1.0], bounds=[(pmin[0], pmax[0]), (pmin[1], pmax[1])], args=(x, y))\nresult = popt.x\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": ["```python\nimport numpy as np\nfrom scipy import signal\n\narr = np.array([-624.59309896, -624.59309896, -624.59309896,\n                -625., -625., -625.,])\nn = 2\n\n# Find relative extrema using scipy's argrelextrema function\nindices = signal.argrelextrema(arr, np.less_equal, order=n)[0]\n\nresult = indices\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": ["```python\ndef find_extrema_indices(arr, n):\n    extrema_indices = []\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            element = arr[i][j]\n            neighbors = arr[i][max(0, j - n):j] + arr[i][j + 1:j + n + 1]\n            if all(element <= x for x in neighbors):\n                extrema_indices.append([i, j])\n    return extrema_indices\n\nresult = find_extrema_indices(arr, n)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": ["df = df.select_dtypes(include=[np.number])\ndf = df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]\ndf = pd.concat([df, df.select_dtypes(exclude=[np.number])], axis=1)\n"], "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": ["```python\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport pandas as pd\n\ndata = load_iris()\n\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n\ndata1.head()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": ["data1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n"], "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": ["data1 = pd.DataFrame(data.data, columns=data.feature_names)\n"], "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": ["data1 = pd.DataFrame(data.data, columns=data.feature_names)\nprint(data1.head())"], "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": ["```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Convert the lists in 'Col3' to one-hot encoded columns\nmlb = MultiLabelBinarizer()\nencoded_col3 = pd.DataFrame(mlb.fit_transform(df['Col3']), columns=mlb.classes_, index=df.index)\n\n# Concatenate the encoded columns with the original dataframe\ndf_out = pd.concat([df.drop(columns='Col3'), encoded_col3], axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df_out)\n```"], "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": ["import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Create sample dataframe\ndata = {'Col1': ['C', 'A', 'B'],\n        'Col2': [33, 2.5, 42],\n        'Col3': [['Apple', 'Orange', 'Banana'], ['Apple', 'Grape'], ['Banana']]}\ndf = pd.DataFrame(data)\n\n# Apply one-hot encoding to Col3\nmlb = MultiLabelBinarizer()\ndf_out = pd.concat([df[['Col1', 'Col2']], pd.DataFrame(mlb.fit_transform(df['Col3']), columns=mlb.classes_)], axis=1)\n\ndf_out\n"], "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": ["```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Assuming df is already loaded with your data\n# If not, replace `load_data()` with your data loading function\n\n# Transforming the list of elements into a list of lists\ndf['Col4'] = df['Col4'].apply(lambda x: [x] if isinstance(x, str) else x)\n\n# Initialize MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\n\n# Transform and merge the encoded columns into the original DataFrame\ndf_out = pd.concat([df.drop('Col4', axis=1), pd.DataFrame(mlb.fit_transform(df['Col4']), columns=mlb.classes_, index=df.index)], axis=1)\n</code>\n```"], "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": ["```python\n# One-hot encode the last column of the dataframe\ndf_out = pd.concat([df.iloc[:, :-1], pd.get_dummies(df.iloc[:, -1].apply(pd.Series).stack()).sum(level=0)], axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": ["```python\n# Extract unique elements from the last column and create new columns\nunique_elements = np.unique(np.concatenate(df.iloc[:, -1].values))\n# Create a DataFrame filled with zeros\ndf_out = pd.DataFrame(np.zeros((len(df), len(unique_elements)), dtype=int), columns=unique_elements)\n# Iterate over each row and set 1 where the element exists\nfor i, row in df.iterrows():\n    df_out.loc[i, row.iloc[-1]] = 1\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": ["```python\nfrom sklearn.calibration import CalibratedClassifierCV\nimport numpy as np\nimport pandas as pd\nimport sklearn.svm as suppmach\n\nX, y, x_test = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\nassert type(x_test) == np.ndarray\n\n# Fit model:\nsvmmodel = suppmach.LinearSVC()\nsvmmodel.fit(X, y)\n\n# Use CalibratedClassifierCV to get probability estimates\ncalibrated_svm = CalibratedClassifierCV(svmmodel, cv=5, method='sigmoid')\ncalibrated_svm.fit(X, y)\nproba = calibrated_svm.predict_proba(x_test)\n```\n```"], "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": ["```python\nfrom sklearn.calibration import CalibratedClassifierCV\n\ncalibrated_model = CalibratedClassifierCV(base_estimator=model, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_predict)\n```\n```"], "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": ["```python\n# Assuming transform_output is the output of OneHotEncoder and df_origin is the original dataframe\n# Convert the csr_matrix to a pandas DataFrame\ntransform_df = pd.DataFrame.sparse.from_spmatrix(transform_output)\n\n# Concatenate the original dataframe and the transformed dataframe horizontally\ndf = pd.concat([df_origin.reset_index(drop=True), transform_df.reset_index(drop=True)], axis=1)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": ["```python\n# Assuming df_origin is the original DataFrame and transform_output is the csr_matrix\n# Convert csr_matrix to DataFrame\ntransform_df = pd.DataFrame.sparse.from_spmatrix(transform_output)\n\n# Merge transform_df with df_origin using pd.concat along the columns axis\ndf = pd.concat([df_origin, transform_df], axis=1)\n```\n"], "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": ["```python\n    # Convert the csr_matrix to a pandas DataFrame\n    transform_output_df = pd.DataFrame.sparse.from_spmatrix(transform_output)\n\n    # Concatenate the original DataFrame and the transformed DataFrame\n    merged_df = pd.concat([df, transform_output_df], axis=1)\n\n    return merged_df\n```\n### END SOLUTION\n"], "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": ["# Get the current steps in the pipeline\nsteps = clf.named_steps\n\n# Delete a step by name\ndel steps['poly']\n\n# Verify that the step has been deleted\nprint(steps)\n\n# Output: {'reduce_dim': PCA(), 'svm': SVC()}\nEND SOLUTION\n"], "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": ["# Delete a step from the pipeline\nsteps = clf.named_steps\ndel steps['reduce_poly']\n\n# Verify that the step has been deleted\nprint(steps.keys())\nprint(clf.steps)\n\n# Insert a step into the pipeline\nsteps['new_step'] = SVC()\n\n# Verify that the step has been inserted\nprint(steps.keys())\nprint(clf.steps)\n"], "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": ["```python\n# Delete the 2nd step\nsteps = clf.named_steps()\ndel steps['pOly']\n```"], "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": ["```python\n# Inserting a step\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# Original pipeline\nestimators = [('reduce_dim', PCA()), ('svm', SVC())]\nclf = Pipeline(estimators)\n\n# Inserting PolynomialFeatures before SVC\nclf.steps.insert(1, ('poly', PolynomialFeatures()))\n\n# Updated pipeline\nprint(clf)\n```\n```python\n# Deleting a step\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\n\n# Original pipeline\nestimators = [('reduce_dim', PCA()), ('svm', SVC())]\nclf = Pipeline(estimators)\n\n# Removing the 'reduce_dim' step\ndel clf.named_steps['reduce_dim']\n\n# Updated pipeline\nprint(clf)\n```\n```python\n# Both insert and delete a step\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# Original pipeline\nestimators = [('reduce_dim', PCA()), ('svm', SVC())]\nclf = Pipeline(estimators)\n\n# Inserting PolynomialFeatures before SVC and then removing 'reduce_dim' step\nclf.steps.insert(1, ('poly', PolynomialFeatures()))\ndel clf.named_steps['reduce_dim']\n\n# Updated pipeline\nprint(clf)\n```\n"], "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": ["```python\n# Insert any step\nsteps = clf.named_steps()\nsteps.insert(1, ('new_step', SVC()))\nclf.steps = steps\n```\n```python\n# Delete a step\nsteps = clf.named_steps()\ndel steps[0]\nclf.steps = steps\n```"], "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": ["```python\n# Insert ('t1919810', PCA()) right before 'svdm'\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures\n\nestimators = [('reduce_dIm', PCA()), ('pOly', PolynomialFeatures()), ('svdm', SVC())]\nclf = Pipeline(estimators)\n\n# Inserting 't1919810' PCA() before 'svdm'\nnew_step = ('t1919810', PCA())\nsteps = clf.named_steps\nsteps.insert(steps.index('svdm'), new_step)\nprint(clf)\n```\n```"], "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": ["```python\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [[testX, testY]]}\n\nmodel = xgb.XGBRegressor()\n\ngrid_search = GridSearchCV(estimator=model, param_grid=paramGrid, verbose=verbose, cv=TimeSeriesSplit(n_splits=cv).get_n_splits([trainX, trainY]), n_jobs=n_jobs, iid=iid)\n\ngrid_search.fit(trainX, trainY, **fit_params)\n\nb = grid_search.best_score_\nc = grid_search.predict(testX)\n```"], "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport xgboost.sklearn as xgb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import TimeSeriesSplit\n\n# Assuming you have loaded your data and initialized gridsearch, testX, testY, trainX, trainY\n# Here's an example with placeholder values\n\ndef load_data():\n    # Placeholder function, replace with your actual data loading code\n    gridsearch = GridSearchCV(estimator=xgb.XGBRegressor(),\n                              param_grid={'max_depth': [3, 5, 7],\n                                          'learning_rate': [0.1, 0.01, 0.001]},\n                              verbose=1,\n                              cv=TimeSeriesSplit(n_splits=3).get_n_splits([trainX, trainY]),\n                              n_jobs=-1)\n    trainX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  # Placeholder data\n    trainY = [10, 20, 30]  # Placeholder data\n    testX = [[2, 3, 4], [5, 6, 7]]  # Placeholder data\n    testY = [15, 25]  # Placeholder data\n    return gridsearch, testX, testY, trainX, trainY\n\ngridsearch, testX, testY, trainX, trainY = load_data()\nassert type(gridsearch) == GridSearchCV\nassert type(trainX) == list\nassert type(trainY) == list\nassert type(testX) == list\nassert type(testY) == list\n\n# Applying GridSearch with early stopping\nfit_params = {\"early_stopping_rounds\": 42,\n              \"eval_metric\": \"mae\",\n              \"eval_set\": [(testX, testY)]}\n\ngridsearch.fit(trainX, trainY, **fit_params)\n\n# Accessing results\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n</code>\n```"], "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": ["```python\nproba_list = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba = logreg.predict_proba(X_test)\n    proba_list.append(proba)\nproba = np.array(proba_list)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": ["```python\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test)[:, 1])\nproba = np.array(proba)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": ["```python\ninversed = scaler.inverse_transform(scaled)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(\"Example of inverse transformed time:\", inversed[0])\n```\n"], "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": ["```python\n    inversed = scaler.inverse_transform(scaled)\n    ### END SOLUTION\n    return inversed\nsolution = solve(data, scaler, scaled)\nprint(solution)\n```"], "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": ["<code>\nimport re\n\nmodel_name = re.search(r'([^\\(]+)', str(model)).group().split('.')[-1]\n</code>\n</code>"], "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": ["<code>\nimport re\n\nmodel_name = re.match(r\"([a-zA-Z]+)\", str(model)).group(1)\n</code>\n</code>"], "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": ["<code>\nmodel_name = model.__class__.__name__\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": ["tf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n"], "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": ["tf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n"], "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": ["select_out = pipe.named_steps['select'].fit_transform(data, target)\n"], "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\n\nX_train, y_train = load_data()\nassert type(X_train) == np.ndarray\nassert type(y_train) == np.ndarray\nX_test = X_train\nparam_grid = {\n    'base_estimator__max_depth': [1, 2, 3, 4, 5],\n    'max_samples': [0.05, 0.1, 0.2, 0.5]\n}\ndt = DecisionTreeClassifier()\nbc = BaggingClassifier(dt, n_estimators=20, max_features=0.5)\nclf = GridSearchCV(bc, param_grid)\nproba = clf.fit(X_train, y_train).predict_proba(X_test)\n```\n```"], "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": ["```python\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=2, random_state=42)\nrgr = regressor.fit(X.reshape(-1, 1), y)\npredict = rgr.predict(X_test.reshape(-1, 1))\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": ["regressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nregressor.fit(X, y)\npredict = regressor.predict(X_test)\n"], "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Define preprocess function\ndef preprocess(s):\n    return s.upper()\n\n# Example data\ndocuments = [\n    \"This is the first document.\",\n    \"This document is the second document.\",\n    \"And this is the third one.\",\n    \"Is this the first document?\",\n]\n\n# Create TfidfVectorizer with custom preprocessor\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n\n# Fit and transform the data\ntfidf_matrix = tfidf.fit_transform(documents)\n\n# Show the feature names\nprint(tfidf.get_feature_names_out())\n```\n```"], "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": ["```python\ndef prePro(text):\n    return text.lower()  # Convert text to lowercase\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n\n# Example usage:\ncorpus = [\"This is a SAMPLE text with CAPITAL letters.\", \"Another example with MORE CAPITALS.\"]\ntfidf.fit(corpus)\ntfidf_transformed = tfidf.transform(corpus)\nprint(tfidf_transformed.toarray())\n```\n```"], "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": ["df_out = pd.DataFrame(preprocessing.scale(data), index=data.index, columns=data.columns)\n"], "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": ["```python\nscaled_data = preprocessing.scale(data)\ndf_out = pd.DataFrame(scaled_data, index=data.index, columns=data.columns)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": ["```python\ngrid.fit(X, y)\ncoef = grid.best_estimator_.named_steps['model'].coef_\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": ["```python\ngrid.fit(X, y)\ncoef = grid.best_estimator_['model'].coef_\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": ["<code>\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\n# Load data\ndf = pd.read_csv('los_10_one_encoder.csv')\ny = df['LOS'] # target\nX= df.drop('LOS',axis=1) # drop LOS column\n\n# Train ExtraTreesClassifier\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\n\n# Perform feature selection\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\n\n# Get selected feature column names\nselected_indices = model.get_support(indices=True)\ncolumn_names = X.columns[selected_indices]\n</code>"], "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": ["model = SelectFromModel(clf, prefit=True)\nselected_features = model.get_support()\ncolumn_names = X.columns[selected_features]\n"], "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": ["model = SelectFromModel(clf, prefit=True)\nselected_features = model.get_support()\ncolumn_names = X.columns[selected_features]\n"], "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": ["```python\nselected_indices = model.get_support(indices=True)\ncolumn_names = X.columns[selected_indices].tolist()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": ["```python\nclosest_50_samples = X[np.argpartition(np.sum((X - km.cluster_centers_[p])**2, axis=1), 50)[:50]]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\np, X = load_data()\nassert type(X) == np.ndarray\n\nkm = KMeans()\nkm.fit(X)\n\n# Get the cluster centers\ncenters = km.cluster_centers_\n\n# Get the distances from each sample to the p^th center\ndistances = np.linalg.norm(X - centers[p], axis=1)\n\n# Get the indices of the 50 samples with the smallest distances\nclosest_indices = np.argsort(distances)[:50]\n\n# Get the actual samples\nclosest_50_samples = X[closest_indices]\n"], "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\np, X = load_data()\nassert type(X) == np.ndarray\n\nkm = KMeans()\nkm.fit(X)\n\n# Get the coordinates of the p^th cluster center\ncenter = km.cluster_centers_[p]\n\n# Calculate the Euclidean distance between each sample and the center\ndistances = np.linalg.norm(X - center, axis=1)\n\n# Sort the samples based on their distances to the center\nsorted_indices = np.argsort(distances)\n\n# Get the 100 samples closest to the center\nclosest_100_samples = X[sorted_indices[:100]]\n"], "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": ["<code>\n    # Fit the k-means algorithm on the data\n    km.fit(X)\n    \n    # Get the cluster centers\n    centers = km.cluster_centers_\n    \n    # Get the distances between each sample and the p^th center\n    distances = np.linalg.norm(X - centers[p], axis=1)\n    \n    # Sort the samples based on their distances\n    sorted_samples = X[np.argsort(distances)]\n    \n    # Get the 50 closest samples to the p^th center\n    closest_samples = sorted_samples[:50]\n    \n    return closest_samples"], "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": ["X_train = pd.get_dummies(X_train, columns=[0])\n"], "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": ["```python\n# One Hot Encoding categorical variables using get_dummies\ncategorical_columns = [0]  # Assuming the categorical variable is in the first column\nX_train_categorical = pd.get_dummies(X_train[categorical_columns], columns=categorical_columns)\n\n# Dropping the original categorical variable from X_train\nX_train.drop(categorical_columns, axis=1, inplace=True)\n\n# Concatenating the one-hot encoded categorical variables with the remaining features\nX_train = pd.concat([X_train, X_train_categorical], axis=1)\n```\n</code>"], "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": ["```python\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import make_regression\n\n# Generate some data for example\nX, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)\n\n# Fit SVR model with gaussian kernel\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\n\n# Predict\npredict = svr.predict(X)\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": ["```python\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import load_data\n\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n\n# Using Support Vector Regression with a Gaussian kernel\nregressor = SVR(kernel='rbf')\nregressor.fit(X, y)\n\n# Predicting\npredict = regressor.predict(X)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": ["```python\nfrom sklearn.svm import SVR\n\n# Assuming load_data() loads your data\ndef load_data():\n    # Load your data here\n    pass\n\nX, y = load_data()\n\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n\n# Using Support Vector Regression with polynomial kernel\nsvr_poly = SVR(kernel='poly', degree=2)\nsvr_poly.fit(X, y)\npredict = svr_poly.predict(X)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": ["```python\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import load_data\n\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n\nsvm_regressor = SVR(kernel='poly', degree=2)\nsvm_regressor.fit(X, y)\npredict = svm_regressor.predict(X)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": ["```python\ncosine_similarities_of_queries = np.zeros((len(queries), len(documents)))\n\nfor i, query in enumerate(queries):\n    query_tfidf = tfidf.transform([query])\n    cosine_similarities = np.dot(query_tfidf, tfidf_matrix.T).toarray()[0]\n    cosine_similarities_of_queries[i] = cosine_similarities\n\ncosine_similarities_of_queries = pd.DataFrame(cosine_similarities_of_queries, columns=['Doc 1', 'Doc 2', 'Doc 3', 'Doc 4', 'Doc 5'])\n```\n```"], "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": ["```python\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Assume 'queries' is a list of strings representing queries\n# and 'documents' is a list of strings representing documents\n\n# Transform queries and documents into TF-IDF vectors\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_documents = tfidf_vectorizer.fit_transform(documents)\ntfidf_queries = tfidf_vectorizer.transform(queries)\n\n# Calculate cosine similarities between queries and documents\ncosine_similarities_of_queries = cosine_similarity(tfidf_queries, tfidf_documents)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": ["<code>\n    cosine_similarities_of_queries = []\n    for query in queries:\n        query_tfidf = tfidf.transform([query])\n        similarities = np.dot(query_tfidf, tfidf.T)\n        cosine_similarities_of_queries.append(similarities.toarray()[0])\n    return cosine_similarities_of_queries\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": ["import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\nmlb = MultiLabelBinarizer()\nnew_features = pd.DataFrame(mlb.fit_transform(features), columns=mlb.classes_)\n"], "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": ["```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nf = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n\nmlb = MultiLabelBinarizer()\nnew_f = pd.DataFrame(mlb.fit_transform(f), columns=mlb.classes_, index=['r'+str(i+1) for i in range(len(f))])\n\nprint(new_f)\n```\n"], "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": ["```python\n# Convert features to a binary matrix\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_features = pd.DataFrame(mlb.fit_transform(features), columns=mlb.classes_, index=np.arange(1, len(features) + 1))\n\n# Reorder columns\nnew_features = new_features.reindex(sorted(new_features.columns), axis=1)\n```\n"], "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": ["<code>\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\ndef solve(features):\n    mlb = MultiLabelBinarizer()\n    transformed_features = mlb.fit_transform(features)\n    df = pd.DataFrame(transformed_features, columns=mlb.classes_)\n    return df\n\nnew_features = solve(features)\nprint(new_features)"], "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": ["```python\n# Convert features to a 2D-array using pandas and sklearn\nimport pandas as pd\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n\n# Use MultiLabelBinarizer to convert list of labels to binary matrix\nmlb = MultiLabelBinarizer()\nnew_features = pd.DataFrame(mlb.fit_transform(features), columns=mlb.classes_)\n\nprint(new_features)\n```\n```"], "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": ["from sklearn.cluster import AgglomerativeClustering\n\n# Create an instance of AgglomerativeClustering\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\n\n# Fit the data matrix to the clustering model\nclustering.fit(data_matrix)\n\n# Get the labels assigned to each data point\ncluster_labels = clustering.labels_\n"], "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\n\ndata_matrix = [[0, 0.8, 0.9], [0.8, 0, 0.2], [0.9, 0.2, 0]]\n\n# Performing hierarchical clustering\nclustering = sklearn.cluster.AgglomerativeClustering(n_clusters=2, linkage='average', affinity='precomputed')\ncluster_labels = clustering.fit_predict(data_matrix)\n</code>\n</code>"], "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\n\nsimM=[[0,0.6,0.8],[0.6,0,0.111],[0.8,0.111,0]]\n\n# Perform hierarchical clustering\nclustering = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average').fit(simM)\ncluster_labels = clustering.labels_\n</code>\n</code>"], "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\n\ndata_matrix = [[0, 0.8, 0.9], [0.8, 0, 0.2], [0.9, 0.2, 0]]\n\n# Perform hierarchical clustering\ndistance_matrix = 1 - np.array(data_matrix)\nlinkage_matrix = scipy.cluster.hierarchy.linkage(scipy.spatial.distance.squareform(distance_matrix), method='average')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n\ncluster_labels.tolist()\n```\n"], "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": ["import numpy as np\nimport pandas as pd\nimport scipy.cluster.hierarchy as sch\n\ndata_matrix = np.array([[0,0.8,0.9],[0.8,0,0.2],[0.9,0.2,0]])\n\n# Perform hierarchical clustering\nlinkage_matrix = sch.linkage(data_matrix, method='complete')\ncluster_labels = sch.fcluster(linkage_matrix, 2, criterion='maxclust')\n\ncluster_labels"], "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\n\nsimM = [[0, 0.6, 0.8], [0.6, 0, 0.111], [0.8, 0.111, 0]]\n\nlinkage_matrix = scipy.cluster.hierarchy.linkage(np.array(simM), method='single')\ncluster_labels = scipy.cluster.hierarchy.cut_tree(linkage_matrix, n_clusters=2).flatten().tolist()\n</code>\n</code>"], "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": ["from sklearn.preprocessing import StandardScaler\n\n# Create an instance of the StandardScaler\nscaler = StandardScaler()\n\n# Fit the scaler to the data and transform it\ncentered_scaled_data = scaler.fit_transform(data)\n"], "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": ["from sklearn.preprocessing import StandardScaler\n\n# Assuming data is a numpy array\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n"], "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": ["<code>\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming 'data' is your dataset\n# Initialize PowerTransformer\npt = PowerTransformer(method='box-cox')\n\n# Fit and transform the data\nbox_cox_data = pt.fit_transform(data)\n</code>\n</code>"], "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming data is loaded and stored in the variable 'data'\ndata = load_data()\n\n# Check if data is in the form of a numpy array\nassert type(data) == np.ndarray\n\n# Initialize PowerTransformer object for Box-Cox transformation\nbox_cox_transformer = PowerTransformer(method='box-cox')\n\n# Fit and transform the data using the Box-Cox transformation\nbox_cox_data = box_cox_transformer.fit_transform(data)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\nimport numpy as np\nimport pandas as pd\n\ndata = load_data()\nassert type(data) == np.ndarray\n\nyeo_johnson_transformer = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = yeo_johnson_transformer.fit_transform(data)\n```\n```python\n# END SOLUTION\n```\n"], "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": ["from sklearn.preprocessing import PowerTransformer\n\n# Assuming your data is stored in a variable called \"data\"\ntransformer = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = transformer.fit_transform(data)\n"], "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": ["```python\nvectorizer = CountVectorizer(token_pattern=r'\\b\\w+\\b|[\\!\\?\\\"\\'\\,]')\ntransformed_text = vectorizer.fit_transform([text])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": ["```python\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into features (x) and target class (y)\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\n# Split data into training and testing sets (80/20)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n```\n```"], "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": ["from sklearn.model_selection import train_test_split\n\n# Splitting the dataset into features (x) and target (y)\nx = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\n# Splitting the dataset into training set and testing set\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n"], "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": ["```python\nfrom sklearn.model_selection import train_test_split\n\n# Splitting the dataset into training and testing sets (3:2 ratio)\nx = dataset.iloc[:, :-1]  # All columns except the last one\ny = dataset.iloc[:, -1]   # Last column (target class)\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=42)\n\n# Further split the training and testing sets into x and y\nx_train, x_test = x_train.values, x_test.values\ny_train, y_test = y_train.values, y_test.values\n</code>\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n\n# Split the dataset into training and testing sets\ntrain_data, test_data = train_test_split(dataset, test_size=0.2, random_state=42)\n\n# Split the training set into features (x) and target class (y)\nx_train = train_data.iloc[:, :-1]\ny_train = train_data.iloc[:, -1]\n\n# Split the testing set into features (x) and target class (y)\nx_test = test_data.iloc[:, :-1]\ny_test = test_data.iloc[:, -1]\n\n# Print the shapes of the resulting datasets\nprint(\"x_train shape:\", x_train.shape)\nprint(\"y_train shape:\", y_train.shape)\nprint(\"x_test shape:\", x_test.shape)\nprint(\"y_test shape:\", y_test.shape)\n```\n\nThis code uses the `train_test_split` function from the `sklearn.model_selection` module to split the dataset into training and testing sets. The `test_size` parameter is set to 0.2, which means that 20% of the data will be used for testing and 80% for training. The `random_state` parameter is set to 42 to ensure reproducibility.\n\nAfter splitting the dataset, the code assigns the features (x) and target class (y) for both the training and testing sets. The features are obtained by selecting all columns except the last one using the `iloc` function. The target class is obtained by selecting only the last column.\n\nFinally, the code prints the shapes of the resulting datasets to verify that the splitting was done correctly."], "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": ["import numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"generate_csv/all_data_device.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\nX = np.array(list(zip(f1)))\nkmeans = KMeans(n_clusters=2, n_init=10).fit(X)\nlabels = kmeans.predict(X)\nEND SOLUTION\n<code>"], "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\ndf = pd.read_csv(\"file.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\nf2 = np.arange(len(f1)).reshape(-1, 1)\nX = np.concatenate((f1.reshape(-1, 1), f2), axis=1)\nkmeans = KMeans(n_clusters=2, n_init=10).fit(X)\nlabels = kmeans.labels_\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": ["import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\n\ncorpus, y = load_data()\nassert type(corpus) == list\nassert type(y) == list\n\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(corpus)\n\nclf = LinearSVC(penalty='l1')\nclf.fit(X, y)\n\nselected_feature_indices = np.where(clf.coef_ != 0)[1]\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_feature_indices]\nEND SOLUTION\n"], "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": ["```python\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn.feature_selection import SelectFromModel\n\n# Load data\ndef load_data():\n    newsgroups_train = fetch_20newsgroups(subset='train')\n    corpus = newsgroups_train.data\n    y = newsgroups_train.target\n    return corpus, y\n\ncorpus, y = load_data()\n\n# Assert data types\nassert type(corpus) == list\nassert type(y) == list\n\n# Vectorize text\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(corpus)\n\n# Perform feature selection using LinearSVC with L1 regularization\nlsvc = LinearSVC(penalty='l1', dual=False).fit(X, y)\nmodel = SelectFromModel(lsvc, prefit=True)\nX_new = model.transform(X)\n\n# Get selected feature names\nselected_feature_names = np.array(vectorizer.get_feature_names())[model.get_support()]\n\n# Ensure the number of selected features matches\nassert len(selected_feature_names) == X_new.shape[1]\n```\n```python\n</code>"], "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": ["```python\ndef solve(corpus, y, vectorizer, X):\n    # Fit LinearSVC model with L1 penalty\n    model = LinearSVC(penalty='l1', dual=False)\n    model.fit(X, y)\n    \n    # Get the coefficients of the model\n    coef = model.coef_\n    \n    # Get the indices of the non-zero coefficients\n    nonzero_indices = np.nonzero(coef)[1]\n    \n    # Get the feature names from the vectorizer\n    feature_names = vectorizer.get_feature_names()\n    \n    # Get the selected feature names\n    selected_feature_names = [feature_names[i] for i in nonzero_indices]\n    \n    return selected_feature_names\n\nselected_feature_names = solve(corpus, y, vectorizer, X)\n```"], "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": ["```python\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n```\n```python\nprint(feature_names)\nprint(X.toarray())\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": ["```python\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n```\n```python\nEND SOLUTION\nprint(feature_names)\nprint(X.toarray())\n```"], "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": ["vectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n"], "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": ["vectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n"], "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": ["```python\nslopes = []\n\nfor col in df1.columns:\n    if col != 'Time':  # Skip 'Time' column\n        df_temp = df1[~np.isnan(df1[col])]  # Remove NaN values for each column\n        df_temp = df_temp[['Time', col]]  # Select only 'Time' and the current column\n        npMatrix = np.matrix(df_temp)\n        X, Y = npMatrix[:, 0], npMatrix[:, 1]\n        slope = LinearRegression().fit(X, Y)\n        m = slope.coef_[0]\n        slopes.append(m)\n\nslopes = np.array(slopes)\n```\n```"], "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndf1 = load_data()  # Assuming load_data() loads your dataframe\n\nslopes = []\n\nfor col in df1.columns:\n    if col != 'Time':  # Skip 'Time' column\n        df_temp = df1[~np.isnan(df1[col])]  # Remove NaN values from the column\n        if not df_temp.empty:  # Check if dataframe is not empty after removing NaN values\n            X = df_temp['Time'].values.reshape(-1, 1)  # Independent variable (Time)\n            Y = df_temp[col].values.reshape(-1, 1)  # Dependent variable (column values)\n            slope = LinearRegression().fit(X, Y)  # Fit linear regression model\n            m = slope.coef_[0][0]  # Slope coefficient\n            slopes.append(m)\n\nslopes = np.array(slopes)\n```\n```"], "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\n# Load the data\ndf = pd.read_csv('titanic.csv')\n\n# Create an instance of LabelEncoder\nle = LabelEncoder()\n\n# Fit and transform the 'Sex' column\ndf['Sex'] = le.fit_transform(df['Sex'])\n\n# Print the transformed dataframe\nprint(df)\n"], "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": ["df['Sex'] = LabelEncoder().fit_transform(df['Sex'])\n"], "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": ["```python\n    le = LabelEncoder()\n    df['Sex'] = le.fit_transform(df['Sex'])\n    return df\n### END SOLUTION\n```"], "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": ["from sklearn import linear_model\n\nElasticNet = linear_model.ElasticNet() # create an ElasticNet instance\nElasticNet.fit(X_train, y_train) # fit data\n\nprint (\"R^2 for training set:\")\nprint (ElasticNet.score(X_train, y_train))\n\nprint ('-'*50)\n\nprint (\"R^2 for test set:\")\nprint (ElasticNet.score(X_test, y_test))\n"], "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": ["```python\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": ["scaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n"], "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": ["```python\n    scaler = MinMaxScaler()\n    flat_array = a.flatten().reshape(-1, 1)\n    scaled_array = scaler.fit_transform(flat_array)\n    new_a = scaled_array.reshape(a.shape)\n    return new_a\n### END SOLUTION\n```"], "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": ["close_buy1 = close[:-1]\nm5 = ma_50[:-1]\nm10 = ma_100[:-1]\nma20 = ma_200[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict(b)\n"], "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = [['asdf', '1'], ['asdf', '0']]\nclf = DecisionTreeClassifier()\n\n# Convert string data to numerical data\nnew_X = []\nfor row in X:\n    new_row = []\n    for value in row:\n        if isinstance(value, str):\n            new_row.append(ord(value))\n        else:\n            new_row.append(value)\n    new_X.append(new_row)\n\n# Train the model\nclf.fit(new_X, ['2', '3'])\nEND SOLUTION\n"], "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": ["```python\n# Import necessary libraries\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Original data\nX = [['asdf', '1'], ['asdf', '0']]\n\n# Transform string data to numerical values\nlabel_encoder = LabelEncoder()\nnew_X = np.array(X)\nfor i in range(new_X.shape[1]):\n    new_X[:, i] = label_encoder.fit_transform(new_X[:, i])\n\n# Create and train DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf.fit(new_X, ['2', '3'])\n```\n```"], "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = [['dsa', '2'], ['sato', '3']]\nclf = DecisionTreeClassifier()\n\n# Convert string data to numerical data\nnew_X = []\nfor row in X:\n    new_row = []\n    for value in row:\n        if isinstance(value, str):\n            new_row.append(ord(value))\n        else:\n            new_row.append(value)\n    new_X.append(new_row)\n\n# Train the model\nclf.fit(new_X, ['4', '5'])\n"], "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": ["```python\n# Separate the data into dependent and independent variables\nX = dataframe.drop(columns=['Class']).astype(float)\ny = dataframe['Class']\n\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n\n# Example prediction\nexample_data = np.array([[3, 260, 12, 3, 40, 7236, 1050, 37, 160, 0, 0]])\nprediction = logReg.predict(example_data)\nprint(\"Example Prediction:\", prediction)\n```\n```plaintext\nOutput:\nExample Prediction: [0]\n```\n"], "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": ["```python\n# Extracting features (X) and target variable (y)\nX = dataframe.iloc[:, 1:-1].astype(float)  # Excluding the last column which is the target variable\ny = dataframe.iloc[:, -1]\n\n# Creating a Logistic Regression model\nlogReg = LogisticRegression()\n\n# Fitting the model with the data\nlogReg.fit(X, y)\n\n# Making predictions\npredict = logReg.predict(X)\n```\n```"], "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": ["```python\ntrain_size = 0.2\ntotal_size = len(features_dataframe)\ntrain_end_index = int(total_size * train_size)\n\ntrain_dataframe = features_dataframe.iloc[:train_end_index]\ntest_dataframe = features_dataframe.iloc[train_end_index:]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": ["```python\n# Calculate the index to split the data based on the desired train/test ratio\nsplit_index = int(len(features_dataframe) * 0.8)\n\n# Split the data into train and test sets\ntrain_dataframe = features_dataframe.iloc[split_index:]\ntest_dataframe = features_dataframe.iloc[:split_index]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndef solve(features_dataframe):\n    # Sorting the dataframe by date\n    features_dataframe = features_dataframe.sort_values(by='date')\n    \n    # Calculating the split index\n    split_index = int(len(features_dataframe) * 0.2)\n    \n    # Splitting the data into train and test sets\n    train_dataframe = features_dataframe.iloc[:split_index]\n    test_dataframe = features_dataframe.iloc[split_index:]\n    \n    return train_dataframe, test_dataframe\n\n# Example usage:\n# train_set, test_set = solve(features_dataframe)\n```"], "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": ["```python\ndf_scaled = df.copy()\n\nscaler = MinMaxScaler()\n\ncols = ['X2', 'X3']\n\nfor month, group in df.groupby('Month'):\n    scaled_data = scaler.fit_transform(group[cols])\n    df_scaled.loc[group.index, ['X2_scale', 'X3_scale']] = scaled_data\n\ndf_scaled[['X2_scale', 'X3_scale']] = df_scaled[['X2_scale', 'X3_scale']].fillna(method='ffill')\n\ndf_scaled[['X2_scale', 'X3_scale']] = df_scaled[['X2_scale', 'X3_scale']].fillna(method='bfill')\n\ndf_scaled[['X2_scale', 'X3_scale']] = df_scaled[['X2_scale', 'X3_scale']].fillna(0)\n\ndf_scaled[['X2_scale', 'X3_scale']] = df_scaled[['X2_scale', 'X3_scale']].clip(0, 1)\n```\n```"], "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": ["```python\nmyData['new_A2'] = myData.groupby('Month')['A2'].transform(lambda x: scaler.fit_transform(np.array(x).reshape(-1, 1)))\nmyData['new_A3'] = myData.groupby('Month')['A3'].transform(lambda x: scaler.fit_transform(np.array(x).reshape(-1, 1)))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": ["```python\ncount = CountVectorizer(lowercase=False)\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names()\nprint(feature_names)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nwords = \"ha @ji me te no ru bu ru wa, @na n te ko to wa na ka tsu ta wa. wa ta shi da ke no mo na ri za, mo u to kku ni #de a 't te ta ka ra\"\n\ncount = CountVectorizer(lowercase=False)\n\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\n\n# Custom sorting based on example output\nsorted_feature_names = sorted(feature_names, key=lambda x: (x.startswith('@'), x.startswith('#'), x))\n\nprint(sorted_feature_names)\n```\n"], "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": ["```python\n# Assuming GridSearch_fitted is already defined with the GridSearchCV object\n\n# Extracting full results\nresults_df = pd.DataFrame(GridSearch_fitted.cv_results_)\n\n# Printing full results\nprint(results_df)\n\n# Accessing best parameters and best score\nbest_params = GridSearch_fitted.best_params_\nbest_score = GridSearch_fitted.best_score_\nprint(\"Best Parameters:\", best_params)\nprint(\"Best Score:\", best_score)\n```\n"], "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": ["```python\nresults_df = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results = results_df.sort_values(by='mean_fit_time')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": ["```python\nfrom sklearn.ensemble import IsolationForest\nimport joblib\n\n# Assuming you have a function named `load_data()` that loads your clean data\n\ndef train_and_save_model():\n    clean_data = load_data()\n    model = IsolationForest()\n    model.fit(clean_data)\n    joblib.dump(model, \"sklearn_model.pkl\")\n\ndef load_saved_model():\n    return joblib.load(\"sklearn_model.pkl\")\n\n# Uncomment the following line if you want to train the model and save it\n# train_and_save_model()\n\n# Load the saved model for later use\nfitted_model = load_saved_model()\n```"], "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": ["```python\ntfidf_matrix = tfidf.fit_transform(df['description'])\n\ncosine_similarity_matrix = sklearn.metrics.pairwise.cosine_similarity(tfidf_matrix)\n\n# Create a DataFrame for the similarity matrix\nsimilarity_df = pd.DataFrame(cosine_similarity_matrix, index=df['items'], columns=df['items'])\n\n# Print the similarity matrix\nprint(similarity_df)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": ["```python\noptim = torch.optim.SGD(..., lr=0.01)\n\n# During training loop:\nfor epoch in range(num_epochs):\n    # Your training code here...\n    \n    # Check if you want to change learning rate\n    if some_condition:\n        for param_group in optim.param_groups:\n            param_group['lr'] = 0.001\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": ["optim.param_groups[0]['lr'] = 0.001"], "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": ["```python\noptim = torch.optim.SGD(..., lr=0.005)\n\n# During training loop\nfor epoch in range(num_epochs):\n    # Train your model\n    train_model(...)\n    \n    # Perform tests to decide whether to change learning rate\n    if some_condition_met:\n        for param_group in optim.param_groups:\n            param_group['lr'] = 0.0005  # Change learning rate dynamically\n\n# Continue training with the updated learning rate\n```\n"], "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": ["import numpy as np\nimport pandas as pd\nimport torch\n\n# Define your custom optimizer\nclass CustomOptimizer(torch.optim.Optimizer):\n    def __init__(self, params, lr=0.005):\n        self.lr = lr\n        super(CustomOptimizer, self).__init__(params)\n\n    def step(self, closure=None):\n        loss = None\n        if closure is not None:\n            loss = closure()\n\n        for group in self.param_groups:\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                d_p = p.grad.data\n                p.data.add_(-self.lr, d_p)\n\n        return loss\n\n# Create an instance of your custom optimizer\noptim = CustomOptimizer(..., lr=0.005)\n\n# Update the learning rate after any epoch if needed\ndef update_learning_rate(optimizer, new_lr):\n    for param_group in optimizer.param_groups:\n        param_group['lr'] = new_lr\n\n# Example usage\nloss_on_training_set = 0.1\nif loss_on_training_set > 0.2:\n    update_learning_rate(optim, 0.0005)\nelif loss_on_training_set < 0.05:\n    update_learning_rate(optim, 0.05)\n"], "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": ["```python\nembedding_matrix = word2vec.wv.vectors\nvocab_size, embedding_dim = embedding_matrix.shape\n\nembedding_layer = torch.nn.Embedding(vocab_size, embedding_dim)\nembedding_layer.weight.data.copy_(torch.from_numpy(embedding_matrix))\n\nembedded_input = embedding_layer(torch.tensor(input_Tensor))\n```\n```"], "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": ["```python\n    # Get the vocabulary and embedding weights from the Word2Vec model\n    vocab = word2vec.wv.index_to_key\n    embedding_weights = torch.FloatTensor(word2vec.wv.vectors)\n\n    # Create an embedding layer in PyTorch\n    embedding_layer = torch.nn.Embedding.from_pretrained(embedding_weights)\n\n    # Map input Tensor to indices using vocabulary\n    input_indices = []\n    for sentence in input_Tensor:\n        indices = [vocab.index(word) for word in sentence if word in vocab]\n        input_indices.append(indices)\n\n    # Pad sequences to the same length\n    max_len = max(len(indices) for indices in input_indices)\n    padded_indices = [indices + [0]*(max_len-len(indices)) for indices in input_indices]\n\n    # Convert to PyTorch Tensor\n    input_tensor = torch.tensor(padded_indices)\n\n    # Get embedded input\n    embedded_input = embedding_layer(input_tensor)\n\n    return embedded_input\n```"], "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": ["```python\nimport numpy as np\nimport torch\nimport pandas as pd\n\n# Assuming load_data() function loads the torch tensor\ndef load_data():\n    return torch.rand(4, 4)\n\nx = load_data()\npx = pd.DataFrame(x.numpy())\n```\n```"], "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": ["```python\nimport numpy as np\nimport torch\nimport pandas as pd\n\nx = load_data()  # Assuming load_data() loads your torch tensor\n\n# Convert torch tensor to numpy array, then to pandas DataFrame\npx = pd.DataFrame(x.numpy())\n```\n```"], "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": ["px = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": ["```python\nC = B[:, torch.nonzero(A_log).squeeze()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": ["```python\nC = B[:, A_logical.nonzero().squeeze()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": ["```python\nC = B[:, A_log.nonzero(as_tuple=True)[0]]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": ["```python\nC = B[:, A_log.nonzero(as_tuple=True)[0]]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": ["```python\nC = B[:, torch.nonzero(A_log).squeeze()]\n### END SOLUTION\nreturn C\n```"], "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": ["```python\nC = B[:, A_log.nonzero().squeeze()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": ["C = B.index_select(1, idx)\n"], "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": ["```python\nimport pandas as pd\nimport torch\nimport numpy as np\n\nx_array = np.array([\n   np.array([0.5, 1.0, 2.0], dtype=np.float16),\n   np.array([4.0, 6.0, 8.0], dtype=np.float16)\n], dtype=object)\n\nx_tensor = torch.tensor(x_array.tolist())\n\nprint(x_tensor)\n```\n```plaintext\ntensor([[0.5000, 1.0000, 2.0000],\n        [4.0000, 6.0000, 8.0000]], dtype=torch.float16)\n```"], "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": ["x_tensor = torch.tensor(x_array)"], "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": ["```python\n    t = torch.tensor([torch.tensor(subarray) for subarray in a], dtype=torch.float32)\n    ### END SOLUTION\n    return t\n\n# Example usage:\nx_array = [\n    np.array([0.5, 1.0, 2.0], dtype=np.float16),\n    np.array([4.0, 6.0, 8.0], dtype=np.float16)\n]\nresult = Convert(x_array)\nprint(result)\n```\n</code>"], "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": ["import numpy as np\nimport pandas as pd\nimport torch\n\nlens = [3, 5, 4]\n\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n\nmask"], "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": ["mask = torch.zeros(len(lens), max(lens)).long()\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n"], "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": ["```python\nmask = torch.zeros(len(lens), max(lens), dtype=torch.long)\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": ["<code>\n    max_len = max(lens)\n    batch_size = len(lens)\n    mask = torch.zeros(batch_size, max_len, dtype=torch.long)\n    for i, length in enumerate(lens):\n        mask[i, :length] = 1\n    return mask\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\nTensor_2D = load_data()\n\n# Solution\nTensor_3D = torch.unsqueeze(Tensor_2D, dim=2)\n\n```"], "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": ["```python\n    # Get the shape of the input tensor\n    batch_size, diag_len = t.shape\n\n    # Create an empty 3D tensor with appropriate dimensions\n    result = torch.zeros(batch_size, diag_len, diag_len)\n\n    # Iterate over each batch and diagonal element\n    for i in range(batch_size):\n        for j in range(diag_len):\n            # Construct a diagonal matrix with the diagonal element from input tensor\n            result[i, j, j] = t[i, j]\n\n    return result\n### END SOLUTION\n\n# Example usage:\n# Assuming Tensor_2D is your input tensor\nresult = Convert(Tensor_2D)\nprint(result)\n```\n</code>"], "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": ["```python\nab = torch.cat((a.unsqueeze(0), b.unsqueeze(0)), dim=0)\n``` \n</code>"], "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\n# Assuming a and b are already defined\na_shape = a.shape\nb_shape = b.shape\n\n# Check if the second dimension (number of columns) matches\nif a_shape[1] != b_shape[1]:\n    raise ValueError(\"The number of columns in both tensors must be the same.\")\n\n# If the number of rows is different, pad the smaller tensor with zeros\nif a_shape[0] != b_shape[0]:\n    max_rows = max(a_shape[0], b_shape[0])\n    pad_a = torch.zeros(max_rows - a_shape[0], a_shape[1])\n    pad_b = torch.zeros(max_rows - b_shape[0], b_shape[1])\n\n    if a_shape[0] < b_shape[0]:\n        a = torch.cat((a, pad_a), dim=0)\n    else:\n        b = torch.cat((b, pad_b), dim=0)\n\n# Stack the tensors along the first dimension\nab = torch.stack((a, b), dim=0)\n```\n"], "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": ["```python\n    if a.shape[0] != b.shape[0]:\n        raise ValueError(\"The number of rows in tensors a and b must be the same.\")\n    \n    ab = torch.cat((a, b), dim=0)\n    \n    return ab\n### END SOLUTION </code>"], "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": ["a[:, lengths.max():, :] = 0\n"], "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": ["a[:, lengths.long():, :] = 2333\n"], "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": ["```python\nfor i in range(a.shape[0]):\n    a[i, lengths[i].int():, :] = 0\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": ["```python\nfor i in range(10):\n    a[i, lengths[i]:, :] = 2333\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": ["```python\nimport torch\n\nlist_of_tensors = [torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = torch.stack(list_of_tensors)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": ["new_tensors = torch.stack(list)\n"], "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": ["```python\nimport torch\n\nlist_of_tensors = [torch.randn(3), torch.randn(3), torch.randn(3)]\n\ndef Convert(lt):\n    return torch.stack(lt)\n\ntensor_of_tensors = Convert(list_of_tensors)\n### END SOLUTION\n\n# Test\nprint(tensor_of_tensors)\n```\n</code>"], "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": ["tensor_of_tensors = torch.stack(list_of_tensors)\n"], "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": ["```python\nresult = t[np.arange(len(idx)), idx]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": ["```python\nresult = t[np.arange(len(idx)), idx]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": ["```python\nresult = t[np.arange(len(idx)), 1 - idx]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": ["result = x[np.arange(x.shape[0]), ids.squeeze()]\n"], "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": ["result = torch.gather(x, 1, ids.unsqueeze(2).expand(-1, -1, x.size(2))).squeeze(1)\n"], "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": ["```python\nresult = torch.zeros((70, 2)) # Initialize result tensor\nmax_indices = torch.argmax(ids, dim=1) # Find the indices of maximum values along the second dimension\nfor i in range(70):\n    result[i] = x[i, max_indices[i]] # Select the slice indicated by max_indices and assign it to result\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\nsoftmax_output = load_data() # assuming you load your softmax output here\n\n# Convert softmax_output to PyTorch tensor\nsoftmax_output_tensor = torch.tensor(softmax_output)\n\n# Get the index of the maximum probability along axis 1\npredicted_classes = torch.argmax(softmax_output_tensor, dim=1)\n\n# Reshape the predicted_classes tensor to be n x 1\ny = predicted_classes.view(-1, 1)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\nsoftmax_output = load_data()\n\n# Convert softmax output to PyTorch tensor\nsoftmax_output_tensor = torch.tensor(softmax_output)\n\n# Get the index of the maximum probability along the second dimension\npredicted_class = torch.argmax(softmax_output_tensor, dim=1)\n\ny = predicted_class.view(-1, 1)  # Reshape to n x 1 tensor\n\n```"], "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": ["y = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n"], "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": ["```python\n    # Get the index of the maximum probability for each input\n    _, indices = torch.max(softmax_output, dim=1)\n    \n    # Reshape the indices tensor to have shape (n, 1)\n    indices = indices.view(-1, 1)\n    \n    return indices\n```\n### END SOLUTION\n"], "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": ["import numpy as np\nimport pandas as pd\nimport torch\n\nsoftmax_output = load_data()\n\ndef solve(softmax_output):\n    _, y = torch.max(softmax_output, dim=1)\n    return y\n\ny = solve(softmax_output)\nprint(y)"], "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": ["def cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, w, z), target: (n, w, z)\n    n, c, w, z = input.size()\n    # log_p: (n, c, w, z)\n    log_p = F.log_softmax(input, dim=1)\n    # log_p: (n*w*z, c)\n    log_p = log_p.permute(0, 3, 2, 1).contiguous().view(-1, c)  # make class dimension last dimension\n    log_p = log_p[\n       target.view(n, w, z, 1).repeat(0, 0, 0, c) >= 0]  # this looks wrong -> Should rather be a one-hot vector\n    log_p = log_p.view(-1, c)\n    # target: (n*w*z,)\n    mask = target >= 0\n    target = target[mask]\n    loss = F.nll_loss(log_p, target.view(-1), weight=weight, size_average=False)\n    if size_average:\n        loss /= mask.data.sum()\n    return loss\n\nimages = Variable(torch.randn(5, 3, 4, 4))\nlabels = Variable(torch.LongTensor(5, 4, 4).random_(3))\nloss = cross_entropy2d(images, labels)\n"], "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": ["<code>\ncnt_equal = np.sum(A == B)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": ["```python\ncnt_equal = np.sum(A == B)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": ["cnt_not_equal = np.sum(A != B)\n"], "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": ["```python\n    cnt_equal = np.sum(A == B)\n    ### END SOLUTION\n    return cnt_equal\n```"], "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": ["```python\ncnt_equal = np.sum(A[-x:] == B[-x:])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": ["```python\ncnt_not_equal = np.sum(A[-x:] != B[-x:])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\na = torch.randn(1, 3, 10, 40, 1)\nassert a.shape == (1, 3, 10, 40, 1)\nchunk_dim = 10\n\n# Calculate the number of tensors and the step\nnum_tensors = a.shape[3] - chunk_dim + 1\nstep = 1\n\n# Initialize a list to store the split tensors\ntensors_31 = []\n\n# Split the tensor and store each chunk\nfor i in range(num_tensors):\n    start_idx = i\n    end_idx = i + chunk_dim\n    tensor_chunk = a[:, :, :, start_idx:end_idx, :]\n    tensors_31.append(tensor_chunk)\n\n# Verify the shapes of the split tensors\nfor idx, tensor in enumerate(tensors_31):\n    print(f\"Shape of tensor_{idx+1}: {tensor.shape}\")\n```\n```plaintext\nShape of tensor_1: torch.Size([1, 3, 10, 10, 1])\nShape of tensor_2: torch.Size([1, 3, 10, 10, 1])\nShape of tensor_3: torch.Size([1, 3, 10, 10, 1])\n...\nShape of tensor_31: torch.Size([1, 3, 10, 10, 1])\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": ["tensors_31 = []\nfor i in range(31):\n    start = i\n    end = i + chunk_dim\n    tensor = a[:, :, :, start:end, :]\n    tensors_31.append(tensor)\nEND SOLUTION\n"], "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": ["```python\noutput = output * mask.unsqueeze(2) + clean_input_spectrogram * (1 - mask).unsqueeze(2)\n```  \n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": ["output[mask == 0] = clean_input_spectrogram[mask == 0]\n"], "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": ["```python\nsigned_min = torch.where(torch.abs(x) <= torch.abs(y), x.sign() * torch.min(torch.abs(x), torch.abs(y)), y.sign() * torch.min(torch.abs(x), torch.abs(y)))\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": ["```python\nimport torch\n\n# Assuming x and y are torch tensors\nx = torch.tensor([1, -2, 3, -4])\ny = torch.tensor([-5, 6, -7, 8])\n\nsign_x = torch.sign(x)\nsign_y = torch.sign(y)\nmax_values = torch.max(torch.abs(x), torch.abs(y))\n\nsigned_max = max_values * (sign_x * (torch.abs(x) >= torch.abs(y)).float() + sign_y * (torch.abs(y) > torch.abs(x)).float())\n\nprint(signed_max)\n```\n"], "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": ["<code>\nimport torch\n\ndef solve(x, y):\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min_vals = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = sign_x * min_vals\n    return signed_min\n\n# Example usage\nx = torch.tensor([-2, 3, -4, 5])\ny = torch.tensor([1, -2, 3, -4])\nresult = solve(x, y)\nprint(result)"], "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\nMyNet = torch.nn.Sequential(torch.nn.Linear(4, 15),\n                            torch.nn.Sigmoid(),\n                            torch.nn.Linear(15, 3),\n                            )\n\nMyNet.load_state_dict(torch.load(\"my_model.pt\"))\n\ndef predict_allCharacters(input):\n    output = MyNet(input)\n    softmax_output = softmax(output.detach().numpy())\n    conf = softmax_output.max()\n    class_names = '012'\n    return conf, class_names[np.argmax(softmax_output)]\n\ninput = load_data()\nassert type(input) == torch.Tensor\n\nconfidence_score = predict_allCharacters(input)[0]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": ["```python\nresult = torch.cat([a[:, :-1], ((a[:, -1] + b[:, 0]) / 2).unsqueeze(1), b[:, 1:]], dim=1)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\n\na = torch.Tensor([[1, 2, 3], [1, 2, 3]])\nb = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n\ndef solve(a, b):\n    # Concatenate tensors along the second axis\n    combined = torch.cat((a, b), dim=1)\n    \n    # Take the average of overlapping columns\n    overlap_avg = (a[:, -1] + b[:, 0]) / 2\n    \n    # Replace the last column of 'a' and the first column of 'b' with the average\n    combined[:, -1] = overlap_avg\n    combined[:, a.shape[1]] = overlap_avg\n    \n    return combined\n\nresult = solve(a, b)\nprint(result)\n</code>"], "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": ["import torch\n\nt = torch.arange(8).reshape(1,4,2).float()\nprint(t)\n\nnew = torch.zeros(1, 1, 4)\nprint(new)\n\nr = torch.cat([new, t, new], dim=1)\nprint(r)\n"], "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": ["```python\nimport torch\n\nt = torch.tensor([[1, 2], [3, 4]])\n\npad = torch.zeros(1, 1)\nresult = torch.cat([pad, torch.cat([pad, t, pad], dim=1), pad], dim=0)\n```\n```"], "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\n# Given tensor\nt = torch.arange(8).reshape(1, 4, 2).float()\nprint(\"Original Tensor:\")\nprint(t)\n\n# New row to be inserted\nnew_row = torch.tensor([[-1, -1, -1, -1]])\n\n# Repeat the new row to match the number of rows in t\nnew_rows = new_row.repeat(t.shape[0], 1)\n\n# Concatenate the new rows above and below the original tensor\nresult = torch.cat((new_rows, t, new_rows), dim=1)\nprint(\"\\nModified Tensor:\")\nprint(result)\n```\n```"], "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": ["```python\nresult = torch.matmul(data, W.unsqueeze(0).unsqueeze(-1)).squeeze(-1)\nresult = result.view(10, 2, 3)\n```\n```plaintext\nEND SOLUTION\n```"], "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
