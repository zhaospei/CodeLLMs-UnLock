{"id": 0, "code": ["<code>\ndf = df.iloc[List].reset_index(drop=True)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": ["<code>\ndf_shuffled = df.iloc[List].reset_index(drop=True)\ndifferent_types_count = (df_shuffled['Type'] != df['Type']).sum()\n</code>\nresult = different_types_count\n</code>"], "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": ["```python\nvalue_counts_Qu1 = df['Qu1'].value_counts()\nvalues_to_keep_Qu1 = value_counts_Qu1[value_counts_Qu1 >= 2].index.tolist()\ndf['Qu1'] = df['Qu1'].apply(lambda x: x if x in values_to_keep_Qu1 else 'other')\n\nvalue_counts_Qu3 = df['Qu3'].value_counts()\nvalues_to_keep_Qu3 = value_counts_Qu3[value_counts_Qu3 >= 2].index.tolist()\ndf['Qu3'] = df['Qu3'].apply(lambda x: x if x in values_to_keep_Qu3 else 'other')\n\nresult = df\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": ["```python\nqu_counts = df.apply(pd.value_counts)\ndf = df.apply(lambda x: x.where(qu_counts[x.name] >= 3, other='other'))\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": ["```python\n    for column in df.columns:\n        value_counts = df[column].value_counts()\n        for index, count in value_counts.items():\n            if count < 2:\n                df[column].replace(index, 'other', inplace=True)\n    return df\n### END SOLUTION\n```"], "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": ["```python\n# Solution for Qu1\nvalue_counts_qu1 = df['Qu1'].value_counts()\nvalues_to_change_qu1 = value_counts_qu1[value_counts_qu1 < 3].index\ndf['Qu1'] = df['Qu1'].replace(values_to_change_qu1, 'other')\n\n# Solution for Qu2 and Qu3\nvalue_counts_qu2 = df['Qu2'].value_counts()\nvalues_to_change_qu2 = value_counts_qu2[value_counts_qu2 < 2].index\ndf['Qu2'] = df['Qu2'].replace(values_to_change_qu2, 'other')\n\nvalue_counts_qu3 = df['Qu3'].value_counts()\nvalues_to_change_qu3 = value_counts_qu3[value_counts_qu3 < 2].index\ndf['Qu3'] = df['Qu3'].replace(values_to_change_qu3, 'other')\n</code>\n```\n```python\nresult = df\n```\n```python\n# END SOLUTION\n```\n"], "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": ["```python\nqu1_counts = df['Qu1'].value_counts()\nqu2_counts = df['Qu2'].value_counts()\nqu3_counts = df['Qu3'].value_counts()\n\nvalues_to_keep_qu1 = qu1_counts[qu1_counts >= 3].index.tolist()\nvalues_to_keep_qu2 = qu2_counts[qu2_counts >= 2].index.tolist()\nvalues_to_keep_qu3 = qu3_counts[qu3_counts >= 2].index.tolist()\n\nfor col in ['Qu1', 'Qu2', 'Qu3']:\n    for index, value in df[col].items():\n        if col == 'Qu1' and value == 'apple':\n            continue\n        if col == 'Qu1' and value not in values_to_keep_qu1:\n            df.at[index, col] = 'other'\n        elif col == 'Qu2' and value not in values_to_keep_qu2:\n            df.at[index, col] = 'other'\n        elif col == 'Qu3' and value not in values_to_keep_qu3:\n            df.at[index, col] = 'other'\n\nresult = df\n```\n```"], "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": ["import pandas as pd\n\ndf = pd.DataFrame({'url': ['A.com', 'A.com', 'B.com', 'B.com', 'C.com'],\n                   'keep_if_dup': ['Yes', 'Yes', 'No', 'No', 'No']})\n\ndf = df[df.duplicated(subset='url') & (df['keep_if_dup'] != 'Yes')].index\ndf = df.drop(df)\ndf"], "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": ["```python\ndf_filtered = df.drop_duplicates(subset='url', keep='first')\ndf_filtered = pd.concat([df_filtered, df[df['drop_if_dup'] == 'No']])\nresult = df_filtered.sort_index()\n```\n```"], "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": ["```python\ndf['duplicate_count'] = df.groupby('url').cumcount()\ndf['keep'] = df['keep_if_dup'] == 'Yes'\ndf = df[df['duplicate_count'].eq(0) | df['keep']]\ndf.drop(['duplicate_count', 'keep'], axis=1, inplace=True)\n```\n```python\nresult = df\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": ["<code>\ndef dataframe_to_nested_dict(df):\n    nested_dict = {}\n    for _, row in df.iterrows():\n        current_dict = nested_dict\n        for col_name, value in row.items():\n            if col_name == 'name':\n                continue\n            if row['name'] not in current_dict:\n                current_dict[row['name']] = {}\n            current_dict = current_dict[row['name']]\n            current_dict[row[col_name]] = value\n    return nested_dict\n\nresult = dataframe_to_nested_dict(df)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": ["<code>\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n"], "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": ["<code>\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    return df\n### END SOLUTION\n\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": ["```python\ndf['datetime'] = df['datetime'].dt.tz_convert(None).dt.strftime('%d-%b-%Y %H:%M:%S')\ndf = df.sort_values(by='datetime')\n```\n```"], "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": ["```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values(by='datetime')\n```\n```"], "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": ["```python\n# Splitting the 'message' column into separate key-value pairs\ndf['message'] = df['message'].str.strip('[]').str.split(', ')\n\n# Creating a dictionary to store key-value pairs\ndata = {'name': df['name'], 'status': df['status'], 'number': df['number']}\nfor i, row in df.iterrows():\n    for item in row['message']:\n        key, value = item.split(':')\n        data[key.strip()] = data.get(key.strip(), []) + [value.strip()]\n\n# Creating a DataFrame from the dictionary\nresult = pd.DataFrame(data)\n\n# Filling missing values with 'none'\nresult.fillna('none', inplace=True)\n\n# Reordering columns\nresult = result[['name', 'status', 'number', 'job', 'money', 'wife', 'group', 'kids']]\n</code>\n```"], "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": ["```python\ndf.loc[df['product'].isin([1066490, 1077784]), 'score'] *= 10\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": ["```python\ndf.loc[~df['product'].isin(products), 'score'] *= 10\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": ["<code>\ndf.loc[df['product'].isin(products[0]), 'score'] *= 10\ndf.loc[df['product'].isin(products[1]), 'score'] *= 10\n"], "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": ["```python\ndf.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min())\n```\n```"], "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": ["<code>\ndf['category'] = df.idxmax(axis=1)\n"], "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": ["```python\ndf['category'] = df.idxmax(axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": ["```python\ndf['category'] = df.apply(lambda row: row.index[row == 1].tolist(), axis=1)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": ["```python\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": ["```python\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'Date':['2018-01-01','2018-02-08','2018-02-08','2018-02-08','2018-02-08']})\ndf['Date'] = pd.to_datetime(df['Date'])\ndate_list = ['2017-08-17', '2018-01-31']\n\nfiltered_df = df[(df['Date'] >= date_list[0]) & (df['Date'] <= date_list[1])]\nfiltered_df['Month'] = filtered_df['Date'].dt.strftime('%m-%b-%Y %A')\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": ["```python\ndf_shifted = df.copy()\ndf_shifted['#1'] = df['#1'].shift(-1)\ndf_shifted.iloc[-1, 0] = df.iloc[0, 0]\ndf_shifted = df_shifted.iloc[::-1]\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": ["```python\ndf_shifted = df.shift(-1)\ndf_shifted.iloc[-1] = df.iloc[0]\ndf_shifted.index = df.index\ndf = df_shifted\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": ["```python\ndf_shifted = df.copy()\ndf_shifted['#1'] = df['#1'].shift(-1).fillna(df['#1'].iloc[-1])\ndf_shifted['#2'] = df['#2'].shift(1).fillna(df['#2'].iloc[0])\ndf_shifted = df_shifted.iloc[::-1]\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": ["```python\nimport pandas as pd\nfrom sklearn.metrics import r2_score\n\ndf = pd.DataFrame({'#1': [11.6985, 43.6431, 54.9089, 63.1225, 72.4399],\n                   '#2': [126.0, 134.0, 130.0, 126.0, 120.0]},\n                  index=['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04', '1980-01-05'])\n\nbest_r2 = -1\nbest_df = df.copy()\n\nfor i in range(len(df)):\n    df_shifted = df.shift(periods=i, fill_value=df.iloc[-1])\n    r2_col1 = r2_score(df_shifted['#1'], df_shifted['#2'])\n    r2_col2 = r2_score(df_shifted['#2'], df_shifted['#1'])\n    total_r2 = r2_col1 + r2_col2\n    if total_r2 > best_r2:\n        best_r2 = total_r2\n        best_df = df_shifted.copy()\n\ndf = best_df\n```\n```"], "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": ["```python\ndf.columns = [col + 'X' for col in df.columns]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": ["```python\ndf.columns = ['X' + col for col in df.columns]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": ["```python\ndf.columns = [col + 'X' if not col.endswith('X') else 'X' + col for col in df.columns]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```\n"], "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({ 'group': ['A', 'A', 'A', 'B', 'B'], 'group_color' : ['green', 'green', 'green', 'blue', 'blue'], 'val1': [5, 2, 3, 4, 5], 'val2' : [4, 2, 8, 5, 7],'val3':[1,1,4,5,1] })\n\nresult = df.groupby('group').agg({col: 'mean' for col in df.columns if col.startswith('val')})\n```\n```"], "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": ["```python\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"sum\" for col in df.columns if 'val' in col}})\n``` \n</code>"], "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": ["```python\nvalue_cols = [col for col in df.columns if col.startswith('val')]\nmean_cols = [col for col in value_cols if col.endswith('2')]\nsum_cols = [col for col in value_cols if col not in mean_cols]\n\nagg_dict = {\"group_color\": \"first\"}\nagg_dict.update({col: \"mean\" for col in mean_cols})\nagg_dict.update({col: \"sum\" for col in sum_cols})\n\nresult = df.groupby('group').agg(agg_dict)\n```\n```"], "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": ["```python\nresult = df.loc[row_list, column_list].mean()\n```"], "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": ["<code>\nresult = df.loc[row_list, column_list].sum()\n"], "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": ["```python\nresult = df.loc[row_list, column_list].sum()\nresult.drop(result.idxmax(), inplace=True)\n```"], "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": ["```python\nresult = df.apply(lambda x: x.value_counts())\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": ["<code>\nresult = df.isnull().sum()\n"], "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": ["```python\nresult = '\\n'.join(['---- {} ---\\n{}\\n'.format(col, df[col].value_counts()) for col in df.columns])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": ["```python\ndf.columns = df.iloc[0] + ' | ' + df.iloc[1]\ndf = df.drop([0, 1])\n```\n```python\nEND SOLUTION\n```\n```python\nresult = df\n```"], "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": ["```python\n# Merge first and second row\ndf.columns = df.iloc[0]\ndf = df[1:]\nresult = df.reset_index(drop=True)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": ["```python\nresult = df.apply(lambda x: sorted(x, key=pd.isnull), axis=1)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": ["```python\nresult = df.fillna(method='ffill', axis=1).fillna(df.max(axis=1))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": ["```python\nresult = df.apply(lambda x: x.sort_values(na_position='first'), axis=1)\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": ["```python\ndf = df.reset_index() # Reset index to make 'lab' a column again\nsmaller_than_thresh = df[df['value'] < thresh] # Select rows smaller than threshold\nsum_value = smaller_than_thresh['value'].sum() # Calculate sum of 'value' column\nnew_row = pd.DataFrame({'lab': ['X'], 'value': [sum_value]}) # Create new row with summed value\ndf = pd.concat([df[df['value'] >= thresh], new_row], ignore_index=True) # Concatenate original dataframe without small values and the new row\ndf = df.set_index('lab') # Set 'lab' column as index again\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nthresh = 6\n\nmask = df['value'] >= thresh\navg_value = df[mask]['value'].mean()\ndf = df[~mask].append(pd.DataFrame({'lab': ['X'], 'value': [avg_value]}).set_index('lab'))\n\nresult = df\n"], "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": ["```python\n# Filtering rows outside the given section\nfiltered_df = df[(df['value'] >= section_left) & (df['value'] <= section_right)]\n\n# Calculating the average value for rows outside the section\naverage_value = df[(df['value'] < section_left) | (df['value'] > section_right)]['value'].mean()\n\n# Creating a new row with the calculated average value\nnew_row = pd.DataFrame({'lab': ['X'], 'value': [average_value]})\n\n# Concatenating the filtered dataframe with the new row\nresult = pd.concat([filtered_df, new_row.set_index('lab')])\n```\n```"], "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": ["```python\nresult = df.assign(**{f'inv_{col}': 1/df[col] for col in df.columns})\n```"], "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\nresult = pd.concat([df, df.apply(lambda x: np.exp(x), axis=1).add_prefix('exp_')], axis=1)\n```"], "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": ["import pandas as pd\n\ndf = pd.DataFrame({\"A\": [1, 0, 3], \"B\": [4, 5, 6]})\n\ndf_inv = 1 / df.replace(0, 1)  # Replace 0 with 1 to avoid division by zero\ndf_inv.columns = ['inv_' + col for col in df.columns]\nresult = pd.concat([df, df_inv], axis=1)"], "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\nsigmoid_df = df.apply(lambda col: 1 / (1 + np.exp(-col)), axis=0)\nsigmoid_df.columns = [\"sigmoid_\" + col for col in sigmoid_df.columns]\nresult = pd.concat([df, sigmoid_df], axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": ["```python\nmask = df.apply(lambda x: x == x[:x.idxmin()].max())\nresult = df[mask].idxmax()\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": ["```python\nmask = (df.cummax() == df).idxmin()\nresult = df.idxmax().where(df.ge(df.min())).combine_first(mask)\n``` \n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": ["```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nall_dates = pd.date_range(start=min_date, end=max_date)\nall_users = df['user'].unique()\n\nexpanded_df = pd.DataFrame([(date, user) for date in all_dates for user in all_users], columns=['dt', 'user'])\nresult = expanded_df.merge(df, on=['dt', 'user'], how='left').fillna(0)\n```\n```"], "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": ["```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\ndate_range = pd.date_range(start=min_date, end=max_date)\nexpanded_df = pd.DataFrame({'dt': date_range})\nresult = pd.merge(expanded_df, df, on='dt', how='left').fillna({'val': 0})\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": ["```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nexpanded_dates = pd.date_range(start=min_date, end=max_date, freq='D')\nexpanded_df = pd.DataFrame({'dt': expanded_dates})\nexpanded_df['user'] = df['user'].unique()[0]  # Assuming only one unique user in the original DataFrame\nexpanded_df['val'] = 233\n\nresult = pd.concat([df, expanded_df]).sort_values(by=['user', 'dt']).reset_index(drop=True)\n```\n```"], "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": ["<code>\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nexpanded_dates = pd.date_range(start=min_date, end=max_date, freq='D')\nexpanded_df = pd.DataFrame({'dt': expanded_dates})\n\nresult = df.merge(expanded_df, on='dt', how='right')\nresult['val'] = result.groupby('user')['val'].transform('max')\n"], "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": ["```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nexpanded_dates = pd.date_range(start=min_date, end=max_date, freq='D')\nexpanded_df = pd.DataFrame({'dt': expanded_dates})\n\nresult = df.merge(expanded_df, on='dt', how='right').sort_values(by=['user', 'dt'])\nresult['dt'] = result['dt'].dt.strftime('%d-%b-%Y')\nresult['val'] = result.groupby('user')['val'].transform('max')\nresult = result.reset_index(drop=True)\n```\n```"], "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": ["<code>\ndf['name'] = df['name'].astype('category')\ndf['name'] = df['name'].cat.codes + 1\nresult = df\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": ["```python\ndf['a'] = df['name'].astype('category').cat.codes + 1\nresult = df\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": ["```python\n    unique_ids = df['name'].astype('category').cat.codes + 1\n    df['name'] = unique_ids\n    return df\n    ### END SOLUTION\n```"], "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": ["```python\ndf['ID'] = df.groupby('name').ngroup() + 1\ndf.drop(columns=['name'], inplace=True)\nresult = df[['ID', 'b', 'c']]\n```\n```"], "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": ["```python\n# Pivot the dataframe to reshape it\ndf = pd.melt(df, id_vars=['user', 'someBool'], var_name='date', value_name='value')\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": ["```python\ndf = df.melt(id_vars=['user'], var_name='others', value_name='value')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": ["```python\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value').dropna(subset=['value'])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": ["```python\nresult = df[df['c'] > 0.5][columns].to_numpy()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": ["<code>\nresult = df.loc[df['c'] > 0.45, columns].values\n"], "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": ["```python\nimport pandas as pd\n\ndef f(df, columns=['b', 'e']):\n    subset_df = df[df['c'] > 0.5][columns]\n    return subset_df.to_numpy()\n### END SOLUTION\n```"], "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": ["<code>\nimport pandas as pd\n\ndef f(df, columns=['b', 'e']):\n    selected_rows = df[df['c'] > 0.5]\n    selected_columns = selected_rows[columns]\n    selected_columns['sum'] = selected_columns.sum(axis=1)\n    return selected_columns\n\n# Example usage\ndf = pd.DataFrame(np.random.rand(4,5), columns=list('abcde'))\nresult = f(df, columns=['b', 'e'])\nprint(result)\n"], "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": ["```python\ndef f(df, columns=['b', 'e']):\n    # return the solution in this function\n    # result = f(df, columns)\n    return df.loc[df['c'] > 0.5, columns]\n### END SOLUTION\n```"], "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": ["```python\nfrom datetime import datetime, timedelta\nimport pandas as pd\n\ndf = pd.DataFrame({'ID': [1, 2, 3, 4, 5, 6, 7],\n                   'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n                   'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]})\n\nX = 365\n\n# Convert date strings to datetime objects\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Initialize a set to store the indices to drop\nindices_to_drop = set()\n\n# Iterate through each row in the dataframe\nfor index, row in df.iterrows():\n    # Extract the current date\n    current_date = row['date']\n    \n    # Check for other rows within X days\n    overlapping_rows = df[(df['date'] >= current_date - timedelta(days=X)) & (df['date'] <= current_date + timedelta(days=X))]\n    \n    # Remove the current row from the overlapping rows\n    overlapping_rows = overlapping_rows[overlapping_rows.index != index]\n    \n    # Add indices of overlapping rows to the set\n    indices_to_drop.update(overlapping_rows.index)\n\n# Drop rows with indices in the set\nresult = df.drop(indices_to_drop)\n\n</code>\n```"], "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": ["```python\nfrom datetime import datetime, timedelta\nimport pandas as pd\n\ndf = pd.DataFrame({'ID': [1, 2, 3, 4, 5, 6, 7],\n                   'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n                   'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]})\nX = 52\n\n# Convert 'date' column to datetime\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Calculate X weeks in timedelta\nX_weeks = timedelta(weeks=X)\n\n# Initialize a list to store rows to keep\nrows_to_keep = []\n\n# Iterate over each row in the dataframe\nfor index, row in df.iterrows():\n    # Initialize a flag to check if row overlaps with any other row\n    overlap = False\n    \n    # Check if the current row overlaps with any other row\n    for _, other_row in df.iterrows():\n        # Exclude comparing the row with itself\n        if index != _:\n            # Calculate the time difference between the current row and the other row\n            time_diff = abs(row['date'] - other_row['date'])\n            # Check if the time difference is less than X weeks\n            if time_diff <= X_weeks:\n                overlap = True\n                break\n    \n    # If the current row doesn't overlap with any other row, add it to rows_to_keep\n    if not overlap:\n        rows_to_keep.append(index)\n\n# Filter the dataframe to keep only the rows that don't overlap\nresult = df.loc[rows_to_keep]\n</code>\n```"], "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": ["import pandas as pd\n\ndf = pd.DataFrame({'ID': [1, 2, 3, 4, 5, 6, 7],\n                   'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n                   'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]})\nX = 7\n\nresult = df.copy()\nresult['date'] = pd.to_datetime(result['date'], format='%m/%d/%y')\nresult = result.sort_values('date')\nresult['date'] = result['date'].dt.strftime('%d-%b-%Y')\n\ncurrent_date = pd.to_datetime(result['date'].iloc[0], format='%d-%b-%Y')\nfiltered_indices = [0]\n\nfor i in range(1, len(result)):\n    if (pd.to_datetime(result['date'].iloc[i], format='%d-%b-%Y') - current_date).days >= X*7:\n        current_date = pd.to_datetime(result['date'].iloc[i], format='%d-%b-%Y')\n        filtered_indices.append(i)\n\nresult = result.iloc[filtered_indices]\n\nresult"], "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": ["<code>\nresult = df.groupby(df.index // 3).mean()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame({'col1': [1, 1, 4, 5, 1]})\n\nresult = df.groupby(df.index // 3).mean()\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[1, 1, 4, 5, 1, 4]})\n\nresult = df.groupby(df.index // 4).sum()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0]})\n\nresult = df['col1'].rolling(3).mean().shift(-2)\n"], "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0, 2, 1, 3, 1]})\n\nresult = []\n\n# Bin every 3 rows to get sum\nfor i in range(0, len(df), 3):\n    result.append(df['col1'][i:i+3].sum())\n\n# Bin every 2 rows to get average\nfor i in range(0, len(df), 2):\n    result.append(df['col1'][i:i+2].mean())\n\nresult = pd.DataFrame({'col1': result})\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": ["```python\n# Define function to calculate sum for every 3 rows and average for every 2 rows\ndef bin_rows(data):\n    binned_data = []\n    for i in range(0, len(data), 5):\n        if i + 3 <= len(data):\n            binned_data.append(data[i:i+3].sum())\n        if i + 2 <= len(data):\n            binned_data.append(data[i:i+2].mean())\n    return binned_data\n\n# Apply function to the dataframe\nresult = pd.DataFrame({'col1': bin_rows(df['col1'])})\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": ["<code>\ndf['A'] = df['A'].replace(0, method='ffill')\n"], "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": ["<code>\ndf['A'] = df['A'].replace(0, method='ffill')\n"], "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": ["<code>\nimport pandas as pd\n\nindex = range(14)\ndata = [1, 0, 0, 2, 0, 4, 6, 8, 0, 0, 0, 0, 2, 1]\ndf = pd.DataFrame(data=data, index=index, columns=['A'])\n\n# Forward fill non-zero values\ndf['A'] = df['A'].replace(0, pd.NA).ffill()\n\n# Backward fill non-zero values\ndf['A'] = df['A'].fillna(method='bfill')\n\n</code>"], "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['7 year', '2day', '4 week', '8 month']},\n                  index=list(range(1,5)))\n\n# Extracting numbers and time units into separate columns\ndf['number'] = df['duration'].str.extract('(\\d+)')\ndf['time'] = df['duration'].str.extract('(\\D+)')\n# Mapping time units to corresponding days\ntime_mapping = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_days'] = df['time'].map(time_mapping)\n\n# df['time_day'] = df['time'].replace(r'(year|month|week|day)', r'(365|30|7|1)', regex=True) # Alternative approach\n# If you prefer to use the replacement approach, you can uncomment the above line and remove the time_days column assignment.\n\ndf\n```\n"], "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']},\n                  index=list(range(1,5)))\n\n# Extracting numbers from duration and creating a new column\ndf['number'] = df['duration'].str.extract(r'(\\d+)')\n\n# Extracting time from duration and creating a new column\ndf['time'] = df['duration'].str.extract(r'([a-zA-Z]+)')\n\n# Mapping time to number of days\ntime_mapping = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_day'] = df['time'].map(time_mapping)\n\n# Displaying the modified DataFrame\nprint(df)\n```\n```"], "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": ["```python\n    df['number'] = df['duration'].str.extract('(\\d+)')\n    df['time'] = df['duration'].str.extract('([a-zA-Z]+)')\n    conversion_dict = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\n    df['time_days'] = df['time'].map(conversion_dict)\n    return df\n### END SOLUTION\n```"], "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']},\n                  index=list(range(1,5)))\n\ndf['number'] = df['duration'].str.extract(r'(\\d+)')\ndf['time'] = df['duration'].str.extract(r'(\\D+)')\ndf['time_day'] = df['time'].replace({'year': 365, 'month': 30, 'week': 7, 'day': 1}) * df['number'].astype(int)\n```"], "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": ["```python\nimport numpy as np\nresult = np.where(~np.any(df1[columns_check_list] != df2[columns_check_list], axis=1))[0].tolist()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": ["```python\ncheck = [all(df1[column] == df2[column]) for column in columns_check_list]\nresult = check\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": ["```python\ndf.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1, inplace=True)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": ["```python\ndf.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1, inplace=True)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": ["```python\nimport pandas as pd\n\ndef f(df):\n    df.reset_index(inplace=True)\n    df['date'] = pd.to_datetime(df['date'])\n    result = df[['date', 'x', 'y']].values\n    return result\n\n### END SOLUTION\n\n# Example usage:\ndf = pd.DataFrame({\n    'id': ['abc', 'abc', 'abc'],\n    'date': ['3/1/1994', '9/1/1994', '3/1/1995'],\n    'x': [100, 90, 80],\n    'y': [7, 8, 9]\n})\ndf.set_index(['id', 'date'], inplace=True)\nresult_array = f(df)\nprint(result_array)\n```\n</code>"], "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": ["```python\nimport pandas as pd\n\ndef f(df):\n    df.index.set_levels(pd.to_datetime(df.index.levels[0]), level=0, inplace=True)\n    df = df.swaplevel().sort_index()\n    return df\n\n### END SOLUTION\n```"], "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": ["```python\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf.columns.name = None\ndf = df.rename(columns={'var1': 'Var1', 'var2': 'Var2'})\ndf = df[['Variable', 'Country', 'year', 'Var1', 'Var2']]\n```\n```python"], "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": ["```python\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year')\ndf['year'] = df['year'].astype(int)\ndf = df.sort_values(by=['Country', 'Variable', 'year'], ascending=[True, True, False])\ndf = df.pivot_table(index=['Variable', 'Country', 'year'], columns='Variable', values='value').reset_index()\ndf.columns.name = None\ndf = df.rename(columns={'var1': 'Var1', 'var2': 'Var2'})\ndf = df[['Variable', 'Country', 'year', 'Var1', 'Var2']]\n```\n"], "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": ["```python\n# Filter rows where absolute value of all 'Value_*' columns is less than 1\nvalue_columns = [col for col in df.columns if col.startswith('Value')]\ndf = df[df[value_columns].abs().lt(1).all(axis=1)]\n```\n```python\nEND SOLUTION\n```\n```python\n# Printing the filtered dataframe\nprint(df)\n```"], "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": ["<code>\ncolumns_to_check = [col for col in df.columns if col.startswith('Value')]\ndf = df[(df[columns_to_check].abs() > 1).any(axis=1)]\n"], "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": ["```python\ndf = df[df.filter(like='Value').abs().gt(1).any(axis=1)].rename(columns=lambda x: x.replace('Value_', ''))\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": ["```python\ndf.replace(to_replace='&AMP;', value='&', regex=True, inplace=True)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": ["```python\ndf.replace(regex=True, inplace=True, to_replace='&LT', value='<')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": ["<code>\nimport pandas as pd\n\nexample_df = pd.DataFrame({'A': ['Good &AMP; bad', 'BB', 'CC', 'DD', 'Good &AMP; bad'], 'B': range(5), 'C': ['Good &AMP; bad'] * 5})\n\ndef f(df=example_df):\n    df = df.apply(lambda x: x.str.replace('&AMP;', '&', regex=True))\n    return df\n\nresult = f(example_df)\nprint(result)  # This will show the updated DataFrame\n"], "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": ["```python\ndf = df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": ["```python\ndf = df.apply(lambda x: x.str.replace('&AMP;', '&', regex=True))\n```\n```python\ndf['Title'] = df['Title'].str.replace('&AMP;', '&', regex=True).str.replace('&', ' & 0 = 0')\n```\n```python\nprint(df)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": ["<code>\nimport pandas as pd\nimport re\n\n# Original DataFrame\nname_df = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane Smith', 'Juan de la Cruz']})\n\n# Function to validate if a name can be split into first and last name\ndef validate_single_space_name(name: str) -> bool:\n    pattern = re.compile(r'^.*\\s.*$')\n    return bool(re.match(pattern, name))\n\n# Apply the function to filter names that can be split\nfiltered_names = name_df['name'].apply(validate_single_space_name)\n\n# Split names into first and last name where applicable\nname_df['first_name'] = name_df['name'].apply(lambda x: x.split()[0] if validate_single_space_name(x) else x)\nname_df['last_name'] = name_df['name'].apply(lambda x: x.split()[1] if validate_single_space_name(x) else None)\n\n# Drop the original name column\nname_df.drop('name', axis=1, inplace=True)\n\n# Reordering the columns to match the desired output\nname_df = name_df[['first_name', 'last_name']]\n\nprint(name_df)\n</code>\n</code>"], "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": ["```python\nimport pandas as pd\nimport re\n\nname_df = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane Smith', 'Juan de la Cruz']})\n\ndef validate_single_space_name(name: str) -> str:\n    pattern = re.compile(r'^.*\\s.*$')\n    match_obj = re.match(pattern, name)\n    if match_obj:\n        return name\n    else:\n        return None\n\nname_df['1_name'] = name_df['name'].apply(lambda x: x.split(' ')[0] if validate_single_space_name(x) else x)\nname_df['2_name'] = name_df['name'].apply(lambda x: x.split(' ')[1] if validate_single_space_name(x) else '')\n\nname_df.drop(columns=['name'], inplace=True)\n\ndf = name_df\n```\n```"], "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": ["```python\nimport pandas as pd\n\nname_df = pd.DataFrame({'name': ['Jack Fine', 'Kim Q. Danger', 'Jane 114 514 Smith', 'Juan de la Cruz']})\n\ndef split_name(row):\n    names = row['name'].split(' ')\n    if len(names) > 2:\n        first_name = names[0]\n        middle_name = ' '.join(names[1:-1])\n        last_name = names[-1]\n        return pd.Series([first_name, middle_name, last_name])\n    else:\n        return pd.Series([names[0], None, names[-1]])\n\nname_df[['first_name', 'middle_name', 'last_name']] = name_df.apply(split_name, axis=1)\n\nprint(name_df)\n```"], "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": ["```python\nresult = pd.merge_asof(df2, df1, on='Timestamp', direction='backward')\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": ["```python\nresult = pd.merge_asof(df1, df2, on='Timestamp', direction='backward')\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": ["```python\ndef calculate_state(row):\n    if row['col2'] <= 50 and row['col3'] <= 50:\n        return row['col1']\n    else:\n        return max(row['col1'], row['col2'], row['col3'])\n\ndf['state'] = df.apply(calculate_state, axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```\n```python\n```\n"], "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": ["```python\ndef calculate_state(row):\n    if row['col2'] > 50 and row['col3'] > 50:\n        return row['col1']\n    else:\n        return row['col1'] + row['col2'] + row['col3']\n\ndf['state'] = df.apply(calculate_state, axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": ["<code>\nerror_values = []\n\nfor index, row in df.iterrows():\n    value = row['Field1']\n    if not isinstance(value, int):\n        error_values.append(value)\n</code>\n</code>"], "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": ["```python\ninteger_values = []\n\nfor index, row in df.iterrows():\n    value = row['Field1']\n    if isinstance(value, int):\n        integer_values.append(value)\n    elif isinstance(value, float) and value.is_integer():\n        integer_values.append(int(value))\n    elif str(value).isnumeric():\n        integer_values.append(int(value))\n\ndf = integer_values\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": ["```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({\"ID\": [1,2,3,4,5], \"Field1\": [1.15,2,1,25,\"and\"]})\n\ndef f(df=example_df):\n    error_values = []\n    for index, row in df.iterrows():\n        if not str(row['Field1']).replace('.', '').isdigit():\n            error_values.append(row['Field1'])\n    return error_values\n\n### BEGIN SOLUTION (do not remove this comment)\nresult = f(example_df)\n### END SOLUTION (do not remove this comment)\n\nprint(result)\n```"], "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": ["<code>\ntotal = df.sum(axis=1)\ndf.iloc[:, 1:] = df.iloc[:, 1:].div(total, axis=0)\n</code>\n</code>"], "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": ["<code>\ndf_percentage = df.set_index('cat') / df.sum(axis=0)\n"], "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": ["<code>\nresult = df.loc[test]\n"], "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": ["<code>\nresult = df.loc[test]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": ["<code>\ndf = df[~df.index.isin(test)]\nresult = df\n"], "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": ["```python\nimport pandas as pd\n\ndef f(df, test):\n    # return the solution in this function\n    # result = f(df, test)\n    ### BEGIN SOLUTION\n    \n    # Convert the list to a set to remove duplicates and maintain order\n    unique_test = list(dict.fromkeys(test))\n    \n    # Select rows from the DataFrame using the unique row names\n    result = df.loc[unique_test]\n    \n    return result\n    \n    ### END SOLUTION\n\n# Example usage:\n# df = pd.DataFrame({'alleles': ['A/C', 'A/T', 'T/A', 'C/A', 'C/T'],\n#                    'chrom': [0, 0, 0, 0, 0],\n#                    'pos': [3, 7, 12, 15, 18],\n#                    'strand': ['+', '+', '+', '+', '+'],\n#                    'assembly#': [NaN, NaN, NaN, NaN, NaN],\n#                    'center': [NaN, NaN, NaN, NaN, NaN],\n#                    'protLSID': [NaN, NaN, NaN, NaN, NaN],\n#                    'assayLSID': [NaN, NaN, NaN, NaN, NaN]},\n#                   index=['TP3', 'TP7', 'TP12', 'TP15', 'TP18'])\n\n# test = ['TP3','TP12','TP18', 'TP3']\n# result = f(df, test)\n# print(result)\n\n```"], "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ntime = [0, 0, 0, 1, 1, 2, 2]\nx = [216, 218, 217, 280, 290, 130, 132]\ny = [13, 12, 12, 110, 109, 3, 56]\ncar = [1, 2, 3, 1, 3, 4, 5]\ndf = pd.DataFrame({'time': time, 'x': x, 'y': y, 'car': car})\n\n# Calculate pairwise distances between all points\ndef pairwise_distances(x0, y0, x1, y1):\n    return np.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2)\n\ndistances = []\nfor t in df['time'].unique():\n    df_t = df[df['time'] == t]\n    for i, row in df_t.iterrows():\n        dist = pairwise_distances(row['x'], row['y'], df_t['x'], df_t['y'])\n        dist[i] = np.inf  # Exclude distance to self\n        distances.extend(dist)\n\n# Find nearest neighbor for each car\nnearest_neighbors = []\nfor t in df['time'].unique():\n    df_t = df[df['time'] == t]\n    for i, row in df_t.iterrows():\n        dist = pairwise_distances(row['x'], row['y'], df_t['x'], df_t['y'])\n        dist[i] = np.inf  # Exclude distance to self\n        nearest_neighbor_idx = np.argmin(dist)\n        nearest_neighbors.append(df_t.iloc[nearest_neighbor_idx]['car'])\n\n# Calculate Euclidean distance to nearest neighbor\ndf['nearest_neighbour'] = nearest_neighbors\ndf['euclidean_distance'] = distances\n\ndf = df.set_index('time')\ndf2 = df[['car', 'nearest_neighbour', 'euclidean_distance']]\ndf2\n```"], "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\ntime = [0, 0, 0, 1, 1, 2, 2]\nx = [216, 218, 217, 280, 290, 130, 132]\ny = [13, 12, 12, 110, 109, 3, 56]\ncar = [1, 2, 3, 1, 3, 4, 5]\ndf = pd.DataFrame({'time': time, 'x': x, 'y': y, 'car': car})\n\n# Calculate pairwise distances\ndf['distance'] = np.sqrt((df['x'].sub(df['x'].values[:, None])**2 + df['y'].sub(df['y'].values[:, None])**2).values)\n\n# Get farmost neighbour for each car\ndf2 = df.groupby('time').apply(lambda group: group.apply(lambda row: group.loc[group['car'] != row['car'], 'car'].iloc[np.argmax(group.loc[group['car'] != row['car'], 'distance'])], axis=1)).reset_index()\ndf2.columns = ['time', 'car', 'farmost_neighbour']\n\n# Calculate euclidean distance\ndf2['euclidean_distance'] = df2.apply(lambda row: df.loc[(df['time'] == row['time']) & (df['car'] == row['car']), 'distance'].values[0], axis=1)\n\ndf2\n"], "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": ["```python\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df.apply(lambda row: \",\".join([str(row[col]) for col in cols if not pd.isnull(row[col])]), axis=1)\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": ["```python\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df.apply(lambda row: \"-\".join(row[col] for col in cols if not pd.isna(row[col])), axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": ["```python\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df[cols].apply(lambda row: \"-\".join(row.dropna()), axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": ["```python\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df.apply(lambda row: \"-\".join([str(row[col]) for col in cols if not pd.isnull(row[col])]), axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": ["```python\nsampled_rows = df.sample(frac=0.2, random_state=0)\ndf.loc[sampled_rows.index, 'Quantity'] = 0\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": ["```python\ndf_sampled = df.sample(frac=0.2, random_state=0)\ndf.loc[df_sampled.index, 'ProductId'] = 0\n```"], "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": ["<code>\ndf_altered = df.groupby('UserId').apply(lambda x: x.sample(frac=0.2, random_state=0))\ndf_altered['Quantity'] = 0\ndf.update(df_altered)\n"], "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": ["```python\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate_bool[duplicate_bool].index\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": ["import pandas as pd\n\ndf=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])\n\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\n\nduplicate['index_original'] = df.index[duplicate_bool]\n\nresult = duplicate"], "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": ["```python\nimport pandas as pd\n\nexample_df=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])\ndef f(df=example_df):\n    # return the solution in this function\n    # result = f(df)\n    ### BEGIN SOLUTION\n    duplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\n    duplicate = df.loc[duplicate_bool]\n    duplicate['index_original'] = df.index[duplicate_bool]\n    return duplicate\n    ### END SOLUTION\n```"], "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": ["```python\nduplicate_bool = df.duplicated(subset=['col1','col2', '3col'], keep='first')\nduplicate = df.loc[duplicate_bool == True].reset_index()\n\nfirst_duplicates = duplicate.groupby(['col1','col2', '3col']).first()['index']\nduplicate['index_original'] = first_duplicates.reindex(duplicate.set_index(['col1','col2', '3col'])['index']).values\n\nresult = duplicate\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": ["import pandas as pd\n\ndf=pd.DataFrame(data=[[1,1,2,5],[1,3,4,1],[4,1,2,5],[5,1,4,9],[1,1,2,5]],columns=['val', 'col1','col2','3col'])\n\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\n\nduplicate['index_original'] = duplicate.index\n\nresult = duplicate\n"], "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": ["```python\nresult = df.loc[df.groupby(['Sp','Mt'])['count'].idxmax()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": ["```python\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": ["```python\nresult = df[df['count'] == df.groupby(['Sp', 'Mt'])['count'].transform('min')]\n```  \n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": ["```python\nresult = df.loc[df.groupby(['Sp', 'Value'])['count'].idxmax()]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": ["result = df[df['Category'].isin(filter_list)]\n"], "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": ["```python\nresult = df.query(\"Category not in @filter_list\")\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": ["```python\nvalue_vars = [tuple(df.columns.levels[i][j] for i in range(df.columns.nlevels)) for j in range(df.columns.nunique())]\nresult = pd.melt(df, value_vars=value_vars)\n```\n```python\nresult\n```"], "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": ["```python\nresult = pd.melt(df.reset_index(), \n                 id_vars=['index'], \n                 value_vars=[('E', 'B', 'A'), ('F', 'B', 'A'), ('G', 'C', 'A'), ('H', 'C', 'A'), ('I', 'D', 'A'), ('J', 'D', 'A')],\n                 value_name='value', \n                 var_name=['variable_0', 'variable_1', 'variable_2'])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": ["<code>\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n"], "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": ["import pandas as pd\n\ndf = pd.DataFrame.from_dict({'id': ['A', 'B', 'A', 'C', 'D', 'B', 'C'],\n                             'val': [1,2,-3,1,5,6,-2],\n                             'stuff':['12','23232','13','1234','3235','3236','732323']})\n\ndf['cummax'] = df.groupby('id')['val'].cummax()"], "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum().clip(lower=0)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": ["```python\nresult = df.groupby('l')['v'].sum(min_count=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": ["<code>\nresult = df.groupby('r')['v'].sum(min_count=1)\n"], "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": ["```python\nresult = df.groupby('l')['v'].sum(min_count=1).reset_index()\n```  \n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": ["<code>\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            relation = ''\n            if df[col1].nunique() == len(df) and df[col2].nunique() == len(df):\n                relation = 'one-to-one'\n            elif df[col1].nunique() == len(df) and df[col2].nunique() < len(df):\n                relation = 'one-to-many'\n            elif df[col1].nunique() < len(df) and df[col2].nunique() == len(df):\n                relation = 'many-to-one'\n            else:\n                relation = 'many-to-many'\n            result.append(f'{col1} {col2} {relation}')\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": ["```python\nimport pandas as pd\nimport itertools\n\ndf = pd.DataFrame({\n    'Column1': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Column2': [4, 3, 6, 8, 3, 4, 1, 4, 3],\n    'Column3': [7, 3, 3, 1, 2, 2, 3, 2, 7],\n    'Column4': [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'Column5': [1, 1, 1, 1, 1, 1, 1, 1, 1]})\n\ndef get_relationship(df):\n    relationships = []\n    columns = df.columns\n\n    for pair in itertools.combinations(columns, 2):\n        col1, col2 = pair\n        unique_count1 = df[col1].nunique()\n        unique_count2 = df[col2].nunique()\n        total_count1 = len(df[col1])\n        total_count2 = len(df[col2])\n\n        if unique_count1 == total_count1 and unique_count2 == total_count2:\n            relationships.append(f'{col1} {col2} one-2-one')\n            relationships.append(f'{col2} {col1} one-2-one')\n        elif unique_count1 == total_count1:\n            relationships.append(f'{col1} {col2} one-2-many')\n            relationships.append(f'{col2} {col1} many-2-one')\n        elif unique_count2 == total_count2:\n            relationships.append(f'{col1} {col2} many-2-one')\n            relationships.append(f'{col2} {col1} one-2-many')\n        else:\n            relationships.append(f'{col1} {col2} many-2-many')\n            relationships.append(f'{col2} {col1} many-2-many')\n\n    return relationships\n\nresult = get_relationship(df)\n```\n```"], "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": ["```python\n# Calculate the relationship type between columns\ndef calculate_relationship_type(df):\n    relationship_types = {}\n    for col1 in df.columns:\n        for col2 in df.columns:\n            if col1 != col2:\n                unique_pairs = df[[col1, col2]].drop_duplicates()\n                if len(unique_pairs) == len(df):\n                    relationship_types[(col1, col2)] = 'one-to-one'\n                elif len(unique_pairs) == len(df[col1].unique()):\n                    relationship_types[(col1, col2)] = 'one-to-many'\n                elif len(unique_pairs) == len(df[col2].unique()):\n                    relationship_types[(col1, col2)] = 'many-to-one'\n                else:\n                    relationship_types[(col1, col2)] = 'many-to-many'\n            else:\n                relationship_types[(col1, col2)] = None\n    return relationship_types\n\n# Create DataFrame output\nrelationship_types = calculate_relationship_type(df)\nresult = pd.DataFrame(index=df.columns, columns=df.columns)\nfor (col1, col2), relationship in relationship_types.items():\n    result.at[col1, col2] = relationship\n\nresult\n```\n```"], "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": ["```python\nresult = df.corr(method='kendall').applymap(lambda x: 'one-2-one' if x == 1 else ('many-2-one' if x > 0 else ('one-2-many' if x == -1 else 'many-2-many')))\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": ["```python\n# Sorting the DataFrame by the 'bank' column in descending order to prioritize records with bank accounts\ndf_sorted = df.sort_values(by='bank', ascending=False)\n\n# Dropping duplicates based on 'firstname', 'lastname', and 'email', keeping the last occurrence (which has a bank account)\ndf_deduped = df_sorted.drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='last')\n\nresult = df_deduped\n```\n```"], "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": ["```python\ndf = pd.DataFrame({'Revenue': ['24.73', '18.73', '17.56', '29.14', '22.67', '95.85', '84.58', '58.33', '29.63', '243.91', '230.77', '216.58', '206.23', '192.82', '741.15', '556.28', '414.51', '308.82', '2,144.78', '2,036.62', '1,916.60', '1,809.40', '1,711.97', '6,667.22', '5,373.59', '4,071.00', '3,050.20', '-0.06', '-1.88', '', '-0.13', '', '-0.14', '0.07', '0', '0'], \n                   'Other, Net': ['-0.06', '-1.88', '', '-0.13', '', '-0.14', '0.07', '0', '0', '-0.8', '-1.12', '1.32', '-0.05', '-0.34', '-1.37', '-1.9', '-1.48', '0.1', '41.98', '35', '-11.66', '27.09', '-3.44', '14.13', '-18.69', '-4.87', '-5.7']}, \n                  index=['2016-09-30', '2016-06-30', '2016-03-31', '2015-12-31', '2015-09-30', '2015-12-31', '2014-12-31', '2013-12-31', '2012-12-31', '2016-09-30', '2016-06-30', '2016-03-31', '2015-12-31', '2015-09-30', '2015-12-31', '2014-12-31', '2013-12-31', '2012-12-31', '2016-10-31', '2016-07-31', '2016-04-30', '2016-01-31', '2015-10-31', '2016-01-31', '2015-01-31', '2014-01-31', '2013-01-31'])\ndf['Revenue'] = pd.to_numeric(df['Revenue'].str.replace(',', ''), errors='coerce')\ndf['Other, Net'] = pd.to_numeric(df['Other, Net'].str.replace(',', ''), errors='coerce')\nprint(df)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": ["```python\nresult = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0))['Survived'].mean()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": ["import pandas as pd\n\ndf = pd.DataFrame({'Survived': [0,1,1,1,0],\n                   'SibSp': [1,1,0,1,0],\n                   'Parch': [0,0,0,0,1]})\n\nresult = df.groupby(((df['Survived'] > 0) | (df['Parch'] > 0)).map({True: 'Has Family', False: 'No Family'}))['SibSp'].mean()"], "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": ["import pandas as pd\n\ndf = pd.DataFrame({'Survived': [0,1,1,1,0],\n                   'SibSp': [1,1,0,1,0],\n                   'Parch': [0,0,0,0,1]})\n\nresult = df.groupby(((df['SibSp'] == 1) & (df['Parch'] == 1)).map({True: 'Has Family', False: 'No Family'}),\n                    sort=False)['Survived'].mean()\n\nresult['New Family'] = df.loc[(df['SibSp'] == 0) & (df['Parch'] == 1), 'Survived'].mean()\nresult['Old Family'] = df.loc[(df['SibSp'] == 1) & (df['Parch'] == 0), 'Survived'].mean()\n\nresult = result[['Has Family', 'New Family', 'No Family', 'Old Family']]"], "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": ["```python\nresult = df.groupby('cokey').apply(lambda x: x.sort_values(by='A')).reset_index(drop=True)\n```"], "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'cokey':[11168155,11168155,11168155,11168156,11168156],\n                   'A':[18,0,56,96,0],\n                   'B':[56,18,96,152,96]})\n\nresult = df.groupby('cokey').apply(lambda x: x.sort_values(by='A')).reset_index(drop=True)\n```\n```"], "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": ["```python\n# Reshape the DataFrame using stack and unstack\ndf = df.stack(level=0).unstack(level=0)\n\n# Rename the index levels\ndf.index.names = ['index']\n\n# Rename the column levels\ndf.columns = pd.MultiIndex.from_tuples([('Caps', 'A'), ('Caps', 'B')], names=['', ''])\n\n# Reorder the column levels\ndf = df.reorder_levels([1, 0], axis=1)\n```\n```"], "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": ["```python\n# Reshaping the DataFrame to the desired format\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Middle', 'Lower'])\n```\n```python\n# Resulting DataFrame\ndf\n```\n```python\nCaps          A                            B                    \nMiddle        1              2             1            \nLower         a         b      a      b      a         b\n0     1.624345 -0.611756 -0.528172 -1.072969  0.865408 -2.301539\n1     1.744812 -0.761207  0.319039 -0.249370  1.462108 -2.060141\n2    -0.322417 -0.384054  1.133769 -1.099891 -0.172428 -0.877858\n3     0.042214  0.582815 -1.100619  1.144724  0.901591  0.502494\n4     0.900856 -0.683728 -0.122890 -0.935769 -0.267888  0.530355\n```"], "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": ["```python\n# Reshaping the DataFrame\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(level=[0, 1]).unstack(level=[2, 3])\n\n# Reordering and renaming levels\ndf.columns = df.columns.reorder_levels([2, 0, 1])\ndf.columns.names = ['Caps', 'Middle', 'Lower']\n\n# Sorting columns\ndf = df.sort_index(axis=1)\n\n# Output the result\ndf\n```\n"], "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": ["<code>\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n"], "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[1,1,1,2,2,2,3,3,3], 'b':[12,13,23,22,23,24,30,35,55]})\n\nstdMean = lambda x: np.std(x.mean())\n\nresult = df.groupby('a')['b'].agg(mean='mean', std=stdMean)\n```\n```python\nprint(result)\n```\n```python\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[12,13,23,22,23,24,30,35,55], 'b':[1,1,1,2,2,2,3,3,3]})\n\nstdMeann = lambda x: pd.Series({'mean': np.mean(x), 'std': np.std(x)})\nresult = df.groupby('b')['a'].apply(stdMeann)\n\nprint(result)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[1,1,1,2,2,2,3,3,3], 'b':[12,13,23,22,23,24,30,35,55]})\n\nsoftmax = df.groupby('a')['b'].transform(lambda x: np.exp(x) / np.exp(x).sum())\nmin_max = df.groupby('a')['b'].transform(lambda x: (x - x.min()) / (x.max() - x.min()))\n\ndf['softmax'] = softmax\ndf['min-max'] = min_max\ndf\n```\n```plaintext\n   a   b       softmax   min-max\n0  1  12  1.670066e-05  0.000000\n1  1  13  4.539711e-05  0.090909\n2  1  23  9.999379e-01  1.000000\n3  2  22  9.003057e-02  0.000000\n4  2  23  2.447285e-01  0.500000\n5  2  24  6.652410e-01  1.000000\n6  3  30  1.388794e-11  0.000000\n7  3  35  2.061154e-09  0.200000\n8  3  55  1.000000e+00  1.000000\n```"], "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame([[1,1,0,1],[0,0,0,0],[1,0,0,1],[0,1,0,0],[1,1,0,1]],columns=['A','B','C','D'])\n</code>\nresult = ... # put solution in this variable\nBEGIN SOLUTION\n<code>\ndf = df.loc[(df != 0).any(axis=1), (df != 0).any(axis=0)]\n</code>\nEND SOLUTION\nresult = df\n</code>"], "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": ["<code>\nresult = df[(df != 0).any(axis=1)][(df != 0).any(axis=0)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": ["<code>\nresult = df.loc[(df.max(axis=1) <= 2), (df.max() <= 2)]\n"], "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": ["<code>\nresult = df.where(df <= 1, 0)\n"], "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": ["<code>\nresult = s.sort_values().sort_index()\n"], "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": ["<code>\ndf = pd.DataFrame({'index': s.index, '1': s.values}).sort_values(by=['1', 'index'], ascending=[True, True]).reset_index(drop=True)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": ["```python\nresult = df[df['A'].apply(lambda x: str(x).isdigit())]\n```"], "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": ["result = df[df['A'].apply(lambda x: isinstance(x, str))]"], "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": ["<code>\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n"], "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": ["```python\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": ["<code>\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n"], "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": ["<code>\nresult = df.groupby(['Sp', 'Value'])['count'].max().reset_index()\nresult = df.merge(result, on=['Sp', 'Value', 'count'], how='inner')\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": ["```python\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n```\n```"], "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": ["```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": ["<code>\nimport pandas as pd\n\nexample_dict = {'abc':'1/2/2003', 'def':'1/5/2017', 'ghi':'4/10/2013'}\nexample_df = pd.DataFrame({'Member':['xyz', 'uvw', 'abc', 'def', 'ghi'], 'Group':['A', 'B', 'A', 'B', 'B'], 'Date':[np.nan, np.nan, np.nan, np.nan, np.nan]})\n\ndef f(dict=example_dict, df=example_df):\n    df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n    return df\n\nresult = f()\nresult\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": ["```python\ndf['Date'] = df['Member'].map(lambda x: dict.get(x, '17/8/1926'))\ndf['Date'] = pd.to_datetime(df['Date']).dt.strftime('%d-%b-%Y')\n```"], "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Val'].transform('count')\ndf['Count_m'] = df.groupby(df['Date'].dt.to_period('M'))['Val'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Val'].transform('count')\n```\n```python\nEND SOLUTION\n```\n<code>"], "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": ["<code>\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Date'].transform('count')\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')])['Date'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year.rename('year'))['Date'].transform('count')\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Date'].transform('count')\n"], "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Val'].transform('count')\n\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')])['Val'].transform('count')\n\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Val'].transform('count')\n\ndf['Count_w'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month, df['Date'].dt.weekday])['Val'].transform('count')\n\ndf['Count_Val'] = df.groupby('Val')['Date'].transform('count')\n```\n</code>\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": ["<code>\nzero = df[df == 0].groupby('Date').count()\nnon_zero = df[df != 0].groupby('Date').count()\n</code>\n</code>"], "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": ["```python\neven = df.groupby('Date').apply(lambda x: x.apply(lambda y: (y % 2 == 0).sum()))\nodd = df.groupby('Date').apply(lambda x: x.apply(lambda y: (y % 2 != 0).sum()))\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": ["```python\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```\n```python\nresult\n```"], "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": ["<code>\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n"], "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": ["```python\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```\n```"], "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": ["result = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.max, 'E': np.min})\n"], "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": ["```python\nimport dask.dataframe as dd\n\ndf = dd.from_pandas(df, npartitions=2)\n\n# Function to split var2 and explode rows\ndef split_and_explode(row):\n    var2_values = row['var2'].split(',')\n    return pd.DataFrame({'id': [row['id']] * len(var2_values),\n                         'var1': [row['var1']] * len(var2_values),\n                         'var2': var2_values})\n\nresult = df.assign(id=df.index).apply(split_and_explode, axis=1).compute()\n\nresult = result.reset_index(drop=True)\n```\n```"], "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": ["<code>\nimport dask.dataframe as dd\n\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z,Y\"], [\"B\", \"X\"], [\"C\", \"W,U,V\"]], index=[1,2,3], columns=['var1', 'var2']), npartitions=2)\n\ndf = df.assign(var2=df['var2'].str.split(',')).explode('var2')\n"], "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": ["import dask.dataframe as dd\n\nddf = dd.from_pandas(df, npartitions=2)\nresult = ddf.assign(var2=ddf['var2'].str.split('-')).explode('var2').compute()"], "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": ["```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'str': ['Aa', 'Bb', '?? ?', '###', '{}xxa;']})\n\ndef count_special_char(string):\n    special_char = 0\n    for char in string:\n        if not char.isalpha():\n            special_char += 1\n    return special_char\n\ndf[\"new\"] = df[\"str\"].apply(count_special_char)\n\nprint(df)\n```\n"], "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'str': ['Aa', 'Bb', '?? ?', '###', '{}xxa;']})\n\ndef count_special_char(string):\n    special_char = 0\n    for char in string:\n        if not char.isalpha():\n            special_char += 1\n    return special_char\n\ndf[\"new\"] = df[\"str\"].apply(count_special_char)\n\nprint(df)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": ["```python\ndf[['fips', 'row']] = df['row'].str.split(n=1, expand=True)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": ["<code>\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n"], "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": ["```python\ndf[['fips', 'medi', 'row']] = df['row'].str.extract(r'(\\d{5})\\s(.{5})\\s(.*)')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": ["```python\ndf.set_index('Name', inplace=True)\ndf.replace(0, pd.np.nan, inplace=True)\ndf = df.cumsum(axis=1) / df.notna().cumsum(axis=1)\ndf.fillna(0, inplace=True)\ndf.reset_index(inplace=True)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": ["<code>\ndf = df.set_index('Name')\ndf = df.apply(lambda x: x[::-1].cumsum() / (x[::-1] != 0).cumsum(), axis=1).fillna(0).astype(float).round(2)\ndf = df.reset_index()\n"], "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": ["```python\n    df.set_index('Name', inplace=True)\n    cum_sum = df.cumsum(axis=1)\n    non_zero_count = df[df != 0].count(axis=1)\n    result = cum_sum.div(non_zero_count, axis=0).fillna(0)\n    return result.reset_index()\n### END SOLUTION\n```"], "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": ["<code>\ndf = df.set_index('Name')\ndf = df.apply(lambda x: x[::-1].cumsum()[::-1].where(x != 0) / (x != 0).cumsum(), axis=1)\n"], "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": ["```python\ndf['label'] = (df['Close'].diff() > 0).astype(int)\ndf['label'].iloc[0] = 1\n```"], "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": ["```python\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\ndf['label'].iloc[0] = 1\n```\n```python"], "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": ["```python\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf['label'] = df['Close'].diff().fillna(0).apply(lambda x: 1 if x > 0 else (0 if x == 0 else -1))\n```\n</code>"], "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": ["```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['arrival_time'].shift(-1) - df['departure_time']\n```\n```python\ndf['Duration'] = df['Duration'].fillna(pd.Timedelta(seconds=0))\n```\n```python\ndf['Duration'] = df['Duration'].dt.total_seconds().div(60).astype(int)\n```\n```python\ndf['Duration'] = pd.to_timedelta(df['Duration'], unit='m')\n```\n```python\nEND SOLUTION\n```\n```python\ndf\n```"], "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": ["```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": ["<code>\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce').dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = pd.to_datetime(df['departure_time']).dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['Duration'] = (pd.to_datetime(df['departure_time']) - pd.to_datetime(df['arrival_time'].shift())).dt.total_seconds()\n"], "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": ["```python\nresult = df[df['key2'] == 'one'].groupby('key1').size().reset_index(name='count').fillna(0)\n```  \n```"], "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": ["</code>\nresult = df[df['key2'] == 'two'].groupby('key1').size().reset_index(name='count')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": ["import pandas as pd\n\ndf = pd.DataFrame({'key1': ['a', 'a', 'b', 'b', 'a', 'c'],\n                   'key2': ['one', 'two', 'gee', 'two', 'three', 'two']})\n\nresult = df[df['key2'].str.endswith('e')].groupby('key1').size().reset_index(name='count')fillna(0)\n"], "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": ["```python\nmax_result = df.index.max()\nmin_result = df.index.min()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": ["<code>\nmode_result = df.index.mode()[0]\nmedian_result = df.index.sort_values()[len(df.index) // 2]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": ["```python\nresult = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n```"], "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": ["```python\nresult = df[~df['closing_price'].between(99, 101)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": ["```python\nresult = df.loc[df.groupby('item')['diff'].idxmin()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": ["```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[0])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": ["import pandas as pd\n\nstrs = ['Stackoverflow_1234',\n        'Stack_Over_Flow_1234',\n        'Stackoverflow',\n        'Stack_Overflow_1234']\ndf = pd.DataFrame(data={'SOURCE_NAME': strs})\n\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[-1] if '_' in x else x)"], "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": ["<code>\nimport pandas as pd\n\nstrs = ['Stackoverflow_1234',\n        'Stack_Over_Flow_1234',\n        'Stackoverflow',\n        'Stack_Overflow_1234']\nexample_df = pd.DataFrame(data={'SOURCE_NAME': strs})\n\ndef f(df=example_df):\n    df['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[0] if '_' in x else x)\n    return df\n\nresult = f()\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": ["```python\n# Calculate the number of NaN values to be filled with each value\nnum_nan = df['Column_x'].isna().sum()\nhalf_nan = num_nan // 2\n# Fill the first half with 0 and the second half with 1\ndf['Column_x'].fillna(0, inplace=True, limit=half_nan)\ndf['Column_x'].fillna(1, inplace=True)\n```\n```python\nEND SOLUTION\n```\n```python\n# Displaying the DataFrame after handling NaN values\nprint(df)\n```"], "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": ["```python\n# Calculate the number of NaN values to be filled with each value\ntotal_nans = df['Column_x'].isna().sum()\nnans_per_value = total_nans // 3\n\n# Fill NaN values with respective values based on their position\ndf['Column_x'].fillna(0, limit=nans_per_value, inplace=True)\ndf['Column_x'].fillna(0.5, limit=nans_per_value, inplace=True)\ndf['Column_x'].fillna(1, inplace=True)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": ["```python\n# Calculate the number of NaN values to fill with 0 and 1\nnum_nan = df['Column_x'].isnull().sum()\nnum_fill_0 = num_fill_1 = num_nan // 2\n\n# Fill NaN with 0 until num_fill_0\ndf['Column_x'] = df['Column_x'].fillna(0)\nnum_fill_0 -= num_nan - df['Column_x'].value_counts().get(0, 0)\n\n# Fill NaN with 1 until num_fill_1\ndf['Column_x'] = df['Column_x'].fillna(1)\nnum_fill_1 -= num_nan - df['Column_x'].value_counts().get(1, 0)\n\n# If there are still NaN values remaining, fill with the mode\nif num_fill_0 > 0 or num_fill_1 > 0:\n    mode_val = df['Column_x'].mode()[0]\n    df['Column_x'] = df['Column_x'].fillna(mode_val)\n</code>\n```"], "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\na = pd.DataFrame(np.array([[1, 2],[3, 4]]), columns=['one', 'two'])\nb = pd.DataFrame(np.array([[5, 6],[7, 8]]), columns=['one', 'two'])\n\nresult = pd.DataFrame(np.dstack((a.values, b.values)), columns=a.columns)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": ["```python\nresult = pd.DataFrame(list(zip(a.values, b.values, c.values)), columns=['one', 'two'])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": ["```python\nresult = pd.concat([pd.DataFrame(list(zip(*t)), columns=a.columns) for t in zip_longest(a.to_numpy(), b.to_numpy(), fillvalue=np.nan)])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": ["```python\ngroups = df.groupby(['username', pd.cut(df.views, bins)])\nresult = groups.size().unstack(fill_value=0)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": ["```python\nresult = df.groupby(['username', pd.cut(df['views'], bins)]).size().unstack(fill_value=0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": ["<code>\nresult = df.groupby('username')['views'].apply(lambda x: pd.cut(x, bins=bins, right=False).value_counts()).unstack().fillna(0)\n"], "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": ["```python\nresult = df['text'].str.cat(sep=', ')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": ["```python\nresult = df['text'].str.cat(sep='-')\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": ["```python\nresult = pd.DataFrame({'text': [', '.join(df['text'][::-1])]})\n```"], "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": ["<code>\nresult = df['text'].str.cat(sep=', ')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": ["```python\nresult = pd.Series(df['text'].values[::-1].join('-'))\n```"], "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": ["```python\nresult = pd.concat([df1.set_index('id'), df2.set_index('id')], axis=0, join='outer').reset_index()\nresult[['city', 'district']] = result.groupby('id')['city', 'district'].ffill().bfill()\nresult.reset_index(drop=True, inplace=True)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": ["```python\n# Merge dfs based on id, fill city and district from df1 to df2\nmerged_df = pd.merge(df2, df1[['id', 'city', 'district']], on='id', how='left')\n\n# Concatenate dfs and sort by id and date\nresult = pd.concat([df1, merged_df]).sort_values(by=['id', 'date'])\n\n# Convert date format to 'dd-Mon-yyyy'\nresult['date'] = pd.to_datetime(result['date']).dt.strftime('%d-%b-%Y')\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": ["```python\nresult = pd.concat([df1.set_index('id'), df2.set_index('id')], axis=0, keys=['df1', 'df2'])\nresult = result.reset_index().sort_values(by=['id', 'date']).fillna(method='ffill').reset_index(drop=True)\n```\n```python\nresult['city'] = result['city'].where(result['city'].notnull(), result.groupby('id')['city'].transform('first'))\nresult['district'] = result['district'].where(result['district'].notnull(), result.groupby('id')['district'].transform('first'))\nresult = result.sort_values(by=['id', 'date'])\n```\n```python\nresult = result.reset_index(drop=True)\n```\n```python\nresult\n```\n"], "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": ["```python\nresult = pd.merge(C, D, how='outer', on='A').fillna({'B_x': 0, 'B_y': 0})\nresult['B'] = result['B_y'].combine_first(result['B_x'])\nresult = result.drop(columns=['B_x', 'B_y'])\n```"], "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": ["```python\nresult = pd.merge(C, D, how='outer', on='A').fillna({'B_x': C['B']}).drop(columns=['B_y']).rename(columns={'B_x': 'B'})\n```"], "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": ["```python\nC['duplicated'] = C['A'].isin(D['A'])\nresult = pd.merge(C, D, how='left', on='A', suffixes=('', '_y'))\nresult['B'] = result['B_y'].fillna(result['B'])\nresult.drop(columns=['B_y'], inplace=True)\nresult.rename(columns={'B': 'B', 'duplicated': 'duplicated'}, inplace=True)\n```\n"], "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": ["<code>\nresult = df.groupby('user').apply(lambda x: x[['time', 'amount']].values.tolist()).rename('transactions')\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": ["```python\nresult = df.groupby('user').apply(lambda x: x[['time', 'amount']].apply(tuple, axis=1).tolist())\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": ["```python\nresult = df.groupby('user').apply(lambda x: x[['amount', 'time']].apply(tuple, axis=1).tolist())\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": ["<code>\ndf = pd.DataFrame(series.tolist(), index=series.index)\n"], "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": ["<code>\ndf = pd.DataFrame(series.values.tolist(), index=series.index).reset_index()\ndf.columns = ['name', 0, 1, 2, 3]\n"], "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": ["```python\nresult = [col for col in df.columns if s in col and col != s]\n```"], "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": ["```python\nimport pandas as pd\n\ndata = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]}\ndf = pd.DataFrame(data)\ns = 'spike'\n\nresult = [col for col in df.columns if s in col][0]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": ["```python\nresult = {}\nfor col in df.columns:\n    if s in col:\n        new_col_name = f\"{s}{sum(1 for c in df.columns if s in c) + 1}\"\n        result[col] = new_col_name\ndf.rename(columns=result, inplace=True)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": ["```python\ndf = pd.DataFrame({'codes':[[71020], [77085], [36415], [99213, 99287], [99233, 99233, 99233]]})\n\ndf = pd.DataFrame(df['codes'].tolist())\ndf.columns = [f'code_{i}' for i in range(len(df.columns))]\n\nresult = df\n```\n```"], "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": ["<code>\ndf_expanded = df['codes'].apply(pd.Series)\ndf_expanded.columns = [f'code_{i+1}' for i in range(df_expanded.shape[1])]\nresult = pd.concat([df, df_expanded], axis=1).drop('codes', axis=1)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": ["```python\ndf_expanded = df['codes'].apply(pd.Series)\ndf_expanded.columns = [f'code_{i+1}' for i in range(df_expanded.shape[1])]\nresult = pd.concat([df.drop(columns=['codes']), df_expanded], axis=1)\n```\n"], "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame(dict(col1=[[1, 2, 3]] * 2))\nresult = df['col1'].explode().tolist()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": ["</code>\nEND SOLUTION"], "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": ["```python\nresult = ','.join(','.join(map(str, lst)) for lst in df['col1'])\n```"], "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": ["```python\ndf['Time'] = df['Time'].dt.floor('2T')  # Round datetime to nearest 2 minutes\ndf = df.groupby('Time').mean().reset_index()  # Group by rounded time and calculate mean\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df)\n```"], "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": ["```python\nimport pandas as pd\n\n# Sample data\ndf = pd.DataFrame({'Time': ['2015-04-24 06:38:49', '2015-04-24 06:39:19', '2015-04-24 06:43:49', '2015-04-24 06:44:18',\n                            '2015-04-24 06:44:48', '2015-04-24 06:45:18', '2015-04-24 06:47:48', '2015-04-24 06:48:18',\n                            '2015-04-24 06:50:48', '2015-04-24 06:51:18', '2015-04-24 06:51:48', '2015-04-24 06:52:18',\n                            '2015-04-24 06:52:48', '2015-04-24 06:53:48', '2015-04-24 06:55:18', '2015-04-24 07:00:47',\n                            '2015-04-24 07:01:17', '2015-04-24 07:01:47'],\n                   'Value': [0.023844, 0.019075, 0.023844, 0.019075, 0.023844, 0.019075,\n                             0.023844, 0.019075, 0.023844, 0.019075, 0.023844, 0.019075,\n                             0.023844, 0.019075, 0.023844, 0.019075, 0.023844, 0.019075]})\ndf['Time'] = pd.to_datetime(df['Time'])\n\n# Solution\nsampling_rate = '3T'  # 3 minutes\ndf = df.set_index('Time').resample(sampling_rate).sum()\ndf = df.reset_index().fillna(0)\n```\n```"], "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": ["```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n```  \n</code>\n```"], "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": ["```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n```\n```"], "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": ["```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\ndf['TIME'] = df['TIME'].dt.strftime('%d-%b-%Y %a %H:%M:%S')\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": ["```python\nresult = df[filt.reindex(df.index.get_level_values('a')).fillna(False)]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": ["```python\nresult = df[df.index.get_level_values('a').map(filt) & df.index.get_level_values('b').map(filt)]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\" % d for d in range(10)])\ndf.where(np.random.randint(0, 2, df.shape).astype(bool), np.nan, inplace=True)\n\n# Solution\nresult = df.loc[[0, 8]].isnull().any().index.tolist()\n```\n```python\nresult\n```\n```python\n# Output\n['c0', 'c1', 'c3', 'c4', 'c6', 'c7', 'c8', 'c9']\n```"], "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": ["```python\nresult = df.columns[(df.iloc[0].equals(df.iloc[8])) & df.iloc[0].isna()]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n\nresult = df.columns[(df.iloc[0] != df.iloc[8]) & (~df.iloc[0].isnull()) & (~df.iloc[8].isnull())].tolist()\n"], "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": ["```python\nimport pandas as pd\nimport numpy as np\nimport math\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n\n# Solution\nresult = [(df.iloc[0][col], df.iloc[8][col]) for col in df.columns if df.iloc[0][col] != df.iloc[8][col] and not (math.isnan(df.iloc[0][col]) and math.isnan(df.iloc[8][col]))]\n```\n```python\n# END SOLUTION\n```"], "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": ["```python\nts = pd.Series(df['Value'].values, index=df['Date'])\n```\n```python\nEND SOLUTION\n```\n```python\nprint(ts)\n```"], "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": ["<code>\ndf = pd.DataFrame(df.values.flatten().reshape(1, -1), columns=[f'{col}_{i}' for i, col in enumerate(df.columns) for _ in range(len(df))])\n"], "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": ["```python\ndf = pd.DataFrame([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]],columns=['A','B','C','D','E'])\ndf = pd.DataFrame(df.values.flatten(), columns=['Result']).T\ndf.columns = [f\"{col}_{i}\" for i, col in enumerate(df.columns)]\n```\n"], "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": ["import pandas as pd\n\ndf = pd.DataFrame([(.21, .3212), (.01, .61237), (.66123, .03), (.21, .18),(pd.NA, .18)],\n                  columns=['dogs', 'cats'])\n\ndf['dogs'] = df['dogs'].round(2)"], "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame([(.21, .3212), (.01, .61237), (.66123, pd.NA), (.21, .18),(pd.NA, .188)],\n                  columns=['dogs', 'cats'])\n\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if not pd.isna(x) else pd.NA)\ndf['cats'] = df['cats'].apply(lambda x: round(x, 2) if not pd.isna(x) else pd.NA)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": ["```python\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": ["```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": ["<code>\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n"], "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": ["```python\nresult = df.sort_index(level=['time'])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": ["```python\nresult = df.groupby(level='time', group_keys=False).apply(lambda x: x.sort_values(by='VIM'))\n```"], "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": ["```python\ndates_to_delete = ['2020-02-17', '2020-02-18']\nfor date in dates_to_delete:\n    df = df[~df.index.date == pd.to_datetime(date).date()]\nresult = df\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": ["```python\ndf = df[~df.index.strftime('%Y-%m-%d').isin(['2020-02-17', '2020-02-18'])]\nresult = df.index.strftime('%d-%b-%Y %A')\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": ["```python\nresult = corr[(corr > 0.3) & (corr < 1)].stack().reset_index(name='Pearson Correlation Coefficient')\nresult.columns = ['Col1', 'Col2', 'Pearson Correlation Coefficient']\n```"], "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": ["```python\nresult = corr[corr > 0.3].stack().reset_index().iloc[:, [0, 1, 2]]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": ["import pandas as pd\n\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=list('ABA'))\n\ndf.rename(columns={df.columns[-1]: 'Test'}, inplace=True)"], "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=list('ABA'))\n\nfirst_column_name = df.columns[0]\nnew_column_name = 'Test'\ndf.rename(columns={first_column_name: new_column_name}, inplace=True)\n\nresult = df\n```\n```"], "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'bit1': [0, 1, 1],\n                   'bit2': [0, 1, 0],\n                   'bit3': [1, 0, 1],\n                   'bit4': [1, 0, 1],\n                   'bit5': [0, 1, 1]})\n\n# Counting frequent values in each row\ndf['frequent'] = df.apply(lambda x: x.value_counts().idxmax(), axis=1)\ndf['freq_count'] = df.apply(lambda x: x.value_counts().max(), axis=1)\n```\n```python\ndf = ... # put solution in this variable\n```"], "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": ["```python\n# Calculate the most frequent value and its count for each row\ndf['frequent'] = df.mode(axis=1).iloc[:, 0]\ndf['freq_count'] = df.apply(lambda row: row.value_counts().max(), axis=1)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'bit1': [0, 2, 4],\n                   'bit2': [0, 2, 0],\n                   'bit3': [3, 0, 4],\n                   'bit4': [3, 0, 4],\n                   'bit5': [0, 2, 4],\n                   'bit6': [3, 0, 5]})\n\n# Function to find frequent values in a row and count them\ndef find_frequent(row):\n    counts = row.value_counts()  # Count occurrences of each value\n    max_count = counts.max()  # Find maximum count\n    frequent_values = counts[counts == max_count].index.tolist()  # Get values with maximum count\n    return frequent_values, max_count\n\n# Apply the function to each row and create new columns\ndf['frequent'], df['freq_count'] = zip(*df.apply(find_frequent, axis=1))\n\ndf\n```\n```"], "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": ["<code>\nresult = df.replace('NULL', pd.NA).groupby([\"id1\",\"id2\"]).mean()\n"], "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"foo\":[8,5,3,4,7,9,5,7], \n                   \"id1\":[1,1,1,1,1,1,1,1], \n                   \"bar\":['NULL','NULL','NULL',1,3,4,2,3], \n                   \"id2\":[1,1,1,2,2,3,3,1]})\n\n# Replace 'NULL' with 0\ndf['bar'] = df['bar'].replace('NULL', 0).astype(int)\n\n# Group by id1 and id2, then calculate the mean for both 'foo' and 'bar'\nres = df.groupby([\"id1\", \"id2\"]).agg({'foo':'mean', 'bar':'mean'})\n\nresult = res.reset_index()  # Reset index for desired format\n```\n```"], "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": ["```python\nresult = pd.merge(df_a, df_b[['EntityNum', 'a_col']], on='EntityNum')\n```"], "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": ["<code>\nresult = pd.merge(df_a, df_b[['EntityNum', 'b_col']], on='EntityNum')\n"], "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": ["import numpy as np\na = np.array([[1,2],[3,4]])\n"], "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": ["import numpy as np\nx = np.array([1400, 1500, 1600, np.nan, np.nan, np.nan ,1700])\n\nx = x[~np.isnan(x)]"], "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": ["```python\nx[np.isnan(x)] = np.inf\n```\n```"], "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": ["<code>\nresult = [list(filter(lambda val: not np.isnan(val), sublist)) for sublist in x]\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": ["```python\nimport numpy as np\na = np.array([1, 0, 3])\n\nb = np.eye(np.max(a) + 1)[a]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": ["```python\nb = np.eye(a.max() + 1)[a]\n```\n```"], "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": ["```python\nmin_val = np.min(a)\nmax_val = np.max(a)\nb = np.zeros((a.size, max_val - min_val + 1), dtype=int)\nb[np.arange(a.size), a - min_val] = 1\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": ["```python\nimport numpy as np\na = np.array([1.5, -0.4, 1.3])\n\n# Calculate the indices for one-hot encoding\nindices = np.argsort(a)\nn = len(a)\nb = np.zeros((n, n), dtype=int)\nb[np.arange(n), indices] = 1\n\nprint(b)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": ["```python\nimport numpy as np\na = np.array([[1,0,3], [2,4,1]])\nnum_classes = np.max(a) + 1\nb = np.zeros((a.size, num_classes), dtype=int)\nb[np.arange(a.size), a.ravel()] = 1\nb = b.reshape((*a.shape, num_classes))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": ["```python\nresult = np.percentile(a, p)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": ["<code>\nimport numpy as np\nA = np.array([1,2,3,4,5,6])\nncol = 2\n\nB = np.reshape(A, (-1, ncol))\n"], "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": ["```python\nB = A.reshape(nrow, -1)\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": ["```python\nimport numpy as np\nA = np.array([1,2,3,4,5,6,7])\nncol = 2\n\ndef vec2matrix(arr, ncol):\n    nrows = len(arr) // ncol\n    return arr[:nrows * ncol].reshape(nrows, ncol)\n\nB = vec2matrix(A, ncol)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": ["```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": ["```python\nresult = np.roll(a, shift)\nresult[:abs(shift)] = np.nan\nresult[-abs(shift):] = np.nan\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": ["```python\nresult = np.roll(xs, shift, axis=1)\n``` \n</code>"], "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": ["<code>\nimport numpy as np\n\ndef shift(xs, shifts):\n    result = np.full_like(xs, np.nan)\n    for i in range(xs.shape[0]):\n        if shifts[i] > 0:\n            result[i, shifts[i]:] = xs[i, :-shifts[i]]\n        elif shifts[i] < 0:\n            result[i, :shifts[i]] = xs[i, -shifts[i]:]\n    return result\n\na = np.array([[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.],\n              [1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.]])\nshifts = [-2, 3]\n\nresult = shift(a, shifts)\n"], "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": ["<code>\nimport numpy as np\n\nnp.random.seed(42)\nr_old = np.random.randint(3, size=(100, 2000)) - 1\n\nnp.random.seed(42)\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n"], "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": ["```python\nresult = np.argmax(a)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": ["```python\nresult = np.unravel_index(np.argmin(a), a.shape)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": ["```python\nresult = np.unravel_index(np.argmax(a, order='F'), a.shape, order='F')\n```  \n```  \nEND SOLUTION\n```  "], "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": ["```python\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\nresult = np.unravel_index(np.argmax(a), a.shape)\n```\n```python\nprint(result)\n```\n```python\n# Output: (1, 0)\n```"], "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": ["<code>\nimport numpy as np\nexample_a = np.array([[10,50,30],[60,20,40]])\ndef f(a = example_a):\n    # return the solution in this function\n    # result = f(a)\n    ### BEGIN SOLUTION\n    max_index = np.argmax(a)\n    max_index_coords = np.unravel_index(max_index, a.shape)\n    return max_index_coords\n    ### END SOLUTION\nprint(f())"], "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": ["```python\nimport numpy as np\n\na = np.array([[10, 50, 30], [60, 20, 40]])\n\n# Flatten the array and get the indices of the second largest value\nflat_indices = np.argsort(a.ravel())[-2]\n\n# Unravel the flat index to get the multi-dimensional indices\nindices = np.unravel_index(flat_indices, a.shape, order='C')\n\nresult = indices\n```\n```"], "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": ["import numpy as np\na = np.array([[np.nan, 2., 3., np.nan],\n              [1., 2., 3., 9]])\nz = np.any(np.isnan(a), axis=0)\na = np.delete(a, np.where(z)[0], axis=1)"], "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": ["```python\na = a[~np.isnan(a).any(axis=1)]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": ["```python\nresult = np.array(a)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": ["```python\na = a[:, permutation]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(a)\n```"], "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": ["```python\nresult = a[permutation]\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": ["```python\nrow, col = np.unravel_index(np.argmin(a), a.shape)\nresult = (row, col)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": ["import numpy as np\na = np.array([[1, 2], [3, 0]])"], "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": ["import numpy as np\na = np.array([[1, 0], [0, 2]])\nresult = np.argwhere(a == np.min(a)).tolist()"], "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": ["import numpy as np\ndegree = 90\nresult = np.sin(np.radians(degree))"], "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": ["<code>\nimport numpy as np\n\ndegree = 90\nradian = np.deg2rad(degree)\nresult = np.cos(radian)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": ["import numpy as np\nnumber = np.random.randint(0, 360)"], "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": ["```python\nresult = np.arcsin(value) * 180 / np.pi\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": ["```python\nresult = np.pad(A, (0, max(0, length - len(A))), mode='constant')\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": ["import numpy as np\nA = np.array([1,2,3,4,5])\nlength = 8\n\nresult = np.pad(A, (0, length - len(A)), mode='constant', constant_values=0)"], "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": ["```python\na = np.arange(4).reshape(2, 2)\npower = 5\n\n# Raise array to power using numpy's power function\na_power = np.power(a, power)\n```\n```"], "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": ["<code>\n    result = np.power(a, power)\n    ### END SOLUTION\n    return result\nprint(f())\n</code>"], "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": ["<code>\nfrom fractions import Fraction\n\nnumerator = 98\ndenominator = 42\n\nresult = Fraction(numerator, denominator)\n</code>\n</code>"], "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": ["```python\nimport numpy as np\n\ndef f(numerator=98, denominator=42):\n    gcd = np.gcd(numerator, denominator)\n    reduced_numerator = numerator // gcd\n    reduced_denominator = denominator // gcd\n    return (reduced_numerator, reduced_denominator)\n\n### END SOLUTION\n```"], "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": ["import numpy as np\n\nnumerator = 98\ndenominator = 42\n\ndef reduce_fraction(numerator, denominator):\n    if denominator == 0:\n        return (np.nan, np.nan)\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    common_divisor = gcd(numerator, denominator)\n    reduced_numerator = numerator // common_divisor\n    reduced_denominator = denominator // common_divisor\n    \n    return (reduced_numerator, reduced_denominator)\n\nresult = reduce_fraction(numerator, denominator)\n"], "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": ["```python\nresult = (a + b + c) / 3\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": ["```python\nresult = np.maximum(a, np.maximum(b, c))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": ["```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3,  4],\n              [ 5,  6,  7,  8,  9],\n              [10, 11, 12, 13, 14],\n              [15, 16, 17, 18, 19],\n              [20, 21, 22, 23, 24]])\n\nresult = np.diag(a[:, ::-1])\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": ["```python\ndiagonal_reverse = np.diag_indices(a.shape[0])[0][::-1], np.diag_indices(a.shape[1])[1]\nresult = a[diagonal_reverse]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": ["```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3,  4],\n   [ 5,  6,  7,  8,  9],\n   [10, 11, 12, 13, 14],\n   [15, 16, 17, 18, 19],\n   [20, 21, 22, 23, 24]])\n\nresult = np.diag(np.fliplr(a))\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": ["```python\nresult = np.diag(np.fliplr(a), k=0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": ["```python\nresult = [element for row in X for element in row]\n```\n```"], "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": ["```python\nresult = X.flatten(order='C').tolist()\n```"], "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": ["```python\n    result = []\n    for row in X:\n        for element in row:\n            result.append(element)\n    return result\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": ["import numpy as np\nX = np.random.randint(2, 10, (5, 6))\n\nresult = []\nfor x in np.nditer(X, order='F'):\n    result.append(x)"], "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": ["import numpy as np\n\nmystr = \"100110\"\nresult = np.array([int(digit) for digit in mystr])\n"], "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": ["<code>\nresult = np.cumsum(a[:, col] * multiply_number)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": ["<code>\nresult = np.cumsum(a[row] * multiply_number)\n"], "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": ["```python\nresult = np.prod(a[row] / divide_number)\n```\n```"], "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": ["```python\nimport numpy as np\na = np.array([[0,1,0,0], [0,0,1,0], [0,1,1,0], [1,0,0,1]])\n```\nEND SOLUTION"], "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": ["```python\nrow_size = a.shape[1]\n```\n```python\nEND SOLUTION\n```\n```python\nresult = row_size\n```"], "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": ["```python\nimport numpy as np\nimport scipy.stats\n\na = np.random.randn(40)\nb = 4*np.random.randn(50)\n\n# Calculate degrees of freedom\ndof = (a.size + b.size) - 2\n\n# Calculate pooled standard deviation\ns_pool = np.sqrt(((a.size - 1) * np.var(a, ddof=1) + (b.size - 1) * np.var(b, ddof=1)) / dof)\n\n# Calculate t-statistic\nt_stat = (np.mean(a) - np.mean(b)) / (s_pool * np.sqrt(1/a.size + 1/b.size))\n\n# Calculate p-value\np_value = 2 * (1 - scipy.stats.t.cdf(abs(t_stat), dof))\n\np_value\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": ["```python\nimport numpy as np\nimport scipy.stats\n\n# Generate sample data\na = np.random.randn(40)\nb = 4*np.random.randn(50)\n\n# Omit NaN values\na = a[~np.isnan(a)]\nb = b[~np.isnan(b)]\n\n# Perform two-tailed t-test\nt_stat, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n\n# Output the p-value\nprint(\"p-value:\", p_value)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": ["<code>\nimport numpy as np\nimport scipy.stats\n\namean = -0.0896\navar = 0.954\nanobs = 40\nbmean = 0.719\nbvar = 11.87\nbnobs = 50\n\n# Calculate pooled standard deviation\npooled_var = ((anobs - 1) * avar + (bnobs - 1) * bvar) / (anobs + bnobs - 2)\npooled_std = np.sqrt(pooled_var)\n\n# Calculate t-statistic\nt_statistic = (amean - bmean) / (pooled_std * np.sqrt(1 / anobs + 1 / bnobs))\n\n# Calculate degrees of freedom\ndegrees_of_freedom = anobs + bnobs - 2\n\n# Calculate p-value\np_value = 2 * (1 - scipy.stats.t.cdf(abs(t_statistic), df=degrees_of_freedom))\n</code>\n</code>"], "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": ["```python\noutput = np.array([x for x in A if not any(np.array_equal(x, y) for y in B)])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": ["```python\nimport numpy as np\n\nA = np.asarray([[1,1,1], [1,1,2], [1,1,3], [1,1,4]])\nB = np.asarray([[0,0,0], [1,0,2], [1,0,3], [1,0,4], [1,1,0], [1,1,1], [1,1,4]])\n\n# Symmetric difference: elements in A not in B and elements in B not in A\noutput = np.vstack((A[~np.isin(A, B).all(axis=1)], B[~np.isin(B, A).all(axis=1)]))\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": ["import numpy as np\na = np.random.rand(3, 3, 3)\nb = np.arange(3*3*3).reshape((3, 3, 3))\n\nsort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n"], "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": ["```python\nsort_indices = np.argsort(a, axis=0)\nc = b[sort_indices, np.arange(b.shape[1])[:, None], np.arange(b.shape[2])]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(c)\nprint(\"Desired shape of b[sort_indices]: (3, 3, 3).\")\nprint(\"Actual shape of b[sort_indices]:\", c.shape)\n```\n```python\nDesired shape of b[sort_indices]: (3, 3, 3).\nActual shape of b[sort_indices]: (3, 3, 3)\n```"], "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": ["```python\nsort_indices = np.argsort(a, axis=0)[::-1]\nc = b[sort_indices]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(c)\nprint(\"Desired shape of b[sort_indices]: (3, 3, 3).\")\nprint(\"Actual shape of b[sort_indices]:\", c.shape)\n```"], "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": ["```python\nsum_a = np.sum(a, axis=(1, 2))\nsorted_indices = np.argsort(sum_a)\nresult = b[sorted_indices]\n```\n```python\n</code>\nEND SOLUTION\n```\n```python\nprint(result)\n```"], "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": ["<code>\nimport numpy as np\na = np.arange(12).reshape(3, 4)\na = np.delete(a, 2, axis=1)\n</code>\n</code>"], "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": ["```python\na = np.delete(a, 2, axis=0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": ["```python\na = np.delete(arr, [0, 2], axis=1)\n```\n```"], "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": ["```python\nimport numpy as np\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\ndel_col = [1, 2, 4, 5]\n\nresult = a[:, [i for i in range(a.shape[1]) if i not in del_col]]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": ["```python\na = np.insert(a, pos, element)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": ["<code>\nimport numpy as np\na = np.array([[1,2],[3,4]])\n\npos = 1\nelement = [3,5]\n\na = np.insert(a, pos, element, axis=0)\n"], "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": ["```python\n    a = np.insert(a, pos, element)\n    ### END SOLUTION\n    return a\n\n# Test the function\na = f()\nprint(a)\n```"], "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": ["<code>\nimport numpy as np\na = np.array([[1,2],[3,4]])\npos = [1, 2]\nelement = np.array([[3, 5], [6, 6]])\n\nfor i, p in enumerate(pos):\n    a = np.insert(a, p+i, element[i], axis=0)\n"], "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": ["```python\nimport numpy as np\n\npairs = [(2, 3), (3, 4), (4, 5)]\narray_of_arrays = np.array([np.arange(a*b).reshape(a,b) for (a, b) in pairs])\n\nresult = np.array([np.copy(arr) for arr in array_of_arrays])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": ["import numpy as np\na = np.repeat(np.arange(1, 6).reshape(1, -1), 3, axis=0)\n\nresult = np.all(np.all(a == a[0], axis=1))"], "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": ["import numpy as np\na = np.repeat(np.arange(1, 6).reshape(-1, 1), 3, axis=1)\nresult = np.all(a[:, 1:] == a[:, :-1])"], "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": ["```python\nimport numpy as np\n\nexample_a = np.repeat(np.arange(1, 6).reshape(1, -1), 3, axis=0)\n\ndef f(a=example_a):\n    # return the solution in this function\n    # result = f(a)\n    ### BEGIN SOLUTION\n    result = np.all(np.all(a == a[0], axis=1))\n    ### END SOLUTION\n    return result\n\nprint(f())\n```\n</code>"], "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": ["<code>\nimport numpy as np\nfrom scipy.integrate import simps\n\nx = np.linspace(0, 1, 20)\ny = np.linspace(0, 1, 30)\n\ndx = x[1] - x[0]\ndy = y[1] - y[0]\n\nf = (np.cos(x) ** 4) + (np.sin(y) ** 2)\n\nresult = simps(simps(f, x), y)\n"], "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": ["```python\nimport numpy as np\nfrom scipy.integrate import simps\n\nexample_x = np.linspace(0, 1, 20)\nexample_y = np.linspace(0, 1, 30)\n\ndef f(x, y):\n    return np.cos(x)**4 + np.sin(y)**2\n\nresult = simps(simps(f(example_x[:, None], example_y[None, :]), example_x), example_y)\nprint(\"Result of the 2D integral:\", result)\n```"], "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": ["```python\ndef ecdf(x):\n    # normalize X to sum to 1\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\nresult = ecdf(grades)(grades)\n```\n```plaintext\nEND SOLUTION\n```"], "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": ["<code>\nimport numpy as np\n\ndef ecdf(x):\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\neval = np.array([88, 87, 62])\n\necdf_values = ecdf(grades)\nresult = np.interp(eval, np.linspace(0, 1, len(ecdf_values)), ecdf_values)\n"], "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": ["<code>\nimport numpy as np\n\ngrades = np.array((93.5, 93, 60.8, 94.5, 82, 87.5, 91.5, 99.5, 86, 93.5, 92.5, 78, 76, 69, 94.5,\n                   89.5, 92.8, 78, 65.5, 98, 98.5, 92.3, 95.5, 76, 91, 95, 61))\nthreshold = 0.5\n\ndef ecdf(x):\n    # normalize X to sum to 1\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\necdf_values = ecdf(grades)\n\nfor i in range(len(grades)):\n    for j in range(i + 1, len(grades)):\n        if np.all(ecdf_values[i:j] < threshold):\n            low = grades[i]\n            high = grades[j - 1]\n            break\n\nprint(\"Lowest:\", low)\nprint(\"Highest:\", high)\n</code>"], "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": ["```python\nnums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": ["import torch\nimport numpy as np\na = torch.ones(5)\na_np = a.numpy()\n"], "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": ["<code>\na_pt = torch.tensor(a)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": ["<code>\na_np = a.numpy()\n"], "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": ["```python\na_tf = tf.convert_to_tensor(a)\n```\n```"], "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": ["<code>\nimport numpy as np\na = np.array([4, 1, 0, 8, 5, 2])\n</code>\nresult = ... # put solution in this variable\nBEGIN SOLUTION\n<code>\nresult = np.argsort(a)[::-1]\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": ["import numpy as np\na = np.array([4, 1, 0, 8, 5, 2])\n\nresult = np.argsort(a).tolist()"], "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": ["```python\nimport numpy as np\n\na = np.array([4, 1, 0, 8, 5, 2])\nN = 3\n\nindices = np.argsort(a)[::-1][:N]\nresult = indices.tolist()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": ["```python\nresult = np.linalg.matrix_power(A, n)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": ["```python\nresult = np.array([a[i:i+2, j:j+2] for i in range(0, a.shape[0], 2) for j in range(0, a.shape[1], 2)])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": ["```python\nimport numpy as np\n\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\n\nresult = np.lib.stride_tricks.sliding_window_view(a, (2, 2))\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": ["```python\nresult = np.array([a[i:i+2, j:j+2] for i in range(0, a.shape[0], 2) for j in range(0, a.shape[1], 2)])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": ["<code>\nresult = np.array([a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0]-patch_size+1, patch_size) for j in range(0, a.shape[1]-patch_size+1, patch_size)])\n"], "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": ["<code>\nresult = a.transpose(1, 0, 2).reshape(h, -1)\n"], "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": ["<code>\nimport numpy as np\na = np.array([[1,5,9,13,17],\n              [2,6,10,14,18],\n              [3,7,11,15,19],\n              [4,8,12,16,20]])\npatch_size = 2\n\nresult = np.array([a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0], patch_size) for j in range(0, a.shape[1], patch_size)])\n"], "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": ["```python\nresult = a[:, low:high]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": ["<code>\nresult = a[low:high+1]\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": ["<code>\nimport numpy as np\na = np.array([[ 0,  1,  2,  3, 5, 6, 7, 8],\n              [ 4,  5,  6,  7, 5, 3, 2, 5],\n              [ 8,  9, 10, 11, 4, 5, 3, 5]])\nlow = 1\nhigh = 10\n\nresult = a[:, max(low, 0):min(high, a.shape[1])]\n"], "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": ["<code>\nimport numpy as np\nstring = \"[[ 0.5544  0.4456], [ 0.8811  0.1189]]\"\na = np.array(eval(string.replace(' ', ',')))\n"], "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": ["```python\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n``` \n```"], "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": ["```python\nimport numpy as np\n\nmin_val = 0\nmax_val = 1\nn = 10000\n\n# Generate log-uniform samples\nlog_uniform_samples = np.exp(np.random.uniform(np.log(min_val), np.log(max_val), n))\n\nresult = log_uniform_samples\n```\n```"], "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": ["<code>\nimport numpy as np\n\ndef f(min=1, max=np.e, n=10000):\n    return np.exp(np.random.uniform(np.log(min), np.log(max), n))\n\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": ["```python\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": ["<code>\nimport numpy as np\nimport pandas as pd\n\nA = pd.Series(np.random.randn(10,))\na = 2\nb = 3\nc = 4\n\nB = pd.Series(index=A.index)\n\nB[0] = a * A[0]\nB[1] = a * A[1] + b * B[0]\n\nfor t in range(2, len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n"], "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": ["```python\nresult = np.array([], dtype=float).reshape(0,)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": ["```python\nresult = np.empty((3, 0))\n```\n```"], "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": ["```python\ndef sub2ind(array_shape, rows, cols, slices):\n    return np.ravel_multi_index((rows, cols, slices), array_shape, order='F')\n\ndims = (3, 4, 2)\na = np.random.rand(*dims)\nindex = (1, 0, 1)\n\nresult = sub2ind(dims, *index)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": ["<code>\ndef sub2ind(dims, index):\n    strides = np.cumprod((1,) + dims[::-1][:-1])[::-1]\n    return np.dot(index, strides)\n\nresult = sub2ind(dims, index)\n</code>\n</code>"], "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": ["```python\nvalues = np.zeros((2, 3), dtype=[('a', 'int32'), ('b', 'float32'), ('c', 'float32')])\ndf = pd.DataFrame(data=values, index=index, columns=columns)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": ["```python\nresult = np.bincount(accmap, weights=a)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": ["```python\nresult = [np.max(a[index == i]) for i in range(np.max(index) + 1)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": ["<code>\nimport numpy as np\n\na = np.arange(1, 11)\naccmap = np.array([0, 1, 0, 0, 0, -1, -1, 2, 2, 1])\n\nresult = np.bincount(accmap, weights=a)\n"], "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": ["<code>\nimport numpy as np\na = np.arange(1,11)\nindex = np.array([0,1,0,0,0,-1,-1,2,2,1])\n\nresult = np.minimum.reduceat(a, np.unique(index, return_index=True)[1])\n"], "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": ["```python\nz = np.vectorize(elementwise_function)(x, y)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": ["```python\nresult = np.random.choice(lista_elegir, samples, p=probabilit)\n``` \n</code>"], "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": ["<code>\nimport numpy as np\na = np.ones((3, 3))\nlow_index = -1\nhigh_index = 2\n\nresult = a[max(0, low_index):min(a.shape[0], high_index), max(0, low_index):min(a.shape[1], high_index)]\nresult = np.pad(result, ((abs(min(0, low_index)), max(0, high_index - a.shape[0])),\n                     (abs(min(0, low_index)), max(0, high_index - a.shape[1]))), mode='constant')\n"], "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": ["<code>\nresult = x[x >= 0]\n"], "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": ["```python\nresult = x[np.iscomplex(x)]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": ["```python\nimport numpy as np\n\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n\nnum_bins = len(data) // bin_size\nbin_data = np.split(data[:num_bins * bin_size], num_bins)\nbin_data_mean = np.mean(bin_data, axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": ["<code>\nimport numpy as np\n\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n\nnum_bins = len(data) // bin_size\ndata_binned = data[:num_bins*bin_size].reshape(num_bins, bin_size)\nbin_data_max = np.max(data_binned, axis=1)\n"], "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": ["<code>\nimport numpy as np\n\ndata = np.array([[4, 2, 5, 6, 7],\n                  [5, 4, 3, 5, 7]])\nbin_size = 3\n\nnum_rows, num_cols = data.shape\nnum_bins = num_cols // bin_size\n\nbin_data = data[:, :num_bins*bin_size].reshape(num_rows, num_bins, bin_size)\nbin_data_mean = np.mean(bin_data, axis=2)\n"], "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": ["```python\nimport numpy as np\n\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n\n# Reshape the data array into equal partitions of given length starting from the end\nbin_data = np.array_split(data[::-1], len(data) // bin_size)[::-1]\n\n# Calculate the mean of each bin\nbin_data_mean = np.mean(bin_data, axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nbin_data_mean\n```"], "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": ["<code>\nimport numpy as np\n\ndata = np.array([[4, 2, 5, 6, 7],\n                 [5, 4, 3, 5, 7]])\nbin_size = 3\n\n# Reverse the data along the columns axis\nreversed_data = np.flip(data, axis=1)\n\n# Reshape the reversed data into bins of the specified size\nbin_data = np.array([reversed_data[:, i:i+bin_size] for i in range(0, reversed_data.shape[1], bin_size)])\n\n# Calculate the mean of each bin\nbin_data_mean = np.mean(bin_data, axis=2)\n\n# Reverse the mean data along the columns axis to get the original order\nbin_data_mean = np.flip(bin_data_mean, axis=1)\n"], "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": ["```python\nimport numpy as np\n\ndata = np.array([[4, 2, 5, 6, 7],\n                 [5, 4, 3, 5, 7]])\nbin_size = 3\n\n# Calculate the number of bins\nnum_bins = data.shape[1] // bin_size\n\n# Reshape the data into bins\nbin_data = np.reshape(data[:, -(num_bins * bin_size):], (data.shape[0], num_bins, bin_size))\n\n# Calculate the mean of each bin\nbin_data_mean = np.mean(bin_data, axis=2)\n```\n```python\nEND SOLUTION\n```\n```python\nbin_data_mean\n```"], "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": ["```python\ndef smoothclamp(x, x_min, x_max):\n    t = (x - x_min) / (x_max - x_min)\n    t = np.clip(t, 0, 1)\n    return x_min + t * (x_max - x_min) * (3 * t ** 2 - 2 * t ** 3)\n```"], "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": ["```python\ndef smoothclamp(x, x_min, x_max, N):\n    t = np.clip((x - x_min) / (x_max - x_min), 0.0, 1.0)\n    return x_min + (x_max - x_min) * np.polyval(np.poly1d([-20, 70, -84, 35, 0, 0]), t)\n\nx = 0.25\nx_min = 0\nx_max = 1\nN = 5\nprint(smoothclamp(x, x_min, x_max, N))\n```\n```"], "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": ["<code>\nresult = np.correlate(a, np.roll(b[::-1], 1), mode='valid')\n"], "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": ["```python\nresult = df.to_numpy().reshape(4, 15, 5)\n```\n```python"], "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": ["```python\nresult = df.to_numpy().reshape(15, 4, 5)\n```\n```python"], "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": ["import numpy as np\n\ndef int_to_binary_array(num, m):\n    binary_str = bin(num)[2:].zfill(m)\n    binary_array = np.array([int(bit) for bit in binary_str])\n    return binary_array\n\na = np.array([1, 2, 3, 4, 5])\nm = 8\n\nresult = np.array([int_to_binary_array(num, m) for num in a])"], "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": ["```python\ndef convert_to_binary_arrays(nums, m):\n    binary_arrays = []\n    for num in nums:\n        binary_array = [(num >> i) & 1 for i in range(m-1, -1, -1)]\n        binary_arrays.append(binary_array)\n    return np.array(binary_arrays)\n\nresult = convert_to_binary_arrays(a, m)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": ["```python\ndef int_to_binary_array(num, m):\n    binary = bin(num)[2:]\n    binary = '0' * (m - len(binary)) + binary\n    return tuple(map(int, binary))\n\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\nm = 6\n\nbinary_arrays = [int_to_binary_array(num, m) for num in a]\nresult = np.bitwise_xor.reduce(binary_arrays, axis=0)\n```\n```"], "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": ["<code>\nmean = np.mean(a)\nstd_dev = np.std(a)\nthird_std_dev = 3 * std_dev\nresult = (mean - third_std_dev, mean + third_std_dev)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": ["```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 2 * std_dev, mean + 2 * std_dev)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": ["```python\n    mean = np.mean(a)\n    std_dev = np.std(a)\n    lower_bound = mean - 3 * std_dev\n    upper_bound = mean + 3 * std_dev\n    return (lower_bound, upper_bound)\n### END SOLUTION\n```"], "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": ["```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nthreshold = 2 * std_dev\nlower_bound = mean - threshold\nupper_bound = mean + threshold\nresult = np.abs(a - mean) > threshold\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": ["```python\nimport numpy as np\n\nDataArray = np.arange(-5.5, 10.5)\npercentile = 50\nmasked_data = np.ma.masked_where(DataArray < 0, DataArray)\nprob = np.percentile(masked_data, percentile)\n```\n```python\nEND SOLUTION\n</code>\n```\n"], "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": ["```python\na[:zero_rows+1, zero_cols] = 0\na[zero_rows, :zero_cols+1] = 0\n```\n```python\nEND SOLUTION\n```\n```python\nprint(a)\n```"], "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": ["<code>\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n</code>\nEND SOLUTION\na\n</code>"], "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": ["<code>\na[1,:] = 0\na[:,0] = 0\n"], "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": ["```python\nmask = np.equal(a, np.amax(a, axis=1)[:, np.newaxis])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": ["```python\nmask = (a == np.min(a, axis=1)[:, np.newaxis])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": ["```python\nresult = np.corrcoef(post, distance)[0, 1]\n```\n```"], "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": ["```python\nresult = np.tensordot(X, X, axes=([0],[0]))\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": ["<code>\nX = np.sqrt(Y.diagonal(axis1=1, axis2=2))\n"], "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": ["```python\nis_contained = number in a\n```\n```plaintext\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": ["```python\nimport numpy as np\n\nA = np.array([1, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 8])\nB = np.array([1, 2, 8])\n\nC = np.setdiff1d(A, B)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": ["```python\nC = A[np.isin(A, B)]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": ["```python\nC = A[np.logical_or.reduce([(A > b_left) & (A < b_right) for b_left, b_right in zip(B[:-1], B[1:])])]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": ["```python\nranked = rankdata(a, method='dense')\nresult = len(ranked) + 1 - ranked\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": ["<code>\nimport numpy as np\nfrom scipy.stats import rankdata\n\na = [1,2,3,4,3,2,3,4]\nranked = rankdata(a, method='dense')\nresult = len(ranked) - ranked\nresult = result.astype(int)\n"], "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": ["```python\n    ranks = rankdata(a)\n    return len(a) + 1 - ranks.astype(int)\n### END SOLUTION\nprint(f())  # Output: [7 6 3 1 3 6 3 1]\n```\n</code>"], "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": ["<code>\nimport numpy as np\n\nx_dists = np.array([[ 0, -1, -2],\n                 [ 1,  0, -1],\n                 [ 2,  1,  0]])\n\ny_dists = np.array([[ 0, 1, -2],\n                 [ -1,  0, 1],\n                 [ -2,  1,  0]])\n\ndists = np.dstack((x_dists, y_dists))\n"], "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": ["```python\ndists = np.dstack((x_dists, y_dists))\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": ["```python\nresult = a[:, second][:, :, third]\n``` \nEND SOLUTION\n</code>"], "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": ["```python\narr = np.zeros((20, 10, 10, 2))\n```\n```"], "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": ["<code>\nl1 = np.sum(np.abs(X), axis=1)\nresult = X / l1[:, np.newaxis]\n"], "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": ["```python\nX_normalized = X / LA.norm(X, axis=1, ord=2)[:, np.newaxis]\nresult = X_normalized\n```\n```python\nprint(result)\n```\n```python\n# Output:\n# [[ 0.13483997 -0.26967994  0.40451991  0.80903983]\n#  [ 0.32673202  0.40841503 -0.49009803  0.40841503]\n#  [-0.15936381  0.31872763  0.79681908  0.79681908]\n#  [ 0.13483997  0.16854996  0.33709992 -0.8437748 ]\n#  [ 0.1433084  -0.05732336  0.28661679  0.71554197]]\n```"], "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": ["from numpy import linalg as LA\nimport numpy as np\nX = np.array([[1, -2, 3, 6],\n              [4, 5, -6, 5],\n              [-1, 2, 5, 5],\n              [4, 5,10,-25],\n              [5, -2,10,25]])\n\nresult = X / np.max(np.abs(X), axis=1)[:, np.newaxis]"], "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": ["```python\nresult = np.where(df['a'].astype(str).str.contains(target), choices[0], np.nan)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": ["<code>\nimport numpy as np\n\na = np.array([[1,2,8],\n              [7,4,2],\n              [9,1,7],\n              [0,1,5],\n              [6,4,3]])\n\nresult = np.zeros((a.shape[0], a.shape[0]))\n\nfor i in range(a.shape[0]):\n    for j in range(i, a.shape[0]):\n        dist = np.linalg.norm(a[i] - a[j])\n        result[i][j] = dist\n        result[j][i] = dist\n\nresult\n"], "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": ["```python\nimport numpy as np\n\n# Calculate pairwise distances using broadcasting\ndef pairwise_distances(a):\n    # Compute squared differences element-wise\n    squared_diff = np.sum((a[:, np.newaxis] - a) ** 2, axis=-1)\n    # Take square root to get distances\n    distances = np.sqrt(squared_diff)\n    return distances\n\n# Example input data\ndim = np.random.randint(4, 8)\na = np.random.rand(np.random.randint(5, 10), dim)\n\n# Calculate pairwise distances\nresult = pairwise_distances(a)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": ["```python\nimport numpy as np\n\ndef pairwise_distances(X):\n    \"\"\"\n    Compute the pairwise distances between the rows of X.\n\n    Parameters:\n    X : numpy.ndarray\n        Input array of shape (n_samples, n_features).\n\n    Returns:\n    numpy.ndarray\n        Pairwise distances matrix of shape (n_samples, n_samples).\n    \"\"\"\n    n_samples = X.shape[0]\n    distances = np.zeros((n_samples, n_samples))\n\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            distances[i, j] = np.linalg.norm(X[i] - X[j])\n    \n    return distances\n\ndim = np.random.randint(4, 8)\na = np.random.rand(np.random.randint(5, 10), dim)\nresult = pairwise_distances(a)\n```\n```"], "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": ["AVG = np.mean(NA.astype(float), axis=0)"], "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": ["```python\nimport numpy as np\nA = ['inf', '33.33', '33.33', '33.37']\nA = [float(x) if x != 'inf' else np.inf for x in A]\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\n```\n```python\nEND SOLUTION\nprint(AVG)\n```"], "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": ["```python\nA = ['np.inf', '33.33', '33.33', '33.37']\nNA = np.asarray([float(val) if val != 'np.inf' else np.inf for val in A])\nAVG = np.mean(NA, axis=0)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(AVG)\n```"], "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": ["```python\nnon_zero_indices = np.where(a != 0)[0]\nadjacent_diff = np.diff(non_zero_indices)\nunique_indices = np.insert(non_zero_indices[1:], 0, non_zero_indices[0])\nresult = a[unique_indices[adjacent_diff != 0]]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": ["```python\nimport numpy as np\na = np.array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3]).reshape(-1, 1)\n\nresult = np.delete(a, np.concatenate(([False], a[:-1] == a[1:], [False])), axis=0)\nresult = result[result != 0]\n```\n```"], "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": ["<code>\nimport numpy as np\nimport pandas as pd\n\nlat = np.array([[10, 20, 30],\n                [20, 11, 33],\n                [21, 20, 10]])\n\nlon = np.array([[100, 102, 103],\n                [105, 101, 102],\n                [100, 102, 103]])\n\nval = np.array([[17, 2, 11],\n                [86, 84, 1],\n                [9, 5, 10]])\n\ndata = {'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()}\ndf = pd.DataFrame(data)\n"], "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": ["<code>\nimport numpy as np\nimport pandas as pd\n\nexample_lat = np.array([[10, 20, 30],\n                        [20, 11, 33],\n                        [21, 20, 10]])\n\nexample_lon = np.array([[100, 102, 103],\n                        [105, 101, 102],\n                        [100, 102, 103]])\n\nexample_val = np.array([[17, 2, 11],\n                        [86, 84, 1],\n                        [9, 5, 10]])\n\ndef f(lat=example_lat, lon=example_lon, val=example_val):\n    data = {'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()}\n    df = pd.DataFrame(data)\n    return df\n### END SOLUTION\n"], "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": ["<code>\nimport numpy as np\nimport pandas as pd\n\nlat = np.array([[10, 20, 30],\n                [20, 11, 33],\n                [21, 20, 10]])\n\nlon = np.array([[100, 102, 103],\n                [105, 101, 102],\n                [100, 102, 103]])\n\nval = np.array([[17, 2, 11],\n                [86, 84, 1],\n                [9, 5, 10]])\n\ndata = np.stack((lat.flatten(), lon.flatten(), val.flatten()), axis=-1)\ndf = pd.DataFrame(data, columns=['lat', 'lon', 'val'])\ndf['maximum'] = df[['lat', 'lon', 'val']].max(axis=1)\n"], "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": ["```python\ndef rolling_window(a, size):\n    shape = (a.shape[0] - size[0] + 1, a.shape[1] - size[1] + 1) + size\n    strides = (a.strides[0], a.strides[1]) + a.strides\n    windows = np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)\n    return windows\n\nresult = rolling_window(a, size)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": ["```python\ndef sliding_window(arr, window):\n    shape = (arr.shape[0] - window[0] + 1, arr.shape[1] - window[1] + 1) + window\n    strides = arr.strides * 2\n    return np.lib.stride_tricks.as_strided(arr, shape=shape, strides=strides)\n\nresult = sliding_window(a, size)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": ["```python\nresult = np.nanmean(a)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": ["<code>\nimport numpy as np\n\ndef f(a = np.array([1 + 0j, 2 + 3j, np.inf + 0j])):\n    # Compute the mean of the array of complex numbers\n    result = np.nanmean(a)\n    return result\n\n### BEGIN SOLUTION\nprint(f())\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": ["```python\nimport numpy as np\n\nZ = np.random.rand(*np.random.randint(2, 10, (np.random.randint(2, 10))))\nlast_dim_slice = (Ellipsis, -1)\nresult = Z[last_dim_slice]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": ["import numpy as np\n\na = np.random.rand(*np.random.randint(2, 10, (np.random.randint(2, 10))))\n\nif a.ndim == 1:\n    result = a[-1:]\nelse:\n    result = a[-1:, ...]  # Using ellipsis to slice all dimensions after the first\n\nresult"], "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": ["<code>\nresult = any(np.array_equal(c, arr) for arr in CNTS)\n"], "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": ["```python\nresult = any(np.array_equal(c, arr) for arr in CNTS)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": ["```python\nf = intp.interp2d(x_new, y_new, a, kind='linear')\nresult = f(np.arange(0, 4, 1), np.arange(0, 4, 1))\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": ["<code>\nimport pandas as pd\nimport numpy as np\ndata = {'D':[2015,2015,2015,2015,2016,2016,2016,2017,2017,2017], 'Q':np.arange(10)}\n\ndf = pd.DataFrame(data)\nname = 'Q_cum'\n\ndf[name] = df.groupby('D')['Q'].cumsum()\n"], "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": ["<code>\ni = np.diag(i)\n"], "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": ["```python\na = np.triu(np.tril(a))\n``` \n</code>"], "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": ["<code>\nstart = pd.to_datetime(\"23-FEB-2015 23:09:19.445506\")\nend = pd.to_datetime(\"24-FEB-2015 01:09:22.404973\")\nn = 50\nresult = pd.date_range(start=start, end=end, periods=n)\n"], "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": ["```python\nimport numpy as np\nx = np.array([0, 1, 1, 1, 3, 4, 5, 5, 5])\ny = np.array([0, 2, 3, 4, 2, 1, 3, 4, 5])\na = 1\nb = 4\n\nindex = np.where((x == a) & (y == b))[0]\nresult = index[0] if index.size > 0 else -1\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": ["```python\nresult = np.where((x == a) & (y == b))[0]\n```  \n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": ["```python\nimport numpy as np\n\nx = np.array([-1, 2, 5, 100])\ny = np.array([123, 456, 789, 1255])\n\n# Create a Vandermonde matrix for the quadratic equation\nA = np.vstack([x**2, x, np.ones_like(x)]).T\n\n# Solve the system of linear equations using least squares\nresult = np.linalg.lstsq(A, y, rcond=None)[0]\n```\n```python\n# END SOLUTION\n</code>\n```"], "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": ["```python\nimport numpy as np\n\nx = np.array([-1, 2, 5, 100])\ny = np.array([123, 456, 789, 1255])\ndegree = 3\n\n# Construct the Vandermonde matrix\nX = np.vander(x, degree + 1, increasing=True)\n\n# Solve the least squares problem\nresult = np.linalg.lstsq(X, y, rcond=None)[0]\n\nresult = result[::-1]  # Reverse the order to match the format [..., c, b, a]\n\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": ["<code>\ndf = df.sub(a, axis=1)\n"], "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": ["```python\nresult = np.einsum('ijk,kl->ijl', A, B)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": ["```python\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, 1)).reshape(a.shape)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": ["```python\nresult = np.zeros_like(arr)\nfor i in range(arr.shape[0]):\n    row = arr[i]\n    X_min = np.min(row)\n    X_max = np.max(row)\n    result[i] = (row - X_min) / (X_max - X_min)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": ["```python\nscaler = MinMaxScaler()\nresult = np.array([scaler.fit_transform(matrix) for matrix in a])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": ["```python\nmask1 = arr < -10\nmask2 = arr >= 15\n\narr[mask1] = 0\narr[mask2] = 30\narr[~(mask1 | mask2)] += 5\n```\n"], "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": ["<code>\nimport numpy as np\n\narr = (np.random.rand(5, 50) - 0.5) * 50\nn1 = [1, 2, 3, 4, 5]\nn2 = [6, 7, 8, 9, 10]\n\nfor i in range(arr.shape[0]):\n    mask1 = arr[i] < n1[i]\n    mask2 = arr[i] >= n2[i]\n    mask3 = ~(mask1 | mask2)\n    \n    arr[i][mask1] = 0\n    arr[i][mask2] = 30\n    arr[i][mask3] += 5\n"], "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": ["```python\nresult = np.sum(np.abs(s1 - s2) > np.finfo(float).eps)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": ["<code>\nresult = np.sum(~np.isclose(s1, s2, equal_nan=True))\n"], "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": ["```python\nresult = all(np.array_equal(a[0], x) for x in a[1:])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": ["```python\nresult = all(np.isnan(arr).all() for arr in a)\n``` \n</code>"], "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": ["```python\npad_width = ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1]))\nresult = np.pad(a, pad_width, mode='constant', constant_values=0)\n```\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": ["```python\nimport numpy as np\n\na = np.ones((41, 12))\nshape = (93, 13)\n\nresult = np.zeros(shape)\nresult[:a.shape[0], :a.shape[1]] = a\n```\n```"], "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": ["```python\npad_width = ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1]))\nresult = np.pad(a, pad_width, mode='constant', constant_values=element)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": ["```python\n    padded_arr = np.zeros(shape)\n    padded_arr[:arr.shape[0], :arr.shape[1]] = arr\n    return padded_arr\n### END SOLUTION\nresult = f()\nprint(result)\n```"], "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": ["```python\nimport numpy as np\n\na = np.ones((41, 12))\nshape = (93, 13)\n\npadded_a = np.zeros(shape)\npad_height = (shape[0] - a.shape[0]) // 2\npad_width = (shape[1] - a.shape[1]) // 2\n\npadded_a[pad_height:pad_height+a.shape[0], pad_width:pad_width+a.shape[1]] = a\n\nresult = padded_a\n```\n```"], "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": ["```python\na = a.reshape((a.shape[0] // 3, 3))\n```\n```"], "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": ["```python\nresult = np.choose(b, a.transpose(2, 0, 1)).transpose(1, 2, 0)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": ["```python\nresult = np.choose(b, a.transpose(2, 0, 1)).transpose(1, 2, 0)\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": ["```python\n# Solution using numpy indexing\nresult = a[np.indices(b.shape) + (b,)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": ["```python\nresult = np.sum(a[np.arange(b.shape[0])[:, None, None], np.arange(b.shape[1])[:, None], b])\n```\n```python\nEND SOLUTION\n```\n```python\nprint(result)  # Output: 85\n```"], "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": ["```python\nresult = np.sum(a[np.arange(a.shape[0])[:, None, None], np.arange(a.shape[1])[None, :, None], b == a.shape[2]])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": ["```python\nresult = df['b'].where((df['a'] > 1) & (df['a'] <= 4), np.nan).tolist()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": ["```python\n# Remove peripheral zeros\nresult = im[(im != 0).any(axis=1)][:, (im != 0).any(axis=0)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": ["<code>\nimport numpy as np\nA = np.array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n\nnonzero_rows, nonzero_cols = np.nonzero(A)\nresult = A[np.min(nonzero_rows):np.max(nonzero_rows)+1, np.min(nonzero_cols):np.max(nonzero_cols)+1]\n</code>\n</code>"], "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": ["```python\nimport numpy as np\n\nim = np.array([[1,1,1,1,1,5],\n               [1,0,0,1,2,0],\n               [2,1,0,0,1,0],\n               [1,0,0,7,1,0],\n               [1,0,0,0,0,0]])\n\n# Find rows and columns with all zeros\nrows_to_keep = np.where(~np.all(im == 0, axis=1))[0]\ncols_to_keep = np.where(~np.all(im == 0, axis=0))[0]\n\nresult = im[rows_to_keep][:, cols_to_keep]\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": ["```python\nimport numpy as np\n\nim = np.array([[0,0,0,0,0,0],\n               [0,0,5,1,2,0],\n               [0,1,8,0,1,0],\n               [0,0,0,7,1,0],\n               [0,0,0,0,0,0]])\n\n# Removing peripheral zeros\nresult = im[(im != 0).any(axis=1)][:, (im != 0).any(axis=0)]\n```\n"], "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": ["```python\nplt.scatter(x, y, label='x-y')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": ["<code>\nplt.minorticks_on()\nplt.grid(which='minor', axis='y', linestyle=':', linewidth='0.5', color='gray')\nplt.show()\n"], "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": ["<code>\nplt.minorticks_on()\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": ["<code>\nplt.minorticks_on()\nplt.tick_params(axis='x', which='both', direction='in', bottom=True, top=True)\n</code>"], "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": ["```python\nfor style in ['solid', 'dashed', 'dashdot', 'dotted']:\n    y = np.random.randn(10)\n    plt.plot(x, y, linestyle=style, label=style)\n\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": ["```python\nfor style in ['solid', 'dashed', 'dashdot', 'dotted']:\n    y = np.random.randn(10)\n    plt.plot(x, y, linestyle=style, label=style)\nplt.legend()\nplt.show()\n```\n"], "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": ["<code>\nplt.plot(x, y, marker='D', markersize=5)\nplt.show()\n"], "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": ["<code>\nplt.plot(x, y, marker='D', markersize=10, linewidth=2)\nplt.show()\n</code>"], "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": ["<code>\nax.set(ylim=(0, 40))\nplt.show()\n"], "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": ["<code>\nhighlight_color = 'red'\nplt.axvspan(2, 4, color=highlight_color, alpha=0.5)\n# SOLUTION END\nplt.show()\n</code>"], "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# draw a full line from (0,0) to (1,2)\n# SOLUTION START\nplt.plot([0, 1], [0, 2])\nplt.show()\n# SOLUTION END\n```"], "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# draw a line segment from (0,0) to (1,2)\n# SOLUTION START\nplt.plot([0, 1], [0, 2])\nplt.show()\n# SOLUTION END\n```\n"], "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": ["```python\nseaborn.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n```\n"], "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": ["```python\nsns.set_style(\"whitegrid\")\nplt.plot(x, y)\nplt.show()\n```"], "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": ["```python\nsns.set_style(\"whitegrid\")\ndf = pd.DataFrame({'x': x, 'y': y})\nsns.lineplot(data=df, x='x', y='y')\nplt.show()\n```\n"], "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": ["```python\nplt.plot(x, y, marker='+', markersize=7, linestyle='')  # Plus marker with thickness of 7\nplt.show()\n```"], "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": ["<code>\nplt.legend(fontsize=20)\nplt.show()\n"], "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": ["```python\nplt.plot(x, y, label='cos(x)')\nplt.legend(title='xyz', title_fontsize=20)\nplt.show()\n```"], "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": ["<code>\nl.set_markerfacecolor('blue')\nl.set_alpha(0.2)\nplt.show()\n"], "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": ["<code>\nfor marker in l.get_children():\n    marker.set_color('black')\n    marker.set_markeredgecolor('black')\nplt.show()\n</code>"], "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": ["<code>\nl.set_color('red')\nl.set_markerfacecolor('red')\n"], "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": ["<code>\nplt.xticks(rotation=45)\nplt.show()\n"], "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": ["<code>\nplt.xticks(rotation=45, ha='left')\nplt.show()\n"], "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": ["<code>\nplt.xticks(np.arange(0, 2 * np.pi + 1, np.pi))\n# SOLUTION END\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": ["<code>\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": ["```python\nplt.imshow(H, cmap='viridis')\nplt.colorbar()\nplt.show()\n```\n"], "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": ["<code>\nplt.imshow(H, cmap='gray')\nplt.show()\n"], "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel('X', ha='right')\nplt.show()\n"], "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": ["```python\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\nplt.show()\n```\n"], "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": ["<code>\nmyTitle_wrapped = \"\\n\".join([myTitle[i:i+30] for i in range(0, len(myTitle), 30)])\nplt.title(myTitle_wrapped)\nplt.show()\n</code>"], "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make the y axis go upside down\n# SOLUTION START\nplt.plot(x, y)\nplt.gca().invert_yaxis()\nplt.show()\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": ["```python\nplt.xticks([0, 1.5])\n# SOLUTION END\nplt.show()\n```"], "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": ["```python\nplt.yticks([-1, 1])\n# SOLUTION END\nplt.show()\n```"], "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": ["```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION START\nplt.plot(x, z)\nplt.plot(x, y)\nplt.plot(x, z)\nplt.show()\n# SOLUTION END\n```"], "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": ["```python\nplt.scatter(x, y, edgecolor='black', facecolor='blue')\nplt.show()\n```\n"], "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": ["```python\nplt.plot(x, y)\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(int(np.ceil(y.max())) + 1))\nplt.show()\n```\n"], "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": ["```python\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()\n```\n"], "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": ["<code>\nax.plot(x, y, linestyle='--')\nplt.show()\n</code>"], "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nax1.plot(x, y1)\nax1.set_title('Sine Wave')\nax2.plot(x, y2)\nax2.set_title('Cosine Wave')\nplt.show()\n</code>"], "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": ["<code>\nfig, axs = plt.subplots(2, 1)\n\naxs[0].plot(x, y1)\naxs[0].set_title('y = sin(x)')\naxs[0].axis('off')\n\naxs[1].plot(x, y2)\naxs[1].set_title('y = cos(x)')\naxs[1].axis('off')\n\nplt.tight_layout()\nplt.show()\n"], "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": ["<code>\nplt.xlabel(None)\nplt.show()\n</code>"], "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": ["<code>\nplt.xticks([])\nplt.show()\n</code>"], "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": ["<code>\nplt.scatter(x, y)\nplt.xticks([3, 4])\nplt.grid(axis='x', which='both', linestyle='--', linewidth=0.5)\nplt.show()\n</code>"], "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": ["<code>\nplt.yticks([3, 4])\nplt.grid(axis='y')\nplt.show()\n"], "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": ["```python\nplt.yticks([3, 4])\nplt.grid(axis='y', linestyle='--')\nplt.xticks([1, 2])\nplt.grid(axis='x', linestyle='--')\nplt.show()\n```\n"], "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": ["<code>\nplt.grid(True)\n# SOLUTION END\nplt.show()\n</code>"], "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": ["<code>\nplt.legend(loc=\"lower right\")\n# SOLUTION END\nplt.show()\n</code>"], "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": ["<code>\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6), subplot_kw={'pad': 5})\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.tight_layout()  # Adjust subplot parameters to give specified padding\nplt.show()\nplt.clf()\n</code>"], "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": ["```python\nax.xaxis.tick_top()\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\nplt.show()\n```"], "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": ["```python\nplt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\nplt.show()\n```\n"], "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": ["```python\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n```\n"], "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": ["<code>\nplt.plot(x, y)\nplt.tick_params(axis='y', direction='in', right=True)\nplt.show()\n"], "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": ["<code>\nplt.plot(x, y)\nplt.ylabel('Y', rotation=0, labelpad=15, ha='right')\nplt.tick_params(axis='y', labelleft=True, labelright=False)\nplt.show()\n"], "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": ["<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', scatter_kws={'color': 'green'}, line_kws={'color': 'green'}, marginal_kws={'color': 'blue'})\nplt.show()\n</code>"], "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": ["<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', marginal_color='blue')\nplt.show()\n</code>"], "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": ["<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg')\nplt.show()\n</code>"], "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": ["<code>\nplt.bar(df['celltype'], df['s1'], label='s1')\nplt.bar(df['celltype'], df['s2'], label='s2')\nplt.xticks(rotation=0)\nplt.xlabel('celltype')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": ["<code>\nplt.bar(df['celltype'], df['s1'], label='s1')\nplt.bar(df['celltype'], df['s2'], bottom=df['s1'], label='s2')\nplt.xlabel('celltype')\nplt.xticks(rotation=45)\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel('X', color='red')\nplt.tick_params(axis='x', colors='red')\nplt.show()\n"], "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": ["<code>\nplt.plot(x, y, color='red')\nplt.xlabel('X')\nplt.show()\n"], "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": ["```python\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation=90)\nplt.show()\n```"], "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": ["<code>\nplt.axvline(x=0.22058956, color='r')\nplt.axvline(x=0.33088437, color='g')\nplt.axvline(x=2.20589566, color='b')\nplt.show()\n"], "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": ["```python\nplt.imshow(rand_mat, cmap='viridis', interpolation='nearest')\nplt.xticks(numpy.arange(len(xlabels)), xlabels, fontsize=12, rotation=45, ha='left')\nplt.yticks(numpy.arange(len(ylabels))[::-1], ylabels, fontsize=12)\nplt.colorbar(label='Values')\nplt.show()\n```"], "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": ["<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(time, Swdown, \"-\", label=\"Swdown\")\nax.plot(time, Rn, \"-\", label=\"Rn\")\nax2 = ax.twinx()\nax2.plot(time, temp, \"-r\", label=\"temp\")\nax.legend(loc=0)\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\n\n# Adding legend for all curves in the two subplots\nax2.legend(loc='upper right', bbox_to_anchor=(0.5, 0.5))\nplt.show()\nplt.clf()\n</code>"], "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": ["<code>\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plotting on the first subplot\naxs[0].plot(x, y)\naxs[0].set_title('Y')\n\n# Plotting on the second subplot\naxs[1].plot(x, y)\naxs[1].set_title('Y')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": ["```python\nsns.scatterplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", s=30)\nplt.show()\n```\n"], "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": ["```python\nplt.scatter(b, a)\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (b[i], a[i]))\nplt.xlabel('b')\nplt.ylabel('a')\nplt.title('Scatter plot of a over b with annotations from c')\nplt.show()\n```"], "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": ["<code>\nplt.plot(x, y, label='y over x')\nplt.legend(title='Legend')\nplt.show()\n"], "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": ["```python\nplt.plot(x, y, label='y over x')\nplt.legend(title='<b>Legend</b>')\nplt.show()\n```\n"], "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": ["```python\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n```\n"], "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]})\nax1.plot(x, y)\nax2.plot(x, y)\nplt.show()\n```"], "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nbins = np.linspace(-1, 1, 100)\n\n# Plot two histograms of x and y on a single chart with matplotlib\n# Set the transparency of the histograms to be 0.5\n# SOLUTION START\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n# SOLUTION END\n</code>"], "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": ["```python\nplt.hist([x, y], bins=10, color=['blue', 'red'], label=['x', 'y'])\nplt.legend()\nplt.show()\n```\n"], "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": ["<code>\nplt.plot([a, c], [b, d])\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.show()\n</code>"], "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": ["<code>\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\nim1 = axs[0].imshow(x, cmap='viridis')\naxs[0].set_title('X')\n\nim2 = axs[1].imshow(y, cmap='plasma')\naxs[1].set_title('Y')\n\nfig.colorbar(im1, ax=axs, orientation='vertical')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": ["<code>\nplt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": ["<code>\nfig, axs = plt.subplots(2)\n\naxs[0].plot(x, y)\naxs[0].set_title('Y over X')\n\naxs[1].plot(a, z)\naxs[1].set_title('Z over A')\n\nfig.suptitle('Y and Z')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": ["```python\nx_values = [point[0] for point in points]\ny_values = [point[1] for point in points]\n\nplt.figure(figsize=(8, 6))\nplt.plot(x_values, y_values)\nplt.yscale('log')\nplt.xlabel('X values')\nplt.ylabel('Y values (log scale)')\nplt.title('Line Plot with Log Scale')\nplt.grid(True)\nplt.show()\n```"], "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": ["<code>\nplt.plot(x, y)\nplt.title(\"Plot of y over x\", fontsize=20)\nplt.xlabel(\"x\", fontsize=18)\nplt.ylabel(\"y\", fontsize=16)\nplt.show()\n</code>"], "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": ["```python\nax.plot(x, y)\nax.set_xticks(np.arange(10) + 1)\nax.set_xticklabels(np.arange(1, 11))\n# SOLUTION END\n\nplt.show()\n```"], "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": ["<code>\nfor line, color in zip(lines, c):\n    plt.plot([line[0][0], line[1][0]], [line[0][1], line[1][1]], color=color)\n\nplt.show()\n"], "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": ["<code>\nplt.figure()\nplt.loglog(x, y)\nplt.xticks([1, 10, 100, 1000], [1, 10, 100, 1000])\nplt.yticks([1, 10, 100, 1000], [1, 10, 100, 1000])\nplt.show()\n"], "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": ["```python\nplt.figure(figsize=(10, 6))\nfor column in df.columns:\n    plt.plot(df.index, df[column], marker='o', label=column)\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n"], "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": ["<code>\nplt.hist(data, bins=5, density=True)\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.0%}'.format(x)))\nplt.yticks(np.arange(0, 0.3, 0.1), ['10%', '20%', '30%'])\nplt.show()\n"], "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": ["```python\nplt.plot(x, y, marker='o', alpha=0.5)\nplt.show()\n```\n"], "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\n\nfig.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=2)\n\nplt.show()\n"], "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": ["<code>\nfig, axs = plt.subplots(1, 2, figsize=(12, 6))\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axs[0])\naxs[0].set_title(\"Bill Depth vs Bill Length\")\n\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axs[1])\naxs[1].set_title(\"Flipper Length vs Bill Length\")\n\nplt.tight_layout()\nplt.show()\n"], "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": ["<code>\nplt.xticks([1, 2, 3, 4, 5, 6, 7, 8, 9], ['1', 'second', '3', '4', '5', '6', '7', '8', '9'])\n</code>"], "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": ["<code>\nplt.plot(x, y, label=r'$\\lambda$')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": ["<code>\nextra_ticks = [2.1, 3, 7.6]\nplt.xticks(list(plt.xticks()[0]) + extra_ticks)\nplt.show()\n</code>"], "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": ["<code>\nplt.xticks(rotation=-60, ha='left')\nplt.show()\n"], "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": ["<code>\nplt.yticks(rotation=-60)\nplt.xticks(rotation='vertical', va='top')\nplt.show()\n"], "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": ["<code>\nplt.xticks(alpha=0.5)\nplt.show()\n"], "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": ["<code>\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\nplt.show()\n"], "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": ["<code>\nplt.subplots_adjust(top=0.95, bottom=0.1, left=0.1, right=0.95, hspace=0.2, wspace=0.2)\nplt.show()\n"], "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": ["<code>\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\nfor i in range(2):\n    ax[i].plot(x, y)\n    ax[i].set_title(f'Subplot {i+1}')\n\nfig.suptitle(\"Figure\")\n\nplt.show()\n</code>"], "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": ["<code>\nplt.figure()\ndf.plot(kind='line')\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.show()\n"], "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": ["```python\nplt.scatter(x, y, marker='|', hatch='/', edgecolor='black')\nplt.show()\n```"], "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": ["<code>\nplt.scatter(x, y, edgecolor='none', marker='|', hatch='|')\nplt.show()\n"], "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": ["<code>\nplt.scatter(x, y, marker='*', edgecolor='black', facecolor='red', hatch='*')\nplt.show()\n"], "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": ["<code>\nplt.scatter(x, y, s=100, marker='*', hatch='|')\nplt.show()\n</code>"], "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": ["<code>\nplt.imshow(data, extent=[1, 5, 1, 4])\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.show()\n"], "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": ["<code>\nplt.stem(x, y, orientation='horizontal')\nplt.show()\n"], "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": ["<code>\nplt.bar(d.keys(), d.values(), color=[c[key] for key in d.keys()])\nplt.show()\n"], "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": ["```python\nplt.axvline(x=3, color='k', linestyle='-', label='cutoff')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": ["```python\nimport matplotlib.pyplot as plt\n\nlabels = [\"a\", \"b\"]\nheight = [3, 4]\n\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# SOLUTION START\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.bar(labels, height)\n# SOLUTION END\n\nplt.show()\n```"], "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": ["<code>\nplt.pie(data, labels=l, wedgeprops=dict(width=0.4))\nplt.gca().add_artist(plt.Circle((0,0),0.3,fc='white'))\nplt.axis('equal')\nplt.show()\n"], "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": ["```python\nplt.plot(x, y)\nplt.grid(True, linestyle='--', color='b')\nplt.show()\n```"], "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Turn minor ticks on and show gray dashed minor grid lines\n# Do not show any major grid lines\n# SOLUTION START\n\nplt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', color='gray')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": ["<code>\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')\nplt.tight_layout()\n\n# Bold the pie labels\nplt.rcParams['text.color'] = 'black'\nplt.rcParams['font.weight'] = 'bold'\n\nplt.show()\n</code>"], "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": ["<code>\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')\nplt.show()\n</code>"], "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": ["<code>\nplt.plot(x, y, marker='o', markersize=10, markerfacecolor='none', markeredgewidth=2, alpha=0.5)\nplt.show()\n"], "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": ["<code>\nplt.axvline(x=55, color='green')\nplt.show()\n</code>"], "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": ["<code>\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(blue_bar))\nr2 = [x + bar_width for x in r1]\n\n# Create the bar plot\nplt.bar(r1, blue_bar, color='blue', width=bar_width, edgecolor='grey', label='Blue')\nplt.bar(r2, orange_bar, color='orange', width=bar_width, edgecolor='grey', label='Orange')\n\n# Add labels and title\nplt.xlabel('Group')\nplt.ylabel('Values')\nplt.title('Blue and Orange Bars')\nplt.xticks([r + bar_width/2 for r in range(len(blue_bar))], ['A', 'B', 'C'])\nplt.legend()\n\n# Show plot\nplt.show()\n</code>"], "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\n# First subplot\nax1.plot(x, y, label='y over x')\nax1.plot(a, z, label='z over a')\nax1.legend()\n\n# Second subplot\nax2.plot(a, z)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": ["```python\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar(label='Y value')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter plot of Y over X')\nplt.show()\n```"], "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": ["```python\nplt.plot(x, y)\nplt.xticks(np.arange(min(x), max(x)+1, 1))\nplt.show()\n```"], "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": ["```python\nsns.catplot(x=\"sex\", y=\"bill_length_mm\", col=\"species\", data=df, kind=\"bar\", sharey=False)\nplt.show()\n```"], "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": ["```python\nimport matplotlib.pyplot as plt\n\n# draw a circle centered at (0.5, 0.5) with radius 0.2\n# SOLUTION START\ncircle = plt.Circle((0.5, 0.5), 0.2, color='blue', fill=False)\nfig, ax = plt.subplots()\nax.add_artist(circle)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()\n# SOLUTION END\n```\n"], "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": ["```python\nplt.plot(x, y)\nplt.title(r\"$\\mathbf{\\Phi}$\", fontsize=14)\nplt.show()\n```"], "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": ["<code>\nplt.plot(x, y, label='Line')\nplt.legend(markerscale=0.1)\nplt.show()\n"], "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": ["<code>\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\nplt.show()\n</code>"], "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": ["<code>\nplt.legend(ncol=2)\nplt.show()\n</code>"], "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": ["<code>\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": ["<code>\nplt.imshow(data, cmap='viridis', interpolation='nearest')\nplt.colorbar()\nplt.show()\n</code>"], "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": ["<code>\nplt.plot(x, y)\nplt.title(\"<b>Figure</b> 1\")\nplt.show()\n</code>"], "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": ["<code>\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\")\nplt.legend().remove()\nplt.show()\n"], "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": ["<code>\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n"], "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": ["<code>\nplt.scatter(x, y)\nplt.axis('auto')\nplt.show()\n</code>"], "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": ["<code>\nplt.scatter(x, y, c='red', edgecolors='black')\nplt.show()\n</code>"], "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": ["```python\nfig, axs = plt.subplots(2, 2, figsize=(15, 15))\nfor i in range(2):\n    for j in range(2):\n        axs[i, j].plot(x, y)\nplt.show()\n```\n"], "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": ["```python\nplt.hist(x, bins=5, range=(0, 10), width=2)\nplt.show()\n```"], "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": ["<code>\nplt.figure()\nplt.plot(x, y)\nplt.fill_between(x, y-error, y+error, alpha=0.5)\nplt.show()\n"], "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": ["<code>\nplt.axhline(0, color='white')\nplt.axvline(0, color='white')\nplt.show()\n"], "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": ["<code>\nax.errorbar(box_position, box_height, yerr=box_errors, fmt='o', color=c)\n# SOLUTION END\nplt.show()\n</code>"], "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.plot(x, y)\nax1.set_title('Y')\n\nax2.plot(a, z)\nax2.set_title('Z', y=1.1)\n\nplt.show()\n"], "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": ["<code>\nfig, axes = plt.subplots(4, 4, figsize=(5, 5))\n\nfor i in range(4):\n    for j in range(4):\n        ax = axes[i, j]\n        ax.plot(x, y)\n        ax.set_xlabel('X Axis')\n        ax.set_ylabel('Y Axis')\n        ax.set_title(f'Subplot {i+1},{j+1}')\n\nplt.tight_layout()\nplt.show()\n</code>"], "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": ["<code>\nplt.figure(figsize=(8, 8))\nplt.matshow(d)\nplt.show()\n"], "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": ["<code>\nfig, ax = plt.subplots(figsize=(8, 6))\nax.table(cellText=df.values, colLabels=df.columns, loc=\"center\")\nplt.axis(\"off\")\nplt.show()\n</code>"], "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": ["```python\nplt.plot(x, y)\nplt.tick_params(axis='x', top=True, bottom=True, labeltop=True, labelbottom=True)\nplt.show()\n```"], "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": ["```python\nplt.plot(x, y)\nplt.tick_params(axis='x', direction='inout')\nplt.show()\n```"], "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": ["```python\nplt.plot(x, y)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=True)\nplt.show()\n```\n"], "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": ["<code>\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.subplots_adjust(top=0.8)\nplt.suptitle(\"Exercise Data Analysis\", fontsize=16)\nplt.show()\n"], "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": ["```python\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Pulse\")\nplt.show()\n```"], "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": ["```python\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.gca().set_ylabel('')\nplt.subplots_adjust(top=0.8)\nplt.show()\n```\n"], "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": ["<code>\nplt.plot(x, y, label='y')\nplt.legend(fontsize=8)\nplt.show()\n</code>"], "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": ["<code>\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n"], "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": ["```python\nplt.plot(x, y, label=\"y\")\nplt.legend(frameon=False)\nplt.show()\n```"], "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": ["<code>\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": ["<code>\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, jitter=True)\nplt.legend().remove()\nplt.show()\n"], "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": ["<code>\ng = sns.FacetGrid(df, col=\"b\", col_wrap=3)\ng.map(sns.pointplot, \"a\", \"c\")\ng.set(xticks=np.arange(0, 31, 2))\nplt.show()\n"], "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": ["<code>\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(azim=100, elev=50)\nplt.show()\n</code>"], "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.tick_params(axis='both', which='both', bottom=False, top=False, left=False, right=False, labelbottom=False, labelleft=False)\nplt.show()\n</code>"], "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": ["<code>\ngs = gridspec.GridSpec(nrow, ncol, wspace=0.0, hspace=0.0)\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = plt.subplot(gs[i, j])\n        ax.imshow(x, cmap='viridis')\n        ax.axis('off')\nplt.show()\n</code>"], "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": ["import tensorflow as tf\n\nx = tf.Variable(0)\nx.assign(1)\nresult = int(x.numpy())\nprint(result)"], "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": ["```python\nx.assign(114514)\nresult = int(x.numpy())\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": ["<code>\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n"], "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": ["```python\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\n\n# Convert labels to one-hot tensors\none_hot_labels = tf.one_hot(labels, depth=10)\n\n# Tile the one-hot tensors along axis 1\nresult = tf.tile(tf.expand_dims(one_hot_labels, axis=1), multiples=[1, 10, 1])\n\nresult = tf.cast(result, dtype=tf.int32)\n```\n"], "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": ["<code>\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\nnum_classes = 10\nresult = tf.one_hot(labels, num_classes, dtype=tf.int32)\n"], "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": ["<code>\nimport tensorflow as tf\n\nexample_labels = [0, 6, 5, 4, 2]\ndef f(labels=example_labels):\n    one_hot = tf.one_hot(labels, depth=10, dtype=tf.int32)\n    return one_hot\n### END SOLUTION\n\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": ["<code>\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n"], "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": ["```python\ndef my_map_func(i):\n    return [i, i + 1, i + 2]\n\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(my_map_func(x)))\nresult = []\nwith tf.compat.v1.Session() as sess:\n    for _ in range(9):\n        result.append(sess.run(ds.make_one_shot_iterator().get_next()))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": ["```python\ndef my_map_func(i):\n    return [i, i + 1, i + 2]\n\nexample_input = [10, 20, 30]\n\ndef f(input=example_input):\n    ds = tf.data.Dataset.from_tensor_slices(input)\n    ds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(my_map_func(x)))\n    element = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\n    result = []\n    with tf.compat.v1.Session() as sess:\n        for _ in range(len(input) * len(my_map_func(0))):\n            result.append(sess.run(element))\n    return result\n\n### END SOLUTION\nprint(f())\n```"], "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": ["```python\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\n\nmax_length = 8\nbatch_size = len(lengths)\n\nmask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.int32)\n\npadded_mask = tf.pad(mask, paddings=[[0, 0], [0, max_length - tf.reduce_max(lengths)]], constant_values=1)\n\nresult = padded_mask\n```\n```"], "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": ["<code>\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\n\nmax_length = 8\nmask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.bool)\nmask = tf.cast(mask, tf.int32)\nmask = 1 - mask\n\nresult = mask\n"], "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": ["```python\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\nmax_length = 8\nbatch_size = len(lengths)\n\nmask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.float32)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": ["<code>\nimport tensorflow as tf\n\nexample_lengths = [4, 3, 5, 2]\ndef f(lengths=example_lengths):\n    max_length = 8\n    mask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.int32)\n    return mask\n### END SOLUTION\n\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": ["```python\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\nmax_length = 8\nmask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.float32)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": ["<code>\nimport tensorflow as tf\n\na = tf.constant([1,2,3])\nb = tf.constant([4,5,6,7])\n\nresult = tf.stack(tf.meshgrid(a, b), axis=-1)\nresult = tf.reshape(result, [-1, 2])\n"], "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": ["```python\n    # Solution using tf.meshgrid and tf.stack\n    A, B = tf.meshgrid(a, b)\n    result = tf.stack([tf.reshape(A, [-1]), tf.reshape(B, [-1])], axis=1)\n    return result\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": ["```python\nresult = tf.squeeze(a, axis=2)\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": ["```python\nresult = tf.expand_dims(a, axis=2)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": ["```python\nresult = tf.expand_dims(tf.expand_dims(a, 0), 3)\n``` \n```"], "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": ["```python\nresult = tf.reduce_sum(A, axis=1)\n```\n```"], "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": ["```python\nresult = tf.math.reduce_prod(A, axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": ["import tensorflow as tf\n\nA = tf.constant([-0.5, -0.1, 0, 0.1, 0.5, 2], dtype=tf.float32)\nresult = tf.math.reciprocal(A)"], "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": ["<code>\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n"], "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": ["<code>\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)\n"], "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": ["<code>\nimport tensorflow as tf\n\nexample_a = tf.constant([\n  [1,1,1],\n  [1,1,1]\n])\nexample_b = tf.constant([\n  [0,0,0],\n  [1,1,1]\n])\ndef f(A=example_a,B=example_b):\n    squared_diff = tf.square(tf.subtract(A, B))\n    result = tf.reduce_sum(squared_diff, axis=1)\n    return result\n### END SOLUTION\n\nprint(f())\n"], "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": ["<code>\nm = tf.gather_nd(x, tf.stack((y, z), axis=1))\n"], "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": ["```python\nm = tf.gather_nd(x, tf.stack((row, col), axis=1))\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": ["```python\n    indices = tf.stack([y, z], axis=1)\n    m = tf.gather_nd(x, indices)\n    return m\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": ["```python\nresult = tf.einsum('ijk, ljk->ijl', A, B)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": ["<code>\nresult = tf.einsum('ijk,ilk->ijl', A, B)\n"], "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": ["```python\nresult = [s.decode('utf-8') for s in x]\n```\n```"], "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": ["<code>\n    result = [s.decode('utf-8') for s in x]\n    ### END SOLUTION\n    return result\nprint(f())\n</code>"], "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": ["```python\nimport tensorflow as tf\n\nx = [[[[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [2, 0, 4], [3, 4, 5]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [0, 0, 0]]],\n     [[[1, 2, 3], [0, 1, 0], [0, 0, 0]],\n      [[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]\nx = tf.convert_to_tensor(x, dtype=tf.float32)\n</code>\nresult = tf.reduce_sum(x, axis=-2) / tf.reduce_sum(tf.cast(x != 0, tf.float32), axis=-2, keepdims=True)\n```"], "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": ["```python\nmask = tf.cast(tf.reduce_sum(tf.abs(x), axis=-1) != 0, tf.float32)\nmean = tf.reduce_sum(x, axis=-2) / tf.reduce_sum(mask, axis=-1, keepdims=True)\ndiff_squared = tf.square(x - tf.expand_dims(mean, axis=-2))\nvariance = tf.reduce_sum(diff_squared, axis=-2) / tf.reduce_sum(mask, axis=-1, keepdims=True)\nresult = variance\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": ["```python\n    # Count non-zero entries along the second to last dimension\n    non_zero_count = tf.math.count_nonzero(x, axis=-2, dtype=tf.float32)\n\n    # Compute sum along the second to last dimension\n    sum_x = tf.reduce_sum(x, axis=-2)\n\n    # Avoid division by zero\n    non_zero_count = tf.where(non_zero_count == 0, tf.ones_like(non_zero_count), non_zero_count)\n\n    # Compute average\n    result = sum_x / non_zero_count\n    return result\n### END SOLUTION\n```\n"], "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": ["<code>\nimport tensorflow as tf\n\ntf.random.set_seed(10)\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\nresult = tf.reduce_sum(tf.matmul(A,B)).numpy()\nprint(result)\n"], "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": ["<code>\nresult = tf.argmax(a, axis=1)\n"], "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": ["```python\nresult = tf.argmax(a, axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": ["```python\n    return tf.argmax(a, axis=1)\n### END SOLUTION\n```"], "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": ["```python\nresult = tf.argmin(a, axis=1)\n``` \n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": ["```python\nmodel.save(\"export/1\")\n```"], "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": ["<code>\nimport tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform([10], minval=1, maxval=5, dtype=tf.int32)\n"], "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": ["```python\nimport tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=(114,), minval=2, maxval=6, dtype=tf.int32)\n```"], "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": ["```python\n    tf.random.set_seed(seed_x)\n    result = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n    ### END SOLUTION\n    return result\n```"], "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": ["```python\nresult = tf.__version__\n```\n```"], "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": ["<code>\nimport numpy as np\n\nx = np.array([1, 7, 20, 50, 79])\ny = np.array([10, 19, 30, 35, 51])\n\ncoefficients = np.polyfit(np.log(x), y, 1)\nresult = coefficients\n"], "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": ["```python\nresult = np.polyfit(np.log(x), y, 1)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": ["<code>\nimport numpy as np\nimport scipy.optimize\n\ny = np.array([1, 7, 20, 50, 79])\nx = np.array([10, 19, 30, 35, 51])\np0 = (4, 0.1, 1)\n\ndef exponential_func(x, A, B, C):\n    return A * np.exp(B * x) + C\n\nparams, covariance = scipy.optimize.curve_fit(exponential_func, x, y, p0=p0)\nresult = params\n</code>"], "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": ["```python\nstatistic, p_value = stats.ks_2samp(x, y)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": ["<code>\nresult = stats.ks_2samp(x, y).pvalue < alpha\n"], "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": ["import scipy.optimize as optimize\nfrom math import sin, cos\n\ninitial_guess = [-1, 0, -3]\n\ndef f(variables):\n    a, b, c = variables\n    return ((a + b - c) - 2)**2 + ((3*a - b - c))**2 + sin(b) + cos(b) + 4\n\nresult = optimize.minimize(f, initial_guess).x\n"], "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": ["```python\np_values = scipy.stats.norm.cdf(z_scores)\n``` \n```"], "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": ["<code>\nimport scipy.stats\nimport numpy as np\n\nz_scores = [-3, -2, 0, 2, 2.5]\nmu = 3\nsigma = 4\n\np_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": ["```python\nz_scores = [scipy.stats.norm.ppf(p) for p in p_values]\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": ["<code>\nresult = stats.lognorm.cdf(x, scale=np.exp(mu), s=stddev)\n"], "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": ["```python\nimport numpy as np\nfrom scipy.stats import lognorm\n\nstddev = 2.0785\nmu = 1.744\n\n# Calculate the scale parameter (s) and shape parameter (sigma) from mu and stddev\ns = np.exp(mu)\nsigma = stddev\n\n# Calculate expected value and median\nexpected_value = np.exp(mu + (sigma**2)/2)\nmedian = np.exp(mu)\n\nprint(\"Expected Value:\", expected_value)\nprint(\"Median:\", median)\n```"], "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": ["<code>\nresult = sa.multiply(sb)\n"], "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": ["<code>\n    result = sA.multiply(sB)\n    return result\n### END SOLUTION\n"], "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": ["<code>\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)[0]\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": ["```python\ninterp_func = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interp_func(request).tolist()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": ["<code>\nfrom scipy import misc\nfrom scipy.ndimage import rotate\nimport numpy as np\n\ndata_orig = misc.face()\nx0, y0 = 580, 300  # left eye; (xrot, yrot) should point there\nangle = np.random.randint(1, 360)\n\ndata_rot = rotate(data_orig, angle, reshape=False)\n\n# Calculate the rotated coordinates (xrot, yrot) of the point (x0, y0)\ncenter = np.array(data_orig.shape) / 2\nxrot = int((x0 - center[1]) * np.cos(np.radians(angle)) - (y0 - center[0]) * np.sin(np.radians(angle)) + center[1])\nyrot = int((x0 - center[1]) * np.sin(np.radians(angle)) + (y0 - center[0]) * np.cos(np.radians(angle)) + center[0)\n"], "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": ["<code>\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\narr = np.random.rand(4, 4)\nM = csr_matrix(arr)\n\nresult = M.diagonal()\n"], "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": ["<code>\nresult = stats.kstest(times, \"uniform\")\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": ["<code>\n    result = stats.kstest(times, 'uniform')\n    return result\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": ["```python\nresult = stats.kstest((np.array(times) - min(times)) / (max(times) - min(times)), 'uniform').pvalue >= 0.05\n```\n```python\n</code>\nEND SOLUTION\n```\nThis code calculates the p-value using the Kolmogorov-Smirnov test to test the hypothesis that the points are uniformly chosen from the range 0 to T. If the p-value is greater than or equal to 0.05 (indicating a confidence level of 95%), the result will be `True`, otherwise `False`."], "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": ["<code>\nfrom scipy.sparse import hstack\nFeature = hstack([c1, c2])\n"], "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": ["```python\nimport scipy.sparse as sp\n\nc1 = sp.csr_matrix([[0, 0, 1, 0], [2, 0, 0, 0], [0, 0, 0, 0]])\nc2 = sp.csr_matrix([[0, 3, 4, 0], [0, 0, 0, 5], [6, 7, 0, 8]])\n\nFeature = sp.hstack([c1, c2])\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": ["```python\nFeature = sparse.vstack([c1, c2])\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": ["<code>\nimport numpy as np\nimport scipy.spatial\nimport scipy.optimize\npoints1 = np.array([(x, y) for x in np.linspace(-1,1,7) for y in np.linspace(-1,1,7)])\nN = points1.shape[0]\npoints2 = 2*np.random.rand(N,2)-1\n"], "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": ["```python\n# BEGIN SOLUTION\ndef manhattan_distance(point1, point2):\n    return np.sum(np.abs(point1 - point2))\n\ndef minimize_manhattan_distance(points1, points2):\n    permutations = itertools.permutations(range(len(points2)))\n    min_distance = float('inf')\n    min_permutation = None\n    for permutation in permutations:\n        total_distance = sum(manhattan_distance(points1[i], points2[j]) for i, j in enumerate(permutation))\n        if total_distance < min_distance:\n            min_distance = total_distance\n            min_permutation = permutation\n    return min_permutation\n\nresult = minimize_manhattan_distance(points1, points2)\n# END SOLUTION\n```\n```"], "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": ["from scipy.sparse import csr_matrix\n\nb = csr_matrix(a)\nb.setdiag(0)\n"], "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": ["<code>\nregions, num_regions = ndimage.label(img > threshold)\nnum_regions\n"], "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": ["```python\nlabeled_array, num_features = ndimage.label(img < threshold)\nresult = num_features\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": ["```python\n    labeled_array, num_features = ndimage.label(img > threshold)\n    return num_features\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": ["```python\nlabel_im, nb_labels = ndimage.label(img > threshold)\nregions = ndimage.find_objects(label_im)\n\ndistances = []\nfor region in regions:\n    if region is not None:\n        center_y = (region[0].start + region[0].stop) / 2\n        center_x = (region[1].start + region[1].stop) / 2\n        distance = np.sqrt(center_y ** 2 + center_x ** 2)\n        distances.append(distance)\n\nresult = distances\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": ["```python\ndef make_symmetric(matrix):\n    \"\"\"Make a sparse matrix symmetric.\"\"\"\n    return matrix + matrix.T - sparse.diags(matrix.diagonal())\n\nM = make_symmetric(M)\n```\n```"], "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": ["```python\n    def make_symmetric(sA):\n        sA = sA + sA.T - sA.multiply(sA.T)\n        return sA\n\n    sA = make_symmetric(sA)\n    ### END SOLUTION\n    return sA\n```"], "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": ["```python\nfrom scipy.ndimage import label, generate_binary_structure\n\n# Define a structure for connectivity\nstructure = generate_binary_structure(2, 1)\n\n# Label connected components\nlabeled_array, num_features = label(square, structure)\n\n# Loop through each labeled component\nfor i in range(1, num_features + 1):\n    component = (labeled_array == i)\n    # Check if the component has only one \"1\" cell\n    if component.sum() == 1:\n        # Find the index of the single \"1\" cell\n        index = np.where(component)\n        # Set that cell to 0\n        square[index] = 0\n\n# END SOLUTION\n```\n```python\nsquare\n```"], "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": ["```python\nfrom scipy.ndimage import label, generate_binary_structure, binary_dilation\n\ndef remove_isolated_cells(arr):\n    structure = generate_binary_structure(2, 1)\n    labeled_array, num_features = label(arr > 0, structure)\n    for i in range(1, num_features + 1):\n        feature_mask = labeled_array == i\n        if (feature_mask.sum() == 1):\n            arr[feature_mask] = 0\n    return arr\n\nsquare = remove_isolated_cells(square)\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": ["```python\nmean = col.mean()\nstandard_deviation = col.std()\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": ["```python\nMax = col.max()\nMin = col.min()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": ["```python\n# Calculate the median without converting to dense\nsorted_data = np.sort(col.data)\nn = len(sorted_data)\nif n % 2 == 0:\n    median = (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\nelse:\n    median = sorted_data[n // 2]\n\n# Calculate the mode\nunique_values, counts = np.unique(col.data, return_counts=True)\nmode = unique_values[np.argmax(counts)]\n\nMedian, Mode = median, mode\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": ["```python\ndef generic_fourier(x, *coefficients):\n    \"\"\"\n    Generic Fourier series function for arbitrary orders of harmonics.\n    \n    Parameters:\n        x: array-like\n            Independent variable.\n        coefficients: list\n            Coefficients for each harmonic term.\n    \n    Returns:\n        array-like\n            Value of the Fourier series at each point in x.\n    \"\"\"\n    tau = 0.045\n    num_harmonics = len(coefficients)\n    series = np.zeros_like(x)\n    for n in range(1, num_harmonics + 1):\n        series += coefficients[n - 1] * np.cos(n * np.pi / tau * x)\n    return series\n\n# Fitting the data\npopt, pcov = curve_fit(generic_fourier, z, Ua, p0=[1] * degree)\n\n# Printing the solution\nprint(\"Optimal coefficients:\", popt)\nprint(\"Covariance matrix:\", pcov)\n```\n```"], "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": ["```python\nfrom scipy.spatial.distance import pdist, squareform\n\n# Find unique IDs in the array\nunique_ids = np.unique(example_array)\n\n# Create a list to store pairwise distances\npairwise_distances = []\n\n# Calculate pairwise distances between unique IDs\nfor i in range(len(unique_ids)):\n    for j in range(i+1, len(unique_ids)):\n        id_i = unique_ids[i]\n        id_j = unique_ids[j]\n        \n        # Find coordinates of cells with id_i and id_j\n        coords_i = np.argwhere(example_array == id_i)\n        coords_j = np.argwhere(example_array == id_j)\n        \n        # Calculate pairwise Euclidean distances\n        distances = pdist(np.concatenate((coords_i, coords_j)), metric='euclidean')\n        \n        # Find the minimum distance\n        min_distance = np.min(distances)\n        \n        # Append the result to the list\n        pairwise_distances.append([id_i, id_j, min_distance])\n\n# Convert the list to a numpy array\nresult = np.array(pairwise_distances)\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": ["```python\nfrom scipy.spatial.distance import cdist\nimport numpy as np\n\ndef pairwise_manhattan_distances(array):\n    unique_ids = np.unique(array)\n    distances = np.zeros((len(unique_ids), len(unique_ids)))\n\n    for i, id1 in enumerate(unique_ids):\n        for j, id2 in enumerate(unique_ids):\n            coords_id1 = np.array(np.where(array == id1)).T\n            coords_id2 = np.array(np.where(array == id2)).T\n            distances[i, j] = cdist(coords_id1, coords_id2, metric='cityblock').min()\n\n    return distances\n\nexample_array = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\n\nresult = pairwise_manhattan_distances(example_array)\n```\n```"], "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": ["```python\ndef calculate_pairwise_distances(example_array):\n    # Get unique IDs\n    unique_ids = np.unique(example_array)\n\n    # Initialize result array\n    result = []\n\n    # Calculate pairwise distances\n    for i in range(len(unique_ids)):\n        for j in range(i + 1, len(unique_ids)):\n            from_id = unique_ids[i]\n            to_id = unique_ids[j]\n\n            # Find coordinates of pixels with from_id and to_id\n            from_coords = np.argwhere(example_array == from_id)\n            to_coords = np.argwhere(example_array == to_id)\n\n            # Calculate pairwise distances\n            distances = scipy.spatial.distance.cdist(from_coords, to_coords, 'euclidean')\n\n            # Find minimum distance\n            min_distance = np.min(distances)\n\n            # Append result\n            result.append([from_id, to_id, min_distance])\n\n    return result\n\n# Example usage\nresult = calculate_pairwise_distances(example_arr)\nprint(result)\n```\n```"], "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": ["from scipy import interpolate\nimport numpy as np\nx = np.array([[0.12, 0.11, 0.1, 0.09, 0.08],\n              [0.13, 0.12, 0.11, 0.1, 0.09],\n              [0.15, 0.14, 0.12, 0.11, 0.1],\n              [0.17, 0.15, 0.14, 0.12, 0.11],\n              [0.19, 0.17, 0.16, 0.14, 0.12],\n              [0.22, 0.19, 0.17, 0.15, 0.13],\n              [0.24, 0.22, 0.19, 0.16, 0.14],\n              [0.27, 0.24, 0.21, 0.18, 0.15],\n              [0.29, 0.26, 0.22, 0.19, 0.16]])\ny = np.array([[71.64, 78.52, 84.91, 89.35, 97.58],\n              [66.28, 73.67, 79.87, 85.36, 93.24],\n              [61.48, 69.31, 75.36, 81.87, 89.35],\n              [57.61, 65.75, 71.7, 79.1, 86.13],\n              [55.12, 63.34, 69.32, 77.29, 83.88],\n              [54.58, 62.54, 68.7, 76.72, 82.92],\n              [56.58, 63.87, 70.3, 77.69, 83.53],\n              [61.67, 67.79, 74.41, 80.43, 85.86],\n              [70.08, 74.62, 80.93, 85.06, 89.84]])\nx_val = np.linspace(-1, 1, 100)\n\nresult = np.zeros((5, 100))\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k=2, s=4)\n    result[i] = interpolate.splev(x_val, tck, der=0)\n"], "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": ["```python\n# Concatenate the arrays and create a group identifier array\ndata = np.concatenate([x1, x2, x3, x4])\ngroups = np.repeat([1, 2, 3, 4], [len(x1), len(x2), len(x3), len(x4)])\n\n# Perform Anderson-Darling test\nstatistic, critical_values, significance_level = ss.anderson_ksamp([data[groups == i] for i in np.unique(groups)])\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": ["```python\nresult = ss.anderson_ksamp([x1, x2]).statistic <= ss.anderson_ksamp([x1, x2]).critical_values[2]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": ["```python\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\n\ndef rolling_kendalltau(df, window):\n    result = df.copy()\n    columns = df.columns\n    \n    for i in range(len(columns)):\n        for j in range(i+1, len(columns)):\n            col1 = columns[i]\n            col2 = columns[j]\n            result[f'{col1}{col2}'] = df[col1].rolling(window).corr(df[col2])\n            \n    return result\n\ndf = pd.DataFrame([[1, 5, 2], [2, 4, 4], [3, 3, 1], [4, 2, 2], [5, 1, 4]], \n                 columns=['A', 'B', 'C'], index=[1, 2, 3, 4, 5])\n\ndf = rolling_kendalltau(df, 3)\n```\n"], "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": ["```python\nresult = my_csr_matrix.nnz == 0\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": ["```python\nresult = sa.nnz == 0\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": ["```python\nresult = block_diag(*a)\n```\n```"], "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": ["<code>\nimport numpy as np\nfrom scipy import stats\nnp.random.seed(10)\npre_course_scores = np.random.randn(10)\nduring_course_scores = np.random.randn(10)\n\nresult = stats.ranksums(pre_course_scores, during_course_scores)\np_value = result.pvalue\n"], "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": ["<code>\n    result = stats.ranksums(pre_course_scores, during_course_scores)\n    p_value = result.pvalue\n    return p_value\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": ["<code>\nimport numpy as np\n\na = np.array([1., 2., 2.5, 400., 6., 0.])\n\nn = len(a)\nmean = np.mean(a)\nstd = np.std(a)\n\nkurtosis_result = np.sum((a - mean)**4) / (n * std**4)\n"], "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": ["<code>\nimport numpy as np\nimport scipy.stats\na = np.array([   1. ,    2. ,    2.5,  400. ,    6. ,    0. ])\nkurtosis_result = scipy.stats.kurtosis(a, fisher=False)\n</code>\n</code>"], "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": ["```python\nimport numpy as np\nimport scipy.interpolate\n\ns = np.linspace(-1, 1, 50)\nt = np.linspace(-2, 0, 50)\nx, y = np.ogrid[-1:1:10j, -2:0:10j]\nz = (x + y) * np.exp(-6.0 * (x * x + y * y))\n\ninterp_func = scipy.interpolate.interp2d(x[:, 0], y[0, :], z, kind='cubic')\n\n# Assuming s and t are arrays of points where interpolation is desired\nresult = interp_func(s, t).flatten()\n</code>\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": ["```python\n    s_grid, t_grid = np.meshgrid(s, t, indexing='ij')\n    result = scipy.interpolate.interp2d(exampls_s, example_t, z, kind='cubic')(s_grid.ravel(), t_grid.ravel())\n    return result\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": ["```python\nimport numpy as np\n\n# Function to find Voronoi cell for a given point\ndef find_voronoi_cell(vor, point):\n    for i, region in enumerate(vor.regions):\n        if not -1 in region:\n            polygon = [vor.vertices[j] for j in region]\n            if point_inside_polygon(point, polygon):\n                return i\n    return None\n\n# Function to check if a point is inside a polygon\ndef point_inside_polygon(point, polygon):\n    x, y = point\n    n = len(polygon)\n    inside = False\n    p1x, p1y = polygon[0]\n    for i in range(1, n + 1):\n        p2x, p2y = polygon[i % n]\n        if y > min(p1y, p2y):\n            if y <= max(p1y, p2y):\n                if x <= max(p1x, p2x):\n                    if p1y != p2y:\n                        xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x\n                    if p1x == p2x or x <= xinters:\n                        inside = not inside\n        p1x, p1y = p2x, p2y\n    return inside\n\n# Count points in each Voronoi cell\nresult = np.zeros(len(vor.regions) - 1, dtype=int) # Excluding the infinite region\nfor point in extraPoints:\n    cell_index = find_voronoi_cell(vor, point)\n    if cell_index is not None:\n        result[cell_index] += 1\n\nresult\n```\n```"], "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": ["```python\nimport numpy as np\n\n# Function to find the index of the Voronoi cell containing a point\ndef find_voronoi_cell(point, vor):\n    region_index = vor.point_region[np.where((vor.points == point).all(axis=1))[0][0]]\n    return region_index if region_index != -1 else None\n\n# Count the number of extra points in each Voronoi cell\ndef count_extra_points_in_cells(extra_points, vor):\n    cell_counts = np.zeros(len(vor.regions) - 1, dtype=int)  # Initialize counts for each cell\n    for point in extra_points:\n        cell_index = find_voronoi_cell(point, vor)\n        if cell_index is not None:\n            cell_counts[cell_index] += 1\n    return cell_counts\n\n# Count extra points in each cell\nresult = count_extra_points_in_cells(extraPoints, vor)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": ["```python\npadded_vectors = [np.pad(vector, (0, max_vector_size - len(vector)), 'constant') for vector in vectors]\nresult = sparse.csr_matrix(padded_vectors)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": ["```python\nimport numpy as np\nimport scipy.ndimage\n\na = np.zeros((5, 5))\na[1:4, 1:4] = np.arange(3*3).reshape((3, 3))\n\nb = scipy.ndimage.median_filter(a, size=3, origin=0.5)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": ["```python\nresult = M[row, column]\n```\n```"], "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": ["```python\nresult = [M[row[i], column[i]] for i in range(len(row))]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": ["```python\nimport numpy as np\nimport scipy.interpolate\n\narray = np.random.randint(0, 9, size=(10, 10, 10))\nx = np.linspace(0, 10, 10)\nx_new = np.linspace(0, 10, 100)\n\n# Reshape array to interpolate over the first axis\narray_reshaped = np.moveaxis(array, 0, -1)\n\n# Create interpolation function\nf = scipy.interpolate.RegularGridInterpolator((x, np.arange(10), np.arange(10)), array_reshaped)\n\n# Create grid for new values\ngrid = np.meshgrid(x_new, np.arange(10), np.arange(10), indexing='ij')\n\n# Interpolate values\nnew_array = f(np.array(grid).T).reshape(len(x_new), 10, 10)\n```\n```"], "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": ["```python\nimport scipy.integrate\nimport math\nimport numpy as np\n\ndef NDfx(x):\n    return (1 / math.sqrt(2 * math.pi)) * math.exp(-0.5 * x**2)\n\nx = 2.5\nu = 1\no2 = 3\n\ndev = abs((x - u) / o2)\nP_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\nP_outer = 1 - P_inner\nP = P_inner + P_outer / 2\n\nprob = P\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": ["```python\nimport scipy.integrate\nimport math\nimport numpy as np\n\ndef NDfx(x):\n    return (1 / math.sqrt(2 * math.pi)) * math.exp(-0.5 * (x ** 2))\n\ndef f(x=2.5, u=1, o2=3):\n    dev = abs((x - u) / o2)\n    P_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer / 2\n    return P\n\n### END SOLUTION\n```"], "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": ["```python\nimport numpy as np\nimport scipy.fft as sf\n\nN = 8\n\n# Function to generate DCT matrix\ndef dctmtx(N):\n    # Constructing 1D DCT matrix\n    n = np.arange(N)\n    k = n.reshape((N, 1))\n    dct_matrix = np.sqrt(2 / N) * np.cos((np.pi * (2 * k + 1) * n) / (2 * N))\n    # Adjusting first row for ortho-mode normalization\n    dct_matrix[0, :] = dct_matrix[0, :] / np.sqrt(2)\n    return dct_matrix\n\nresult = dctmtx(N)\n```\n```"], "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": ["```python\nfrom scipy import sparse\nimport numpy as np\n\nmatrix = np.array([[3.5, 13., 28.5, 50., 77.5],\n                   [-5., -23., -53., -95., -149.],\n                   [2.5, 11., 25.5, 46., 72.5]])\n\nresult = sparse.diags(matrix, offsets=[-1, 0, 1], shape=(5, 5), format='csr').toarray()\n```\n```python\nresult\n```\n```python\n# Output:\narray([[  -5. ,    2.5,    0. ,    0. ,    0. ],\n       [   3.5,  -23. ,   11. ,    0. ,    0. ],\n       [   0. ,   13. ,  -53. ,   25.5,    0. ],\n       [   0. ,    0. ,   28.5,  -95. ,   46. ],\n       [   0. ,    0. ,    0. ,   50. , -149. ]])\n```"], "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": ["```python\nimport numpy as np\nimport scipy.stats\n\nN = 3\np = 0.5\n\n# Constructing the matrix using binom.pmf function from scipy.stats\nresult = np.zeros((N+1, N+1))\nfor i in range(N+1):\n    for j in range(i+1):\n        result[i, j] = scipy.stats.binom.pmf(j, i, p)\n\n# Printing the result\nprint(result)\n```\n```python\nEND SOLUTION\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": ["<code>\nresult = df.apply(stats.zscore, axis=1)\n"], "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": ["<code>\nz_scores = stats.zscore(df, axis=0)\nresult = pd.DataFrame(z_scores, index=df.index, columns=df.columns).to_string()\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": ["```python\n# Calculate row-wise z-scores using scipy.stats.zscore\nz_scores = stats.zscore(df, axis=1)\n\n# Combine original data and z-scores into a single DataFrame\nresult = pd.concat([df, pd.DataFrame(z_scores, index=df.index, columns=df.columns, \n                                      index=['zscore']*len(df))], axis=0)\n\n# Rename index levels\nresult.index.set_levels(['data', 'zscore'], level=1, inplace=True)\n\n# Round z-scores to 8 decimal places\nresult = result.round(8)\n```\n```"], "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": ["```python\n# Calculate z-scores for each column\nz_scores = stats.zscore(df, nan_policy='omit', axis=0)\n\n# Round the original dataframe to 3 decimal places\ndf_rounded = df.round(3)\n\n# Round the z-scores to 3 decimal places\nz_scores_rounded = np.round(z_scores, 3)\n\n# Combine data and z-scores into a single dataframe\nresult = pd.DataFrame(data=np.vstack((df_rounded.values, z_scores_rounded)),\n                      index=pd.MultiIndex.from_product([df.index, ['data', 'zscore']]),\n                      columns=df.columns)\n```\n```"], "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": ["```python\nresult = scipy.optimize.line_search(test_func, test_grad, starting_point, direction)[0]\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": ["```python\nimport numpy as np\nfrom scipy.spatial import distance\n\ndef get_distance_2(y, x):\n    mid = np.array(y.shape) / 2\n    yy, xx = np.indices(y.shape)\n    mid = np.array(y.shape) / 2\n    return distance.cdist(np.dstack((yy, xx)), [mid])[..., 0]\n\nshape = (6, 6)\ny, x = np.indices(shape)\nresult = get_distance_2(y, x)\n```\n```"], "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": ["```python\nimport numpy as np\n\ndef get_distance_2(y, x):\n    rows, cols = y.shape\n    mid = np.array([(rows-1)/2, (cols-1)/2])  # Center point\n    return np.abs(y - mid[0]) + np.abs(x - mid[1])  # Manhattan distance\n\n# Example usage:\nrows, cols = 6, 6\ny, x = np.indices((rows, cols))\nresult = get_distance_2(y, x)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": ["<code>\nimport numpy as np\nfrom scipy.spatial import distance\n\ndef f(shape=(6, 6)):\n    rows, cols = shape\n    mid = np.array([rows // 2, cols // 2])\n    y, x = np.indices(shape)\n    return distance.cdist(np.dstack((y, x)), mid.reshape(1, -1)).reshape(shape)\n\nresult = f(shape=(6, 6))\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": ["```python\nresult = scipy.ndimage.zoom(x, (shape[0] / x.shape[0], shape[1] / x.shape[1]), order=1)\n``` \n</code>"], "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": ["import scipy.optimize\n\ndef func(x, a):\n    return np.dot(a, x**2)\n\ndef objective(x, a, y):\n    return np.sum((y - func(x, a))**2)\n\nout = scipy.optimize.minimize(objective, x0, args=(a, y))\noptimal_x = out.x\n\noptimal_x\n"], "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": ["import scipy.optimize\nimport numpy as np\n\nnp.random.seed(42)\na = np.random.rand(3,5)\nx_true = np.array([10, 13, 5, 8, 40])\ny = a.dot(x_true ** 2)\nx0 = np.array([2, 3, 1, 4, 20])\nx_lower_bounds = x_true / 2\n\ndef objective_function(x, a):\n    return np.sum(a * x**2)\n\ndef constraint(x):\n    return x - x_lower_bounds\n\nout = scipy.optimize.minimize(objective_function, x0, args=(a,), method='L-BFGS-B', bounds=scipy.optimize.Bounds(x_lower_bounds, np.inf), constraints={'type': 'ineq', 'fun': constraint})\n\nprint(out.x)  # Optimal x array\n"], "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": ["```python\nimport scipy.integrate\nimport numpy as np\n\nN0 = 10\ntime_span = [-0.1, 0.1]\n\ndef dN1_dt_varying(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_varying, t_span=time_span, y0=[N0,])\nresult = sol.y\n```\n```"], "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": ["import scipy.integrate\nimport numpy as np\n\nN0 = 1\ntime_span = [0, 10]\n\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 + t - np.sin(t) if 0 < t < 2*np.pi else 2*np.pi\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,])\n\nresult = sol.y\n"], "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": ["import scipy.integrate\nimport numpy as np\n\nN0 = 10\ntime_span = [-0.1, 0.1]\n\ndef dN1_dt_timevarying(t, N1):\n    return -100 * N1 - np.cos(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_timevarying, t_span=time_span, y0=[N0,])\nresult = sol.y"], "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": ["```python\nfor t in range (4):\n    def const(x):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n```"], "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": ["```python\nresult = sparse.vstack([sa, sb])\n```\n```"], "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": ["<code>\nresult = sparse.hstack([sa, sb])\n"], "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": ["```python\nimport numpy as np\nfrom scipy import integrate\n\ndef solve_integral_with_varied_c(c_values):\n    integrals = []\n    for c in c_values:\n        eqn = lambda x: 2 * c * x\n        result, error = integrate.quad(eqn, 0, 1)\n        integrals.append(result)\n    return integrals\n\nc_values = [5, 10, 15, 20]  # Example values for c\nintegrals = solve_integral_with_varied_c(c_values)\nprint(integrals)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": ["```python\nimport scipy.integrate\n\ndef f(c=5, low=0, high=1):\n    # return the solution in this function\n    I = []\n    for value in c:\n        eqn = lambda x: 2 * c * x\n        result, error = scipy.integrate.quad(eqn, low, high)\n        I.append(result)\n    return I\n\n### END SOLUTION\n\n# Example usage:\n# c_values = [1, 2, 3, 4, 5]\n# solutions = f(c_values)\n# print(solutions)\n```"], "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": ["```python\n# Check if V is a dok_matrix\nif not isinstance(V, sparse.dok_matrix):\n    raise ValueError(\"V must be a dok_matrix\")\n\n# Find non-zero indices and values in V\nnon_zero_indices = list(V.keys())\nnon_zero_values = list(V.values())\n\n# Add x to non-zero values\nnon_zero_values = [val + x for val in non_zero_values]\n\n# Create a new dok_matrix with the same shape as V\nnew_V = sparse.dok_matrix(V.shape)\n\n# Assign non-zero values to the new matrix\nfor idx, val in zip(non_zero_indices, non_zero_values):\n    new_V[idx] = val\n\nV = new_V\n```\n```"], "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": ["```python\nimport numpy as np\nfrom scipy.sparse import coo_matrix\n\n# Create a COO matrix V\nV = sparse.random(60000, 60000, density=0.05, format='coo', random_state=42)\n\n# Create a COO matrix for x\nx_data = np.full(V.data.shape, fill_value=x)\nx_matrix = coo_matrix((x_data, (V.row, V.col)), shape=V.shape)\n\n# Add x only to non-zero values in V\nresult_data = V.data + x_data\nresult_matrix = coo_matrix((result_data, (V.row, V.col)), shape=V.shape)\n\n# Ensure sparsity is maintained\nresult_matrix.eliminate_zeros()\n\nV = result_matrix\n```\n```"], "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": ["```python\ndata = V.data + x\nV = sparse.coo_matrix((data, (V.row, V.col)), shape=V.shape)\ndata = V.data + y\nV = sparse.coo_matrix((data, (V.row, V.col)), shape=V.shape)\n```\n```python\nEND SOLUTION\n```\n```python\n# Now V contains the result of adding x and y to non-zero values in the original V\n```"], "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": ["```python\nsa = sa.tocsc()\nfor col in range(sa.shape[1]):\n    column = sa[:, col]\n    normsquared = np.sum(column.data ** 2)\n    length = math.sqrt(normsquared)\n    column.data /= length\n```\n```python\nEND SOLUTION\n```\n```python\n</code>\n```\n"], "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": ["```python\nsa = sa.tocsr()\nfor col_idx in range(sa.shape[1]):\n    column = sa[:, col_idx]\n    column_data = column.data\n    column_sqr = [x ** 2 for x in column_data]\n    column_length = math.sqrt(sum(column_sqr))\n    sa[:, col_idx] = (1 / column_length) * column\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": ["```python\na = (a > 0).astype(int)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": ["```python\na = (a > 0).astype(int)\n``` \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": ["```python\nresult = []\nfor centroid in centroids:\n    distances = scipy.spatial.distance.cdist([centroid], data)\n    closest_index = np.argmin(distances)\n    result.append(closest_index)\nresult = np.array(result)\n```\n```python\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": ["<code>\ndistances = scipy.spatial.distance.cdist(data, centroids)\nclosest_indices = np.argmin(distances, axis=0)\nresult = data[closest_indices]\n"], "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": ["```python\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef closest_to_centroid(cluster_indices, centroids, data, k):\n    closest_indices = []\n    for cluster_index in cluster_indices:\n        cluster_data = data[cluster_index]\n        centroid = centroids[cluster_index]\n        distances = cdist([centroid], cluster_data).flatten()\n        closest_k_indices = np.argsort(distances)[:k]\n        closest_indices.append(cluster_index[closest_k_indices])\n    return closest_indices\n\n# Example usage:\ncluster_indices = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\ncentroids = np.random.rand(3, 3)\ndata = np.random.rand(9, 3)\nk = 2\nresult = closest_to_centroid(cluster_indices, centroids, data, k)\n```\n</code>"], "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": ["<code>\nimport numpy as np\nfrom scipy.optimize import fsolve\n\ndef eqn_to_solve(a, x, b):\n    return eqn(x, a, b)\n\nxdata = np.arange(4) + 3\nbdata = np.random.randint(0, 10, (4,))\nresult = [fsolve(eqn_to_solve, x0=0.5, args=(x, b)) for x, b in zip(xdata, bdata)]\n</code>"], "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": ["```python\nimport numpy as np\nfrom scipy.optimize import fsolve\n\ndef eqn(b, x, a):\n    return x + 2*a - b**2\n\nxdata = np.arange(4) + 3\nadata = np.random.randint(0, 10, (4,))\nresult = []\n\nfor x, a in zip(xdata, adata):\n    sol = fsolve(eqn, x0=0.5, args=(x, a))\n    result.append(sol)\n\nresult = np.array(result)\nprint(result)\n```\n"], "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": ["<code>\n# Define the cumulative distribution function (CDF) based on your PDF\ndef bekkers_cdf(x, a, m, d):\n    cdf = integrate.quad(lambda t: bekkers(t, a, m, d), 0, x)[0]\n    return cdf\n\n# Calculate the KS test statistic and p-value\nks_statistic, p_value = sp.stats.kstest(sample_data, lambda x: bekkers_cdf(x, estimated_a, estimated_m, estimated_d))\n\nresult = (ks_statistic, p_value)\n</code>"], "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": ["<code>\nimport numpy as np\nimport scipy as sp\nfrom scipy import integrate,stats\n\ndef bekkers(x, a, m, d):\n    p = a*np.exp((-1*(x**(1/3) - m)**2)/(2*d**2))*x**(-2/3)\n    return p\n\nrange_start = 1\nrange_end = 10\nestimated_a, estimated_m, estimated_d = 1, 1, 1\nsample_data = [1.5, 1.6, 1.8, 2.1, 2.2, 3.3, 4, 6, 8, 9]\n\n# Generate the continuous distribution function\ndef bekkers_continuous(x):\n    return bekkers(x, estimated_a, estimated_m, estimated_d)\n\n# Perform the Kolmogorov-Smirnov test\nks_statistic, p_value = stats.kstest(sample_data, bekkers_continuous)\n\n# Check if the null hypothesis can be rejected at 95% confidence level\nresult = p_value < 0.05\n\nresult\n"], "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": ["```python\nintegral_df = df.rolling('5S').apply(lambda x: integrate.trapz(x, x.index.astype(int) // 10**9))\n```\n```"], "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": ["<code>\nimport scipy.interpolate\nx = [(2,2), (1,2), (2,3), (3,2), (2,1)]\ny = [5,7,8,10,3]\neval = [(2.7, 2.3)]\n\nresult = scipy.interpolate.griddata(x, y, eval, method='linear')\n"], "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": ["```python\ndef multinomial_neg_log_likelihood(weights, data):\n    probabilities = weights / np.sum(weights)\n    return -np.sum(data * np.log(probabilities))\n\ninitial_guess = np.ones(12)  # Initial guess for the weights\nresult = sciopt.minimize(multinomial_neg_log_likelihood, initial_guess, args=(a['A1'],))\nweights = result.x\n```\n```python\nEND SOLUTION\n```\n```python\nprint(\"Estimated weights for each category:\")\nfor i, weight in enumerate(weights):\n    print(f\"Category {i}: {weight}\")\n```"], "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": ["<code>\nresult = sciopt.minimize(e, x0=[1, 1], args=(x, y), bounds=[(0.5, 1.5), (0.7, 1.8)])\n"], "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": ["```python\ndef find_relative_extrema(arr, n):\n    # Create a filter kernel for local maxima and minima\n    kernel = np.ones(2 * n + 1)\n    kernel[n] = 0\n    \n    # Find local maxima and minima using scipy's convolution function\n    local_max = signal.convolve(arr, kernel, mode='valid')\n    local_min = signal.convolve(arr, -kernel, mode='valid')\n    \n    # Get the indices of relative maxima and minima\n    max_indices = np.where(local_max == 0)[0] + n\n    min_indices = np.where(local_min == 0)[0] + n\n    \n    # Combine and sort the indices\n    indices = np.sort(np.concatenate((max_indices, min_indices)))\n    \n    return indices\n\n# Example usage:\narr = np.array([-624.59309896, -624.59309896, -624.59309896, -625., -625., -625.,])\nn = 2\nresult = find_relative_extrema(arr, n)\n```\n```python\n</code>\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": ["<code>\nimport numpy as np\nfrom scipy import signal\n\narr = np.array([[-624.59309896, -624.59309896, -624.59309896, -625., -625., -625.], [3, 0, 0, 1, 2, 4]])\nn = 2\n\nresult = []\n\nfor i in range(arr.shape[0]):\n    for j in range(arr.shape[1]):\n        if j >= n and j < arr.shape[1] - n:\n            if arr[i, j] <= np.sort(arr[i, j-n:j+n+1])[n]:\n                result.append([i, j])\n\nprint(result)\n"], "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": ["```python\nnumeric_cols = df.select_dtypes(include=[np.number]).columns\ndf_outliers_removed = df[(np.abs(stats.zscore(df[numeric_cols])) < 3).all(axis=1)]\n```\n```python\nEND SOLUTION\n```\n```python\ndf_outliers_removed\n```"], "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": ["```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": ["```python\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport pandas as pd\ndata = load_iris()\n\n# Solution: Converting sklearn Bunch object to DataFrame\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n\n# END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": ["```python\nimport numpy as np\nfrom sklearn.datasets import fetch_california_housing\nimport pandas as pd\ndata = fetch_california_housing()\n\n# Convert to Pandas DataFrame\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = pd.Series(data.target)\n\n# Print the first few rows of the DataFrame\nprint(data1.head())\n```\n```"], "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": ["```python\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport pandas as pd\n\ndata = load_iris()\n\ndef solve(data):\n    df = pd.DataFrame(data.data, columns=data.feature_names)\n    df['target'] = data.target\n    return df\n\n### END SOLUTION\n\ndata1 = solve(data)\nprint(data1.head())\n```"], "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": ["```python\n# Extract unique elements from all lists in Col3\nunique_elements = set(df['Col3'].sum())\n\n# Create a new DataFrame with Col1 and Col2 from original DataFrame\ndf_out = df[['Col1', 'Col2']]\n\n# Iterate over unique elements to create new columns and fill with 1 or 0\nfor element in unique_elements:\n    df_out[element] = df['Col3'].apply(lambda x: 1 if element in x else 0)\n\n# Optionally, fill NaN values with 0 if there are missing values\ndf_out.fillna(0, inplace=True)\n```\n```"], "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": ["<code>\ndf_out = pd.concat([df, pd.get_dummies(df['Col3'].apply(pd.Series).stack()).sum(level=0)], axis=1)\n"], "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": ["<code>\ndf_out = pd.concat([df, pd.get_dummies(df['Col4'].apply(pd.Series).stack()).sum(level=0)], axis=1)\n"], "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": ["```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Assuming df is your DataFrame and the last column is the one to be one-hot encoded\nmlb = MultiLabelBinarizer()\none_hot_encoded = mlb.fit_transform(df.iloc[:, -1])\ncolumn_names = mlb.classes_\n\n# Creating a new DataFrame with the one-hot encoded columns\ndf_out = pd.concat([df.iloc[:, :-1], pd.DataFrame(one_hot_encoded, columns=column_names)], axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nprint(df_out)\n```"], "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": ["<code>\ndf_out = pd.concat([df.drop(df.columns[-1], axis=1),\n                    pd.get_dummies(df[df.columns[-1]].apply(pd.Series).stack()).sum(level=0)], axis=1)\n"], "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": ["```python\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.svm import LinearSVC\nimport numpy as np\nimport pandas as pd\n\nX, y, x_test = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\nassert type(x_test) == np.ndarray\n\n# Fit model:\nsvmmodel = LinearSVC()\nsvmmodel.fit(X, y)\n\n# Obtain decision scores\npredicted_test_scores = svmmodel.decision_function(x_test)\n\n# Convert decision scores to probabilities using logistic function\nprobabilities = 1 / (1 + np.exp(-predicted_test_scores))\n```\n```python\n# Alternatively, using CalibratedClassifierCV for probability estimates\ncalibrated_clf = CalibratedClassifierCV(svmmodel, cv=5)\ncalibrated_clf.fit(X, y)\nprobabilities = calibrated_clf.predict_proba(x_test)\n```\n```python\nEND SOLUTION\n```\n```python\nproba = probabilities  # Store the solution in this variable\n```\n"], "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": ["```python\nfrom sklearn.calibration import CalibratedClassifierCV\n\n# Create a CalibratedClassifierCV instance with 5-fold cross-validation\ncalibrated_model = CalibratedClassifierCV(base_estimator=model, cv=5, method='sigmoid')\n\n# Fit the calibrated model on the training data\ncalibrated_model.fit(X, y)\n\n# Obtain probability estimates for the predicted test data\nproba = calibrated_model.predict_proba(x_predict)\n</code>\n```"], "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": ["```python\ndf_encoded = pd.DataFrame(transform_output.toarray(), columns=transform_output.get_feature_names_out())\ndf = pd.concat([df_origin.reset_index(drop=True), df_encoded.reset_index(drop=True)], axis=1)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": ["<code>\n# Assuming transform_output is a csr_matrix\ntransform_output_df = pd.DataFrame(transform_output.toarray())\ndf = pd.concat([df_origin, transform_output_df], axis=1)\n"], "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": ["```python\n    df_transformed = pd.DataFrame(transform_output.toarray())\n    df_combined = pd.concat([df.reset_index(drop=True), df_transformed.reset_index(drop=True)], axis=1)\n    return df_combined\n    ### END SOLUTION\nresult = solve(df_origin, transform_output)\nprint(result)\n```"], "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": ["```python\n# Delete any step\nsteps = clf.named_steps()\ndel steps['reduce_dim']\n```"], "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": ["```python\n# Delete a step from the pipeline\nsteps = clf.named_steps()\ndel steps['dim_svm']\n```\n```python\n# Insert a step into the pipeline\nsteps = clf.named_steps()\nsteps['new_step'] = PolynomialFeatures()\n```\n```python\n# Reassign steps to the pipeline\nclf.steps = list(steps.items())\n```"], "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": ["```python\n# Get the current steps in the pipeline\nsteps = clf.steps\n\n# Delete the 2nd step\ndel steps[1]\n\n# Reconstruct the pipeline with the modified steps\nclf = Pipeline(steps)\n```\n```"], "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": ["```python\n# Insert a step\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures\n\nestimators = [('reduce_dim', PCA()), ('svm', SVC())]\nclf = Pipeline(estimators)\n\n# Retrieve current steps\nsteps = clf.steps\n\n# Insert a new step after the first step\nnew_step = ('poly', PolynomialFeatures())\nsteps.insert(1, new_step)\n\n# Reconstruct the pipeline\nclf = Pipeline(steps)\n```\n```"], "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": ["```python\n# Insert a step\nclf.steps.insert(1, ('new_step', SVC()))\n\n# Delete a step\ndel clf.steps[0]\n```\n```python\n# END SOLUTION\n```"], "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": ["```python\n# Insert ('t1919810', PCA()) right before 'svdm'\nnew_step = ('t1919810', PCA())\nindex_to_insert = [step[0] for step in clf.steps].index('svdm')\nclf.steps = clf.steps[:index_to_insert] + [new_step] + clf.steps[index_to_insert:]\n```\n```python\n# Delete 'pOly' step\nstep_to_delete = 'pOly'\nclf.steps = [(name, transformer) for name, transformer in clf.steps if name != step_to_delete]\n```"], "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": ["```python\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [(testX, testY)]}\n\ngrid_search = GridSearchCV(estimator=xgb.XGBRegressor(),\n                           param_grid=paramGrid,\n                           verbose=verbose,\n                           cv=TimeSeriesSplit(n_splits=cv).get_n_splits([trainX, trainY]),\n                           n_jobs=n_jobs,\n                           iid=iid)\n\ngrid_search.fit(trainX, trainY, **fit_params)\n\nb = grid_search.best_score_\nc = grid_search.predict(testX)\n```\n```python\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\nimport numpy as np\n\ndef load_data():\n    # Assuming loading data functionality\n    pass\n\ngridsearch, testX, testY, trainX, trainY = load_data()\n\nparamGrid = {\n    # Define your parameter grid here\n}\n\nverbose = True\ncv = 5\nn_jobs = -1\niid = False\n\nfit_params = {\n    \"early_stopping_rounds\": 42,\n    \"eval_metric\": \"mae\",\n    \"eval_set\": [(testX, testY)]\n}\n\ngrid_search = GridSearchCV(estimator=xgb.XGBRegressor(),\n                           param_grid=paramGrid,\n                           verbose=verbose,\n                           cv=cv,\n                           n_jobs=n_jobs,\n                           iid=iid)\n\ngrid_search.fit(trainX, trainY, **fit_params)\n\nb = grid_search.best_score_\nc = grid_search.predict(testX)\n```"], "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": ["import numpy as np\nimport pandas as pd\nimport xgboost.sklearn as xgb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import TimeSeriesSplit\n\n# Assuming gridsearch, testX, testY, trainX, trainY are loaded properly\n# gridsearch = GridSearchCV(model, paramGrid, verbose=1, cv=TimeSeriesSplit(n_splits=3).get_n_splits([trainX, trainY]), n_jobs=n_jobs, iid=iid)\n\n# Define fit_params with early stopping parameters\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [[testX, testY]]}\n\n# Fit the model with GridSearchCV and fit_params\ngridsearch.fit(trainX, trainY, **fit_params)\n\n# Get the best score and predictions\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)"], "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": ["```python\nproba_list = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba = logreg.predict_proba(X_test)\n    proba_list.append(proba)\nproba = np.array(proba_list)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": ["<code>\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test)[:, 1])\n"], "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": ["<code>\ninversed = scaler.inverse_transform(scaled)\n"], "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": ["<code>\n    inversed = scaler.inverse_transform(scaled)\n    return inversed\n### END SOLUTION\n\n# Example usage\ndata = train_df['t'].values.reshape(-1, 1)\nscaler.fit(data)\nscaled = scaler.transform(data)\ninversed = solve(data, scaler, scaled)\nprint(inversed)\n"], "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": ["<code>\nmodel_name = model.__class__.__name__\nprint(f'Name Model: {model_name}, Mean Score: {scores.mean()}')\n"], "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": ["<code>\nimport re\n\n# Get the model name without parameters\nmodel_name = re.search(r\"([^\\s(]+)\", str(model)).group(1)\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": ["```python\nmodel_name = model.__class__.__name__\n```\n```python\nEND SOLUTION\n```\n```python\nprint(f'Name Model: {model_name}, Mean Score: {scores.mean()}')\n```"], "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": ["```python\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": ["<code>\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n"], "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": ["<code>\nselect_out = pipe.named_steps['select'].fit_transform(data, target)\n"], "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": ["```python\ngrid_search = GridSearchCV(estimator=bc, param_grid=param_grid)\ngrid_search.fit(X_train, y_train)\nclf = grid_search.best_estimator_\nproba = clf.predict_proba(X_test)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": ["```python\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=2, random_state=42)\nrgr = regressor.fit(X.reshape(-1, 1), y)  # Reshape X to have one feature\npredict = rgr.predict(X_test.reshape(-1, 1))  # Reshape X_test similarly for prediction\n```"], "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\nX, y, X_test = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\nassert type(X_test) == np.ndarray\n\n# Assuming X and y are in the correct format\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=2, random_state=42)\nregressor.fit(X, y)\n\n# Assuming X_test is the test data you want to predict on\npredictions = regressor.predict(X_test)\n```"], "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndef preprocess(s):\n    return s.upper()\n\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n```\n```"], "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndef prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)"], "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\n\ndata = pd.read_csv(\"lala.csv\", delimiter=\",\")\n\n# Apply preprocessing.scale to DataFrame without losing information\nscaled_data = preprocessing.scale(data)\ndf_out = pd.DataFrame(scaled_data, columns=data.columns, index=data.index)\n```\n```"], "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": ["```python\ndf_out = pd.DataFrame(preprocessing.scale(data), index=data.index, columns=data.columns)\n```"], "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": ["```python\ngrid.fit(X, y)\nbest_model = grid.best_estimator_\ncoef = best_model.named_steps['model'].coef_\nprint(coef)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": ["```python\ngrid.fit(X, y)\ncoef = grid.best_estimator_.named_steps['model'].coef_\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": ["<code>\ncolumn_names = X.columns[model.get_support()]\n"], "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": ["<code>\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\n# Load data function\ndef load_data():\n    df = pd.read_csv('los_10_one_encoder.csv')\n    y = df['LOS'] # target\n    X = df.drop('LOS', axis=1) # drop LOS column\n    return X, y\n\n# Load data\nX, y = load_data()\n\n# Fit ExtraTreesClassifier\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\n\n# Get feature importances\nimportances = clf.feature_importances_\n\n# Create SelectFromModel\nmodel = SelectFromModel(clf, prefit=True)\n\n# Transform X\nX_new = model.transform(X)\n\n# Get selected feature indices\nselected_feature_indices = model.get_support(indices=True)\n\n# Get selected column names\nselected_column_names = X.columns[selected_feature_indices].tolist()\n\nprint(selected_column_names)\n</code>\n</code>"], "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": ["```python\nselected_columns_indices = model.get_support(indices=True)\nselected_column_names = X.columns[selected_columns_indices]\ncolumn_names = selected_column_names.tolist()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": ["<code>\ncolumn_names = X.columns[model.get_support()]\n"], "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": ["```python\n# Calculate distances from each sample to the cluster centers\ndistances = km.transform(X)\n\n# Find the indices of the cluster center closest to the specified center p\nclosest_center_idx = np.argmin(distances[:, p])\n\n# Get the cluster center coordinates\ncluster_center = km.cluster_centers_[closest_center_idx]\n\n# Calculate distances from each sample to the closest cluster center\ndist_to_center = np.linalg.norm(X - cluster_center, axis=1)\n\n# Get the indices of the 50 samples closest to the cluster center\nclosest_50_indices = np.argsort(dist_to_center)[:50]\n\n# Get the actual samples\nclosest_50_samples = X[closest_50_indices]\n```\n```"], "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": ["```python\nclosest_50_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:50]]\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\np, X = load_data()\nassert type(X) == np.ndarray\nkm = KMeans()\n\n# Fit KMeans on the data\nkm.fit(X)\n\n# Get the cluster centers\ncenters = km.cluster_centers_\n\n# Calculate distances from each sample to the p-th center\ndistances = np.linalg.norm(X - centers[p], axis=1)\n\n# Sort the samples based on distances\nsorted_indices = np.argsort(distances)\n\n# Select the 100 closest samples\nclosest_100_samples = X[sorted_indices[:100]]\n```\n```"], "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": ["<code>\n    km.fit(X)\n    cluster_centers = km.cluster_centers_\n    distances = np.linalg.norm(X - cluster_centers[p], axis=1)\n    closest_samples_indices = np.argsort(distances)[:50]\n    closest_samples = X[closest_samples_indices]\n    return closest_samples\n### END SOLUTION\n"], "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": ["```python\n# Convert categorical variable to dummy variables\nX_train = pd.get_dummies(X_train)\n\n# Model\nclf = GradientBoostingClassifier(learning_rate=0.01, max_depth=8, n_estimators=50).fit(X_train, y_train)\n```  \n```python\n# Load data function\ndef load_data():\n    iris = datasets.load_iris()\n    X = iris.data[(iris.target == 0) | (iris.target == 1)]\n    Y = iris.target[(iris.target == 0) | (iris.target == 1)]\n    train_indices = list(range(40)) + list(range(50, 90))\n    X_train = X[train_indices]\n    y_train = Y[train_indices]\n    return X_train, y_train\n```  \n```python\n# Additional imports for reference\nimport numpy as np\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn.ensemble import GradientBoostingClassifier\n```  \n```python\n# Sample data generation for reference\nX_train[0] = ['a'] * 40 + ['b'] * 40\n```  \n```python\n# Placeholder for solution\nX_train = ...\n```  \n```python\n# Solution to be put in X_train\n# Convert categorical variable to dummy variables\nX_train = pd.get_dummies(X_train)\n```  "], "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": ["```python\n# One-hot encode categorical variables\nX_train_categorical = pd.get_dummies(X_train[0])\n\n# Drop the original categorical column from X_train\nX_train.drop(columns=[0], inplace=True)\n\n# Concatenate the one-hot encoded categorical variables with the remaining features\nX_train = pd.concat([X_train, X_train_categorical], axis=1)\n```\n```python\nEND SOLUTION\n```\n```python\nclf = GradientBoostingClassifier(learning_rate=0.01, max_depth=8, n_estimators=50).fit(X_train, y_train)\n```"], "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": ["```python\nfrom sklearn.svm import SVR\n\ndef load_data():\n    # Load your data here, return X and y\n    pass\n\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n\n# Fit SVR model with Gaussian kernel\nsvm_regressor = SVR(kernel='rbf')\nsvm_regressor.fit(X, y)\n\n# Predict using the trained model\npredict = svm_regressor.predict(X)\n```\n```"], "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": ["```python\nfrom sklearn.svm import SVR\n\n# Assuming X and y are loaded data\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": ["<code>\nfrom sklearn.svm import SVR\n\n# Assuming X and y are loaded and preprocessed\nmodel = SVR(kernel='poly', degree=2)\nmodel.fit(X, y)\npredict = model.predict(X)\n"], "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": ["```python\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\n# Assuming X and y are loaded and preprocessed\nmodel = make_pipeline(StandardScaler(), SVR(kernel='poly', degree=2))\nmodel.fit(X, y)\npredict = model.predict(X)\n```\n```python\n"], "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": ["<code>\ncosine_similarities_of_queries = np.zeros((len(queries), len(documents)))\nfor i, query in enumerate(queries):\n    query_tfidf = tfidf.transform([query])\n    cosine_similarities_of_queries[i] = np.dot(query_tfidf, tfidf.T).toarray().flatten()\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": ["<code>\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_similarities_of_queries = cosine_similarity(tfidf.transform(queries), tfidf.transform(documents))\n"], "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nqueries, documents = load_data()\nassert type(queries) == list\nassert type(documents) == list\n\ndef solve(queries, documents):\n    tfidf = TfidfVectorizer()\n    tfidf.fit_transform(documents)\n    cosine_similarities_of_queries = []\n    for query in queries:\n        query_tfidf = tfidf.transform([query])\n        cosine_similarities = np.dot(query_tfidf, tfidf.T)\n        cosine_similarities_of_queries.append(cosine_similarities)\n    return cosine_similarities_of_queries\n\ncosine_similarities_of_queries = solve(queries, documents)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": ["<code>\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\nmlb = MultiLabelBinarizer()\nnew_features = pd.DataFrame(mlb.fit_transform(features), columns=mlb.classes_)\n\nprint(new_features)\n"], "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": ["```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nf = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n\nmlb = MultiLabelBinarizer()\nnew_f = pd.DataFrame(mlb.fit_transform(f), columns=mlb.classes_, index=pd.RangeIndex(start=1, stop=len(f) + 1, name='r'))\n\nprint(new_f)\n```\n"], "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": ["```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\nmlb = MultiLabelBinarizer()\nnew_features = pd.DataFrame(mlb.fit_transform(features), columns=mlb.classes_)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": ["<code>\nimport pandas as pd\nimport numpy as np\nimport sklearn\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\ndef solve(features):\n    encoder = sklearn.preprocessing.OneHotEncoder()\n    encoded_features = encoder.fit_transform(pd.get_dummies(pd.DataFrame(features).stack())).toarray()\n    return encoded_features\n\nnew_features = solve(features)\nprint(new_features)\n### END SOLUTION\n"], "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": ["```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n\nmlb = MultiLabelBinarizer()\nnew_features = pd.DataFrame(mlb.fit_transform(features), columns=mlb.classes_, index=[f'r{i}' for i in range(1, len(features) + 1)])\n\nprint(new_features)\n```\n"], "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\n\ndata_matrix=[[0,0.8,0.9],[0.8,0,0.2],[0.9,0.2,0]]\n\n# Performing hierarchical clustering using AgglomerativeClustering\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average')\ncluster_labels = model.fit_predict(data_matrix)\n\ncluster_labels.tolist()\n</code>"], "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\n\ndata_matrix=[[0,0.8,0.9],[0.8,0,0.2],[0.9,0.2,0]]\n\n# Perform hierarchical clustering\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = model.fit_predict(data_matrix)\n\ncluster_labels.tolist()  # Convert to list\n</code>\n</code>"], "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\n\nsimM = [[0, 0.6, 0.8], [0.6, 0, 0.111], [0.8, 0.111, 0]]\n\n# Perform hierarchical clustering\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average')\ncluster_labels = model.fit_predict(simM)\n\ncluster_labels.tolist()\n```\n"], "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\n\ndata_matrix = [[0, 0.8, 0.9], [0.8, 0, 0.2], [0.9, 0.2, 0]]\n\ndistance_matrix = 1 - np.array(data_matrix)\nlinkage_matrix = scipy.cluster.hierarchy.linkage(distance_matrix, method='average')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n"], "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\n\ndata_matrix=[[0,0.8,0.9],[0.8,0,0.2],[0.9,0.2,0]]\n\n# Perform hierarchical clustering\nlinkage_matrix = scipy.cluster.hierarchy.linkage(np.array(data_matrix), method='average')\n\n# Perform clustering to get 2 clusters\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n\ncluster_labels.tolist()\n</code>\n</code>"], "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\n\nsimM = [[0, 0.6, 0.8], [0.6, 0, 0.111], [0.8, 0.111, 0]]\n\ndistance_matrix = 1 - np.array(simM)\nlinkage_matrix = scipy.cluster.hierarchy.linkage(distance_matrix, method='average')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n"], "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": ["```python\nfrom sklearn.preprocessing import StandardScaler, PowerTransformer\nimport numpy as np\n\n# Assuming 'data' is your input numpy array\ndata = load_data()\nassert type(data) == np.ndarray\n\n# Apply centering and scaling using StandardScaler\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n\n# Apply Box-Cox transformation for skewness correction\nboxcox_transformer = PowerTransformer(method='box-cox')\ncentered_scaled_boxcox_data = boxcox_transformer.fit_transform(centered_scaled_data)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": ["```python\nfrom sklearn.preprocessing import StandardScaler\n\n# Assuming 'data' is your dataset\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming `predictors` is your dataset\n# Replace `load_data()` with loading your actual data\npredictors = load_data()\n\n# Create an instance of PowerTransformer\nboxcox_transformer = PowerTransformer(method='box-cox')\n\n# Fit the transformer to your data\nboxcox_transformer.fit(predictors)\n\n# Transform the data\nbox_cox_data = boxcox_transformer.transform(predictors)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming data is loaded into 'data' variable as a numpy array\ntransformer = PowerTransformer(method='box-cox', standardize=False)\nbox_cox_data = transformer.fit_transform(data)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": ["<code>\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming 'data' is your input data\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n"], "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming 'data' is your dataset\ntransformer = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = transformer.fit_transform(data)\n```\n```python\nimport numpy as np\nimport pandas as pd\nimport sklearn\n\ndata = load_data()\nassert type(data) == np.ndarray\n\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming 'data' is your dataset\ntransformer = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = transformer.fit_transform(data)\n```\n```python\nimport numpy as np\nimport pandas as pd\nimport sklearn\n\ndata = load_data()\nassert type(data) == np.ndarray\n\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming 'data' is your dataset\ntransformer = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = transformer.fit_transform(data)\n```"], "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": ["<code>\ncount_vectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w\\w+\\b|['\\\"!?]\")\ntransformed_text = count_vectorizer.fit_transform([text])\n"], "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": ["```python\nfrom sklearn.model_selection import train_test_split\n\n# Load your dataset\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n\n# Split dataset into features (x) and target (y)\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\n# Split into training and testing sets (80/20)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n</code>\n```"], "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": ["```python\nfrom sklearn.model_selection import train_test_split\n\n# Assuming 'data' is the dataframe containing features and target\nx = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n```\n```python\nEND SOLUTION\n"], "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": ["<code>\nfrom sklearn.model_selection import train_test_split\n\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=42)\n"], "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": ["```python\n    # Splitting dataset into features (x) and target class (y)\n    X = data.iloc[:, :-1]  # Features (all columns except the last one)\n    y = data.iloc[:, -1]   # Target class (last column)\n\n    # Splitting dataset into training and testing sets (80/20)\n    from sklearn.model_selection import train_test_split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    return X_train, y_train, X_test, y_test\n### END SOLUTION\n```"], "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\ndef load_data():\n    df = pd.read_csv(\"generate_csv/all_data_device.csv\", parse_dates=[\"date\"])\n    return df['mse'].values.reshape(-1, 1)\n\nX = load_data()\nkmeans = KMeans(n_clusters=2, n_init=10).fit(X)\nlabels = kmeans.predict(X)\n# Centroid values\ncentroids = kmeans.cluster_centers_\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\ndf = pd.read_csv(\"file.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\nf2 = np.arange(len(f1))  # Using numpy for creating range\nX = np.column_stack((f1, f2))  # Stacking f1 and f2 as columns in X\nkmeans = KMeans(n_clusters=2, n_init=10).fit(X)\nlabels = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": ["```python\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\n\ndef load_data():\n    newsgroups_train = fetch_20newsgroups(subset='train')\n    return newsgroups_train.data, newsgroups_train.target\n\ncorpus, y = load_data()\nassert type(corpus) == list\nassert type(y) == list\n\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(corpus)\n\nsvm = LinearSVC(penalty='l1', dual=False)\nsvm.fit(X, y)\n\nselected_feature_indices = np.where(svm.coef_ != 0)[1]\nselected_feature_names = np.array(vectorizer.get_feature_names())[selected_feature_indices]\n```\n```python\n</code>\n```"], "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": ["<code>\nfrom sklearn.feature_selection import SelectFromModel\n\nlsvc = LinearSVC(penalty='l1', dual=False)\nlsvc.fit(X, y)\nmodel = SelectFromModel(lsvc, prefit=True)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[model.get_support()]\n"], "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\n\ncorpus, y = load_data()\nassert type(corpus) == list\nassert type(y) == list\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(corpus)\n\ndef solve(corpus, y, vectorizer, X):\n    # Fit LinearSVC model with L1 penalty\n    clf = LinearSVC(penalty='l1', dual=False)\n    clf.fit(X, y)\n    \n    # Retrieve the non-zero coefficients (indicating selected features)\n    coef = clf.coef_\n    selected_feature_indices = np.where(coef != 0)[1]\n    \n    # Get feature names from vectorizer using selected indices\n    feature_names = vectorizer.get_feature_names()\n    selected_feature_names = [feature_names[i] for i in selected_feature_indices]\n    \n    return selected_feature_names\n\n# selected_feature_names = solve(corpus, y, vectorizer, X)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": ["```python\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": ["```python\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', \"Java\", 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncorpus = [\n    'We are looking for Java developer',\n    'Frontend developer with knowledge in SQL and Jscript',\n    'And this is the third one.',\n    'Is this the first document?',\n]\n\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\n\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\nX = X.toarray()\n"], "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": ["<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\n"], "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": ["<code>\nslopes = []\nfor col in df1.columns:\n    if col != 'Time':\n        df2 = df1[~np.isnan(df1[col])]\n        df3 = df2[['Time', col]]\n        npMatrix = np.matrix(df3)\n        X, Y = npMatrix[:,0], npMatrix[:,1]\n        slope = LinearRegression().fit(X, Y)\n        m = slope.coef_[0]\n        slopes.append(m)\n"], "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": ["```python\nslopes = []\n\nfor col in df1.columns:\n    if col != 'Time':\n        df_temp = df1[~np.isnan(df1[col])]\n        df_temp = df_temp[['Time', col]]\n        npMatrix = np.matrix(df_temp)\n        X, Y = npMatrix[:, 0], npMatrix[:, 1]\n        slope = LinearRegression().fit(X, Y)\n        m = slope.coef_[0]\n        slopes.append(m)\n\nslopes = np.array(slopes)\n```\n"], "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": ["```python\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\n# Load the Titanic dataset\ndf = pd.read_csv('titanic.csv')\n\n# Initialize LabelEncoder\nlabel_encoder = LabelEncoder()\n\n# Transform 'Sex' column\ndf['Sex'] = label_encoder.fit_transform(df['Sex'])\n\n# Display the transformed DataFrame\nprint(df.head())\n```\n```python\nEND SOLUTION\n```\n```python\ntransformed_df = df\n```"], "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": ["```python\ndf['Sex'] = LabelEncoder().fit_transform(df['Sex'])\n```\n```python\nEND SOLUTION\n```\n```python\ntransformed_df = df\n```"], "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": ["```python\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\n# Load the Titanic dataset\ndf = pd.read_csv('titanic.csv')\n\n# Initialize the LabelEncoder\nencoder = LabelEncoder()\n\n# Transform the 'Sex' column using the LabelEncoder\ndf['Sex'] = encoder.fit_transform(df['Sex'])\n\n### END SOLUTION\n\n# Display the first few rows of the transformed DataFrame\nprint(df.head())\n```\n</code>"], "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": ["```python\n    from sklearn import linear_model\n    import statsmodels.api as sm\n\n    ElasticNet = linear_model.ElasticNet() # create an ElasticNet instance\n    ElasticNet.fit(X_train, y_train) # fit data\n\n    # print(ElasticNet.coef_)\n    # print(ElasticNet.intercept_) # print out the coefficients\n\n    print(\"R^2 for training set:\", ElasticNet.score(X_train, y_train))\n\n    print('-'*50)\n\n    print(\"R^2 for test set:\", ElasticNet.score(X_test, y_test))\n```"], "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": ["```python\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": ["```python\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": ["<code>\n    scaler = MinMaxScaler()\n    new_a = scaler.fit_transform(a.reshape(-1, 1)).reshape(a.shape)\n    return new_a\n### END SOLUTION\n\n# Test the function\nnp_array = np.array([[1, 2], [3, 4]])\nnew_np_array = Transform(np_array)\nprint(new_np_array)\n"], "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": ["```python\nclose_buy1 = close[:-1]\nm5 = ma50[:-1]\nm10 = ma100[:-1]\nma20 = ma200[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict(b)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": ["```python\n# Convert string data to numerical data\nfrom sklearn.preprocessing import LabelEncoder\n\n# Flatten X to prepare for encoding\nflat_X = [item for sublist in X for item in sublist]\n\n# Initialize label encoder\nlabel_encoder = LabelEncoder()\n\n# Fit label encoder to the flattened data and transform\nencoded_X = [label_encoder.fit_transform(column) for column in zip(*flat_X)]\n\n# Reshape encoded data back to original shape\nnew_X = np.array(encoded_X).T\n\n# Train DecisionTreeClassifier\nclf.fit(new_X, ['2', '3'])\n```\n```"], "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = [['asdf', '1'], ['asdf', '0']]\nclf = DecisionTreeClassifier()\n\n# Convert string values to numerical values\nunique_values = np.unique([val for sublist in X for val in sublist])\nvalue_map = {val: i for i, val in enumerate(unique_values)}\n\nnew_X = np.array([[value_map[val] for val in row] for row in X])\n\n# Train the classifier\nclf.fit(new_X, ['2', '3'])\n\n"], "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": ["/code>"], "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": ["```python\nX = dataframe.iloc[:, :-1].values\ny = dataframe.iloc[:, -1].values\n\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n\n# Example prediction\nexample_data = np.array([[2, 200, 10, 3, 45, 5000, 900, 25, 150, 0, 0]])  # Example data for prediction\nprediction = logReg.predict(example_data)\nprint(\"Prediction:\", prediction)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": ["```python\nX = dataframe.iloc[:, 1:-1].astype(float)\ny = dataframe.iloc[:, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n```\nEND SOLUTION\n\n```python\n# Assuming you have a new data point for prediction\nnew_data_point = np.array([[3.8, 400, 9, 2.5, 35, 15000, 800, 25, 80, 0, 0]])\nprediction = logReg.predict(new_data_point)\nprint(\"Predicted class for the new data point:\", prediction)\n```"], "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": ["```python\n# Calculate the index to split the data based on the given train size\nsplit_index = int(len(features_dataframe) * 0.2)\n\n# Split the data into train and test sets\ntrain_dataframe = features_dataframe.iloc[:split_index]\ntest_dataframe = features_dataframe.iloc[split_index:]\n\n# Ensure that the test set starts after the last date in the train set\ntest_start_date = train_dataframe['date'].iloc[-1]\ntest_dataframe = test_dataframe[test_dataframe['date'] > test_start_date]\n```\n</code>"], "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": ["<code>\ntrain_size = 0.8\ntrain_dataframe = features_dataframe[:int(len(features_dataframe)*train_size)]\ntest_dataframe = features_dataframe[int(len(features_dataframe)*train_size):]\n"], "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndef solve(features_dataframe):\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n\n    train_dataframe = train_dataframe.sort_values(by=[\"date\"])\n    test_dataframe = test_dataframe.sort_values(by=[\"date\"])\n\n    return train_dataframe, test_dataframe\n"], "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": ["import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'Month': [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2],\n    'X1': [12, 10, 100, 55, 65, 60, 35, 25, 10, 15, 30, 40, 50],\n    'X2': [10, 15, 24, 32, 8, 6, 10, 23, 24, 56, 45, 10, 56],\n    'X3': [12, 90, 20, 40, 10, 15, 30, 40, 60, 42, 2, 4, 10]\n})\n\nscaler = MinMaxScaler()\n\ncols = ['X2', 'X3']\ndf[['X2_scale', 'X3_scale']] = df.groupby('Month')[cols].transform(lambda x: scaler.fit_transform(x))\n\ndf"], "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": ["```python\nmyData['new_A2'] = myData.groupby('Month')['A2'].transform(lambda x: scaler.fit_transform(np.array(x).reshape(-1, 1)))\nmyData['new_A3'] = myData.groupby('Month')['A3'].transform(lambda x: scaler.fit_transform(np.array(x).reshape(-1, 1)))\n</code>\n```\nEND SOLUTION"], "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nwords = \"Hello @friend, this is a good day. #good.\"\n\ncount = CountVectorizer(lowercase=False, token_pattern=r'\\b\\w+\\b')\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": ["```python\ncount = CountVectorizer(lowercase=False)\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": ["<code>\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\n"], "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": ["```python\n# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\n\n# Assuming you have already fitted your GridSearchCV object\nGridSearch_fitted = load_data()\nassert type(GridSearch_fitted) == sklearn.model_selection._search.GridSearchCV\n\n# Extracting full results\nresults_df = pd.DataFrame(GridSearch_fitted.cv_results_)\n\n# Sorting results by mean_fit_time\nsorted_results = results_df.sort_values(by='mean_fit_time')\n\n# Printing sorted results\nprint(sorted_results)\n```\n```"], "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import IsolationForest\nimport joblib\n\n# Assuming you have already fitted the model to your clean data\n# Let's say your fitted model is named 'fitted_model'\n\n# Save the model\njoblib.dump(fitted_model, 'sklearn_model.pkl')\n```"], "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": ["```python\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Assuming df is your DataFrame with 'items' and 'description' columns\n# Assuming you have already tokenized and transformed descriptions into tfidf_matrix\n\n# Calculate cosine similarity matrix\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n\n# Fill the diagonal with 1.0\nnp.fill_diagonal(cosine_similarity_matrix, 1.0)\n\n# Convert similarity matrix to DataFrame with items as both index and columns\nsimilarity_df = pd.DataFrame(cosine_similarity_matrix, index=df['items'], columns=df['items'])\n\n# Print or return the similarity matrix\nprint(similarity_df)\n```\n```"], "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": ["import numpy as np\nimport pandas as pd\nimport torch\n\n# Define an initial learning rate\ninitial_lr = 0.01\n\n# Create an optimizer with the initial learning rate\noptim = torch.optim.SGD(..., lr=initial_lr)\n\n# During training, if you want to change the learning rate dynamically\nnew_lr = 0.001\nfor param_group in optim.param_groups:\n    param_group['lr'] = new_lr\n"], "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": ["```python\noptim.param_groups[0]['lr'] = 0.001\n```"], "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\n# Define your optimizer\noptim = torch.optim.SGD(..., lr=0.005)\n\n# Training loop\nfor epoch in range(num_epochs):\n    # Train your model\n    \n    # Check condition to change learning rate dynamically\n    if condition_met:\n        # Update learning rate\n        for param_group in optim.param_groups:\n            param_group['lr'] = 0.0005\n\n# Continue training\n```\n```"], "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\n# Define your custom optimizer\nclass CustomOptimizer(torch.optim.Optimizer):\n    def __init__(self, params, lr=0.01):\n        defaults = dict(lr=lr)\n        super(CustomOptimizer, self).__init__(params, defaults)\n\n    def step(self, closure=None):\n        for group in self.param_groups:\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                grad = p.grad.data\n                p.data.add_(-group['lr'], grad)\n\n# Instantiate your custom optimizer\noptim = CustomOptimizer([torch.randn(3, 3)], lr=0.005)\n\n# Example of updating learning rate during training\nfor epoch in range(10):\n    loss = torch.randn(1)\n    # Perform some tests to decide whether to update learning rate\n    if loss.item() > 0:  # Example condition for updating learning rate\n        new_lr = 0.0005  # Set the new learning rate\n        for param_group in optim.param_groups:\n            param_group['lr'] = new_lr  # Update the learning rate\n\n# After training, you can access the final learning rate\nfinal_lr = optim.param_groups[0]['lr']\nprint(\"Final Learning Rate:\", final_lr)\n\n# Decision making for choosing lr=0.05 or lr=0.0005\n# This depends on various factors such as the model architecture,\n# dataset characteristics, optimization algorithm, and training dynamics.\n# Generally, lr=0.05 is a higher learning rate which might lead to faster convergence\n# but could also risk overshooting the optimal solution or causing instability.\n# lr=0.0005 is a lower learning rate which might converge more slowly\n# but could be more stable and less likely to overshoot.\n# It's recommended to start with lr=0.005 and adjust based on training dynamics.\n# If you encounter issues like divergence or slow convergence,\n# consider decreasing lr, and if training is too slow or stuck,\n# consider increasing lr cautiously.\n```"], "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": ["```python\nembedding_weights = word2vec.wv.vectors\nvocab_size, embedding_dim = embedding_weights.shape\nembedding_layer = torch.nn.Embedding(num_embeddings=vocab_size, embedding_dim=embedding_dim)\nembedding_layer.weight.data.copy_(torch.from_numpy(embedding_weights))\nembedded_input = embedding_layer(torch.tensor(input_Tensor))\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": ["```python\n    vocab = list(word2vec.wv.key_to_index.keys())\n    embedding_matrix = np.zeros((len(vocab), word2vec.vector_size))\n    for i, word in enumerate(vocab):\n        embedding_matrix[i] = word2vec.wv[word]\n\n    embedding_layer = torch.nn.Embedding.from_pretrained(torch.FloatTensor(embedding_matrix))\n\n    embedded_input = embedding_layer(input_Tensor)\n\n    return embedded_input\n### END SOLUTION\n```"], "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": ["```python\nimport numpy as np\nimport torch\nimport pandas as pd\n\n# Assuming x is your torch tensor\nx = torch.rand(4, 4)\n\n# Convert torch tensor to numpy array, then to pandas DataFrame\npx = pd.DataFrame(x.numpy())\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": ["<code>\nimport numpy as np\nimport torch\nimport pandas as pd\n\nx = torch.rand(4, 4)\npx = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": ["<code>\nimport numpy as np\nimport torch\nimport pandas as pd\n\nx = torch.rand(6, 6)\npx = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": ["```python\nC = B[:, torch.nonzero(A_log).squeeze()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": ["```python\nC = B[:, A_logical.nonzero().squeeze()]\n```\n```python\nEND SOLUTION\n```\n```python\nprint(C)\n```"], "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": ["```python\nC = B[:, torch.tensor(A_log, dtype=torch.bool)]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": ["```python\nC = B[:, A_log.nonzero().squeeze()]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": ["```python\nC = B[:, torch.nonzero(A_log).squeeze()]\n### END SOLUTION\n    return C\nC = solve(A_log, B)\nprint(C)\n```"], "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": ["<code>\nC = B[:, A_log.nonzero().squeeze()]\n"], "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": ["```python\nC = B.index_select(1, idx)\n```\n```plaintext\n# Output:\n# tensor([[1, 3],\n#         [4, 6]])\n```"], "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": ["```python\nx_tensor = torch.tensor(np.stack(x_array))\n```\n</code>"], "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": ["```python\nx_tensor = torch.tensor([torch.tensor(arr) for arr in x_array])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": ["```python\n    t = torch.tensor([torch.tensor(arr) for arr in a], dtype=torch.float16)\n    return t\n### END SOLUTION\n\n# Test the function\nx_tensor = Convert(x_array)\nprint(x_tensor)\n```\n</code>"], "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": ["```python\nmask = torch.zeros(len(lens), max(lens), dtype=torch.long)\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n```  \n</code>"], "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\n\nlens = [1, 9, 3, 5]\n\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n"], "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": ["```python\nmask = torch.zeros(len(lens), max(lens)).long()\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n``` \n</code>"], "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": ["```python\nimport torch\n\ndef get_mask(lens):\n    max_len = max(lens)\n    masks = []\n    for length in lens:\n        mask = [1] * length + [0] * (max_len - length)\n        masks.append(mask)\n    return torch.tensor(masks, dtype=torch.long)\n\n# Example usage:\nlens = [3, 5, 4]\nmask = get_mask(lens)\nprint(mask)\n```\n"], "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": ["```python\nTensor_3D = torch.unsqueeze(Tensor_2D, dim=-1) * torch.eye(Tensor_2D.shape[-1])\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": ["```python\n    result = torch.zeros(t.size(0), t.size(1), t.size(1))  # Initialize 3D tensor\n    for i in range(t.size(0)):  # Iterate over the index_in_batch dimension\n        result[i] = torch.diag(t[i])  # Construct diagonal matrix for each index_in_batch\n    return result\n### END SOLUTION\n```\n</code>"], "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": ["```python\nab = torch.cat((a, b.unsqueeze(0)), dim=0)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": ["```python\nab = torch.cat((a, torch.zeros(24, 514)), dim=0)\n```"], "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\n\na, b = load_data()\n\ndef solve(a, b):\n    # return the solution in this function\n    # ab = solve(a, b)\n    ### BEGIN SOLUTION\n    # Check shapes\n    if a.shape[0] == 1 and b.shape[0] == 1:\n        return torch.stack((a, b), 0)\n    elif a.shape[0] == 2 and b.shape[0] == 1:\n        return torch.cat((a, b.unsqueeze(0)), 0)\n    elif a.shape[0] == 1 and b.shape[0] == 2:\n        return torch.cat((a.unsqueeze(0), b), 0)\n    elif a.shape[0] == 2 and b.shape[0] == 2:\n        return torch.cat((a, b), 0)\n    else:\n        raise ValueError(\"Invalid shapes for concatenation\")\n\nab = solve(a, b)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": ["```python\nfor i in range(len(a)):\n    a[i, lengths[i]:, :] = 0\n```\n```python\nEND SOLUTION\n```\n```python\nprint(a)\n```"], "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": ["```python\nfor i in range(a.size(0)):\n    a[i, lengths[i].long():, :] = 2333\n```\n```python\nEND SOLUTION\n```\n```python\nprint(a)\n```"], "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": ["```python\nfor i in range(a.size(0)):\n    a[i, lengths[i].int():, :] = 0\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": ["```python\nfor i in range(10):\n    a[i, :int(lengths[i]), :] = 2333\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": ["```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": ["```python\nnew_tensors = torch.stack(list)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": ["<code>\nimport torch\n\nlist_of_tensors = [torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = torch.stack(list_of_tensors)\n### END SOLUTION\n"], "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": ["```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```\n```python\nEND SOLUTION\n```"], "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": ["```python\nresult = t[np.arange(len(t)), idx]\n```\n```python\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": ["```python\nresult = t[np.arange(len(t)), idx]\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\n\nt = torch.tensor([[-0.2, 0.3],\n                  [-0.5, 0.1],\n                  [-0.4, 0.2]])\nidx = np.array([1, 0, 1])\n\nresult = t[np.arange(len(t)), idx]\n"], "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": ["```python\nresult = x[np.arange(x.shape[0]), ids.squeeze()]\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": ["<code>\nresult = x.gather(1, ids.unsqueeze(-1).expand(-1, -1, x.size(-1))).squeeze(1)\n"], "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": ["<code>\nresult = torch.zeros(ids.shape[0], x.shape[2])\nfor i in range(ids.shape[0]):\n    idx = torch.argmax(ids[i])\n    result[i] = x[i, idx]\n"], "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": ["<code>\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n"], "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": ["<code>\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n"], "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\nsoftmax_output = load_data() # Assuming softmax_output is your n x 3 tensor\n\n# Convert softmax_output to a PyTorch tensor\nsoftmax_output_tensor = torch.tensor(softmax_output)\n\n# Get the index of the minimum value along the second dimension (axis=1)\nmin_index = torch.argmin(softmax_output_tensor, dim=1)\n\n# Add 1 to the index to match the class labels (0-indexed to 1-indexed)\nmin_class = min_index + 1\n\n# Reshape to n x 1 tensor\ny = min_class.view(-1, 1)\n```\n```python\n</code>\nEND SOLUTION\n```"], "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": ["```python\n    probabilities, predicted_classes = torch.max(softmax_output, dim=1, keepdim=True)\n    return predicted_classes\n### END SOLUTION\ny = solve(softmax_output)\nprint(y)\n```"], "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\n\nsoftmax_output = load_data()\n\ndef solve(softmax_output):\n    _, y = torch.min(softmax_output, dim=1)\n    return y\n\nresult = solve(softmax_output)\nprint(result)\n"], "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": ["```python\ndef cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, w, z), target: (n, w, z)\n    n, c, w, z = input.size()\n    # log_p: (n, c, w, z)\n    log_p = F.log_softmax(input, dim=1)\n    # log_p: (n*w*z, c)\n    log_p = log_p.permute(0, 2, 3, 1).contiguous().view(-1, c)  # make class dimension last dimension\n    log_p = log_p[target.view(n, w, z, 1).repeat(1, 1, 1, c) >= 0]  # select only valid pixels\n    log_p = log_p.view(-1, c)\n    # target: (n*w*z,)\n    mask = target >= 0\n    target = target[mask]\n    loss = F.nll_loss(log_p, target, weight=weight, size_average=size_average)\n    return loss\n\nimages = Variable(torch.randn(5, 3, 4, 4))\nlabels = Variable(torch.LongTensor(5, 4, 4).random_(3))\n\nloss = cross_entropy2d(images, labels)\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": ["```python\ncnt_equal = torch.sum(A == B).item()\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": ["<code>\ncnt_equal = np.sum(A == B)\n"], "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": ["```python\ncnt_not_equal = np.sum(A != B)\n```\n```python\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\n\ndef Count(A, B):\n    cnt_equal = np.sum(A == B)\n    return cnt_equal\n### END SOLUTION\n\n# Example usage\nA = torch.randn(1000, 1)\nB = torch.randn(1000, 1)\nresult = Count(A, B)\nprint(result)"], "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": ["<code>\ncnt_equal = np.sum(A[-x:] == B[-x:])\n"], "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": ["<code>\ncnt_not_equal = np.sum(A[-x:] != B[-x:])\n"], "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": ["```python\ntensors_31 = []\n\na = torch.randn(1, 3, 10, 40, 1)\nchunk_dim = 10\nstep = 1\n\nfor i in range(0, a.shape[3] - chunk_dim + 1, step):\n    chunk = a[:, :, :, i:i+chunk_dim, :]\n    tensors_31.append(chunk)\n\n# Ensuring 31 tensors are created\nassert len(tensors_31) == 31\n\n# Example: Print shapes of first 5 tensors\nfor i in range(5):\n    print(f\"Shape of tensor_{i+1}: {tensors_31[i].shape}\")\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": ["```python\ntensors_31 = []\nfor i in range(31):\n    start_idx = i\n    end_idx = start_idx + chunk_dim\n    tensor = a[:, :, :, start_idx:end_idx, :]\n    tensors_31.append(tensor)\n```"], "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": ["<code>\noutput = output * (1 - mask.unsqueeze(2)) + clean_input_spectrogram * mask.unsqueeze(2)\n"], "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": ["<code>\noutput = output * mask.unsqueeze(2) + clean_input_spectrogram * (1 - mask).unsqueeze(2)\n"], "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": ["<code>\nsigned_min = torch.where(torch.abs(x) <= torch.abs(y), x.sign() * torch.abs(x), y.sign() * torch.abs(y))\n</code>\nEND SOLUTION\n</code>"], "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\nx, y = load_data()\n\nsign_x = torch.sign(x)\nsign_y = torch.sign(y)\nmax_values = torch.max(torch.abs(x), torch.abs(y))\n\nresult = torch.where(torch.abs(x) >= torch.abs(y), sign_x * max_values, sign_y * max_values)\n"], "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": ["```python\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min_values = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = torch.mul(sign_x, min_values) + torch.mul(sign_y, min_values)\n    return signed_min\n### END SOLUTION\nx = torch.tensor([-5, 3, -2, 4])\ny = torch.tensor([6, -7, 1, -8])\nprint(solve(x, y))\n```\n"], "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": ["```python\noutput = MyNet(input)\nsoftmax = torch.nn.Softmax(dim=1)\nprobabilities = softmax(output)\nconfidence_score = probabilities[0, classes].item()\n```\n```python\nEND SOLUTION\n</code>\n```"], "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": ["import numpy as np\nimport pandas as pd\nimport torch\n\na = torch.Tensor([[1, 2, 3], [1, 2, 3]])\nb = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n\nresult = torch.cat((a[:, :-1], ((a[:, -1] + b[:, 0]) / 2).unsqueeze(1), b[:, 1:]), dim=1)"], "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport torch\n\ndef solve(a, b):\n    result = torch.zeros((a.shape[0], a.shape[1] + b.shape[1] - 1))\n    result[:, :a.shape[1]] = a\n    result[:, -b.shape[1]:] = b\n    result[:, a.shape[1]-1] = (a[:, -1] + b[:, 0]) / 2\n    return result\n</code>"], "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\nt = torch.arange(8).reshape(1,4,2).float()\nprint(t)\n\nzeros = torch.zeros(1, 1, 4)\nresult = torch.cat([zeros, t, zeros], dim=1)\n\nprint(result)\n```\n```"], "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": ["```python\nimport torch\n\nt = torch.arange(4).reshape(1, 2, 2).float()\npad_value = 0\npadded_t = torch.nn.functional.pad(t, (1, 1, 1, 1), value=pad_value)\nprint(padded_t)\n```\n```python\nEND SOLUTION\nresult = padded_t\n```"], "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\nt = torch.arange(1, 9).reshape(4, 2)\nnew = torch.tensor([[-1, -1, -1, -1]])\n\nresult = torch.cat((torch.full((1, 4), -1), torch.cat((new, t, new), dim=1), torch.full((1, 4), -1)), dim=0)\n```\n```python\nEND SOLUTION\n```\n</code>"], "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": ["import numpy as np\nimport pandas as pd\nimport torch\n\nhid_dim = 32\ndata = torch.randn(10, 2, 3, hid_dim)\ndata = data.view(10, 2 * 3, hid_dim)\nW = torch.randn(hid_dim)\n\nresult = torch.bmm(data, W.view(1, hid_dim, 1)).squeeze()\nresult = result.view(10, 2, 3)"], "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
