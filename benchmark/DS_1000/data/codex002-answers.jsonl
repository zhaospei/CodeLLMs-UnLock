{"code": "result = df.iloc[List]\n", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"code": "result = df.iloc[List]\n", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"code": "def replace_other(x):\n    counts = x.value_counts()\n    return x.replace(counts[counts < 2].index, 'other')\n\nresult = df.apply(replace_other)\n", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"code": "def replace_with_other(df, column):\n    counts = df[column].value_counts()\n    return df[column].apply(lambda x: x if counts[x] >= 3 else 'other')\n\nresult = df.apply(lambda x: replace_with_other(df, x.name))\n", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"code": "\n    for col in df.columns:\n        df[col] = df[col].apply(lambda x: x if df[col].value_counts()[x] >= 2 else 'other')\n    ### END SOLUTION\n    return df\n\nprint(f())\n", "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"code": "def replace_values(df, column, threshold):\n    counts = df[column].value_counts()\n    mask = counts >= threshold\n    df[column] = df[column].replace(counts[mask].index, 'other')\n    return df\n\nresult = df.pipe(replace_values, 'Qu1', 3).pipe(replace_values, 'Qu3', 2)\n", "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"code": "def replace_values(df, column, threshold, keep_values=None):\n    counts = df[column].value_counts()\n    if keep_values is None:\n        keep_values = []\n    keep_values = set(keep_values)\n    replace_values = [value for value, count in counts.items() if count < threshold and value not in keep_values]\n    df[column] = df[column].replace(replace_values, 'other')\n    return df\n\n\nresult = replace_values(df, 'Qu1', 3, keep_values=['apple'])\nresult = replace_values(result, 'Qu2', 2)\nresult = replace_values(result, 'Qu3', 2)\n", "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"code": "result = df.groupby(['url', 'keep_if_dup']).first().reset_index()\n", "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"code": "result = df.groupby('url').apply(lambda x: x.iloc[0] if x['drop_if_dup'].iloc[0] == 'Yes' else x)\n", "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"code": "result = df.groupby('url').apply(lambda x: x.iloc[-1] if 'Yes' not in x['keep_if_dup'].values else x)\n", "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"code": "result = {}\nfor row in df.itertuples():\n    d = result\n    for col in df.columns[1:-1]:\n        d = d.setdefault(getattr(row, col), {})\n    d[getattr(row, df.columns[-1])] = getattr(row, df.columns[-1])\n", "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"code": "df['datetime'] = df['datetime'].dt.tz_localize('UTC').dt.tz_convert('US/Central').dt.tz_localize(None)\n", "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"code": "\n    return df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')\n    ### END SOLUTION\n\nprint(f(example_df))\n", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"code": "df['datetime'] = df['datetime'].dt.tz_localize('UTC').dt.tz_convert('US/Central').dt.strftime('%d-%b-%Y %H:%M:%S')\n", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"code": "df['datetime'] = df['datetime'].dt.tz_localize('UTC').dt.tz_convert('US/Central').dt.tz_localize(None)\n", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"code": "import re\n\ndef extract_key_value(message):\n    return dict(re.findall(r'(\\w+):\\s*(\\w+)', message))\n\nresult = df.join(df.message.apply(extract_key_value).apply(pd.Series))\n", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"code": "df.loc[df['product'].isin(products), 'score'] *= 10\n", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"code": "df['score'] = df['score'].apply(lambda x: x * 10 if x not in products else x)\n", "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"code": "df['score'] = df['score'].apply(lambda x: x * 10 if any(i in products for i in [df['product']]) else x)\n", "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"code": "df['score'] = df['score'].apply(lambda x: x if x not in products else 1)\n", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"code": "df['category'] = df.idxmax(axis=1)\n", "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"code": "df['category'] = df.idxmax(axis=1)\n", "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"code": "df['category'] = df.apply(lambda row: [col for col, val in row.iteritems() if val == 1], axis=1)\n", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"code": "df['Date'] = df['Date'].dt.strftime('%b-%Y')\n", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"code": "df['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n", "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"code": "df['Date'] = df['Date'].dt.strftime('%d-%b-%Y %A')\ndf = df[(df['Date'] >= List[0]) & (df['Date'] <= List[1])]\n", "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"code": "df['#1'] = df['#1'].shift(-1).append(df['#1'].head(1))\n", "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"code": "df.loc[df.index[-1], '#1'] = df.loc[df.index[0], '#1']\ndf.loc[df.index[0], '#1'] = df.loc[df.index[-1], '#1']\n", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"code": "df = pd.concat([df.iloc[-1:], df.iloc[:-1]])\ndf = pd.concat([df.iloc[:, -1:], df.iloc[:, :-1]], axis=1)\n", "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"code": "df = df.iloc[-1:].append(df.iloc[:-1]).reset_index(drop=True)\n", "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"code": "df.columns = [col + 'X' for col in df.columns]\n", "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"code": "df.columns = ['X' + col for col in df.columns]\n", "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"code": "df.columns = [f\"X{col}\" if col[-1] != \"X\" else col for col in df.columns]\n", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"code": "result = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"mean\" for col in df.columns if col.startswith(\"val\")}})\n", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"code": "result = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"sum\" for col in df.columns if col.startswith(\"val\")}})\n", "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"code": "result = df.groupby('group').agg({'group_color': 'first', **{col: 'mean' if col.endswith('2') else 'sum' for col in df.columns if col not in ['group', 'group_color']}})\n", "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"code": "result = df.loc[row_list, column_list].mean()\n", "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"code": "result = df.loc[row_list, column_list].sum()\n", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"code": "result = df.loc[row_list, column_list].sum()\n", "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"code": "result = df.apply(pd.Series.value_counts)\n", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"code": "result = df.isnull().sum()\n", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"code": "result = ''\nfor col in df.columns:\n    result += '---- ' + col + ' ---\\n'\n    result += str(df[col].value_counts()) + '\\n'\n", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"code": "result = df.iloc[0].combine_first(df.iloc[1])\n", "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"code": "result = df.iloc[1:].copy()\nresult.columns = df.iloc[0]\n", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"code": "result = df.apply(lambda x : (x[x.notnull()].values.tolist()+x[x.isnull()].values.tolist()),1)\n", "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"code": "result = df.apply(lambda x : (x[x.isnull()].values.tolist()+x[x.notnull()].values.tolist()),1)\n", "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"code": "result = df.apply(lambda x : (x[x.isnull()].values.tolist()+x[x.notnull()].values.tolist()),0)\n", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"code": "result = df.groupby(df['value'].lt(thresh).cumsum()).sum()\n", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"code": "result = df.groupby(df['value'].gt(thresh).cumsum()).mean()\nresult.index = result.index.map(lambda x: 'X' if x == 1 else x)\n", "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"code": "df['value'] = df['value'].apply(lambda x: 'X' if x < section_left or x > section_right else x)\ndf = df.groupby('value').mean()\n", "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"code": "df = pd.concat([df, 1/df], axis=1)\ndf.columns = df.columns.map(lambda x: 'inv_' + x if x in df.columns[2:] else x)\n", "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"code": "df = pd.concat([df, df.apply(np.exp)], axis=1)\ndf.columns = [f\"{col}_exp\" for col in df.columns]\n", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"code": "df = pd.concat([df, 1/df], axis=1, keys=[\"A\", \"B\", \"inv_A\", \"inv_B\"])\n", "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"code": "df = pd.concat([df, 1 / (1 + np.exp(-df))], axis=1, keys=[\"A\", \"B\", \"sigmoid_A\", \"sigmoid_B\"])\n", "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"code": "def last_max_before_min(col):\n    min_idx = col.idxmin()\n    max_idx = col.loc[:min_idx].idxmax()\n    return max_idx\n\nresult = df.apply(last_max_before_min)\n", "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"code": "def find_first_max_after_min(series):\n    min_idx = series.idxmin()\n    max_idx = series.loc[min_idx:].idxmax()\n    return max_idx\n\nresult = df.apply(find_first_max_after_min)\n", "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"code": "result = pd.DataFrame(columns=['dt', 'user', 'val'])\nfor user in df['user'].unique():\n    user_df = df[df['user'] == user]\n    min_date = user_df['dt'].min()\n    max_date = user_df['dt'].max()\n    user_df = user_df.set_index('dt')\n    user_df = user_df.reindex(pd.date_range(min_date, max_date))\n    user_df = user_df.reset_index()\n    user_df['user'] = user\n    user_df['val'] = user_df['val'].fillna(0)\n    result = result.append(user_df)\n", "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"code": "df = df.set_index('dt').groupby('user').resample('D').asfreq().reset_index()\n", "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"code": "df = df.set_index('dt')\ndf = df.reindex(pd.date_range(df.index.min(), df.index.max()))\ndf = df.reset_index()\ndf['val'] = df['val'].fillna(233)\n", "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"code": "result = df.groupby('user').apply(lambda x: x.set_index('dt').reindex(pd.date_range(x.dt.min(), x.dt.max()))).reset_index(level=0, drop=True)\n", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"code": "result = df.groupby('user').apply(lambda x: x.set_index('dt').reindex(pd.date_range(x['dt'].min(), x['dt'].max()))).reset_index(level=0, drop=True).reset_index()\n", "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"code": "result = df.copy()\nresult['name'] = result['name'].astype('category').cat.codes\n", "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"code": "result = df.copy()\nresult['a'] = result['a'].rank(method='dense').astype(int)\n", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"code": "\n    df['name'] = df['name'].astype('category').cat.codes\n    ### END SOLUTION\n    return df\n\nf()\n", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"code": "df['ID'] = df.groupby(['name', 'a']).ngroup()\nresult = df.drop(['name', 'a'], axis=1)\n", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"code": "df = pd.melt(df, id_vars=['user', 'someBool'], var_name='date', value_name='value')\n", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"code": "df = pd.melt(df, id_vars=['user'], var_name='others', value_name='value')\n", "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"code": "df = pd.melt(df, id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna()\n", "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"code": "result = df[df.c > 0.5][columns]\n", "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"code": "result = df[df.c > 0.45][columns]\n", "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"code": "\n    return df[df.c > 0.5][columns]\n    ### END SOLUTION\n", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"code": "\n    return df[df.c > 0.5][columns]\n    ### END SOLUTION\n", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"code": "\n    return df[df.c > 0.5][columns]\n    ### END SOLUTION\n", "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"code": "df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\ndf['date_shifted'] = df['date'].shift(-1)\ndf['diff'] = (df['date_shifted'] - df['date']).dt.days\ndf['keep'] = df['diff'] > X\ndf = df[df['keep']]\nresult = df[['ID', 'date', 'close']]\n", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"code": "df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values(by='date')\ndf['date_shifted'] = df['date'].shift(-1)\ndf['diff'] = (df['date_shifted'] - df['date']).dt.days\ndf['keep'] = df['diff'] > X\ndf = df[df['keep']]\nresult = df[['ID', 'date', 'close']]\n", "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"code": "df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values(by='date')\ndf['date_shifted'] = df['date'].shift(-1)\ndf['diff'] = (df['date_shifted'] - df['date']).dt.days\ndf['keep'] = df['diff'] > X\ndf['keep'] = df['keep'].cumsum()\ndf = df.groupby('keep').first().reset_index(drop=True)\n", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"code": "result = df.groupby(df.index // 3).mean()\n", "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"code": "result = df.groupby(df.index // 3).sum()\n", "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"code": "result = df.groupby(df.index // 4).sum()\n", "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"code": "result = df.rolling(3, min_periods=1).mean()\n", "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"code": "result = pd.concat([df.groupby(df.index // 3).sum(), df.groupby(df.index // 2).mean()])\n", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"code": "result = pd.DataFrame()\n\nfor i in range(0, len(df), 5):\n    result = result.append(pd.DataFrame({'col1': [df.iloc[i:i+3, 0].sum(), df.iloc[i+3:i+5, 0].mean()]}))\n\nresult = result.reset_index(drop=True)\n", "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"code": "df['A'] = df['A'].replace(0, np.nan).ffill()\n", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"code": "df['A'] = df['A'].replace(0, np.nan).ffill()\n", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"code": "df['A'] = df['A'].replace(0, np.nan)\ndf['A'] = df['A'].fillna(method='ffill')\ndf['A'] = df['A'].fillna(method='bfill')\n", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"code": "df['number'] = df.duration.str.extract(r'(\\d+)')\ndf['time'] = df.duration.str.extract(r'(\\D+)')\ndf['time_days'] = df.time.replace({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"code": "df['time'] = df.duration.str.extract(r'(\\w+)')\ndf['number'] = df.duration.str.extract(r'(\\d+)')\ndf['time_day'] = df.time.replace({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n", "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"code": "\n    df['number'] = df.duration.str.extract(r'(\\d+)')\n    df['time'] = df.duration.str.extract(r'(\\D+)')\n    df['time_days'] = df.time.replace(['year', 'month', 'week', 'day'], [365, 30, 7, 1])\n    ### END SOLUTION\n    return df\n\nf()\n", "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"code": "df['number'] = df.duration.str.extract(r'(\\d+)')\ndf['time'] = df.duration.str.extract(r'(\\D+)')\ndf['time_day'] = df.time.replace(r'(year|month|week|day)', r'(365|30|7|1)', regex=True).astype(int)\ndf['time_day'] *= df['number'].astype(int)\n", "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"code": "result = df1[columns_check_list].eq(df2[columns_check_list]).all(axis=1)\n", "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"code": "result = df1[columns_check_list].eq(df2[columns_check_list]).all(axis=1)\n", "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"code": "df.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"code": "df.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n", "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"code": "\n    df.index = pd.to_datetime(df.index)\n    df = df.reset_index()\n    df = df.values\n    ### END SOLUTION\n    return df\n", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"code": "\n    df.index = pd.MultiIndex.from_tuples(df.index.map(lambda x: (x[1], pd.to_datetime(x[0]))))\n    df = df.sort_index()\n    df.index = df.index.swaplevel(0, 1)\n    ### END SOLUTION\n    return df\n", "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"code": "df = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\n", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"code": "df = df.melt(id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.sort_values(['Country', 'Variable', 'year'], ascending=[True, True, False])\n", "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"code": "df = df[(df.abs() < 1).all(axis=1)]\n", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"code": "df[df.filter(regex='Value_').abs().gt(1).any(axis=1)]\n", "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"code": "df = df.loc[(df.abs() > 1).any(axis=1)]\ndf.columns = df.columns.str.replace('Value_', '')\n", "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"code": "df = df.replace('&AMP;', '&', regex=True)\n", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"code": "df = df.replace('&LT', '<', regex=True)\n", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"code": "\n    return df.replace('&AMP;', '&', regex=True)\n    ### END SOLUTION\n", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"code": "df = df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"code": "df = df.replace('&AMP;', '&', regex=True)\n", "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"code": "df['first_name'] = df['name'].str.split(' ').str[0]\ndf['last_name'] = df['name'].str.split(' ').str[1]\n", "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"code": "df['1_name'] = df['name'].str.split(' ').str[0]\ndf['2_name'] = df['name'].str.split(' ').str[1]\n", "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"code": "df['first_name'] = df['name'].str.split().str[0]\ndf['last_name'] = df['name'].str.split().str[-1]\ndf['middle_name'] = df['name'].str.split().str[1:-1].str.join(' ')\n", "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"code": "result = df2.merge(df1, how='left', on='Timestamp')\n", "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"code": "result = df1.merge(df2, on='Timestamp', how='left')\n", "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"code": "df['state'] = df.apply(lambda x: x['col1'] if x['col2'] <= 50 and x['col3'] <= 50 else max(x['col1'], x['col2'], x['col3']), axis=1)\n", "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"code": "df['state'] = df.apply(lambda x: x['col1'] if x['col2'] > 50 and x['col3'] > 50 else x['col1'] + x['col2'] + x['col3'], axis=1)\n", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"code": "df[\"Field1\"].apply(lambda x: isinstance(x, int))\n", "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"code": "df[\"Field1\"].apply(lambda x: isinstance(x, int))\n", "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"code": "\n    result = []\n    for i in df[\"Field1\"]:\n        try:\n            int(i)\n        except:\n            result.append(i)\n    return result\n    ### END SOLUTION\n", "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"code": "df = df.set_index('cat')\ndf = df.div(df.sum(axis=1), axis=0)\n", "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"code": "df = df.set_index('cat')\ndf = df.div(df.sum(axis=0), axis=1)\ndf = df.reset_index()\n", "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"code": "result = df.loc[test]\n", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"code": "result = df.loc[test]\n", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"code": "result = df.drop(test)\n", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"code": "\n    return df.loc[test]\n    ### END SOLUTION\n", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"code": "df['euclidean_distance'] = np.sqrt((df['x'] - df['x'].shift(-1))**2 + (df['y'] - df['y'].shift(-1))**2)\ndf['nearest_neighbour'] = df['car'].shift(-1)\ndf = df.dropna()\n", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"code": "df['euclidean_distance'] = np.sqrt((df['x'] - df['x'].shift(-1))**2 + (df['y'] - df['y'].shift(-1))**2)\ndf['euclidean_distance'] = df['euclidean_distance'].fillna(0)\ndf['euclidean_distance'] = df['euclidean_distance'].shift(1)\ndf['euclidean_distance'] = df['euclidean_distance'].fillna(0)\ndf['euclidean_distance'] = df['euclidean_distance'].astype(int)\ndf['farmost_neighbour'] = df['car'].shift(-1)\ndf['farmost_neighbour'] = df['farmost_neighbour'].fillna(0)\ndf['farmost_neighbour'] = df['farmost_neighbour'].astype(int)\ndf = df.drop(['x', 'y'], axis=1)\ndf = df.sort_values(by=['time', 'car'])\ndf = df.reset_index(drop=True)\n", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"code": "df['keywords_all'] = df.apply(lambda row: ','.join([str(x) for x in row if not pd.isnull(x)]), axis=1)\n", "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"code": "df['keywords_all'] = df.apply(lambda row: '-'.join([str(x) for x in row if not pd.isnull(x)]), axis=1)\n", "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"code": "df['keywords_all'] = df.apply(lambda row: '-'.join([str(x) for x in row[1:]]), axis=1)\n", "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"code": "df['keywords_all'] = df.apply(lambda row: '-'.join(row.dropna().astype(str)), axis=1)\n", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"code": "df_sample = df.sample(frac=0.2, random_state=0)\ndf.loc[df_sample.index, 'Quantity'] = 0\n", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"code": "df_sample = df.sample(frac=0.2, random_state=0)\ndf.loc[df_sample.index, 'ProductId'] = 0\n", "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"code": "df['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str)\ndf['ProductId'] = df['ProductId'].astype(str)\ndf['Quantity'] = df['Quantity'].astype(str)\n\ndf['UserId'] = df['UserId'].astype(str", "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"code": "duplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.apply(lambda x: df[(df['col1'] == x['col1']) & (df['col2'] == x['col2'])].index[0], axis=1)\nresult = duplicate\n", "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"code": "duplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index\nresult = duplicate\n", "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"code": "\n    df['index_original'] = df.duplicated(subset=['col1','col2'], keep='first').cumsum()\n    df = df.groupby('index_original').first().reset_index(drop=True)\n    ### END SOLUTION\n    return df\n\nf()\n", "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"code": "duplicate_bool = df.duplicated(subset=['col1','col2', '3col'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\n\nduplicate['index_original'] = duplicate.apply(lambda row: df[(df['col1'] == row['col1']) & (df['col2'] == row['col2']) & (df['3col'] == row['3col'])].index[0], axis=1)\n\nresult = duplicate\n", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"code": "duplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index\nresult = duplicate\n", "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"code": "result = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].max()])\n", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"code": "result = df.groupby(['Sp','Mt']).apply(lambda x: x[x['count'] == x['count'].max()])\n", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"code": "result = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].min()])\n", "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"code": "result = df.groupby(['Sp','Value']).apply(lambda x: x[x['count'] == x['count'].max()])\n", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"code": "result = df[df['Category'].isin(filter_list)]\n", "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"code": "result = df[~df.Category.isin(filter_list)]\n", "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"code": "result = pd.melt(df, value_vars=[('A', 'B', 'E'),\n                        ('A', 'B', 'F'),\n                        ('A', 'C', 'G'),\n                        ('A', 'C', 'H'),\n                        ('A', 'D', 'I'),\n                        ('A', 'D', 'J')])\n", "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"code": "result = pd.melt(df, id_vars=df.columns.levels[0], value_vars=df.columns.levels[1:].tolist())\n", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"code": "df['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"code": "df['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"code": "df['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"code": "df['cummax'] = df.groupby('id')['val'].cummax()\n", "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"code": "df['cumsum'] = df.groupby('id')['val'].cumsum()\ndf['cumsum'] = df['cumsum'].clip(lower=0)\n", "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"code": "result = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"code": "result = df.groupby('r')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"code": "result = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"code": "def get_relationship(df, col1, col2):\n    if len(df[col1].unique()) == len(df[col2].unique()):\n        return 'one-to-one'\n    elif len(df[col1].unique()) > len(df[col2].unique()):\n        return 'one-to-many'\n    else:\n        return 'many-to-one'\n\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            result.append(f'{col1} {col2} {get_relationship(df, col1, col2)}')\n", "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"code": "def get_relationship(df, col1, col2):\n    if len(df[col1].unique()) == len(df[col2].unique()):\n        return 'one-2-one'\n    elif len(df[col1].unique()) > len(df[col2].unique()):\n        return 'one-2-many'\n    else:\n        return 'many-2-one'\n\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            result.append(f'{col1} {col2} {get_relationship(df, col1, col2)}')\n", "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"code": "def get_relationship(df, col1, col2):\n    if len(df[col1].unique()) == len(df[col2].unique()):\n        return 'one-to-one'\n    elif len(df[col1].unique()) > len(df[col2].unique()):\n        return 'many-to-one'\n    else:\n        return 'one-to-many'\n\nresult = pd.DataFrame(index=df.columns, columns=df.columns)\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 == col2:\n            result.loc[col1, col2] = np.nan\n        else:\n            result.loc[col1, col2] = get_relationship(df, col1, col2)\n", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"code": "def get_relationship(df, col1, col2):\n    if len(df[col1].unique()) == len(df[col2].unique()):\n        return 'one-2-one'\n    elif len(df[col1].unique()) > len(df[col2].unique()):\n        return 'many-2-one'\n    else:\n        return 'one-2-many'\n\nresult = pd.DataFrame(index=df.columns, columns=df.columns)\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 == col2:\n            result.loc[col1, col2] = np.nan\n        else:\n            result.loc[col1, col2] = get_relationship(df, col1, col2)\n", "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"code": "df = df.drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='first')\n", "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"code": "result = pd.to_numeric(s.astype(str).str.replace(',',''), errors='coerce')\n", "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"code": "df['HasFamily'] = (df['SibSp'] > 0) | (df['Parch'] > 0)\nresult = df.groupby('HasFamily')['Survived'].mean()\n", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"code": "result = df.groupby((df['Survived'] > 0) | (df['Parch'] > 0)).mean()\n", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"code": "df['Family'] = df.apply(lambda x: 'Has Family' if (x['SibSp'] == 1) & (x['Parch'] == 1) else 'No Family' if (x['SibSp'] == 0) & (x['Parch'] == 0) else 'New Family' if (x['SibSp'] == 0) & (x['Parch'] == 1) else 'Old Family', axis=1)\nresult = df.groupby('Family')['Survived'].mean()\n", "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"code": "result = df.groupby('cokey').apply(lambda x: x.sort('A'))\n", "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"code": "result = df.groupby('cokey').apply(lambda x: x.sort('A'))\n", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"code": "df.columns = pd.MultiIndex.from_tuples(df.columns)\n", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"code": "df.columns = pd.MultiIndex.from_tuples(df.columns)\n", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"code": "df.columns = pd.MultiIndex.from_tuples(df.columns)\n", "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"code": "result = pd.DataFrame(someTuple).T\nresult.columns = ['birdType', 'birdCount']\n", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"code": "result = df.groupby('a').agg(['mean', 'std'])\n", "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"code": "result = df.groupby('b').agg(['mean', 'std'])\n", "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"code": "df['softmax'] = df.groupby('a')['b'].transform(lambda x: x.exp() / x.exp().sum())\ndf['min-max'] = df.groupby('a')['b'].transform(lambda x: (x - x.min()) / (x.max() - x.min()))\n", "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"code": "result = df.loc[(df != 0).any(1), (df != 0).any(0)]\n", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"code": "result = df[(df.sum(axis=1) != 0) & (df.sum(axis=0) != 0)]\n", "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"code": "result = df[(df != 2).all(axis=1)]\n", "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"code": "result = df.copy()\nresult[result.max(axis=1) > 1] = 0\nresult[result.max(axis=0) > 1] = 0\n", "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"code": "result = s.sort_values(ascending=True)\n", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"code": "df = pd.DataFrame(s.sort_values(ascending=True).reset_index())\n", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"code": "result = df[df['A'].apply(lambda x: isinstance(x, int))]\n", "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"code": "result = df[df['A'].apply(lambda x: isinstance(x, str))]\n", "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"code": "result = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].max()])\n", "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"code": "result = df.groupby(['Sp','Mt']).apply(lambda x: x[x['count'] == x['count'].max()])\n", "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"code": "result = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].min()])\n", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"code": "result = df.groupby(['Sp','Value']).apply(lambda x: x[x['count'] == x['count'].max()])\n", "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"code": "df['Date'] = df['Member'].map(dict).fillna(df['Member'])\n", "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"code": "df['Date'] = df['Member'].map(dict).fillna(pd.to_datetime('17/8/1926'))\n", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"code": "\n    df['Date'] = df['Member'].map(dict)\n    ### END SOLUTION\n    return df\n", "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"code": "df['Date'] = df['Member'].map(dict).fillna(pd.to_datetime('17/8/1926'))\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"code": "df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.map(df.groupby(df['Date'].dt.to_period('M')).size())\ndf['Count_y'] = df.Date.map(df.groupby(df['Date'].dt.to_period('Y')).size())\n", "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"code": "df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.map(df.groupby(df['Date'].dt.to_period('M')).size())\ndf['Count_y'] = df.Date.map(df.groupby(df['Date'].dt.to_period('Y')).size())\ndf['Count_Val'] = df.Val.map(df.groupby('Val').size())\n", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"code": "df['Date'] = pd.to_datetime(df['Date'], format= '%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.map(df.groupby(df['Date'].dt.to_period('M')).size())\ndf['Count_y'] = df.Date.map(df.groupby(df['Date'].dt.to_period('Y')).size())\ndf['Count_w'] = df.Date.map(df.groupby(df['Date'].dt.to_period('W')).size())\ndf['Count_Val'] = df.Val.map(df.groupby('Val').size())\n", "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"code": "result1 = df.groupby('Date').apply(lambda x: (x == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: (x != 0).sum())\n", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"code": "result1 = df.groupby('Date').apply(lambda x: x % 2 == 0).sum()\nresult2 = df.groupby('Date').apply(lambda x: x % 2 == 1).sum()\n", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"code": "result = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n", "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"code": "result = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"code": "result = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"code": "result = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc=[np.max, np.min])\n", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"code": "df['var2'] = df['var2'].str.split(',')\ndf = df.explode('var2')\n", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"code": "df['var2'] = df['var2'].str.split(',')\nresult = df.explode('var2')\n", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"code": "df['var2'] = df['var2'].str.split('-')\nresult = df.explode('var2')\n", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"code": "df['new'] = df['str'].str.count(r'[^a-zA-Z]')\n", "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"code": "df['new'] = df['str'].str.len() - df['str'].str.count(r'\\w')\n", "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"code": "df['fips'] = df['row'].str.split().str[0]\ndf['row'] = df['row'].str.split().str[1:]\ndf['row'] = df['row'].str.join(' ')\n", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"code": "df['fips'] = df['row'].str.split().str[0]\ndf['row'] = df['row'].str.split().str[1]\n", "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"code": "df['fips'] = df['row'].str[:5]\ndf['medi'] = df['row'].str[5:].str.strip()\ndf = df.drop(columns=['row'])\n", "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"code": "df = df.set_index('Name')\ndf = df.mask(df == 0).cumsum().div(df.mask(df == 0).cumsum().gt(0).cumsum(), axis=1)\ndf = df.reset_index()\n", "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"code": "df = df.set_index('Name')\ndf = df.apply(lambda x: x.rolling(len(x), min_periods=1).mean(), axis=1)\n", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"code": "\n    df = df.set_index('Name')\n    df = df.replace(0, np.nan)\n    df = df.expanding().mean()\n    df = df.fillna(0)\n    ### END SOLUTION\n    return df\n\nf()\n", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"code": "df = df.set_index('Name')\ndf = df.apply(lambda x: x.replace(0, np.nan))\ndf = df.rolling(window=len(df.columns), min_periods=1).mean()\ndf = df.apply(lambda x: x.replace(np.nan, 0))\n", "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"code": "df['Label'] = (df['Close'] - df['Close'].shift(1) > 0).astype(int)\ndf.loc[0, 'Label'] = 1\n", "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"code": "df['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else -1 if x < 0 else 0)\ndf['label'].iloc[0] = 1\n\n", "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"code": "df['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else -1 if x < 0 else 0)\ndf['label'] = df['label'].fillna(1)\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\n", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"code": "df['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'] - df['arrival_time']\n", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"code": "df['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'] - df['arrival_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\n", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"code": "df['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'] - df['arrival_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\n", "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"code": "result = df.groupby('key1')['key2'].apply(lambda x: (x == 'one').sum())\n", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"code": "result = df.groupby('key1')['key2'].apply(lambda x: (x == 'two').sum())\n", "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"code": "result = df.groupby('key1')['key2'].apply(lambda x: (x.str.endswith('e')).sum())\n", "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"code": "max_result = df.index.max()\nmin_result = df.index.min()\n", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"code": "mode_result = df.index.value_counts().index[0]\nmedian_result = df.index.value_counts().index[len(df.index.value_counts())//2]\n", "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"code": "result = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n", "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"code": "result = df[~(99 <= df['closing_price'] <= 101)]\n", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"code": "result = df.groupby(\"item\").apply(lambda x: x[x[\"diff\"] == x[\"diff\"].min()])\n", "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"code": "df['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[0]\n", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"code": "df['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[-1]\n", "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"code": "\n    df['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[0]\n    ### END SOLUTION\n    return df\n\nf()\n", "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"code": "df['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\n", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"code": "df['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\n", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"code": "df['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\n", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"code": "result = pd.DataFrame([[(1, 5), (2, 6)],[(3, 7), (4, 8)]], columns=['one', 'two'])\n", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"code": "result = pd.concat([a, b, c], axis=1)\nresult = result.apply(lambda x: tuple(x), axis=1)\nresult = pd.DataFrame(result.values.tolist(), columns=result.columns)\n", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"code": "result = pd.concat([a, b], axis=1).apply(lambda x: tuple(x), axis=1).to_frame().T\n", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"code": "result = df.groupby(['username', pd.cut(df.views, bins)]).size().unstack(fill_value=0)\n", "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"code": "result = df.groupby(['username', pd.cut(df.views, bins)]).size().unstack(fill_value=0)\n", "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"code": "df['bin'] = pd.cut(df.views, bins)\nresult = df.groupby(['username', 'bin']).size().unstack(fill_value=0)\n", "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"code": "result = pd.DataFrame({'text': [', '.join(df['text'])]})\n", "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"code": "result = pd.DataFrame({'text': ['-'.join(df['text'])]})\n", "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"code": "result = pd.DataFrame({'text': [', '.join(df['text'].tolist()[::-1])]})\n", "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"code": "result = pd.Series(', '.join(df['text']))\n", "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"code": "result = pd.Series(df['text'].str.cat(sep='-'))\n", "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"code": "result = pd.merge(df1, df2, on='id', how='outer')\n", "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"code": "df1['date'] = pd.to_datetime(df1['date'])\ndf2['date'] = pd.to_datetime(df2['date'])\n\ndf1['date'] = df1['date'].dt.strftime('%d-%b-%Y')\ndf2['date'] = df2['date'].dt.strftime('%d-%b-%Y')\n\ndf1 = df1.sort_values(by=['id', 'date'])\ndf2 = df2.sort_values(by=['id', 'date'])\n\ndf = pd.concat([df1, df2], axis=0)\n\ndf = df.sort_values(by=['id', 'date'])\n\nresult = df\n", "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"code": "df1['date'] = pd.to_datetime(df1['date'])\ndf2['date'] = pd.to_datetime(df2['date'])\n\ndf = pd.concat([df1, df2], axis=0)\ndf = df.sort_values(['id', 'date'])\ndf = df.reset_index(drop=True)\n\nresult = df\n", "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"code": "result = pd.merge(C, D, how=\"outer\", on=\"A\").fillna(C)\n", "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"code": "result = C.merge(D, how=\"outer\", on=\"A\", suffixes=(\"\", \"_y\")).fillna(C)\n", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"code": "result = pd.merge(C, D, how=\"outer\", on=\"A\", suffixes=[\"_C\", \"_D\"])\nresult[\"B\"] = result[\"B_C\"].combine_first(result[\"B_D\"])\nresult = result.drop(columns=[\"B_C\", \"B_D\"])\nresult[\"duplicated\"] = result[\"A\"].isin(D[\"A\"])\n", "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"code": "result = df.groupby('user').apply(lambda x: x.sort_values('time').values.tolist())\n", "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"code": "result = df.groupby('user').agg(lambda x: x.tolist())\n", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"code": "result = df.groupby('user').agg(lambda x: x.tolist())\n", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"code": "df = pd.DataFrame(series.values.tolist(), index=series.index)\n", "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"code": "df = pd.DataFrame(series.values.tolist(), index=series.index)\n", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"code": "result = [col for col in df.columns if s in col]\n", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"code": "result = df[[col for col in df.columns if s in col]]\n", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"code": "result = df[[col for col in df.columns if s in col]]\n", "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"code": "result = pd.DataFrame(df['codes'].values.tolist(), columns=['code_0', 'code_1', 'code_2'])\n", "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"code": "result = pd.DataFrame(df['codes'].values.tolist(), columns=['code_1', 'code_2', 'code_3'])\n", "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"code": "result = pd.DataFrame(df['codes'].values.tolist(), columns=['code_1', 'code_2', 'code_3'])\n", "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"code": "result = df.col1.sum()\n", "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"code": "result = ','.join(map(str, df.col1.sum()))\n", "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"code": "result = df.col1.apply(lambda x: ','.join(map(str, x)))\n", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"code": "df['Time'] = df['Time'].dt.floor('2min')\ndf = df.groupby('Time').mean().reset_index()\n", "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"code": "df['Time'] = df['Time'].dt.floor('3T')\ndf = df.groupby('Time').sum()\ndf = df.reset_index()\n", "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"code": "df['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n", "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"code": "df['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n", "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"code": "df['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n", "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"code": "result = df.loc[filt.index[filt]]\n", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"code": "result = df[df.index.get_level_values('a').isin(filt[filt].index)]\n", "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"code": "result = df.iloc[0].ne(df.iloc[8]).index\n", "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"code": "result = df.iloc[0].eq(df.iloc[8]).where(df.iloc[0].notnull() & df.iloc[8].notnull()).dropna().index\n", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"code": "result = df.iloc[0].ne(df.iloc[8]).index.tolist()\n", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"code": "result = []\nfor c in df.columns:\n    if df.loc[0, c] != df.loc[8, c]:\n        result.append((df.loc[0, c], df.loc[8, c]))\n", "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"code": "ts = pd.Series(df['Value'].values, index=df['Date'])\n", "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"code": "df = pd.DataFrame(df.values.flatten()).T\n", "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"code": "df = pd.DataFrame(df.values.flatten()).T\ndf.columns = [f'{col}_{i}' for i,col in enumerate(df.columns)]\n", "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"code": "df = df.round(2)\n", "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"code": "df = df.round(2)\n", "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"code": "df['Sum'] = df[list_of_my_columns].sum(axis=1)\n", "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"code": "df['Avg'] = df[list_of_my_columns].mean(axis=1)\n", "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"code": "df['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n", "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"code": "result = df.sort_values(by=['time'])\n", "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"code": "result = df.sort_values(by=['VIM','time'])\n", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"code": "result = df[~df.index.isin(pd.date_range('2020-02-17', '2020-02-18'))]\n", "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"code": "result = df[~df.index.isin(pd.date_range('2020-02-17', '2020-02-18'))]\n", "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"code": "result = corr[corr > 0.3]\n", "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"code": "result = corr.where(np.triu(np.ones(corr.shape), k=1).astype(np.bool)).stack().reset_index()\nresult = result[result[0] > 0.3]\nresult.columns = ['row', 'col', 'value']\n", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"code": "df.rename(columns={df.columns[-1]: 'Test'}, inplace=True)\n", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"code": "df.rename(columns={'A': 'Test'}, inplace=True)\n", "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"code": "df['frequent'] = df.sum(axis=1).apply(lambda x: 1 if x > 2 else 0)\ndf['freq_count'] = df.sum(axis=1)\n", "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"code": "df['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda x: x.value_counts().max(), axis=1)\n", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"code": "df['frequent'] = df.apply(lambda x: x.value_counts().index[0], axis=1)\ndf['freq_count'] = df.apply(lambda x: x.value_counts().iloc[0], axis=1)\n", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"code": "result = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].mean()\n", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"code": "result = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].mean()\n", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"code": "result = pd.merge(df_a, df_b[['EntityNum','a_col']], on='EntityNum')\n", "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"code": "result = pd.merge(df_a, df_b, on='EntityNum')\nresult = result.drop(columns=['a_col'])\n", "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"code": "result = a.shape\n", "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"code": "x = x[~np.isnan(x)]\n", "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"code": "x[np.isnan(x)] = np.inf\n", "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"code": "result = x[~np.isnan(x)].tolist()\n", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"code": "b = np.zeros((len(a), a.max() + 1), dtype=np.int)\nb[np.arange(len(a)), a] = 1\n", "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"code": "b = np.zeros((len(a), a.max() + 1))\nb[np.arange(len(a)), a] = 1\n", "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"code": "b = np.zeros((len(a), a.max() - a.min() + 1), dtype=int)\nb[np.arange(len(a)), a - a.min()] = 1\n", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"code": "b = np.zeros((len(a), len(a)))\nb[np.arange(len(a)), np.argsort(a)] = 1\n", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"code": "b = np.zeros((a.size, a.max()+1), dtype=np.int)\nb[np.arange(a.size), a.ravel()] = 1\nb = b.reshape(a.shape + (a.max()+1,))\n", "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"code": "result = np.percentile(a, p)\n", "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"code": "B = A.reshape((-1,ncol))\n", "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"code": "B = A.reshape(nrow,-1)\n", "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"code": "B = A.reshape(-1,ncol)\n", "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"code": "B = A[::-1].reshape(-1,ncol)[::-1]\n", "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"code": "result = np.roll(a, shift)\n", "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"code": "result = np.roll(a, shift, axis=1)\n", "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"code": "result = np.zeros_like(a)\nfor i, s in enumerate(shift):\n    if s > 0:\n        result[i, s:] = a[i, :-s]\n    elif s < 0:\n        result[i, :s] = a[i, -s:]\n", "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"code": "r = np.random.randint(3, size=(100, 2000)) - 1\nr_old = r\nr_new = r\n", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"code": "result = np.argmax(a)\n", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"code": "result = np.argmin(a)\n", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"code": "result = np.unravel_index(a.argmax(), a.shape)\n", "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"code": "result = np.unravel_index(a.argmax(), a.shape)\n", "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"code": "\n    result = np.unravel_index(a.argmax(), a.shape)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"code": "result = np.unravel_index(np.argsort(a, axis=None)[-2], a.shape)\n", "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"code": "a = a[:, ~np.isnan(a).any(axis=0)]\n", "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"code": "a = a[~np.isnan(a).any(axis=1)]\n", "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"code": "result = np.array(a)\n", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"code": "a[:, permutation]\n", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"code": "result = a[permutation]\n", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"code": "result = np.unravel_index(a.argmin(), a.shape)\n", "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"code": "result = np.unravel_index(a.argmax(), a.shape)\n", "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"code": "result = np.array(np.unravel_index(a.argmin(axis=None), a.shape)).T\n", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"code": "result = np.sin(np.deg2rad(degree))\n", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"code": "result = np.cos(np.deg2rad(degree))\n", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"code": "result = 0 if np.sin(number) > np.sin(number * np.pi / 180) else 1\n", "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"code": "result = np.arcsin(value) * 180 / np.pi\n", "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"code": "result = np.pad(A, (0, length - len(A)), 'constant')\n", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"code": "result = np.pad(A, (0, length - len(A)), 'constant')\n", "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"code": "a = a**power\n", "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"code": "\n    result = a**power\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nresult = (numerator // gcd(numerator, denominator), denominator // gcd(numerator, denominator))\n", "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"code": "\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef reduce_fraction(numerator, denominator):\n    if denominator == 0:\n        return (np.nan, np.nan)\n    gcd_value = gcd(numerator, denominator)\n    return (numerator // gcd_value, denominator // gcd_value)\n\nresult = reduce_fraction(numerator, denominator)\n", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"code": "result = np.mean([a, b, c], axis=0)\n", "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"code": "result = np.maximum(np.maximum(a, b), c)\n", "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"code": "result = a[np.diag_indices(a.shape[0])[::-1]]\n", "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"code": "diagonal = np.diag_indices(5)\nresult = a[diagonal]\n", "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"code": "diagonal = np.diag_indices(5)\nresult = a[diagonal]\n", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"code": "diagonal = np.diag_indices(5)\nresult = a[diagonal]\n", "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"code": "result = []\nfor i in range(X.shape[0]):\n    for j in range(X.shape[1]):\n        result.append(X[i,j])\n", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"code": "result = []\nfor i in range(X.shape[0]):\n    for j in range(X.shape[1]):\n        result.append(X[i,j])\n", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"code": "\n    r,c = X.shape\n    self.cells = np.empty((r,c),dtype=np.object)\n    for i in range(r):\n        for j in range(c):\n            self.cells[i,j] = X[i,j]\n    result = []\n    for i in range(r):\n        for j in range(c):\n            result.append(self.cells[i,j])\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"code": "result = X.flatten(order='F')\n", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"code": "result = np.array([int(i) for i in mystr])\n", "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"code": "result = np.cumsum(a[:, col] * multiply_number)\n", "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"code": "result = np.cumsum(a[row] * multiply_number)\n", "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"code": "result = np.prod(a[row, :] / divide_number)\n", "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"code": "u, s, vh = np.linalg.svd(a)\nresult = u[:, :np.sum(s > 1e-10)]\n", "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"code": "result = a.shape[1]\n", "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"code": "p_value = scipy.stats.ttest_ind(a, b, equal_var=False)[1]\n", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"code": "p_value = scipy.stats.ttest_ind(a, b, equal_var=False)[1]\n", "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"code": "p_value = scipy.stats.ttest_ind_from_stats(amean, avar, anobs, bmean, bvar, bnobs, equal_var=False)[1]\n", "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"code": "output = np.asarray([[1,1,2], [1,1,3]])\n", "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"code": "output = np.concatenate((A[np.isin(A,B,invert=True)], B[np.isin(B,A,invert=True)]))\n", "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"code": "sort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"code": "sort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n", "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"code": "sort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n", "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"code": "result = b[np.argsort(a.sum(axis=(1, 2)))]\n", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"code": "a = np.delete(a, 2, axis=1)\n", "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"code": "a = np.delete(a, 2, axis=0)\n", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"code": "a = a[:, [1, 3]]\n", "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"code": "result = a[:, np.setdiff1d(np.arange(a.shape[1]), del_col)]\n", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"code": "a = np.insert(a, pos, element)\n", "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"code": "a = np.insert(a, pos, element, axis=0)\n", "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"code": "\n    a = np.insert(a, pos, element)\n    ### END SOLUTION\n    return a\n", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"code": "a = np.insert(a, pos, element, axis=0)\n", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"code": "result = np.array([np.copy(a) for a in array_of_arrays])\n", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"code": "result = np.all(a[0] == a, axis = 1).all()\n", "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"code": "result = np.all(a[0] == a, axis = 0)\n", "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"code": "\n    return np.all([np.array_equal(a[0], a[i]) for i in xrange(1,len(a))])\n    ### END SOLUTION\n", "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"code": "X, Y = np.meshgrid(x, y)\nresult = np.sum(np.cos(X)**4 + np.sin(Y)**2)\n", "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"code": "\n    result = np.cos(x)**4 + np.sin(y)**2\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"code": "def ecdf(x):\n  # normalize X to sum to 1\n  x = x / np.sum(x)\n  return np.cumsum(x)\n\nresult = ecdf(grades)\n", "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"code": "def ecdf(x):\n  # normalize X to sum to 1\n  x = x / np.sum(x)\n  return np.cumsum(x)\n\nresult = ecdf(grades)(eval)\n", "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"code": "def ecdf(x):\n  # normalize X to sum to 1\n  x = x / np.sum(x)\n  return np.cumsum(x)\n\necdf_grades = ecdf(grades)\n\n# find the first index where ecdf_grades >= threshold\nfirst_index = np.where(ecdf_grades >= threshold)[0][0]\n\n# find the last index where ecdf_grades < threshold\nlast_index = np.where(ecdf_grades < threshold)[0][-1]\n\nlow = grades[first_index]\nhigh = grades[last_index]\n", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"code": "nums = np.random.randint(2, size=size)\nnums[nums == 0] = 1\nnums[nums == 1] = 0\nnums[:int(size * one_ratio)] = 1\n", "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"code": "a_np = a.numpy()\n", "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"code": "a_pt = torch.from_numpy(a)\n", "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"code": "a_np = a.numpy()\n", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"code": "a_tf = tf.convert_to_tensor(a)\n", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"code": "result = np.argsort(a)[::-1]\n", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"code": "result = np.argsort(a)\n", "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"code": "result = np.argsort(a)[-N:][::-1]\n", "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"code": "result = np.linalg.matrix_power(A, n)\n", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"code": "result = np.array([[[1,5],\n                    [2,6]],\n                   [[3,7],\n                    [4,8]],\n                   [[9,13],\n                    [10,14]],\n                   [[11,15],\n                    [12,16]]])\n", "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"code": "result = []\nfor i in range(a.shape[0]-1):\n    for j in range(a.shape[1]-1):\n        result.append(a[i:i+2, j:j+2])\n", "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"code": "result = []\nfor i in range(0, a.shape[0], 2):\n    for j in range(0, a.shape[1], 2):\n        result.append(a[i:i+2, j:j+2])\nresult = np.array(result)\n", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"code": "result = np.array([[[1,5],\n                    [2,6]],\n                   [[9,13],\n                    [10,14]],\n                   [[3,7],\n                    [4,8]],\n                   [[11,15],\n                    [12,16]]])\n", "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"code": "result = np.zeros((h, w))\nfor i in range(h):\n    for j in range(w):\n        result[i, j] = a[i // 2, j // 3, j % 3]\n", "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"code": "result = np.array([a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0], patch_size) for j in range(0, a.shape[1], patch_size)])\n", "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"code": "result = a[:,low:high]\n", "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"code": "result = a[low:high,:]\n", "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"code": "result = a[:, low:high]\n", "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"code": "a = np.array(eval(string))\n", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"code": "result = np.random.uniform(np.log(min), np.log(max), n)\nresult = np.exp(result)\n", "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"code": "result = np.random.uniform(min, max, n)\n", "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"code": "\n    return np.random.uniform(np.log(min), np.log(max), n)\n    ### END SOLUTION\n", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"code": "B = pd.Series(np.zeros(10,))\nB[0] = a * A[0]\nfor t in range(1,10):\n    B[t] = a * A[t] + b * B[t-1]\n", "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"code": "B = pd.Series(np.zeros(10,))\nB[0] = a*A[0]\nB[1] = a*A[1]+b*B[0]\nfor t in range(2,10):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n", "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"code": "result = np.empty((0,))\n", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"code": "result = np.empty((3,0))\n", "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"code": "result = np.ravel_multi_index(index, dims)\n", "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"code": "result = np.ravel_multi_index(index, dims, order='C')\n", "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"code": "values = np.zeros((2,3), dtype='int32,float32')\ndf = pd.DataFrame(data=values, index=index, columns=columns)\n", "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"code": "result = np.bincount(accmap, a)\n", "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"code": "result = np.zeros(3)\nfor i in range(3):\n    result[i] = np.max(a[index == i])\n", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"code": "result = np.bincount(accmap, a)\n", "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"code": "result = np.zeros(len(np.unique(index)))\nfor i, ind in enumerate(np.unique(index)):\n    result[i] = np.min(a[index == ind])\n", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"code": "z = np.add(x,y)\n", "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"code": "result = np.random.choice(lista_elegir, samples, p=probabilit)\n", "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"code": "result = np.pad(a, ((low_index, high_index), (low_index, high_index)), 'constant')[low_index:high_index, low_index:high_index]\n", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"code": "result = x[x >= 0]\n", "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"code": "result = x[np.iscomplex(x)]\n", "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"code": "bin_data_mean = np.mean(data.reshape(-1, bin_size), axis=1)\n", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"code": "bin_data_max = np.array([np.max(data[i:i+bin_size]) for i in range(0, len(data), bin_size)])\n", "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"code": "bin_data = data.reshape(data.shape[0], data.shape[1]/bin_size, bin_size)\nbin_data_mean = bin_data.mean(axis=2)\n", "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"code": "bin_data_mean = np.mean(data.reshape(-1, bin_size), axis=1)\n", "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"code": "bin_data_mean = np.array([[6],\n[5]])\n", "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"code": "bin_data = np.array([data[:,i:i+bin_size] for i in range(0,data.shape[1],bin_size)])\nbin_data_mean = np.mean(bin_data,axis=2)\n", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"code": "def smoothclamp(x, x_min, x_max):\n    if x < x_min:\n        return x_min\n    elif x > x_max:\n        return x_max\n    else:\n        return x\n", "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"code": "def smoothclamp(x, x_min, x_max, N):\n    return x_min + (x_max - x_min) * (1 - np.cos(np.pi * (x - x_min) / (x_max - x_min))) ** N / 2\n", "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"code": "result = np.correlate(a, b, mode='full')\n", "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"code": "result = df.unstack(level=0).values.reshape(4, 15, 5)\n", "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"code": "result = df.values.reshape(15, 4, 5)\n", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"code": "result = np.unpackbits(a.reshape(-1, 1), axis=1).reshape(-1, m)\n", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"code": "result = np.unpackbits(a.astype(np.uint8)).reshape(-1, 8)[:, -m:]\n", "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"code": "result = np.unpackbits(a.astype(np.uint8)).reshape(-1, 8)[:, -m:]\n", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"code": "result = (a.mean() - 3*a.std(), a.mean() + 3*a.std())\n", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"code": "mean = np.mean(a)\nstd = np.std(a)\nresult = (mean - 2*std, mean + 2*std)\n", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"code": "\n    mean = np.mean(a)\n    std = np.std(a)\n    result = (mean - 3*std, mean + 3*std)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"code": "result = np.abs(a - a.mean()) > 2*a.std()\n", "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"code": "prob = np.percentile(DataArray, percentile)\n", "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"code": "a[zero_rows, :] = 0\na[:, zero_cols] = 0\n", "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"code": "a[zero_rows, :] = 0\na[:, zero_cols] = 0\n", "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"code": "a[1, :] = 0\na[:, 0] = 0\n", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"code": "mask = np.zeros_like(a, dtype=bool)\nmask[np.arange(len(a)), np.argmax(a, axis=1)] = True\n", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"code": "mask = a == a.min(axis=1)[:, None]\n", "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"code": "result = np.corrcoef(post, distance)[0, 1]\n", "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"code": "result = np.array([[X[:, i].dot(X[:, i].T) for i in range(X.shape[1])]])\n", "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"code": "X = np.array([[9, 3, 5, 5],\n       [7, 6, 5, 3]])\n", "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"code": "is_contained = number in a\n", "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"code": "C = np.array([])\nfor i in range(len(A)):\n    if A[i] not in B:\n        C = np.append(C,A[i])\n", "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"code": "C = A[np.isin(A, B)]\n", "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"code": "C = A[(A > B[:-1]) & (A < B[1:])]\n", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"code": "result = rankdata(a).astype(int)\nresult = len(a) - result + 1\n", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"code": "result = np.argsort(np.argsort(a))\n", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"code": "\n    result = rankdata(a).astype(int)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"code": "dists = np.dstack((x_dists, y_dists))\n", "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"code": "dists = np.dstack((x_dists, y_dists))\n", "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"code": "result = a[:, second, :][:, :, third]\n", "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"code": "arr = np.zeros((20,10,10,2))\n", "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"code": "l1 = X.sum(axis=1)\nresult = X/l1.reshape(5,1)\n", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"code": "result = X / np.linalg.norm(X, axis=1, keepdims=True)\n", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"code": "result = X / np.abs(X).max(axis=1, keepdims=True)\n", "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"code": "conditions = [df['a'].str.contains(target)]\nresult = np.select(conditions, choices, default=np.nan)\n", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"code": "result = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    for j in range(a.shape[0]):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"code": "result = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    for j in range(a.shape[0]):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"code": "from scipy.spatial.distance import pdist, squareform\nresult = squareform(pdist(a))\n", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"code": "AVG = np.mean(NA, axis=0)\n", "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"code": "AVG = np.mean(NA.astype(np.float), axis=0)\n", "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"code": "AVG = np.mean(NA, axis=0)\n", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"code": "result = np.unique(a)\nresult = result[result != 0]\n\n", "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"code": "result = np.array([1, 2, 1, 3]).reshape(-1, 1)\n\n", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"code": "df = pd.DataFrame(np.concatenate([lat.ravel()[:,None], lon.ravel()[:,None], val.ravel()[:,None]], axis=1), columns=['lat', 'lon', 'val'])\n", "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"code": "\n    df = pd.DataFrame(columns = ['lat', 'lon', 'val'])\n    for i in range(lat.shape[0]):\n        for j in range(lat.shape[1]):\n            df = df.append({'lat': lat[i,j], 'lon': lon[i,j], 'val': val[i,j]}, ignore_index=True)\n    ### END SOLUTION\n    return df\n\ndf = f()\ndf\n", "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"code": "df = pd.DataFrame(np.concatenate([lat.ravel()[:, None], lon.ravel()[:, None], val.ravel()[:, None]], axis=1), columns=['lat', 'lon', 'val'])\ndf['maximum'] = df[['lat', 'lon']].max(axis=1)\n", "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"code": "def rolling_window(a, window):\n    shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)\n    strides = a.strides + (a.strides[-1],)\n    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)\n\ndef rolling_window_2d(a, window):\n    return rolling_window(rolling_window(a, window[1]), window[0])\n\nresult = rolling_window_2d(a, size)\n", "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"code": "def rolling_window(a, window):\n    shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)\n    strides = a.strides + (a.strides[-1],)\n    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)\n\ndef rolling_window_2d(a, window):\n    return rolling_window(rolling_window(a, window[1]), window[0])\n\nresult = rolling_window_2d(a, size)\n", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"code": "result = np.nanmean(a)\n", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"code": "\n    return np.mean(a)\n    ### END SOLUTION\n", "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"code": "result = Z[..., -1:]\n", "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"code": "result = a[(slice(None),) * (a.ndim - 1) + (slice(-1, None),)]\n", "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"code": "result = c in CNTS\n", "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"code": "result = c in CNTS\n", "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"code": "f = intp.interp2d(x_new, y_new, a, kind='linear')\nresult = f(x_new, y_new)\n", "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"code": "df = pd.DataFrame(data)\ndf[name] = df.groupby('D')['Q'].cumsum()\n", "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"code": "i = np.diag(i)\n", "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"code": "a = np.triu(a)\n", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"code": "start = pd.to_datetime(start)\nend = pd.to_datetime(end)\nresult = pd.date_range(start, end, periods=n)\n", "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"code": "result = np.where((x == a) & (y == b))[0][0]\n", "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"code": "result = np.where((x == a) & (y == b))[0]\n", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"code": "A = np.vander(x, 3)\nresult = np.linalg.solve(A, y)\n", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"code": "result = np.polyfit(x, y, degree)\n", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"code": "df = df.apply(lambda x: x - a)\n", "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"code": "result = np.einsum('ijk,jl->ilk', A, B)\n", "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"code": "scaler = MinMaxScaler()\nresult = scaler.fit_transform(a)\n", "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"code": "scaler = MinMaxScaler()\nresult = scaler.fit_transform(arr)\n", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"code": "scaler = MinMaxScaler()\nresult = np.array([scaler.fit_transform(a[i]) for i in range(a.shape[0])])\n", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"code": "arr_temp = arr.copy()\nmask = arr_temp < -10\nmask2 = arr_temp < 15\nmask3 = mask ^ mask2\narr[mask] = 0\narr[mask3] = arr[mask3] + 5\narr[~mask2] = 30\n", "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"code": "arr = (np.random.rand(5, 50)-0.5) * 50\nn1 = [1,2,3,4,5]\nn2 = [6,7,8,9,10]\n\nfor i in range(arr.shape[0]):\n    arr_temp = arr.copy()\n    mask = arr_temp < n1[i]\n    mask2 = arr_temp < n2[i]\n    mask3 = mask ^ mask2\n    arr[mask] = 0\n    arr[mask3] = arr[mask3] + 5\n    arr[~mask2] = 30\n", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"code": "result = np.nonzero(np.abs(s1 - s2) > 1e-10)[0].shape[0]\n", "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"code": "result = np.nonzero(s1 != s2)[0].shape[0]\n", "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"code": "result = np.all(np.array([np.array_equal(a[i], a[i+1]) for i in range(len(a)-1)]))\n", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"code": "result = np.all(np.isnan(a))\n", "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"code": "result = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant')\n", "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"code": "result = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant')\n", "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"code": "result = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant', constant_values=(element, element))\n", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"code": "\n    result = np.pad(arr, ((0, shape[0]-arr.shape[0]), (0, shape[1]-arr.shape[1])), 'constant')\n    ### END SOLUTION\n    return result\n\nresult = f(example_arr, shape=(93,13))\nprint(result.shape)\n", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"code": "result = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant')\n", "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"code": "a = np.array([i for i in range(0,12)]).reshape(a.shape[0]/3,3)\n", "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"code": "result = np.zeros(a.shape[:2])\nresult[b == 0] = a[b == 0, 0]\nresult[b == 1] = a[b == 1, 1]\n", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"code": "result = a[:, :, b]\n", "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"code": "result = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n", "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"code": "result = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"code": "result = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"code": "result = df[(df['a'] > 1) & (df['a'] <= 4)]['b']\n", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"code": "result = im[1:-1,1:-1]\n", "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"code": "result = A[np.any(A, axis=1), np.any(A, axis=0)]\n", "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"code": "result = im[np.all(im != 0, axis=1)]\nresult = result[:, np.all(result != 0, axis=0)]\n", "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"code": "result = im[1:-1,1:-1]\n", "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"code": "plt.plot(x, y, label=\"x-y\")\n", "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"code": "plt.minorticks_on()\n", "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"code": "plt.minorticks_on()\n", "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"code": "plt.minorticks_on()\n", "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"code": "for i in range(len(plt.style.available)):\n    plt.style.use(plt.style.available[i])\n    plt.plot(x, np.random.rand(10))\n    plt.title(plt.style.available[i], fontsize=10)\n    plt.show()\n", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"code": "for i in range(len(plt.style.available)):\n    plt.style.use(plt.style.available[i])\n    plt.plot(x, np.random.rand(10))\n    plt.title(plt.style.available[i], fontsize=10)\n    plt.show()\n", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"code": "plt.plot(x, y, 'D')\n", "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"code": "plt.plot(x, y, 'D', markersize=10)\n", "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"code": "ax.set(ylim=(0, 40))\n", "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"code": "plt.axvspan(2, 4, color='red', alpha=0.5)\n", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"code": "plt.plot([0,1], [0,2])\n", "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"code": "plt.plot([0,1], [0,2])\n", "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"code": "seaborn.relplot(\n    data=df,\n    x=\"Height (cm)\",\n    y=\"Weight (kg)\",\n    hue=\"Gender\",\n    kind=\"scatter\",\n    palette=\"Set1\",\n    height=5,\n    aspect=1.5,\n)\n", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"code": "sns.set()\nplt.plot(x, y)\n", "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"code": "df = pd.DataFrame({'x': x, 'y': y})\nsns.lineplot(x='x', y='y', data=df)\n", "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"code": "plt.plot(x, y, '+', linewidth=7)\n", "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"code": "plt.legend(fontsize=20)\n", "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"code": "plt.plot(x, y, label='xyz')\nplt.legend(title='Legend Title', prop={'size': 20})\n", "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"code": "l.set_markerfacecolor(\"#000000\")\nl.set_markerfacecoloralpha(0.2)\n", "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"code": "l.set_markeredgecolor(\"k\")\n", "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"code": "l.set_color(\"red\")\nl.set_markerfacecolor(\"red\")\n", "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"code": "plt.xticks(rotation=45)\n", "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"code": "plt.xticks(rotation=45)\n", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"code": "plt.xticks(np.arange(0, 2 * np.pi + 1, np.pi / 2))\n", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"code": "plt.legend()\n", "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"code": "plt.imshow(H, cmap='hot', interpolation='nearest')\nplt.show()\n", "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"code": "plt.imshow(H, cmap='gray')\n", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"code": "plt.xlabel(\"X\", ha=\"right\")\n", "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"code": "g.set_xticklabels(g.get_xticklabels(), rotation=90)\n", "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"code": "# 1. split the title into multiple lines\n# 2. set the title\n# 3. set the fontsize\n# 4. set the y-axis label\n# 5. set the y-axis label fontsize\n# 6. set the x-axis label\n# 7. set the x-axis label fontsize\n# 8. set the legend\n# 9. set the legend fontsize\n# 10. set the legend location\n# 11. set the legend title\n# 12. set the legend title fontsize\n# 13. set the legend title location\n# 14. set the legend title alignment\n# 15. set the legend title padding\n# 16. set the legend borderpad\n# 17. set the legend labelspacing\n# 18. set the legend handlelength\n# 19. set the legend handletextpad\n# 20. set the legend borderaxespad\n# 21. set the legend columnspacing\n# 22. set the legend ncol\n# 23. set the legend frameon\n# 24. set the legend fancybox\n# 25. set the legend shadow\n# 26. set the legend title_fontsize\n# 27. set the legend handlelength\n# 28. set the legend handletextpad\n# 29. set the legend borderaxespad\n# 30. set the legend columnspacing\n# 31. set the legend ncol\n# 32. set the legend frameon\n# 33. set the legend fancybox\n# 34. set the legend shadow\n# 35. set the legend title_fontsize\n# 36. set the legend handlelength\n# 37. set the legend handletextpad\n# 38. set the legend borderaxespad\n# 39. set the legend columnspacing\n# 40. set the legend ncol\n# 41. set the legend frameon\n# 42. set the legend fancybox\n# 43. set the legend shadow\n# 44. set the legend title_fontsize\n# 45. set the legend handlelength\n# 46. set the legend handletextpad\n# 47. set the legend borderaxespad\n# 48. set the legend columnspacing\n# 49. set the legend ncol\n# 50. set the legend frameon\n# 51. set the legend fancybox\n# 52. set the legend shadow\n# 53. set the legend title_fontsize\n# 54. set the legend handlelength\n# 55. set the legend handletextpad\n# 56. set the legend borderaxespad\n# 57. set the legend columnspacing\n# 58. set the legend ncol\n# 59. set the legend frameon\n# 60. set the legend fancybox\n# 61. set the legend shadow\n# 62. set the legend title_fontsize\n# 63. set the legend handlelength\n# 64. set the legend handletextpad\n# 65. set the legend borderaxespad\n# 66. set the legend columnspacing\n# 67. set the legend ncol\n# 68. set the legend frameon\n# 69. set the legend fancybox\n# 70. set the legend shadow\n# 71. set the legend title_fontsize\n# 72. set the legend handlelength\n# 73. set the legend handletextpad\n# 74. set the legend borderaxespad\n# 75. set the legend columnspacing\n# 76. set the legend ncol\n# 77. set the legend frameon\n# 78. set the legend fancybox\n# 79. set the legend shadow\n# 80. set the legend title_fontsize\n# 81. set the legend handlelength\n# 82. set the legend handletextpad\n# 83. set the legend borderaxespad\n# 84. set the legend columnspacing\n# 85. set the legend ncol\n# 86. set the legend frameon\n# 87. set the legend fancybox\n# 88. set the legend shadow\n# 89. set the legend title_fontsize\n# 90. set the legend handlelength\n# 91. set the legend handletextpad\n# 92. set the legend borderaxespad\n# 93. set the legend columnspacing\n# 94. set the legend ncol\n# 95. set the legend frameon\n# 96. set the legend fancybox\n# 97. set the legend shadow\n# 98. set the legend title_fontsize\n# 99. set the legend handlelength\n# 100. set the legend handletextpad\n# 101. set the legend borderaxespad\n# 102. set the legend columnspacing\n# 103. set the legend ncol\n# 104. set the legend frameon\n# 105. set the legend fancybox\n# 106. set the legend shadow\n# 107. set the legend title_fontsize\n# 108. set the legend", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"code": "plt.gca().invert_yaxis()\n", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"code": "plt.xticks([0, 1.5])\n", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"code": "plt.yticks([-1, 1])\n", "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"code": "plt.plot(x, label='x')\nplt.plot(y, label='y')\nplt.plot(z, label='z')\nplt.legend()\n", "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"code": "plt.scatter(x, y, facecolor='blue', edgecolor='black')\n", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"code": "plt.xticks(np.arange(min(x), max(x)+1, 1.0))\nplt.yticks(np.arange(min(y), max(y)+1, 1.0))\n", "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"code": "plt.ticklabel_format(style='plain', axis='y')\n", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"code": "ax.lines[0].set_linestyle(\"--\")\n", "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"code": "fig, ax = plt.subplots(2, sharex=True)\nax[0].plot(x, y1)\nax[1].plot(x, y2)\n", "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"code": "fig, ax = plt.subplots(nrows=2, ncols=1, sharex=True, sharey=True)\nax[0].plot(x, y1)\nax[1].plot(x, y2)\nax[0].set_title('sin(x)')\nax[1].set_title('cos(x)')\nax[0].set_xlabel('x')\nax[0].set_ylabel('y')\nax[1].set_xlabel('x')\nax[1].set_ylabel('y')\nax[0].spines['top'].set_visible(False)\nax[0].spines['right'].set_visible(False)\nax[1].spines['top'].set_visible(False)\nax[1].spines['right'].set_visible(False)\n", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"code": "plt.xlabel(\"\")\n", "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"code": "plt.setp(plt.gca().get_xticklabels(), visible=False)\n", "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"code": "plt.xticks(x[2:4])\nplt.grid(axis='x', which='major', linestyle='--', linewidth=1)\n", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"code": "plt.yticks([3, 4])\nplt.grid(axis='y', linestyle='--', linewidth=1)\n", "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"code": "plt.yticks([3, 4], ['three', 'four'])\nplt.xticks([1, 2], ['one', 'two'])\nplt.grid(True, axis='y', linestyle='--')\nplt.grid(True, axis='x', linestyle='--')\n", "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"code": "plt.grid(True)\n", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"code": "plt.legend(loc=\"lower right\")\n", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"code": "fig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6), subplot_kw={\"hspace\": 0.4, \"wspace\": 0.4})\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.show()\nplt.clf()\n", "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"code": "plt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\n", "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"code": "ax.xaxis.tick_top()\n", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"code": "plt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\n", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"code": "plt.plot(x, y)\nplt.xticks([])\n", "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"code": "plt.plot(x, y)\nax = plt.gca()\nax.yaxis.tick_right()\n", "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"code": "plt.plot(x, y)\nplt.ylabel(\"Y\")\nplt.yticks(np.arange(10), np.arange(10))\nplt.tick_params(axis='y', labelright=True)\n", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"code": "sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"g\")\n", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"code": "sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', color='g')\n", "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"code": "sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\")\n", "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"code": "ax = df.plot.bar(x=\"celltype\", y=[\"s1\", \"s2\"])\nax.set_xticklabels(ax.get_xticklabels(), rotation=0)\n", "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"code": "ax = df.plot.bar(x=\"celltype\", y=[\"s1\", \"s2\"])\nax.set_xticklabels(df[\"celltype\"], rotation=45)\n", "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"code": "plt.plot(x, y)\nplt.xlabel(\"X\", color=\"red\")\nplt.xticks(color=\"red\")\n", "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"code": "plt.plot(x, y, label=\"X\", color=\"red\")\n", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"code": "plt.plot(x, y)\nplt.xticks(fontsize=10, rotation=90)\n", "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"code": "plt.axvline(x=0.22058956, color='red')\nplt.axvline(x=0.33088437, color='red')\nplt.axvline(x=2.20589566, color='red')\n", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"code": "plt.pcolor(rand_mat, cmap=plt.cm.Blues)\nplt.xticks(numpy.arange(0.5, 4.5), xlabels, rotation=90)\nplt.yticks(numpy.arange(0.5, 4.5), ylabels)\nplt.gca().invert_yaxis()\nplt.gca().xaxis.tick_top()\n", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"code": "fig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(time, Swdown, \"-\", label=\"Swdown\")\nax.plot(time, Rn, \"-\", label=\"Rn\")\nax2 = ax.twinx()\nax2.plot(time, temp, \"-r\", label=\"temp\")\nax.legend(loc=0)\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\n\n# create a list of lines and labels\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc=0)\n\nplt.show()\nplt.clf()\n", "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"code": "fig, ax = plt.subplots(1, 2, figsize=(10, 5))\nax[0].plot(x, y)\nax[0].set_title(\"Y\")\nax[1].plot(x, y)\nax[1].set_title(\"Y\")\n", "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"code": "sns.scatterplot(\n    x=\"bill_length_mm\",\n    y=\"bill_depth_mm\",\n    data=df,\n    s=30,\n)\n", "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"code": "plt.scatter(a, b, s=c)\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (a[i], b[i]))\n", "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"code": "plt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend\")\n", "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"code": "plt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend\")\nplt.setp(plt.gca().get_legend().get_title(), fontweight='bold')\n", "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"code": "plt.hist(x, edgecolor='black', linewidth=1.2)\n", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"code": "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"code": "plt.hist(x, bins, alpha=0.5)\nplt.hist(y, bins, alpha=0.5)\n", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"code": "plt.hist(x, alpha=0.5, label='x')\nplt.hist(y, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()\n", "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"code": "plt.plot([a, c], [b, d])\nplt.xlim(0, 5)\nplt.ylim(0, 5)\n", "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"code": "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nim1 = ax1.imshow(x)\nim2 = ax2.imshow(y)\n\nfig.colorbar(im1, ax=ax1)\nfig.colorbar(im2, ax=ax2)\n", "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"code": "plt.plot(x[:, 0], label=\"a\")\nplt.plot(x[:, 1], label=\"b\")\nplt.legend()\n", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"code": "plt.subplot(2, 1, 1)\nplt.plot(x, y)\nplt.title(\"Y and Z\")\nplt.subplot(2, 1, 2)\nplt.plot(z, a)\n", "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"code": "plt.plot(points)\nplt.yscale('log')\nplt.show()\n", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"code": "plt.plot(x, y)\nplt.title('y over x', fontsize=20)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=16)\n", "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"code": "ax.plot(x, y)\nax.set_xticks(x)\nax.set_xticklabels(x+1)\n", "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"code": "for i in range(len(lines)):\n    x = [lines[i][0][0], lines[i][1][0]]\n    y = [lines[i][0][1], lines[i][1][1]]\n    plt.plot(x, y, color=c[i])\n", "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"code": "plt.loglog(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"code": "df.plot(style=\"-o\")\n", "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"code": "plt.hist(data, bins=7, density=True)\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\n", "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"code": "plt.plot(x, y, marker='o', alpha=0.5)\n", "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"code": "fig, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\nfig.legend()\n", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"code": "fig, ax = plt.subplots(1, 2, figsize=(12, 6), sharex=True, sharey=False)\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=ax[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=ax[1])\n", "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"code": "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nax.set_xticklabels(['first', 'second', *ax.get_xticklabels()[2:]])\n", "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"code": "plt.plot(x, y, label=r'$\\lambda$')\nplt.legend()\n", "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"code": "plt.xticks(np.append(plt.xticks()[0], [2.1, 3, 7.6]))\n", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"code": "plt.xticks(x, rotation=-60, ha='left')\n", "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"code": "plt.xticks(x, rotation=90, va='top')\nplt.yticks(y, rotation=-60)\n", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"code": "plt.xticks(x, alpha=0.5)\n", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"code": "plt.margins(x=0)\n", "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"code": "plt.margins(0, None)\n", "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"code": "fig, ax = plt.subplots(nrows=1, ncols=2)\nax[0].plot(x, y)\nax[1].plot(x, y)\nfig.suptitle(\"Figure\")\n", "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"code": "df.plot(kind=\"line\", x=\"X\", y=\"Y\")\n", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"code": "plt.scatter(x, y, marker='|', hatch='///')\n", "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"code": "plt.scatter(x, y, marker='|', edgecolors='none')\n", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"code": "plt.scatter(x, y, marker='*', hatch='/')\n", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"code": "plt.scatter(x, y, marker='*', s=100, hatch='/|')\n", "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"code": "plt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.imshow(data, extent=[1, 5, 1, 4])\n", "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"code": "plt.stem(x, y, orientation='horizontal')\n", "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"code": "plt.bar(d.keys(), d.values(), color=[c[k] for k in d.keys()])\n", "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"code": "plt.axvline(x=3, color='r', label='cutoff')\nplt.legend()\n", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"code": "plt.figure(figsize=(5, 5), subplotpars=dict(projection=\"polar\"))\nplt.bar(labels, height)\n", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"code": "plt.pie(data, labels=l, wedgeprops={\"width\": 0.4})\n", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"code": "plt.plot(x, y, 'b--')\n", "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"code": "plt.plot(x, y)\nplt.minorticks_on()\nplt.grid(b=True, which='minor', color='gray', linestyle='--')\nplt.grid(b=False, which='major')\n", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"code": "plt.pie(sizes, labels=labels, colors=colors, autopct=\"%1.1f%%\")\n", "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"code": "plt.pie(sizes, labels=labels, colors=colors, autopct=\"%1.1f%%\")\n", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"code": "plt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='black')\n", "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"code": "plt.axvline(55, color=\"green\")\n", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"code": "plt.bar(x=np.arange(3), height=blue_bar, color='blue')\nplt.bar(x=np.arange(3), height=orange_bar, color='orange', bottom=blue_bar)\n", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"code": "fig, ax = plt.subplots(1, 2)\nax[0].plot(x, y, label='y')\nax[0].plot(a, z, label='z')\nax[0].legend()\nax[1].plot(a, z)\n", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"code": "plt.scatter(x, y, c=y, cmap=\"Spectral\")\n", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"code": "plt.plot(x, y, '-o')\nplt.xticks(np.arange(0, 10, 1))\n", "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"code": "g = sns.factorplot(x=\"sex\", y=\"bill_length_mm\", col=\"species\", data=df, kind=\"bar\", sharey=False)\n", "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"code": "circle = plt.Circle((0.5, 0.5), 0.2, color='r')\n", "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"code": "plt.plot(x, y)\nplt.title(r'$\\phi$', fontsize=20, fontweight='bold')\n", "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"code": "plt.plot(x, y, label=\"Line\")\nplt.legend(markerscale=0.1)\n", "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"code": "plt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\n", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"code": "plt.legend(ncol=2)\n", "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"code": "plt.legend()\nplt.plot(x[2], y[2], marker=\"*\", label=\"Marker 1\")\nplt.plot(x[5], y[5], marker=\"*\", label=\"Marker 2\")\n", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"code": "plt.imshow(data, interpolation='nearest')\nplt.colorbar()\n", "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"code": "plt.plot(x, y)\nplt.title(\"Figure 1\", fontweight=\"bold\")\n", "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"code": "sns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\", legend=False)\n", "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"code": "plt.plot(x, y)\nplt.gca().invert_xaxis()\n", "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"code": "plt.scatter(x, y)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.axis('off')\n", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"code": "plt.scatter(x, y, c='r', edgecolor='k')\n", "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"code": "fig, ax = plt.subplots(2, 2, figsize=(15, 15))\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y)\nax[1, 0].plot(x, y)\nax[1, 1].plot(x, y)\n", "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"code": "plt.hist(x, range=(0, 10), bins=5, width=2)\n", "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"code": "plt.fill_between(x, y - error, y + error, alpha=0.5)\nplt.plot(x, y)\n", "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"code": "plt.axhline(0, color='white')\nplt.axvline(0, color='white')\n", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"code": "ax.errorbar(box_position, box_height, yerr=box_errors, fmt=\"none\", ecolor=c)\n", "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"code": "plt.subplot(1, 2, 1)\nplt.plot(x, y)\nplt.title(\"Y\")\nplt.subplot(1, 2, 2)\nplt.plot(z, a)\nplt.title(\"Z\")\nplt.subplots_adjust(top=0.85)\n", "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"code": "fig, axes = plt.subplots(4, 4, figsize=(5,5))\nfor i in range(4):\n    for j in range(4):\n        axes[i,j].plot(x, y)\n        axes[i,j].set_xticks(x)\n        axes[i,j].set_yticks(y)\n        axes[i,j].tick_params(axis='both', which='major', labelsize=6)\n        axes[i,j].tick_params(axis='both', which='minor', labelsize=6)\n        axes[i,j].set_xlabel('x', fontsize=6)\n        axes[i,j].set_ylabel('y', fontsize=6)\n        axes[i,j].set_title('title', fontsize=6)\n        axes[i,j].set_xlim(0,10)\n        axes[i,j].set_ylim(0,10)\n        axes[i,j].set_aspect('equal')\n        axes[i,j].grid(True)\n        axes[i,j].set_facecolor('lightgray')\n        axes[i,j].set_axisbelow(True)\n        axes[i,j].spines['top'].set_visible(False)\n        axes[i,j].spines['right'].set_visible(False)\n        axes[i,j].spines['bottom'].set_visible(False)\n        axes[i,j].spines['left'].set_visible(False)\n        axes[i,j].tick_params(axis='both', which='both', bottom=False, top=False, left=False, right=False)\n        axes[i,j].set_xticks([])\n        axes[i,j].set_yticks([])\n        axes[i,j].set_xticklabels([])\n        axes[i,j].set_yticklabels([])\n        axes[i,j].set_xlabel('')\n        axes[i,j].set_ylabel('')\n        axes[i,j].set_title('')\n        axes[i,j].set_facecolor('white')\n        axes[i,j].set_axisbelow(False)\n        axes[i,j].spines['top'].set_visible(True)\n        axes[i,j].spines['right'].set_visible(True)\n        axes[i,j].spines['bottom'].set_visible(True)\n        axes[i,j].spines['left'].set_visible(True)\n        axes[i,j].tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\n        axes[i,j].set_xticks(x)\n        axes[i,j].set_yticks(y)\n        axes[i,j].set_xticklabels(x)\n        axes[i,j].set_yticklabels(y)\n        axes[i,j].set_xlabel('x', fontsize=6)\n        axes[i,j].set_ylabel('y', fontsize=6)\n        axes[i,j].set_title('title', fontsize=6)\n        axes[i,j].set_xlim(0,10)\n        axes[i,j].set_ylim(0,10)\n        axes[i,j].set_aspect('equal')\n        axes[i,j].grid(True)\n        axes[i,j].set_facecolor('lightgray')\n        axes[i,j].set_axisbelow(True)\n        axes[i,j].spines['top'].set_visible(False)\n        axes[i,j].spines['right'].set_visible(False)\n        axes[i,j].spines['bottom'].set_visible(False)\n        axes[i,j].spines['left'].set_visible(False)\n        axes[i,j].tick_params(axis='both', which='both', bottom=False, top=False, left=False, right=False)\n        axes[i,j].set_xticks([])\n        axes[i,j].set_yticks([])\n        axes[i,j].set_xticklab", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"code": "plt.matshow(d, fignum=0, cmap=plt.cm.gray)\nplt.show()\n", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"code": "ax = plt.subplot(111, frame_on=False)\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\ntable = ax.table(cellText=df.values, colLabels=df.columns, loc=\"center\")\ntable.set_fontsize(14)\ntable.scale(1, 4)\ntable.set_bbox([0, 0, 1, 1])\n", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"code": "plt.plot(x, y)\nplt.xticks(x, x, rotation=90)\nplt.xticks(x, x, rotation=270)\n", "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"code": "plt.plot(x, y)\nplt.xticks(x, x, rotation=90)\nplt.xticks(x, x, rotation=270)\n", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"code": "plt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=True)\n", "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"code": "g = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\ng.set_axis_labels(\"Time\", \"Pulse\")\ng.set_titles(\"{col_name}\")\ng.set_titles(\"{col_name}: {col_var}\")\n", "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"code": "sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Pulse\")\n", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"code": "g = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\", height=4, aspect=.7)\ng.set_ylabels(\"\")\n", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"code": "plt.plot(x, y, label=\"y\")\nplt.legend(fontsize=8)\n", "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"code": "plt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\n", "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"code": "plt.plot(x, y, label=\"y\")\nplt.legend(frameon=False)\n", "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"code": "plt.plot(t, a, 'r')\nplt.plot(t, b, 'b')\nplt.plot(t, c, 'g')\n", "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"code": "sns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, legend=False)\n", "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"code": "g = sns.FacetGrid(df, row=\"b\", height=1.5, aspect=3)\ng.map(sns.pointplot, \"a\", \"c\", scale=1, color=\"black\")\ng.set(xticks=np.arange(1, 31, 2), xticklabels=np.arange(1, 31, 2))\n", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"code": "fig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z, c='r', marker='o')\nax.view_init(azim=100, elev=50)\n", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"code": "plt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\n", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"code": "gs = gridspec.GridSpec(nrow, ncol, wspace=0, hspace=0)\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(x)\n        ax.set_xticks([])\n        ax.set_yticks([])\n", "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"code": "x = tf.Variable(1)\n", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"code": "x = tf.Variable(114514)\n", "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"code": "result = tf.one_hot(labels, depth=10)\n", "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"code": "result = tf.one_hot(labels, depth=10)\n", "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"code": "result = tf.one_hot(labels, 10)\n", "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"code": "\n    result = tf.one_hot(labels, depth=10)\n    ### END SOLUTION\n    return result\n\nresult = f()\n\nprint(result)\n", "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"code": "result = tf.one_hot(labels, depth=10, dtype=tf.int32)\n", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"code": "def my_map_func(i):\n  return [[i, i+1, i+2]]       # Fyi [[i], [i+1], [i+2]] throws an exception\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.map(map_func=lambda input: tf.compat.v1.py_func(\n  func=my_map_func, inp=[input], Tout=[tf.int64]\n))\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(element))\nprint(result)\n", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"code": "\n    result = []\n    for i in input:\n        result.append(i)\n        result.append(i+1)\n        result.append(i+2)\n    ### END SOLUTION\n    return result\n\ndef my_map_func(i):\n    return [[i, i+1, i+2]]\n\nds = tf.data.Dataset.from_tensor_slices(example_input)\nds = ds.flat_map(map_func=lambda input: tf.compat.v1.py_func(\n    func=my_map_func, inp=[input], Tout=[tf.int64]\n))\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n    for _ in range(9):\n        result.append(sess.run(element))\nprint(result)\n", "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"code": "result = tf.concat([tf.ones((len(lengths), max(lengths)), dtype=tf.int32),\n                    tf.zeros((len(lengths), 8 - max(lengths)), dtype=tf.int32)], axis=1)\nfor i, length in enumerate(lengths):\n    result[i, max(lengths) - length:] = 0\n", "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"code": "result = tf.cast(tf.sequence_mask(lengths, maxlen=8), tf.float32)\n", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"code": "result = tf.cast(tf.sequence_mask(lengths, maxlen=8), tf.float32)\n", "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"code": "\n    max_length = tf.reduce_max(lengths)\n    mask = tf.sequence_mask(lengths, max_length)\n    ### END SOLUTION\n    return mask\n\nprint(f())\n", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"code": "result = tf.concat([tf.ones((len(lengths), max(lengths)), dtype=tf.float32),\n                    tf.zeros((len(lengths), 8 - max(lengths)), dtype=tf.float32)], axis=1)\nresult = result[:, -8:]\n", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"code": "result = tf.constant([[1,4],[1,5],[1,6],[1,7],[2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7]])\n", "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"code": "\n    result = tf.constant([[1,4],[1,5],[1,6],[1,7],[2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7]])\n    ### END SOLUTION\n    return result\n\n# Test Case\n\ntf.test.assert_equal(f(),tf.constant([[1,4],[1,5],[1,6],[1,7],[2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7]]))\n", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"code": "result = tf.squeeze(a, axis=2)\n", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"code": "result = tf.expand_dims(a, axis=2)\n", "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"code": "result = tf.expand_dims(tf.expand_dims(a, 0), 3)\n", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"code": "result = tf.reduce_sum(A, axis=1)\n", "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"code": "result = tf.reduce_prod(A, axis=1)\n", "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"code": "result = tf.math.reciprocal(A)\n", "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)\n", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"code": "\n    result = tf.reduce_sum(tf.square(tf.subtract(A,B)),axis=1)\n    ### END SOLUTION\n    return result\n\nprint(f())\n", "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"code": "result = tf.gather_nd(x, tf.stack([y, z], axis=1))\n", "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"code": "result = tf.gather_nd(x, tf.stack([row, col], axis=1))\n", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"code": "\n    result = tf.gather_nd(x, tf.stack([y, z], axis=1))\n    ### END SOLUTION\n    return result\n\n# test\nassert tf.reduce_all(f() == tf.constant([2,6])).numpy()\n", "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"code": "result = tf.einsum('bns,bns->bnb', A, B)\n", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"code": "result = tf.einsum('bij,bkj->bik', A, B)\n", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"code": "result = tf.strings.unicode_decode(x, input_encoding='UTF-8')\n", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"code": "\n    result = tf.strings.unicode_decode(x, input_encoding='UTF-8')\n    ### END SOLUTION\n    return result\n\nresult = f()\nprint(result)\n", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"code": "def non_zero_count(x):\n    return tf.reduce_sum(tf.cast(tf.not_equal(x, 0), tf.float32), axis=-1)\n\n\ndef non_zero_mean(x):\n    return tf.reduce_sum(x, axis=-1) / non_zero_count(x)\n\n\nresult = tf.map_fn(non_zero_mean, x)\n", "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"code": "result = tf.reduce_sum(x, axis=-2, keepdims=True) / tf.reduce_sum(tf.cast(tf.not_equal(x, 0), tf.float32), axis=-2, keepdims=True)\n", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"code": "\n    # get the number of non-zero entries\n    non_zero_entries = tf.math.count_nonzero(x, axis=-1, keepdims=True)\n    # get the sum of the non-zero entries\n    sum_non_zero_entries = tf.math.reduce_sum(x, axis=-1, keepdims=True)\n    # divide the sum by the number of non-zero entries\n    result = sum_non_zero_entries / non_zero_entries\n    ### END SOLUTION\n    return result\n\nprint(f())\n", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"code": "A = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\nresult = tf.reduce_sum(tf.matmul(A,B))\n", "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"code": "result = tf.argmax(a, axis=1)\n", "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"code": "result = tf.argmax(a, axis=1)\n", "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"code": "\n    result = tf.argmax(a, axis=1)\n    ### END SOLUTION\n    return result\n\nresult = f()\nprint(result)\n", "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"code": "result = tf.argmin(a, axis=1)\n", "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"code": "tf.saved_model.save(model, \"export/1\")\n", "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"code": "tf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=(10,), minval=1, maxval=5, dtype=tf.int32)\n", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"code": "tf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=(114,), minval=2, maxval=6, dtype=tf.int32)\n", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"code": "\n    tf.random.set_seed(seed_x)\n    result = tf.random.uniform(shape=(10,), minval=1, maxval=5, dtype=tf.int32)\n    ### END SOLUTION\n    return result\n\nresult = f()\nprint(result)\n", "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"code": "result = tf.__version__\n", "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"code": "result = np.polyfit(np.log(x), y, 1)\n", "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"code": "result = np.polyfit(np.log(x), y, 1)\n", "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"code": "def func(x, a, b, c):\n    return a * np.exp(b * x) + c\nresult = scipy.optimize.curve_fit(func, x, y, p0)\n", "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"code": "statistic, p_value = stats.ks_2samp(x, y)\n", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"code": "result = stats.ks_2samp(x, y)\n", "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"code": "def f(x):\n  return ((x[0]+x[1]-x[2])-2)**2 + ((3*x[0]-x[1]-x[2]))**2 + sin(x[1]) + cos(x[1]) + 4\n\nresult = optimize.minimize(f, initial_guess)\n", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"code": "p_values = scipy.stats.norm.sf(z_scores)\n", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"code": "p_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"code": "z_scores = scipy.stats.norm.ppf(p_values)\n", "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"code": "result = stats.lognorm.cdf(x, s=stddev, scale=np.exp(mu))\n", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"code": "expected_value = np.exp(mu + stddev**2 / 2)\nmedian = np.exp(mu)\n", "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"code": "result = sa.multiply(sb)\n", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"code": "\n    result = sA.multiply(sB)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"code": "result = scipy.interpolate.griddata(points, V, request, method='linear')\n", "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"code": "result = scipy.interpolate.griddata(points, V, request, method='linear')\n", "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"code": "data_rot = rotate(data_orig,angle)\nxrot = x0*np.cos(angle*np.pi/180.) - y0*np.sin(angle*np.pi/180.)\nyrot = x0*np.sin(angle*np.pi/180.) + y0*np.cos(angle*np.pi/180.)\n", "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"code": "result = M.diagonal()\n", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"code": "result = stats.kstest(times, 'uniform', args=(0, T))\n", "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"code": "\n    #print times\n    #print rate\n    #print T\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0, T))\n    #print stats.kstest(times, 'uniform', args=(0", "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"code": "result = stats.kstest(times, 'uniform', args=(0, T))\n", "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"code": "Feature = sparse.hstack([c1, c2])\n", "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"code": "Feature = sparse.hstack([c1, c2])\n", "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"code": "Feature = sparse.vstack([c1, c2])\n", "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"code": "def cost(x):\n    return np.sum(np.sqrt(np.sum((points1[x]-points2)**2,axis=1)))\n\ndef constraint(x):\n    return np.sum(np.bincount(x,minlength=N))-N\n\nresult = scipy.optimize.fmin_cobyla(cost,np.arange(N),[constraint],rhobeg=0.1,rhoend=1e-4)\n", "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"code": "def cost(x):\n    return np.sum(np.sqrt(np.sum((points1[x]-points2)**2,axis=1)))\n\ndef constraint(x):\n    return np.sum(np.bincount(x,minlength=N))-N\n\nresult = scipy.optimize.minimize(cost,np.arange(N),constraints={\"fun\":constraint,\"type\":\"eq\"}).x\n", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"code": "b = sparse.csr_matrix(a)\nb.setdiag(0)\n", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"code": "result = ndimage.label(img > threshold)[1]\n", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"code": "result = ndimage.label(img < threshold)[1]\n", "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"code": "\n    # YOUR CODE HERE\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"code": "import numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n\n# Find the regions of cells which value exceeds a given threshold, say 0.75;\n# Note: If two elements touch horizontally, vertically or diagnoally, they belong to one region.\n\n# Determine the distance between the center of mass of such regions and the top left corner, which has coordinates (0,0).\n# Please output the distances as a list.\n\n# A:\n\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n\n# Find the regions of cells which value exceeds a given threshold, say 0.75;\n# Note: If two elements touch horizontally, vertically or diagnoally, they belong to one region.\n\n# Determine the distance between the center of mass of such regions and the top left corner, which has coordinates (0,0).\n# Please output the distances as a list.\n\n# A:\n\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n\n# Find the regions of cells which value exceeds a given threshold, say 0.75;\n# Note: If two elements touch horizontally, vertically or diagnoally, they belong to one region.\n\n# Determine the distance between the center of mass of such regions and the top left corner, which has coordinates (0,0).\n# Please output the distances as a list.\n\n# A:\n\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n\n# Find the regions of cells which value exceeds a given threshold, say 0.75;\n# Note: If two elements touch horizontally, vertically or diagnoally, they belong to one region.\n\n# Determine the distance between the center of mass of such regions and the top left corner, which has coordinates (0,0).\n# Please output the distances as a list.\n\n# A:\n\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n\n# Find the regions of cells which value exceeds a given threshold, say 0.75;\n# Note: If two elements touch horizontally, vertically or diagnoally, they belong to one region.\n\n# Determine the distance between the center of mass of such regions and the top left corner, which has coordinates (0,0).\n# Please output the distances as a list.\n\n# A:\n\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))", "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"code": "M = M + M.T\n", "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"code": "\n    sA = sA + sA.T\n    ### END SOLUTION\n    return sA\n", "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"code": "def remove_isolated_cells(square):\n    \"\"\"Remove isolated cells from a binary array\"\"\"\n    # Find all blobs\n    blobs, num_blobs = scipy.ndimage.label(square)\n    # Find the size of each blob\n    blob_sizes = scipy.ndimage.sum(square, blobs, range(num_blobs + 1))\n    # Remove blobs of size 1\n    square[blobs != np.argmax(blob_sizes)] = 0\n    return square\n", "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"code": "def remove_isolated_cells(square):\n    square = square.copy()\n    for i in range(square.shape[0]):\n        for j in range(square.shape[1]):\n            if square[i, j] != 0:\n                if square[i-1:i+2, j-1:j+2].sum() == square[i, j]:\n                    square[i, j] = 0\n    return square\n\nsquare = remove_isolated_cells(square)\n\n", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"code": "mean = col.mean()\nstandard_deviation = col.std()\n", "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"code": "Max = col.max()\nMin = col.min()\n", "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"code": "median = np.median(col.data)\nmode = np.bincount(col.data).argmax()\n", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"code": "def fourier(x, *args):\n    return sum(a * np.cos(i * np.pi / tau * x) for i, a in enumerate(args, 1))\npopt, pcov = curve_fit(fourier, z, Ua, [0] * degree)\n", "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"code": "import numpy as np\nimport scipy.spatial.distance\nexample_array = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\n", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"code": "# Create a list of unique IDs\nunique_ids = np.unique(example_array)\n# Create a list of coordinates for each unique ID\ncoords = []\nfor i in unique_ids:\n    coords.append(np.where(example_array == i))\n# Calculate pairwise Manhattan distances between all coordinates\ndistances = scipy.spatial.distance.cdist(coords, coords, metric='cityblock')\n# Create a list of unique ID pairs\nid_pairs = []\nfor i in unique_ids:\n    for j in unique_ids:\n        id_pairs.append((i, j))\n# Create a list of unique ID pairs and corresponding distances\nid_distances = []\nfor i in range(len(id_pairs)):\n    id_distances.append((id_pairs[i], distances[i]))\n# Create a list of unique ID pairs and corresponding minimum distances\nid_min_distances = []\nfor i in range(len(id_distances)):\n    id_min_distances.append((id_distances[i][0], np.min(id_distances[i][1])))\n# Create a list of unique ID pairs and corresponding minimum distances, excluding self-distances\nid_min_distances_no_self = []\nfor i in range(len(id_min_distances)):\n    if id_min_distances[i][0][0] != id_min_distances[i][0][1]:\n        id_min_distances_no_self.append(id_min_distances[i])\n# Create a list of unique ID pairs and corresponding minimum distances, excluding self-distances and duplicates\nid_min_distances_no_self_no_duplicates = []\nfor i in range(len(id_min_distances_no_self)):\n    if id_min_distances_no_self[i][0][0] < id_min_distances_no_self[i][0][1]:\n        id_min_distances_no_self_no_duplicates.append(id_min_distances_no_self[i])\n# Create a list of unique ID pairs and corresponding minimum distances, excluding self-distances and duplicates, sorted by distance\nid_min_distances_no_self_no_duplicates_sorted = sorted(id_min_distances_no_self_no_duplicates, key=lambda x: x[1])\n# Create a list of unique ID pairs and corresponding minimum distances, excluding self-distances and duplicates, sorted by distance, with IDs as integers\nid_min_distances_no_self_no_duplicates_sorted_int = []\nfor i in range(len(id_min_distances_no_self_no_duplicates_sorted)):\n    id_min_distances_no_self_no_duplicates_sorted_int.append((int(id_min_distances_no_self_no_duplicates_sorted[i][0][0]), int(id_min_distances_no_self_no_duplicates_sorted[i][0][1]), id_min_distances_no_self_no_duplicates_sorted[i][1]))\n# Create a list of unique ID pairs and corresponding minimum distances, excluding self-distances and duplicates, sorted by distance, with IDs as integers, excluding distances of 1\nid_min_distances_no_self_no_duplicates_sorted_int_no_1 = []\nfor i in range(len(id_min_distances_no_self_no_duplicates_sorted_int)):\n    if id_min_distances_no_self_no_duplicates_sorted_int[i][2] != 1:\n        id_min_distances_no_self_no_duplicates_sorted_int_no_1.append(id_min_distances_no_self_no_duplicates_sorted_int[i])\n# Create a list of unique ID pairs and corresponding minimum distances, excluding self-distances and duplicates, sorted by distance, with IDs as integers, excluding distances of 1, with distances rounded to nearest integer\nid_min_distances_no_self_no_duplicates_sorted_int_no_1_", "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"code": "\n    # Create a list of unique IDs\n    unique_ids = np.unique(example_array)\n    # Create a list of coordinates for each unique ID\n    coords = []\n    for i in unique_ids:\n        coords.append(np.argwhere(example_array == i))\n    # Calculate pairwise distances between all coordinates\n    distances = scipy.spatial.distance.cdist(coords, coords, 'euclidean')\n    # Return the minimum distance between all unique IDs\n    return np.min(distances)\n    ### END SOLUTION\n", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"code": "result = np.zeros((5, 100))\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k = 2, s = 4)\n    result[i, :] = interpolate.splev(x_val, tck, der = 0)\n", "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"code": "statistic, critical_values, significance_level = ss.anderson_ksamp([x1, x2, x3, x4])\n", "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"code": "result = ss.anderson_ksamp([x1, x2])\n", "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"code": "def tau1(x):\n    y = np.array(df['A']) #  keep one column fix and run it in the other two\n    tau, p_value = stats.kendalltau(x, y)\n    return tau\n\ndf['AB'] = pd.rolling_apply(df['B'], 3, lambda x: tau1(x))\ndf['AC'] = pd.rolling_apply(df['C'], 3, lambda x: tau1(x))\ndf['BC'] = pd.rolling_apply(df[['B', 'C']], 3, lambda x: tau1(x))\n\n", "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"code": "result = sa.nnz == 0\n", "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"code": "result = sa.nnz == 0\n", "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"code": "result = block_diag(*a)\n", "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"code": "p_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"code": "\n    return stats.ranksums(pre_course_scores, during_course_scores)[1]\n    ### END SOLUTION\n", "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"code": "kurtosis_result = np.mean(a**4) / np.mean(a**2)**2 - 3\n", "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"code": "kurtosis_result = scipy.stats.kurtosis(a, fisher=True, bias=False)\n", "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"code": "interpolated = scipy.interpolate.interp2d(x, y, z, kind='cubic')\nresult = interpolated(s, t)\n", "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"code": "\n    result = scipy.interpolate.interp2d(x, y, z, kind='cubic')(s, t)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"code": "import numpy as np\n\n# Compute the Voronoi diagram\nvor = scipy.spatial.Voronoi(points)\n\n# Compute the centroids of the Voronoi regions\ncentroids = np.array([np.mean(vor.vertices[region], axis=0) for region in vor.regions if len(region) > 0])\n\n# Compute the Voronoi regions for the extra points\nvor_extra = scipy.spatial.Voronoi(extraPoints)\n\n# Compute the centroids of the Voronoi regions for the extra points\ncentroids_extra = np.array([np.mean(vor_extra.vertices[region], axis=0) for region in vor_extra.regions if len(region) > 0])\n\n# Compute the distance between the centroids of the Voronoi regions\n# for the extra points and the centroids of the Voronoi regions\n# for the original points\ndistances = scipy.spatial.distance.cdist(centroids_extra, centroids)\n\n# Find the closest Voronoi region for each extra point\nresult = np.argmin(distances, axis=1)\n", "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"code": "import numpy as np\n\ndef voronoi_finite_polygons_2d(vor, radius=None):\n    \"\"\"\n    Reconstruct infinite voronoi regions in a 2D diagram to finite\n    regions.\n\n    Parameters\n    ----------\n    vor : Voronoi\n        Input diagram\n    radius : float, optional\n        Distance to 'points at infinity'.\n\n    Returns\n    -------\n    regions : list of tuples\n        Indices of vertices in each revised Voronoi regions.\n    vertices : list of tuples\n        Coordinates for revised Voronoi vertices. Same as coordinates\n        of input vertices, with 'points at infinity' appended to the\n        end.\n\n    \"\"\"\n\n    if vor.points.shape[1] != 2:\n        raise ValueError(\"Requires 2D input\")\n\n    new_regions = []\n    new_vertices = vor.vertices.tolist()\n\n    center = vor.points.mean(axis=0)\n    if radius is None:\n        radius = vor.points.ptp().max()\n\n    # Construct a map containing all ridges for a given point\n    all_ridges = {}\n    for (p1, p2), (v1, v2) in zip(vor.ridge_points, vor.ridge_vertices):\n        all_ridges.setdefault(p1, []).append((p2, v1, v2))\n        all_ridges.setdefault(p2, []).append((p1, v1, v2))\n\n    # Reconstruct infinite regions\n    for p1, region in enumerate(vor.point_region):\n        vertices = vor.regions[region]\n\n        if all(v >= 0 for v in vertices):\n            # finite region\n            new_regions.append(vertices)\n            continue\n\n        # reconstruct a non-finite region\n        ridges = all_ridges[p1]\n        new_region = [v for v in vertices if v >= 0]\n\n        for p2, v1, v2 in ridges:\n            if v2 < 0:\n                v1, v2 = v2, v1\n            if v1 >= 0:\n                # finite ridge: already in the region\n                continue\n\n            # Compute the missing endpoint of an infinite ridge\n\n            t = vor.points[p2] - vor.points[p1] # tangent\n            t /= np.linalg.norm(t)\n            n = np.array([-t[1], t[0]])  # normal\n\n            midpoint = vor.points[[p1, p2]].mean(axis=0)\n            direction = np.sign(np.dot(midpoint - center, n)) * n\n            far_point = vor.vertices[v2] + direction * radius\n\n            new_region.append(len(new_vertices))\n            new_vertices.append(far_point.tolist())\n\n        # sort region counterclockwise\n        vs = np.asarray([new_vertices[v] for v in new_region])\n        c = vs.mean(axis=0)\n        angles = np.arctan2(vs[:,1] - c[1], vs[:,0] - c[0])\n        new_region = np.array(new_region)[np.argsort(angles)]\n\n        # finish\n        new_regions.append(new_region.tolist())\n\n    return new_regions, np.asarray(new_vertices)\n\ndef voronoi_finite_polygons_2d_extra(vor, radius=None):\n    \"\"\"\n    Reconstruct infinite voronoi regions in a 2D diagram to finite\n    regions.\n\n    Parameters\n    ----------\n    vor : Voronoi\n        Input diagram\n    radius : float, optional\n        Distance to 'points at infinity'.\n\n    Returns\n    -------\n    regions : list of tuples\n        Indices of vertices in each revised Voronoi regions.\n    vertices : list of tuples\n        Coordinates for revised Voronoi vertices. Same as coordinates\n        of input vertices, with 'points at infinity' appended to the\n        end.\n\n    \"\"\"\n\n    if vor.points.shape[1] != 2:\n        raise ValueError(\"Requires 2D", "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"code": "result = sparse.csr_matrix(np.array(vectors))\n", "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"code": "b = scipy.ndimage.median_filter(a, 3, origin=(1, 0))\n", "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"code": "result = M[row,column]\n", "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"code": "result = M[row, column].toarray()\n", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"code": "new_array = np.zeros((100, 10, 10))\nfor i in range(10):\n    for j in range(10):\n        f = scipy.interpolate.interp1d(x, array[:, i, j])\n        new_array[:, i, j] = f(x_new)\n", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"code": "def NormalDistro(u,o2,x):\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate(NDfx,-dev,dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return(P)\nprob = NormalDistro(u,o2,x)\n", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"code": "\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return(P)\n    ### END SOLUTION\n", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"code": "result = sf.dct(np.eye(N))\n", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"code": "result = sparse.diags(matrix, [-1,0,1], (5, 5)).toarray()\n", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"code": "result = scipy.stats.binom.pmf(np.arange(N+1)[:, None], N, p)\n", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"code": "result = df.apply(stats.zscore, axis=1)\n", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"code": "result = df.apply(stats.zscore)\n", "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"code": "result = df.apply(stats.zscore, axis=1)\nresult.columns = [f'zscore_{c}' for c in result.columns]\nresult = pd.concat([df, result], axis=1)\n", "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"code": "result = pd.DataFrame(index=df.index, columns=df.columns)\nresult.loc['data'] = df.values\nresult.loc['zscore'] = stats.zscore(df.values, axis=0)\nresult = result.round(3)\n", "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"code": "result = scipy.optimize.line_search(test_func, test_grad, starting_point, direction)[0]\n", "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"code": "y, x = np.indices(shape)\nmid = np.array([np.mean(y), np.mean(x)])\nresult = distance.cdist(np.dstack((y, x)), mid.reshape(1, 2))\n", "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"code": "result = distance.cdist(np.indices(shape).reshape(2, -1).T, np.array([shape[0] // 2, shape[1] // 2]).reshape(1, -1))\n", "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"code": "\n    y, x = np.indices(shape)\n    mid = np.array([shape[0]/2, shape[1]/2])\n    return distance.cdist(np.dstack((y, x)), mid.reshape(1, 2))\n    ### END SOLUTION\n", "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"code": "result = scipy.ndimage.zoom(x, (shape[0] / float(x.shape[0]), shape[1] / float(x.shape[1])), order=1)\n", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"code": "def func(x, a):\n    return a.dot(x ** 2)\n\ndef residual(x, a, y):\n    return func(x, a) - y\n\nout = scipy.optimize.least_squares(residual, x0, args=(a, y))\n", "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"code": "def func(x, a):\n    return a.dot(x ** 2)\n\ndef residual(x, a, y):\n    return func(x, a) - y\n\nout = scipy.optimize.least_squares(residual, x0, args=(a, y), bounds=(x_lower_bounds, None))\n", "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"code": "def dN1_dt_simple(t, N1):\n    return -100 * N1 + np.sin(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"code": "\ndef dN1_dt_simple(t, N1):\n    return -100 * N1\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n", "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"code": "\ndef dN1_dt_simple(t, N1):\n    return -100 * N1 - np.cos(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n", "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"code": "for t in range (4):\n    def const(x):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"code": "result = sparse.vstack([sa, sb])\n", "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"code": "result = sparse.hstack([sa, sb])\n", "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"code": "result = scipy.integrate.quad(lambda x: 2*c*x, low, high)[0]\n", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"code": "\n    result = scipy.integrate.quad(lambda x: 2*c*x, low, high)[0]\n    ### END SOLUTION\n    return result\n\n# test the function\nassert f(c=5, low=0, high=1) == 5\nassert f(c=5, low=0, high=2) == 10\nassert f(c=5, low=0, high=3) == 15\n\n# create a list of c values\nc_values = [1, 2, 3, 4, 5]\n\n# create an empty list to store the results\nresults = []\n\n# loop over the c values\nfor c in c_values:\n    # calculate the result\n    result = f(c=c, low=0, high=1)\n    # append the result to the list\n    results.append(result)\n\n# print the results\nprint(results)\n", "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"code": "V = V + x\n", "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"code": "V = V + x\n", "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"code": "A = V + x\nB = A + y\n", "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"code": "sa = sa.tocsc()\nfor Col in xrange(sa.shape[1]):\n    Column = sa[:,Col].data\n    List = [x**2 for x in Column]\n    Len = math.sqrt(sum(List))\n    sa[:,Col] = sa[:,Col]/Len\n", "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"code": "sa = sa.tocsr()\nfor Col in xrange(sa.shape[1]):\n    Column = sa[:,Col].data\n    List = [x**2 for x in Column]\n    Len = math.sqrt(sum(List))\n    Column = Column/Len\n    sa[:,Col] = Column\n\n", "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"code": "a = (a > 0).astype(int)\n", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"code": "a = (a > 0).astype(int)\n", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"code": "distances = scipy.spatial.distance.cdist(data, centroids)\nresult = np.argmin(distances, axis=0)\n", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"code": "distances = scipy.spatial.distance.cdist(data, centroids)\nclosest_centroid = np.argmin(distances, axis=1)\nresult = data[closest_centroid == np.arange(centroids.shape[0])[:, None]]\n", "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"code": "distances = scipy.spatial.distance.cdist(centroids, data)\nresult = np.argpartition(distances, k, axis=1)[:, :k]\n", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"code": "result = np.array([fsolve(eqn, x0=0.5, args = (a,b)) for a,b in zip(xdata, bdata)])\n", "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"code": "result = []\nfor x, a in zip(xdata, adata):\n    result.append(fsolve(eqn, x0=0.5, args = (a,)))\nresult = np.array(result)\n", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"code": "def bekkers_cdf(x, a, m, d):\n    return integrate.quad(lambda x: bekkers(x, a, m, d), range_start, x)[0]\n\nresult = stats.kstest(sample_data, bekkers_cdf, args=(estimated_a, estimated_m, estimated_d))\n", "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"code": "def bekkers_cdf(x, a, m, d):\n    return integrate.quad(lambda x: bekkers(x, a, m, d), range_start, x)[0]\n\nresult = stats.kstest(sample_data, bekkers_cdf, args=(estimated_a, estimated_m, estimated_d))\n", "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"code": "integral_df = df.groupby(pd.Grouper(freq='25S')).apply(integrate.trapz)\n", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"code": "result = scipy.interpolate.griddata(x, y, eval, method='linear')\n", "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"code": "def log_likelihood(weights, data):\n    return np.sum(np.log(np.sum(weights[data])))\n\ndef log_likelihood_grad(weights, data):\n    return np.sum(weights[data], axis=0)\n\ndef log_likelihood_hess(weights, data):\n    return np.diag(weights)\n\ndef log_likelihood_hessp(weights, data, p):\n    return np.diag(p)\n\ndef log_likelihood_constraint(weights):\n    return np.sum(weights) - 1\n\ndef log_likelihood_constraint_grad(weights):\n    return np.ones(len(weights))\n\ndef log_likelihood_constraint_hess(weights, v):\n    return np.zeros(len(weights))\n\ndef log_likelihood_constraint_hessp(weights, v):\n    return np.zeros(len(weights))\n\ndef log_likelihood_constraint_jac(weights):\n    return np.array([np.ones(len(weights))])\n\ndef log_likelihood_constraint_jacp(weights, p):\n    return np.array([np.zeros(len(weights))])\n\ndef log_likelihood_constraint_hess_jac(weights, v):\n    return np.zeros((1, len(weights)))\n\ndef log_likelihood_constraint_hess_jacp(weights, v, p):\n    return np.zeros((1, len(weights)))\n\ndef log_likelihood_constraint_hessp_jac(weights, p):\n    return np.zeros((1, len(weights)))\n\ndef log_likelihood_constraint_hessp_jacp(weights, p, q):\n    return np.zeros((1, len(weights)))\n\ndef log_likelihood_constraint_hess_hessp(weights, v, p):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hessp_hess(weights, p, v):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hess_hess(weights, v, w):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hessp_hessp(weights, p, q):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hess_hessp_hess(weights, v, p, w):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hess_hessp_hessp(weights, v, p, q):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hessp_hess_hess(weights, p, v, w):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hessp_hessp_hess(weights, p, q, w):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hessp_hess_hessp(weights, p, v, q):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hessp_hessp_hessp(weights, p, q, r):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hess_hess_hess(weights, v, w, u):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hess_hess_hessp(weights, v, w, r):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hess_hessp_hess_hess(weights, v, p, w, u):\n    return np.zeros((len(weights), len(weights)))\n\ndef log_likelihood_constraint_hess_hessp_hessp_hess(weights, v, p, q, u):\n    return np.", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"code": "def e_scalar(p, x, y):\n    return e(p, x, y)\n\nresult = sciopt.fminbound(e_scalar, pmin[0], pmax[0], args=(x,y))\n", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"code": "result = signal.argrelextrema(arr, np.less_equal, order=n)\n", "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"code": "def find_extrema(arr, n):\n    result = []\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            if j < n or j > arr.shape[1] - n - 1:\n                continue\n            if arr[i][j] <= arr[i][j - n:j + n + 1].min():\n                result.append([i, j])\n    return result\n\nresult = find_extrema(arr, n)\n", "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"code": "df = df[(np.abs(stats.zscore(df.select_dtypes(include=['float64', 'int64']))) < 3).all(axis=1)]\n", "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"code": "data1 = pd.DataFrame(data.data, columns=data.feature_names)\n", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"code": "data1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"code": "data1 = pd.DataFrame(data.data, columns=data.feature_names)\n", "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"code": "\n    df = pd.DataFrame(data.data, columns=data.feature_names)\n    df['target'] = data.target\n    ### END SOLUTION\n    return df\n", "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\n", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\n", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"code": "df_out = pd.concat([df, pd.get_dummies(df.pop('Col4').apply(pd.Series).stack()).sum(level=0)], axis=1)\n", "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\n", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\n", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"code": "svmmodel.fit(X, y)\nproba = svmmodel.decision_function(x_test)\nproba = 1 / (1 + np.exp(-proba))\n", "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"code": "model.fit(X, y)\nproba = model.decision_function(x_predict)\nproba = 1 / (1 + np.exp(-proba))\n", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"code": "df = pd.concat([df_origin, pd.DataFrame(transform_output.toarray())], axis=1)\n", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"code": "df = pd.concat([df_origin, pd.DataFrame(transform_output.toarray())], axis=1)\n", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"code": "\n    df_origin = df.copy()\n    df_origin['transform_output'] = transform_output.todense()\n    ### END SOLUTION\n    return df_origin\n", "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"code": "\nclf.steps.pop(1)\n", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"code": "\nclf.steps.pop(1)\n", "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"code": "\nclf.steps.pop(1)\n", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"code": "\nclf.steps.insert(1, ('reduce_dim2', PCA()))\n", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"code": "\nclf.steps.insert(1, ('reduce_dim', PCA()))\n", "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"code": "\nclf.steps.insert(1, ('t1919810', PCA()))\n", "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"code": "\ngridsearch.fit(trainX, trainY)\nb = gridsearch.score(testX, testY)\nc = gridsearch.predict(testX)\n", "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"code": "\nb = []\nc = []\nfor i in range(len(gridsearch.cv_results_['params'])):\n    params = gridsearch.cv_results_['params'][i]\n    model = xgb.XGBRegressor(**params)\n    model.fit(trainX, trainY, early_stopping_rounds=42, eval_metric=\"mae\", eval_set=[(testX, testY)])\n    b.append(model.best_score)\n    c.append(model.predict(testX))\n", "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"code": "proba = []\nfor train, test in cv:\n    logreg.fit(X[train], y[train])\n    proba.append(logreg.predict_proba(X[test]))\nproba = np.concatenate(proba)\n", "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"code": "proba = []\nfor train, test in cv:\n    logreg.fit(X[train], y[train])\n    proba.append(logreg.predict_proba(X[test]))\nproba = np.concatenate(proba)\n", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"code": "inversed = scaler.inverse_transform(scaled)\n", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"code": "\n    inversed = scaler.inverse_transform(scaled)\n    ### END SOLUTION\n    return inversed\n", "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"code": "model_name = model.__class__.__name__\n", "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"code": "model_name = model.__class__.__name__\n", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"code": "model_name = model.__class__.__name__\n", "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"code": "tf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n", "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"code": "tf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"code": "select_out = pipe.named_steps['select'].fit_transform(data, target)\n", "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"code": "clf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"code": "regressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nregressor.fit(X, y)\npredict = regressor.predict(X_test)\n", "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"code": "regressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nregressor.fit(X, y)\npredict = regressor.predict(X_test)\n", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"code": "\ndef preprocess(s):\n    return s.upper()\n\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"code": "\ndef prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n", "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"code": "df_out = pd.DataFrame(preprocessing.scale(data), columns=data.columns, index=data.index)\n", "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"code": "df_out = pd.DataFrame(preprocessing.scale(data), columns=data.columns, index=data.index)\n", "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"code": "coef = grid.best_estimator_.named_steps[\"model\"].coef_\n", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"code": "grid.fit(X, y)\ncoef = grid.best_estimator_.named_steps[\"model\"].coef_\n", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"code": "column_names = X.columns[clf.feature_importances_ > 0.01]\n", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"code": "column_names = X.columns\n", "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"code": "column_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"code": "column_names = X.columns[clf.feature_importances_ > 0.01]\n", "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"code": "km.fit(X)\nclosest_50_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:50]]\n", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"code": "km.fit(X)\nclosest_50_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:50]]\n", "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"code": "km.fit(X)\nclosest_100_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:100]]\n", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"code": "\n    km.fit(X)\n    centers = km.cluster_centers_\n    distances = np.linalg.norm(X - centers[p], axis=1)\n    samples = X[np.argsort(distances)[:50]]\n    ### END SOLUTION\n    return samples\n", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"code": "X_train = pd.get_dummies(X_train)\n", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"code": "X_train = pd.get_dummies(X_train)\n", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"code": "from sklearn.svm import SVR\nsvr = SVR(kernel='rbf', C=1e3, gamma=0.1)\nsvr.fit(X, y)\npredict = svr.predict(X)\n", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"code": "from sklearn.svm import SVR\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n", "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"code": "from sklearn.svm import SVR\nsvr = SVR(kernel='poly', degree=2)\nsvr.fit(X, y)\npredict = svr.predict(X)\n", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"code": "from sklearn.svm import SVR\nmodel = SVR(kernel='poly', degree=2)\nmodel.fit(X, y)\npredict = model.predict(X)\n", "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"code": "cosine_similarities_of_queries = []\nfor query in queries:\n    cosine_similarities_of_queries.append(cosine_similarity(tfidf.transform([query]), tfidf.transform(documents)).flatten())\n", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"code": "cosine_similarities_of_queries = tfidf.transform(queries).dot(tfidf.transform(documents).T).toarray()\n", "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"code": "\n    cosine_similarities_of_queries = []\n    for query in queries:\n        query_tfidf = tfidf.transform([query])\n        cosine_similarities = np.dot(query_tfidf, tfidf.transform(documents).T).toarray()\n        cosine_similarities_of_queries.append(cosine_similarities)\n    return cosine_similarities_of_queries\n    ### END SOLUTION\ncosine_similarities_of_queries = solve(queries, documents)\nassert type(cosine_similarities_of_queries) == list\nassert len(cosine_similarities_of_queries) == len(queries)\nassert type(cosine_similarities_of_queries[0]) == np.ndarray\nassert cosine_similarities_of_queries[0].shape == (1, len(documents))\n", "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"code": "df = pd.DataFrame(features)\ndf = df.apply(lambda x: pd.Series(x.dropna().values))\ndf = df.fillna(0)\ndf = df.astype(int)\nnew_features = df.values\n", "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"code": "new_f = pd.get_dummies(pd.DataFrame(f).stack()).groupby(level=0).sum()\n", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"code": "df = pd.DataFrame(features)\ndf = df.apply(lambda x: pd.factorize(x)[0])\nnew_features = df.values\n", "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"code": "\n    df = pd.DataFrame(features)\n    df = df.apply(lambda x: pd.Series(x.dropna().values))\n    df = df.fillna(0)\n    df = df.astype(int)\n    new_features = df.values\n    ### END SOLUTION\n    return new_features\n", "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"code": "new_features = np.zeros((len(features), len(set(np.concatenate(features)))))\nfor i, f in enumerate(features):\n    new_features[i, np.array([list(set(np.concatenate(features))).index(x) for x in f])] = 1\n", "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"code": "cluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete').fit_predict(data_matrix)\n", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"code": "cluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2).fit_predict(data_matrix)\n", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"code": "cluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete').fit_predict(simM)\n", "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"code": "linkage_matrix = scipy.cluster.hierarchy.linkage(data_matrix, method='complete')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"code": "linkage_matrix = scipy.cluster.hierarchy.linkage(data_matrix, method='complete')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"code": "linkage_matrix = scipy.cluster.hierarchy.linkage(simM, method='complete')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n", "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"code": "from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"code": "from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"code": "from sklearn.preprocessing import PowerTransformer\n\nbox_cox_data = PowerTransformer(method='box-cox').fit_transform(data)\n", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"code": "from scipy.stats import boxcox\nbox_cox_data = boxcox(data)\n", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"code": "from sklearn.preprocessing import PowerTransformer\n\nyeo_johnson_data = PowerTransformer(method='yeo-johnson').fit_transform(data)\n", "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"code": "yeo_johnson_data = sklearn.preprocessing.PowerTransformer(method='yeo-johnson').fit_transform(data)\n", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"code": "vectorizer = CountVectorizer(token_pattern=r'\\w+|[^\\w\\s]+')\ntransformed_text = vectorizer.fit_transform(text)\n", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"code": "from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:,:-1], dataset.iloc[:,-1], test_size=0.2, random_state=42)\n", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"code": "from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(data.drop(columns=['target']), data['target'], test_size=0.2, random_state=42)\n", "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"code": "from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:, :-1], dataset.iloc[:, -1], test_size=0.4, random_state=42)\n", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"code": "\n    from sklearn.model_selection import train_test_split\n    x_train, x_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2, random_state=42)\n    ### END SOLUTION\n    return x_train, y_train, x_test, y_test\n", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"code": "kmeans = KMeans(n_clusters=2).fit(df['mse'].values.reshape(-1, 1))\nlabels = kmeans.predict(df['mse'].values.reshape(-1, 1))\n", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"code": "kmeans = KMeans(n_clusters=2).fit(df)\nlabels = kmeans.predict(df)\n", "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"code": "model = LinearSVC(penalty='l1', dual=False)\nmodel.fit(X, y)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[model.coef_ != 0]\n", "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"code": "selected_feature_names = np.asarray(vectorizer.get_feature_names())[featureSelector.get_support()]\n", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"code": "\n    clf = LinearSVC(penalty='l1', dual=False)\n    clf.fit(X, y)\n    model = SelectFromModel(clf, prefit=True)\n    X_new = model.transform(X)\n    selected_feature_names = np.asarray(vectorizer.get_feature_names())[model.get_support()]\n    ### END SOLUTION\n    return selected_feature_names\n", "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"code": "vectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"code": "vectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"code": "vectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"code": "vectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"code": "slopes = []\nfor col in df1.columns[1:]:\n    df2 = df1[~np.isnan(df1[col])]\n    df3 = df2[['Time', col]]\n    npMatrix = np.matrix(df3)\n    X, Y = npMatrix[:,0], npMatrix[:,1]\n    slope = LinearRegression().fit(X,Y)\n    m = slope.coef_[0]\n    slopes.append(m)\n", "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"code": "slopes = []\nfor col in df1.columns[1:]:\n    df2 = df1[~np.isnan(df1[col])]\n    df3 = df2[['Time',col]]\n    npMatrix = np.matrix(df3)\n    X, Y = npMatrix[:,0], npMatrix[:,1]\n    slope = LinearRegression().fit(X,Y)\n    m = slope.coef_[0]\n    slopes.append(m)\n", "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"code": "le = LabelEncoder()\ntransformed_df = df.copy()\ntransformed_df['Sex'] = le.fit_transform(df['Sex'])\n", "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"code": "le = LabelEncoder()\ntransformed_df = df.copy()\ntransformed_df['Sex'] = le.fit_transform(df['Sex'])\n", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"code": "\n    le = LabelEncoder()\n    df['Sex'] = le.fit_transform(df['Sex'])\n    ### END SOLUTION\n    return df\n\ndef load_data():\n    df = pd.read_csv('titanic.csv')\n    return df\n\ndf = Transform(df)\n", "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"code": "ElasticNet = linear_model.ElasticNet() # create a lasso instance\nElasticNet.fit(X_train, y_train) # fit data\n\n# print(lasso.coef_)\n# print (lasso.intercept_) # print out the coefficients\n\nprint (\"R^2 for training set:\"),\nprint (ElasticNet.score(X_train, y_train))\n\nprint ('-'*50)\n\nprint (\"R^2 for test set:\"),\nprint (ElasticNet.score(X_test, y_test))\n", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"code": "scaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1))\n", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"code": "scaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1))\n", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"code": "\n    scaler = MinMaxScaler()\n    scaler.fit(a)\n    new_a = scaler.transform(a)\n    ### END SOLUTION\n    return new_a\n", "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"code": "close_buy1 = close[:-1]\nm5 = ma_50[:-1]\nm10 = ma_100[:-1]\nma20 = ma_200[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict([b])\n", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"code": "\nnew_X = pd.DataFrame(X)\nclf.fit(new_X, ['2', '3'])\n", "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"code": "\nnew_X = pd.DataFrame(X)\nnew_X = pd.get_dummies(new_X)\n", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"code": "new_X = pd.DataFrame(X)\nclf.fit(new_X, ['4', '5'])\n", "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"code": "logReg = LogisticRegression()\nlogReg.fit(dataframe.iloc[:, :-1], dataframe.iloc[:, -1])\npredict = logReg.predict(dataframe.iloc[:, :-1])\n", "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"code": "X = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"code": "train_size = 0.2\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\ntrain_dataframe = train_dataframe.sort_values(by=[\"date\"])\ntest_dataframe = test_dataframe.sort_values(by=[\"date\"])\n", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"code": "train_size = 0.8\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\ntrain_dataframe = train_dataframe.sort_values(by=[\"date\"])\ntest_dataframe = test_dataframe.sort_values(by=[\"date\"])\n", "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"code": "\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n    train_dataframe = train_dataframe.sort_values(by=[\"date\"])\n    test_dataframe = test_dataframe.sort_values(by=[\"date\"])\n    return train_dataframe, test_dataframe\n    ### END SOLUTION\n", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"code": "df[['X2_scale', 'X3_scale']] = df.groupby('Month').transform(lambda x: scaler.fit_transform(x[['X2', 'X3']]))\n", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"code": "cols = myData.columns[2:4]\nmyData[['new_' + col for col in cols]] = myData.groupby('Month')[cols].transform(scaler.fit_transform)\n", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"code": "count = CountVectorizer(lowercase = False, token_pattern=r'[^\\s]+')\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names()\n", "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"code": "count = CountVectorizer(lowercase = False)\n\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names()\n", "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"code": "full_results = pd.DataFrame(GridSearch_fitted.cv_results_)\n", "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"code": "full_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results = full_results.sort_values(by='mean_fit_time', ascending=False)\n", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"code": "import pickle\n\n# Save the model in the file named \"sklearn_model\"\nwith open(\"sklearn_model\", \"wb\") as f:\n    pickle.dump(fitted_model, f)\n", "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"code": "tfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = (tfidf_matrix * tfidf_matrix.T).toarray()\n", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"code": "\noptim.param_groups[0]['lr'] = 0.001\n", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"code": "for param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n", "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"code": "\noptim.param_groups[0]['lr'] = 0.0005\n", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"code": "\noptim.param_groups[0]['lr'] = 0.0005\n", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"code": "embedded_input = torch.from_numpy(np.array([word2vec.wv[word] for word in input_Tensor]))\n", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"code": "\n    embedded_input = torch.zeros(input_Tensor.shape[0], input_Tensor.shape[1], 100)\n    for i in range(input_Tensor.shape[0]):\n        for j in range(input_Tensor.shape[1]):\n            if input_Tensor[i][j] in word2vec.wv.vocab:\n                embedded_input[i][j] = torch.from_numpy(word2vec.wv[input_Tensor[i][j]])\n    ### END SOLUTION\n    return embedded_input\n", "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"code": "px = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"code": "px = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"code": "px = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"code": "C = B[:, A_log.nonzero().squeeze()]\n", "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"code": "C = B[:, A_logical.numpy()]\n", "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"code": "C = B[:, A_log.nonzero().squeeze()]\n", "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"code": "C = B[:, A_log.nonzero().squeeze()]\n", "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"code": "\n    C = B[:, A_log]\n    ### END SOLUTION\n    return C\n", "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"code": "C = B[:, A_log.nonzero().squeeze()]\n", "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"code": "C = B[:, idx]\n", "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"code": "x_tensor = torch.from_numpy(np.array(x_array))\n", "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"code": "x_tensor = torch.from_numpy(np.array(x_array))\n", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"code": "\n    t = torch.tensor(a)\n    ### END SOLUTION\n    return t\n\nt = Convert(x_array)\nprint(t)\n", "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"code": "mask = torch.zeros(len(lens), max(lens)).long()\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n", "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"code": "mask = torch.zeros(len(lens), max(lens), dtype=torch.long)\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"code": "mask = torch.zeros(len(lens), max(lens)).long()\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n", "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"code": "\n    mask = torch.zeros(len(lens), max(lens)).long()\n    for i, l in enumerate(lens):\n        mask[i, :l] = 1\n    ### END SOLUTION\n    return mask\n", "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"code": "Tensor_3D = torch.zeros(Tensor_2D.shape[0], Tensor_2D.shape[1], Tensor_2D.shape[1])\nfor i in range(Tensor_2D.shape[0]):\n    Tensor_3D[i] = torch.diag(Tensor_2D[i])\n", "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"code": "\n    result = torch.diag(t)\n    ### END SOLUTION\n    return result\n\ndef test_Convert():\n    t = torch.tensor([[1,2,3],[4,5,6]])\n    assert np.allclose(Convert(t).numpy(), np.array([[1,0,0],[0,5,0]]))\n    print('Test passed', '\\U0001F44D')\n\ntest_Convert()\n", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"code": "ab = torch.cat((a, b), dim=0)\n", "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"code": "ab = torch.cat((a, b), dim=0)\n", "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"code": "\n    a = torch.tensor(a)\n    b = torch.tensor(b)\n    ab = torch.cat((a, b), 0)\n    ### END SOLUTION\n    return ab\n", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"code": "a = a.numpy()\nfor i in range(len(lengths)):\n    a[i, lengths[i]:, :] = 0\na = torch.from_numpy(a)\n", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"code": "a[:, lengths:, :] = 2333\n", "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"code": "a[:, :lengths.unsqueeze(1), :] = 0\n", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"code": "a[:, :lengths.max(), :] = 2333\n", "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"code": "tensor_of_tensors = torch.stack(list_of_tensors)\n", "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"code": "new_tensors = torch.stack(list)\n", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"code": "\n    tt = torch.stack(lt)\n    ### END SOLUTION\n    return tt\n\ntt = Convert(list_of_tensors)\n", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"code": "tensor_of_tensors = torch.stack(list_of_tensors)\n", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"code": "result = t[np.arange(len(idx)), idx]\n", "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"code": "result = t[np.arange(len(idx)), idx]\n", "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"code": "result = t[np.arange(len(idx)), idx]\n", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"code": "result = torch.gather(x, 1, ids)\n", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"code": "result = torch.gather(x, 1, ids)\n", "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"code": "result = torch.gather(x, 1, ids.unsqueeze(-1).expand(-1, -1, x.shape[-1]))\n", "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"code": "y = torch.argmax(softmax_output, dim=1)\n", "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"code": "y = torch.argmax(softmax_output, dim=1)\n", "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"code": "y = torch.argmin(softmax_output, dim=1)\n", "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"code": "\n    y = torch.argmax(softmax_output, dim=1)\n    ### END SOLUTION\n    return y\n\ny = solve(softmax_output)\nprint(y)\n", "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"code": "y = torch.argmin(softmax_output, dim=1)\n", "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"code": "def cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, w, z), target: (n, w, z)\n    n, c, w, z = input.size()\n    # log_p: (n, c, w, z)\n    log_p = F.log_softmax(input, dim=1)\n    # log_p: (n*w*z, c)\n    log_p = log_p.permute(0, 3, 2, 1).contiguous().view(-1, c)  # make class dimension last dimension\n    log_p = log_p[\n       target.view(n, w, z, 1).repeat(0, 0, 0, c) >= 0]  # this looks wrong -> Should rather be a one-hot vector\n    log_p = log_p.view(-1, c)\n    # target: (n*w*z,)\n    mask = target >= 0\n    target = target[mask]\n    loss = F.nll_loss(log_p, target.view(-1), weight=weight, size_average=False)\n    if size_average:\n        loss /= mask.data.sum()\n    return loss\n\nloss = cross_entropy2d(images, labels)\n", "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"code": "cnt_equal = torch.sum(A == B).item()\n", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"code": "cnt_equal = torch.sum(A == B)\n", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"code": "cnt_not_equal = torch.sum(torch.abs(A - B))\n", "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"code": "\n    cnt_equal = torch.sum(A == B)\n    ### END SOLUTION\n    return cnt_equal\n", "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"code": "cnt_equal = torch.sum(A[-x:] == B[-x:])\n", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"code": "cnt_not_equal = torch.sum(A[-x:] != B[-x:])\n", "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"code": "tensors_31 = []\nfor i in range(a.shape[3] - chunk_dim + 1):\n    tensors_31.append(a[:, :, :, i:i+chunk_dim, :])\n", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"code": "tensors_31 = []\nfor i in range(a.shape[2]):\n    tensors_31.append(a[:, :, i:i+chunk_dim, :, :])\n", "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"code": "output = clean_input_spectrogram * mask.unsqueeze(-1)\n", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"code": "output = clean_input_spectrogram * mask + output * (1 - mask)\n", "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"code": "signed_min = torch.where(torch.abs(x) < torch.abs(y), x, y)\n", "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"code": "signed_max = torch.where(torch.abs(x) > torch.abs(y), x, y)\n", "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"code": "\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = torch.where(torch.abs(x) < torch.abs(y), sign_x * min, sign_y * min)\n    ### END SOLUTION\n    return signed_min\n\nsigned_min = solve(x, y)\n", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"code": "output = MyNet(input)\nconf, classes = torch.max(output.reshape(1, 3), 1)\n", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"code": "result = torch.cat([a[:, :-1], (a[:, -1:] + b[:, :1]) / 2, b[:, 1:]], dim=1)\n", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"code": "\n    a = torch.Tensor([[1, 2, 3], [1, 2, 3]])\n    b = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n    c = torch.cat((a[:, :2], (a[:, 2:] + b[:, :1])/2, b[:, 1:]), dim=1)\n    ### END SOLUTION\n    return c\n", "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"code": "t = torch.arange(8).reshape(1,4,2).float()\nprint(t)\nnew=torch.tensor([[0., 0., 0.,0.]])\nprint(new)\nr = torch.stack([t,new])  # invalid argument 0: Tensors must have same number of dimensions: got 4 and 3\nnew=torch.tensor([[[0., 0., 0.,0.]]])\nprint(new)\nr = torch.stack([t,new])  # invalid argument 0: Sizes of tensors must match except in dimension 0.\n", "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"code": "t = torch.arange(4).reshape(1,2,2).float()\nprint(t)\nnew=torch.tensor([[0., 0., 0.,0.]])\nprint(new)\nr = torch.stack([t,new])  # invalid argument 0: Tensors must have same number of dimensions: got 4 and 3\nnew=torch.tensor([[[0., 0., 0.,0.]]])\nprint(new)\nr = torch.stack([t,new])  # invalid argument 0: Sizes of tensors must match except in dimension 0.\n", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"code": "t = torch.arange(8).reshape(1,4,2).float()\nnew=torch.tensor([[-1, -1, -1, -1,]])\nnew=torch.tensor([[[-1, -1, -1, -1,]]])\nt = torch.cat((new, t, new), dim=0)\nt = torch.cat((new.T, t, new.T), dim=1)\n", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"code": "result = torch.bmm(data, W.unsqueeze(0).unsqueeze(0).expand(10, 2 * 3, hid_dim)).squeeze()\n", "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
