{"id": 0, "code": ["```python\nresult = df.iloc[[2, 4, 0, 3, 1, 5]].reset_index(drop=True)\n```"], "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": ["```python\nshuffled_df = df.iloc[List].reset_index(drop=True)\n\noriginal_types = df['Type']\nshuffled_types = shuffled_df['Type']\n\ndifferent_type_count = (original_types != shuffled_types).sum()\nresult = different_type_count\n```\n"], "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": ["```python\nresult = df.apply(lambda col: col.where(col.map(col.value_counts()) >= 2, 'other'))\n```"], "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": ["```python\nresult = df.apply(lambda col: col.where(col.isin(col.value_counts()[col.value_counts() >= 3].index), 'other'))\n```\n"], "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": ["```python\n    df = df.copy()\n    for col in df.columns:\n        counts = df[col].value_counts()\n        mask = df[col].isin(counts[counts >= 2].index)\n        df[col] = df[col].where(mask, 'other')\n    return df\n\nresult = f(example_df)\n```"], "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": ["```python\nresult = df.copy()\n\n# Update Qu1\ncounts_Qu1 = df['Qu1'].value_counts()\nresult['Qu1'] = result['Qu1'].apply(lambda x: x if counts_Qu1[x] >= 3 else 'other')\n\n# Update Qu2\n# No changes needed for Qu2 as per example\n\n# Update Qu3\ncounts_Qu3 = df['Qu3'].value_counts()\nresult['Qu3'] = result['Qu3'].apply(lambda x: x if counts_Qu3[x] >= 2 else 'other')\n\nresult\n```"], "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": ["```python\ndef replace_values(series, threshold, keep_values=[]):\n    counts = series.value_counts()\n    to_replace = counts[counts < threshold].index.difference(keep_values)\n    return series.apply(lambda x: 'other' if x in to_replace else x)\n\ndf['Qu1'] = replace_values(df['Qu1'], 3, ['apple'])\ndf['Qu3'] = replace_values(df['Qu3'], 2)\n\nresult = df\n"], "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": ["```python\nresult = df.loc[df['keep_if_dup'] == 'Yes'].append(df.loc[df['keep_if_dup'] != 'Yes'].drop_duplicates(subset='url', keep='first'))\nprint(result)\n```\n"], "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": ["```python\nresult = df[(df['drop_if_dup'] == 'No') | ~df.duplicated('url', keep='first')]\n```\n"], "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": ["```python\nresult = df[df['keep_if_dup'] == 'Yes'].append(\n    df[df['keep_if_dup'] != 'Yes'].drop_duplicates(subset='url', keep='last')\n).sort_index()\n```"], "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": ["```python\nresult = {}\nfor _, row in df.iterrows():\n    lvl = result\n    for col in df.columns[:-2]:\n        lvl = lvl.setdefault(row[col], {})\n    lvl[row[df.columns[-2]]] = row[df.columns[-1]]\n\nresult\n```"], "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": ["```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```"], "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": ["```python\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    return df\n### END SOLUTION\n```"], "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": ["```python\ndf['datetime'] = df['datetime'].dt.tz_convert(None)\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf = df.sort_values(by='datetime')\n```\n"], "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": ["```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values(by='datetime')\n```"], "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": ["```python\nimport re\n\n# Function to extract key-value pairs\ndef extract_kvpairs(message):\n    pairs = re.findall(r'(\\w+):\\s*(\\w+)', message)\n    return {k: v for k, v in pairs}\n\n# Extract key-value pairs and expand into new columns\nexpanded_cols = df['message'].apply(extract_kvpairs).apply(pd.Series).fillna('none')\n\n# Concatenate the original df with the expanded columns\nresult = pd.concat([df.drop(columns=['message']), expanded_cols], axis=1)\n\nprint(result)\n```\n"], "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": ["```python\ndf.loc[df['product'].isin(products), 'score'] *= 10\n```"], "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": ["```python\ndf['score'] = df.apply(\n    lambda row: row['score'] if row['product'] in products else row['score'] * 10,\n    axis=1\n)\n```"], "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": ["```python\nfor product_range in products:\n    df.loc[df['product'].between(product_range[0], product_range[1]), 'score'] *= 10\n```"], "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": ["```python\nselected_products = [1069104, 1069105]\n\n# Get the min and max scores for the selected products\nmin_score = df[df['product'].isin(selected_products)]['score'].min()\nmax_score = df[df['product'].isin(selected_products)]['score'].max()\n\n# Apply Min-Max Normalization to the selected products' scores\ndf.loc[df['product'].isin(selected_products), 'score'] = df.loc[df['product'].isin(selected_products), 'score'].apply(\n    lambda x: (x - min_score) / (max_score - min_score)\n)\n```\n"], "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": ["```python\ndf['category'] = df.idxmax(axis=1)\n```"], "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": ["```python\ndf['category'] = df.idxmin(axis=1)\n```"], "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": ["```python\ndf['category'] = df.apply(lambda row: [col for col in df.columns if row[col] == 1], axis=1)\n```\n"], "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": ["```python\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\nEND SOLUTION\n```"], "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": ["```python\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n```"], "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'Date': ['2018-01-01', '2018-02-08', '2018-02-08', '2018-02-08', '2018-02-08']})\ndf['Date'] = pd.to_datetime(df['Date'])\nstart_date, end_date = pd.to_datetime(['2017-08-17', '2018-01-31'])\n\ndf['Date'] = df['Date'].where(df['Date'].between(start_date, end_date))\ndf.dropna(inplace=True)\n\ndf['Formatted_Date'] = df['Date'].dt.strftime('%d-%b-%Y %A')\ndf = df[['Formatted_Date']]\n\nprint(df)\n```\n"], "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": ["```python\nfirst_col = df['#1']\nshifted_col = first_col.shift(1).fillna(first_col.iloc[-1])\ndf['#1'] = shifted_col\n```"], "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": ["```python\ndf['#1'] = df['#1'].shift(-1)\ndf['#1'].iloc[-1] = df['#1'].iloc[0]\ndf = df.iloc[1:].append(df.iloc[0]).reset_index(drop=True)\ndf.index = ['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04', '1980-01-05']\ndf\n```"], "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": ["```python\ndf['#1'] = df['#1'].shift(1, fill_value=df['#1'].iloc[-1])\ndf['#2'] = df['#2'].shift(-1, fill_value=df['#2'].iloc[0])\n```"], "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": ["```python\nfor _ in range(len(df)):\n    # Shift the values down in column #1\n    df['#1'] = df['#1'].shift(1)\n    # Move the last value to the top\n    df['#1'].iloc[0] = df['#1'].iloc[-1]\n\n# Resulting dataframe\ndf = df.iloc[:-1].append(df.iloc[-1:]).reset_index(drop=True)\n\nprint(df)\n```\n"], "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": ["```python\ndf.columns = [col + 'X' for col in df.columns]\n```\n```"], "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": ["```python\ndf.columns = ['X' + col for col in df.columns]\n```\n"], "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": ["```python\ndf.columns = ['X' + col + ('X' if not col.endswith('X') else '') for col in df.columns]\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": ["```python\nresult = df.groupby('group').agg({**{'group_color': 'first'}, **{col: 'mean' for col in df.columns if col.startswith('val')}})\n```\n"], "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": ["```python\nvalue_columns = [col for col in df.columns if col.startswith('val')]\nresult = df.groupby('group').agg({**{\"group_color\": \"first\"}, **{col: \"sum\" for col in value_columns}})\n```"], "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": ["```python\nagg_dict = {'group_color': 'first'}\n\n# Iterate through the columns to define aggregation rules\nfor col in df.columns:\n    if col.startswith('val'):\n        if col.endswith('2'):\n            agg_dict[col] = 'mean'\n        else:\n            agg_dict[col] = 'sum'\n\nresult = df.groupby('group').agg(agg_dict)\n```\n"], "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": ["```python\nresult = df.loc[row_list, column_list].mean()\n```"], "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": ["```python\nresult = df.loc[row_list, column_list].sum()\n```\n"], "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": ["```python\nresult = df.loc[row_list, column_list].sum()\nresult = result.drop(result.idxmax())\n```\n"], "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": ["```python\nresult = df.apply(pd.value_counts).fillna(0).stack()\n```"], "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": ["```python\nresult = df.apply(lambda x: x[x == 'null'].count())\nresult = result.astype(float)\n```"], "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": ["```python\nresult = \"\\n\".join(\n    f\"---- {col} ---\\n{df[col].value_counts()}\\nName: {col}, dtype: {df[col].dtype}\"\n    for col in df.columns\n)\nprint(result)\n```\n"], "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": ["```python\ndf.columns = df.iloc[0] + ' | ' + df.iloc[1].astype(str)\ndf = df.drop(0).reset_index(drop=True)\nresult = df\n```"], "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": ["```python\nresult = df.copy()\nresult.columns = df.iloc[0]\nresult = result.drop(0).reset_index(drop=True)\n```"], "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": ["```python\nresult = pd.DataFrame(np.sort(df.values, axis=1)[:, ::-1], columns=df.columns)\n```"], "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": ["```python\nresult = df.apply(lambda x: pd.Series(sorted(x, key=pd.isnull)), axis=1)\n```"], "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": ["```python\nresult = df.apply(lambda x: pd.Series(sorted(x, key=pd.isnull)), axis=1)\n```"], "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": ["```python\nbelow_threshold = df[df['value'] < thresh].sum()\nabove_threshold = df[df['value'] >= thresh]\nnew_row = pd.DataFrame({'value': [below_threshold['value']]}, index=['X'])\nresult = pd.concat([above_threshold, new_row])\nresult\n```"], "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'lab': ['A', 'B', 'C', 'D', 'E', 'F'], 'value': [50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nthresh = 6\n\n# Separate the rows\nabove_thresh = df[df['value'] > thresh]\nbelow_thresh = df[df['value'] <= thresh]\n\n# Calculate the average of the rows above the threshold\navg_value = above_thresh['value'].mean()\n\n# Create a new row with the average\nnew_row = pd.DataFrame({'value': [avg_value]}, index=['X'])\n\n# Combine the dataframes\nresult = pd.concat([below_thresh, new_row])\n\nprint(result)\n```\n"], "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": ["```python\noutside_section = df[(df['value'] < section_left) | (df['value'] > section_right)]\ninside_section = df[(df['value'] >= section_left) & (df['value'] <= section_right)]\n\navg_value = outside_section['value'].mean()\naggregated_row = pd.DataFrame({'value': [avg_value]}, index=['X'])\n\nresult = pd.concat([inside_section, aggregated_row])\nprint(result)\n```\n"], "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": ["```python\nresult = df.copy()\nresult = result.join(df.rdiv(1).add_prefix('inv_'))\n```\n"], "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nexp_df = df.apply(np.exp).rename(columns=lambda x: f'exp_{x}')\nresult = pd.concat([df, exp_df], axis=1)\n```"], "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": ["```python\nresult = df.assign(**{f\"inv_{col}\": df[col].replace(0, None).rdiv(1) for col in df.columns})\n```\n"], "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nsigmoid = lambda x: 1 / (1 + np.exp(-x))\nresult = df.copy()\n\nfor col in df.columns:\n    result[f\"sigmoid_{col}\"] = sigmoid(df[col])\n```\n"], "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": ["```python\nresult = df.apply(lambda col: col[:col.idxmin()].idxmax())\n```\n"], "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": ["```python\nresult = df.apply(lambda col: col.loc[col.idxmin():].idxmax())\n```\n"], "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": ["```python\ndf.set_index('dt', inplace=True)\n\nusers = df['user'].unique()\n\nmin_date = df.index.min()\nmax_date = df.index.max()\n\nall_dates = pd.date_range(start=min_date, end=max_date)\n\nresult = pd.DataFrame()\n\nfor user in users:\n    user_df = df[df['user'] == user].reindex(all_dates).fillna({'user': user, 'val': 0})\n    user_df['user'] = user_df['user'].fillna(user)\n    result = result.append(user_df)\n\nresult.reset_index(inplace=True)\nresult.rename(columns={'index': 'dt'}, inplace=True)\n```\n"], "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": ["```python\nresult = (df.set_index('dt')\n          .groupby('user')\n          .apply(lambda g: g.reindex(pd.date_range(g.index.min(), g.index.max(), freq='D')))\n          .fillna(0)\n          .reset_index())\n\nresult['user'] = result['user'].fillna(method='ffill')\n```\n"], "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'user': ['a','a','b','b'], 'dt': ['2016-01-01','2016-01-02', '2016-01-05','2016-01-06'], 'val': [1,33,2,1]})\ndf['dt'] = pd.to_datetime(df['dt'])\n\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\nall_dates = pd.date_range(start=min_date, end=max_date)\n\nresult = (df.set_index('dt')\n          .groupby('user')\n          .apply(lambda group: group.reindex(all_dates, fill_value=233))\n          .reset_index(level=0, drop=True)\n          .reset_index())\n\nresult['user'] = result['user'].ffill()\nresult = result[['dt', 'user', 'val']]\n\nprint(result)\n```"], "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": ["```python\nresult = df.groupby('user').apply(\n    lambda g: g.set_index('dt').reindex(\n        pd.date_range(g['dt'].min(), g['dt'].max()),\n        method='ffill'\n    ).fillna(method='ffill').assign(val=g['val'].max())\n).reset_index().rename(columns={'level_1': 'dt'})\n\nresult\n```\n"], "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": ["```python\nidx = pd.date_range(df['dt'].min(), df['dt'].max())\ndf = df.set_index('dt')\n\nresult = (df.groupby('user')\n             .apply(lambda x: x.reindex(idx, method='ffill', fill_value=x['val'].max()))\n             .reset_index()\n             .rename(columns={'level_1': 'dt'}))\n\nresult['val'] = result.groupby('user')['val'].transform('max')\nresult['dt'] = result['dt'].dt.strftime('%d-%b-%Y')\n\nprint(result)\n```\n"], "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": ["```python\ndf['name'] = df['name'].astype('category').cat.codes + 1\nresult = df\n```"], "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": ["```python\ndf['a'] = df.groupby('name').cumcount() + 1\nresult = df\n```"], "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": ["```python\n    df['name'] = df['name'].astype('category').cat.codes + 1\n    return df\n```\n"], "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": ["```python\ndf['ID'] = df.groupby(['name', 'a']).ngroup() + 1\nresult = df.drop(['name', 'a'], axis=1)\n```"], "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": ["```python\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf['value'] = df['value'].abs()\ndf = df[['user', 'date', 'value', 'someBool']]\ndf\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": ["```python\ndf = df.melt(id_vars=['user', '01/12/15'], var_name='others', value_name='value')\ndf = df[['user', '01/12/15', 'others', 'value']]\n```\n"], "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": ["```python\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna(subset=['value']).sort_values(by=['user', 'date']).reset_index(drop=True)\n"], "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": ["```python\nresult = df.loc[df['c'] > 0.5, columns].to_numpy()\n```"], "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": ["```python\nresult = df.loc[df['c'] > 0.45, columns].to_numpy()\n```"], "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": ["```python\n    result = df.loc[df['c'] > 0.5, columns].to_numpy()\n    return result\n```"], "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": ["```python\n    subset = df[df['c'] > 0.5][columns]\n    subset['sum'] = subset.sum(axis=1)\n    return subset\n\nresult = f(df, ['a', 'd'])\nprint(result)\n```"], "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": ["```python\n    return df.loc[df['c'] > 0.5, columns]\n```"], "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'ID': [1, 2, 3, 4, 5, 6, 7],\n    'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n    'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]\n})\n\nX = 120\n\n# Convert 'date' to datetime format\ndf['date'] = pd.to_datetime(df['date'])\n\n# Sort by date\ndf = df.sort_values('date').reset_index(drop=True)\n\n# Initialize list to hold non-overlapping indices\nfiltered_indices = []\n\n# Iterate over each date, ensuring non-overlapping constraint\ncurrent_date = pd.Timestamp.min\nfor index, row in df.iterrows():\n    if (row['date'] - current_date).days > X:\n        filtered_indices.append(index)\n        current_date = row['date']\n\n# Filter the dataframe based on non-overlapping indices\nresult = df.loc[filtered_indices]\n\n# Print or return the result\nprint(result)\n```\n"], "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": ["```python\nimport pandas as pd\nfrom datetime import timedelta\n\n# Convert 'date' to datetime\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Sort by date\ndf = df.sort_values('date')\n\n# Initialize an empty DataFrame to hold the filtered rows\nfiltered = pd.DataFrame(columns=df.columns)\n\n# Loop through each row and add to the filtered DataFrame if it doesn't overlap with the previous rows\nfor index, row in df.iterrows():\n    if filtered.empty or (row['date'] - pd.to_datetime(filtered.iloc[-1]['date']) > timedelta(weeks=X)):\n        filtered = filtered.append(row)\n\n# Set result to the filtered DataFrame\nresult = filtered\n\n# Remove 'END SOLUTION' markers and ensure variables are correct\nresult = result.reset_index(drop=True)\nresult = result[['ID', 'date', 'close']]\n\nresult\n```\n"], "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": ["```python\nimport pandas as pd\nfrom datetime import timedelta\n\ndf = pd.DataFrame({\n    'ID': [1, 2, 3, 4, 5, 6, 7],\n    'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n    'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]\n})\n\n# Convert date to datetime format\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\nX = 52  # weeks\nX_days = X * 7\n\n# Sort by date\ndf = df.sort_values(by='date')\n\nresult = pd.DataFrame(columns=df.columns)\nlast_accepted_date = pd.to_datetime('1900-01-01')  # Initialize to a very old date\n\nfor index, row in df.iterrows():\n    if (row['date'] - last_accepted_date).days > X_days:\n        result = result.append(row)\n        last_accepted_date = row['date']\n\n# Convert date back to the desired format\nresult['date'] = result['date'].dt.strftime('%d-%b-%Y')\n\nprint(result)\n```\n"], "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": ["```python\nresult = df['col1'].groupby(df.index // 3).mean().reset_index(drop=True)\nprint(result)\n```\n"], "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": ["```python\nresult = df.groupby(df.index // 3).sum().reset_index(drop=True)\n```\n"], "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": ["```python\nresult = df.groupby(df.index // 4).sum().reset_index(drop=True)\n```"], "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0]})\n\n# Reverse the DataFrame's rows\nreversed_df = df[::-1].reset_index(drop=True)\n\n# Group every 3 rows and take the mean\nbinned_means = reversed_df.groupby(reversed_df.index // 3).mean().iloc[::-1]\n\nresult = binned_means.reset_index(drop=True)\n\nprint(result)\n```\n"], "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'col1': [2, 1, 3, 1, 0, 2, 1, 3, 1]})\n\n# Create a function to process the dataframe in chunks\ndef process_dataframe(df):\n    result = []\n    i = 0\n    n = len(df)\n    while i < n:\n        # Sum every 3 rows\n        if i + 2 < n:\n            sum_value = df.iloc[i:i+3].sum().values[0]\n            result.append(sum_value)\n            i += 3\n        # Average every 2 rows\n        if i + 1 < n:\n            avg_value = df.iloc[i:i+2].mean().values[0]\n            result.append(avg_value)\n            i += 2\n    return pd.DataFrame(result, columns=['col1'])\n\nresult = process_dataframe(df)\nprint(result)\n```\n"], "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0, 2, 1, 3, 1]})\n\n# Function to process the dataframe\ndef bin_df(data, sum_l, avg_l):\n    result = []\n    i = len(data)  # start from the end\n    while i > 0:\n        # Get sum of 'sum_l' rows\n        if i >= sum_l:\n            result.append(data.iloc[i-sum_l:i]['col1'].sum())\n            i -= sum_l\n        # Get average of 'avg_l' rows\n        if i >= avg_l:\n            result.append(data.iloc[i-avg_l:i]['col1'].mean())\n            i -= avg_l\n    # Reverse the result since we need it from end\n    return result[::-1]\n\nresult = pd.DataFrame({'col1': bin_df(df, 3, 2)})\n\nprint(result)\n```\n"], "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": ["```python\ndf = df.replace(0, method='ffill')\n```\n"], "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": ["```python\ndf = df.replace(0, method='bfill')\n```"], "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": ["```python\nimport pandas as pd\n\nindex = range(14)\ndata = [1, 0, 0, 2, 0, 4, 6, 8, 0, 0, 0, 0, 2, 1]\ndf = pd.DataFrame(data=data, index=index, columns=['A'])\n\nforward_fill = df['A'].replace(0, method='ffill')\nbackward_fill = df['A'].replace(0, method='bfill')\n\ndf['A'] = forward_fill.combine(backward_fill, max)\ndf\n```"], "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": ["```python\ndf['number'] = df['duration'].str.extract('(\\d+)').astype(int)\ndf['time'] = df['duration'].str.extract('([a-zA-Z]+)')\nduration_map = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_days'] = df['time'].map(duration_map)\ndf\n```\n"], "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']},\n                  index=list(range(1, 5)))\n\ndf['time'] = df['duration'].str.extract(r'([a-zA-Z]+)')\ndf['number'] = df['duration'].str.extract(r'(\\d+)').astype(int)\n\ntime_day_map = {\n    'year': 365,\n    'month': 30,\n    'week': 7,\n    'day': 1\n}\n\ndf['time_day'] = df['time'].map(time_day_map)\n\nprint(df)\n```\n"], "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": ["```python\n    df['number'] = df['duration'].str.extract(r'(\\d+)').astype(int)\n    df['time'] = df['duration'].str.extract(r'(\\D+)').str.strip()\n    time_days_mapping = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\n    df['time_days'] = df['time'].map(time_days_mapping)\n    return df\n\nresult = f()\nresult\n```"], "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']},\n                  index=list(range(1,5)))\n\ndf['time'] = df['duration'].str.extract(r'([A-Za-z]+)')\ndf['number'] = df['duration'].str.extract(r'(\\d+)').astype(int)\n\ntime_day_mapping = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_day'] = df['time'].map(time_day_mapping) * df['number']\n\ndf\n```"], "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": ["```python\nimport numpy as np\n\n# Check if any values in corresponding columns differ between df1 and df2\nresult = np.any(df1[columns_check_list] != df2[columns_check_list], axis=1)\nresult_list = result.tolist()\nprint(result_list)  # Output: [False, True, False]\n```\n"], "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": ["```python\nimport numpy as np\n\nresult = np.all([df1[col] == df2[col] for col in columns_check_list], axis=0)\nprint(result.tolist())  # Output: [True, False, True]\n```"], "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": ["```python\ndf.index = pd.MultiIndex.from_tuples(\n    [(id_val, pd.to_datetime(date_val)) for id_val, date_val in df.index],\n    names=df.index.names\n)\n```"], "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": ["```python\ndf.index = df.index.set_levels([df.index.levels[0], pd.to_datetime(df.index.levels[1])])\n```"], "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": ["```python\n    df.index = pd.to_datetime(df.index.get_level_values('date'))\n    result = df.reset_index(level='id', drop=True).to_records(index=True)\n    return result\n```"], "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": ["```python\n    df.index = df.index.set_levels([pd.to_datetime(df.index.levels[0], format='%m/%d/%Y'), df.index.levels[1]])\n    return df.swaplevel()\n```"], "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": ["```python\ndf = df.melt(id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\n```\n"], "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": ["```python\ndf = df.melt(id_vars=['Country', 'Variable'], var_name='year')\ndf = df.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf = df.sort_values(by='year', ascending=False).reset_index(drop=True)\nEND SOLUTION\n```"], "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": ["```python\nvalue_columns = df.filter(like='Value').columns\ndf = df[(df[value_columns].abs() < 1).all(axis=1)]\n```\n"], "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": ["```python\nvalue_cols = df.filter(like='Value_').columns\ndf = df[(df[value_cols].abs() > 1).any(axis=1)]\n```\n"], "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": ["```python\nvalue_columns = df.columns[df.columns.str.startswith('Value_')]\n\nfiltered_df = df[(df[value_columns].abs() > 1).any(axis=1)]\n\nfiltered_df.columns = filtered_df.columns.str.replace('Value_', '')\n\nfiltered_df\n```\n"], "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": ["```python\ndf = df.applymap(lambda x: x.replace('&AMP;', '&') if isinstance(x, str) else x)\n```"], "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'A': ['Good &LT bad', 'BB', 'CC', 'DD', 'Good &LT; bad'], 'B': range(5), 'C': ['Good &LT; bad'] * 5})\n\ndf = df.applymap(lambda x: x.replace('&LT', '<') if isinstance(x, str) else x)\n```\nEND SOLUTION"], "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": ["```python\n    df = df.applymap(lambda x: x.replace('&AMP;', '&') if isinstance(x, str) else x)\n    return df\n```"], "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": ["```python\ndf = df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n```"], "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": ["```python\ndf = df.applymap(lambda x: str(x).replace('&AMP;', '&')).replace('&', eval)\nEND SOLUTION\n```"], "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": ["```python\nimport pandas as pd\n\nname_df = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane Smith', 'Juan de la Cruz']})\n\ndef split_name(name):\n    parts = name.split(' ')\n    if len(parts) == 2:\n        return pd.Series([parts[0], parts[1]])\n    else:\n        return pd.Series([name, None])\n\nname_df[['first_name', 'last_name']] = name_df['name'].apply(split_name)\nresult_df = name_df[['first_name', 'last_name']]\nresult_df\n```\n"], "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": ["```python\nimport pandas as pd\n\nname_df = pd.DataFrame({'name': ['Jack Fine', 'Kim Q. Danger', 'Jane Smith', 'Juan de la Cruz']})\n\ndef split_name(name):\n    if name.count(' ') == 1:\n        return name.split()\n    else:\n        return [name, '']\n\nresult = name_df['name'].apply(split_name)\nname_df[['1_name', '2_name']] = pd.DataFrame(result.tolist(), index=name_df.index)\n\ndf = name_df[['1_name', '2_name']]\n```"], "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'name': ['Jack Fine', 'Kim Q. Danger', 'Jane 114 514 Smith', 'Zhongli']})\n\ndef split_name(name):\n    parts = name.split()\n    if len(parts) > 1:\n        return pd.Series([parts[0], ' '.join(parts[1:-1]) if len(parts) > 2 else np.nan, parts[-1]])\n    else:\n        return pd.Series([parts[0], np.nan, np.nan])\n\ndf[['first_name', 'middle_name', 'last_name']] = df['name'].apply(split_name)\ndf.drop(columns='name', inplace=True)\n\ndf\n```\n"], "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": ["```python\nresult = pd.merge_asof(df2, df1, on='Timestamp')\n```\n"], "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": ["```python\nresult = pd.merge_asof(df1.sort_values('Timestamp'), \n                       df2.sort_values('Timestamp'), \n                       on='Timestamp', direction='backward')\n```\n```"], "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": ["```python\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] <= 50 and row['col3'] <= 50 else max(row['col1'], row['col2'], row['col3']), axis=1)\ndf\n```"], "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": ["```python\ndf['state'] = df.apply(\n    lambda row: row['col1'] if row['col2'] > 50 and row['col3'] > 50 else row['col1'] + row['col2'] + row['col3'],\n    axis=1\n)\n```"], "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": ["```python\nerrors = []\n\nfor idx, row in df.iterrows():\n    value = row['Field1']\n    if not (isinstance(value, int) or (isinstance(value, float) and value.is_integer())):\n        errors.append(value)\n\nerrors\n```\n"], "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": ["```python\ndf = pd.to_numeric(df['Field1'], errors='coerce').dropna().astype(int)\nresult = df.tolist()\nresult\n```\n"], "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": ["```python\n    errors = []\n    for value in df['Field1']:\n        if not isinstance(value, int):\n            errors.append(value)\n    return errors\n\nresult = f(example_df)\n```"], "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": ["```python\ndf.set_index('cat', inplace=True)\ndf = df.div(df.sum(axis=1), axis=0).reset_index().round(3)\n```\n"], "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": ["```python\ndf.iloc[:, 1:] = df.iloc[:, 1:].div(df.iloc[:, 1:].sum())\ndf\n```"], "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": ["```python\nresult = df.loc[test]\n```"], "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": ["```python\nresult = df.loc[test]\n```\n```"], "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": ["```python\nresult = df.drop(test)\n```"], "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": ["```python\n    result = df.loc[list(dict.fromkeys(test))]\n    return result\n```\n"], "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": ["```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.spatial import distance\n\ntime = [0, 0, 0, 1, 1, 2, 2]\nx = [216, 218, 217, 280, 290, 130, 132]\ny = [13, 12, 12, 110, 109, 3, 56]\ncar = [1, 2, 3, 1, 3, 4, 5]\ndf = pd.DataFrame({'time': time, 'x': x, 'y': y, 'car': car})\n\ndef find_nearest_neighbours(group):\n    coords = group[['x', 'y']].to_numpy()\n    min_distances = []\n    nearest_cars = []\n\n    for i, coord in enumerate(coords):\n        dists = distance.cdist([coord], coords, 'euclidean')[0]\n        dists[i] = np.inf  # Ignore self-distance\n        nearest_idx = np.argmin(dists)\n        nearest_cars.append(group.iloc[nearest_idx]['car'])\n        min_distances.append(dists[nearest_idx])\n\n    return pd.DataFrame({\n        'car': group['car'],\n        'nearest_neighbour': nearest_cars,\n        'euclidean_distance': min_distances\n    })\n\ndf2 = df.groupby('time').apply(find_nearest_neighbours).reset_index(drop=True)\nprint(df2)\n```\n"], "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ntime = [0, 0, 0, 1, 1, 2, 2]\nx = [216, 218, 217, 280, 290, 130, 132]\ny = [13, 12, 12, 110, 109, 3, 56]\ncar = [1, 2, 3, 1, 3, 4, 5]\n\ndf = pd.DataFrame({'time': time, 'x': x, 'y': y, 'car': car})\n\ndef find_farmost_neighbour(group):\n    distances = {}\n    for idx1, row1 in group.iterrows():\n        max_dist = 0\n        farmost_neighbour = None\n        for idx2, row2 in group.iterrows():\n            if row1['car'] != row2['car']:\n                dist = np.sqrt((row1['x'] - row2['x'])**2 + (row1['y'] - row2['y'])**2)\n                if dist > max_dist:\n                    max_dist = dist\n                    farmost_neighbour = row2['car']\n        distances[row1['car']] = (farmost_neighbour, max_dist)\n    return pd.DataFrame([(group['time'].iloc[0], car, neighbour, dist) \n                         for car, (neighbour, dist) in distances.items()],\n                        columns=['time', 'car', 'farmost_neighbour', 'euclidean_distance'])\n\ndf2 = df.groupby('time').apply(find_farmost_neighbour).reset_index(drop=True)\ndf2\n```\n"], "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": ["```python\ndf['keywords_all'] = df.apply(lambda row: ','.join(row.dropna()), axis=1)\ndf\n```"], "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": ["```python\ndf['keywords_all'] = df.apply(lambda row: '-'.join(row.dropna()), axis=1)\nEND SOLUTION\n```"], "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": ["```python\ndf = df.copy()  # Avoid modifying original df\ndf[\"keywords_all\"] = df[['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']].apply(\n    lambda row: '-'.join(row.dropna()), axis=1)\n```\n"], "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": ["```python\ndf['keywords_all'] = df[['keywords_3', 'keywords_2', 'keywords_1', 'keywords_0']].apply(\n    lambda row: '-'.join(row.dropna()), axis=1)\n```\nEND SOLUTION\n<code>\n```"], "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": ["```python\nsample_indices = df.sample(frac=0.2, random_state=0).index\ndf.loc[sample_indices, 'Quantity'] = 0\n```\n"], "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": ["```python\nsample_indices = df.sample(frac=0.2, random_state=0).index\ndf.loc[sample_indices, 'ProductId'] = 0\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": ["```python\ndf.loc[df.groupby('UserId').sample(frac=0.2, random_state=0).index, 'Quantity'] = 0\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": ["```python\nduplicates = df[df.duplicated(subset=['col1', 'col2'], keep=False)]\nduplicates['index_original'] = duplicates.apply(lambda row: df[(df['col1'] == row['col1']) & (df['col2'] == row['col2'])].index[0], axis=1)\nresult = duplicates\n```\n"], "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": ["```python\nresult = df[df.duplicated(subset=['col1', 'col2'], keep='last')].copy()\nresult['index_original'] = df.loc[df.duplicated(subset=['col1', 'col2'], keep='first'), :].index\nresult\n```\n"], "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": ["```python\n    duplicate_bool = df.duplicated(subset=['col1', 'col2'], keep='first')\n    duplicate = df.loc[duplicate_bool]\n\n    # Use groupby to find the first index of each duplicate group\n    first_indices = df[~duplicate_bool].groupby(['col1', 'col2']).ngroup().to_dict()\n    duplicate['index_original'] = duplicate.apply(lambda row: first_indices.get((row['col1'], row['col2'])), axis=1)\n\n    return duplicate\n\nresult = f(df)\n```"], "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": ["```python\nduplicate_bool = df.duplicated(subset=['col1', 'col2', '3col'], keep='first')\nduplicates = df.loc[duplicate_bool].copy()\n\nfirst_indices = df[df.duplicated(subset=['col1', 'col2', '3col'], keep=False)].groupby(['col1', 'col2', '3col']).first().index\nduplicate_index_map = {k: v for k, v in zip(duplicates.index, first_indices)}\n\nduplicates['index_original'] = duplicates.index.map(duplicate_index_map)\nresult = duplicates\nresult\n```"], "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": ["```python\n# Find all duplicates, marking the last occurrence\nduplicate_bool = df.duplicated(subset=['col1', 'col2'], keep='last')\n\n# Get the index of the last duplicate\nlast_indices = df[duplicate_bool].index.map(\n    lambda i: df.loc[i:][df.loc[i:].duplicated(subset=['col1', 'col2'], keep=False)].index[-1]\n)\n\n# Create the new DataFrame with the additional column\nresult = df.loc[duplicate_bool].copy()\nresult['index_original'] = last_indices.values\n\nresult\n```\n"], "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": ["```python\nresult = df[df.groupby(['Sp', 'Mt'])['count'].transform(max) == df['count']]\n```\n"], "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": ["```python\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n```"], "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": ["```python\nresult = df[df.groupby(['Sp', 'Mt'])['count'].transform('min') == df['count']]\n```"], "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": ["```python\nresult = df[df.groupby(['Sp', 'Value'])['count'].transform('max') == df['count']]\n```\n"], "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": ["```python\nresult = df.query(\"Category in @filter_list\")\n```"], "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": ["```python\nresult = df[~df['Category'].isin(filter_list)]\n```"], "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": ["```python\nresult = pd.melt(df, value_vars=df.columns.tolist())\n```\n"], "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": ["```python\nresult = df.stack(level=[0, 1]).reset_index(name='value')\nresult.columns = [f'variable_{i}' for i in range(len(result.columns) - 1)] + ['value']\nprint(result)\n```"], "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```"], "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```"], "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```"], "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": ["```python\ndf['cummax'] = df.groupby('id')['val'].cummax()\n```"], "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": ["```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum().clip(lower=0)\n```"], "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": ["```python\nresult = df.groupby('l')['v'].apply(lambda x: x.sum() if not x.isnull().any() else np.nan)\n```"], "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": ["```python\nresult = df.groupby('r')['v'].apply(lambda x: x.sum() if not x.isnull().any() else np.nan)\n```"], "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": ["```python\nresult = df.groupby('l')['v'].agg(lambda x: x.sum() if not x.isna().any() else np.nan).reset_index()\n```\n"], "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": ["```python\nresult = []\n\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            unique_col1 = df[col1].nunique()\n            unique_col2 = df[col2].nunique()\n            if unique_col1 == len(df) and unique_col2 == len(df):\n                relation = 'one-to-one'\n            elif unique_col1 == len(df):\n                relation = 'one-to-many'\n            elif unique_col2 == len(df):\n                relation = 'many-to-one'\n            else:\n                relation = 'many-to-many'\n            result.append(f'{col1} {col2} {relation}')\n\nprint(result)\n```\n"], "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": ["```python\nresult = []\n\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            unique_pairs_col1 = df.groupby(col1)[col2].nunique()\n            unique_pairs_col2 = df.groupby(col2)[col1].nunique()\n\n            one_to_many = unique_pairs_col1.max() > 1\n            many_to_one = unique_pairs_col2.max() > 1\n\n            if not one_to_many and not many_to_one:\n                relation = \"one-2-one\"\n            elif one_to_many and not many_to_one:\n                relation = \"one-2-many\"\n            elif not one_to_many and many_to_one:\n                relation = \"many-2-one\"\n            else:\n                relation = \"many-2-many\"\n\n            result.append(f\"{col1} {col2} {relation}\")\n\nresult\n```\n"], "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": ["```python\nimport pandas as pd\n\ndef determine_relationships(df):\n    relationships = pd.DataFrame(index=df.columns, columns=df.columns)\n    \n    for col1 in df.columns:\n        for col2 in df.columns:\n            if col1 == col2:\n                relationships.loc[col1, col2] = 'NaN'\n            else:\n                unique_col1 = df[col1].nunique()\n                unique_col2 = df[col2].nunique()\n                zip_cols = list(zip(df[col1], df[col2]))\n                unique_pairs = len(set(zip_cols))\n                \n                if unique_col1 == unique_pairs and unique_col2 == unique_pairs:\n                    relationships.loc[col1, col2] = 'one-to-one'\n                elif unique_col1 == unique_pairs:\n                    relationships.loc[col1, col2] = 'one-to-many'\n                elif unique_col2 == unique_pairs:\n                    relationships.loc[col1, col2] = 'many-to-one'\n                else:\n                    relationships.loc[col1, col2] = 'many-to-many'\n    \n    return relationships\n\nresult = determine_relationships(df)\nprint(result)\n```\n"], "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'Column1': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Column2': [4, 3, 6, 8, 3, 4, 1, 4, 3],\n    'Column3': [7, 3, 3, 1, 2, 2, 3, 2, 7],\n    'Column4': [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'Column5': [1, 1, 1, 1, 1, 1, 1, 1, 1]})\n\ndef determine_relationship(col1, col2):\n    unique_pairs = len(set(zip(df[col1], df[col2])))\n    if len(df[col1]) == unique_pairs:\n        return 'one-2-one'\n    elif len(df[col1].unique()) == len(df[col1]):\n        return 'one-2-many'\n    elif len(df[col2].unique()) == len(df[col2]):\n        return 'many-2-one'\n    else:\n        return 'many-2-many'\n\ncolumns = df.columns\nresult = pd.DataFrame(index=columns, columns=columns)\n\nfor col1 in columns:\n    for col2 in columns:\n        if col1 == col2:\n            result.loc[col1, col2] = None\n        else:\n            result.loc[col1, col2] = determine_relationship(col1, col2)\n\nprint(result)\n```\n"], "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'firstname': ['foo Bar', 'Bar Bar', 'Foo Bar', 'jim', 'john', 'mary', 'jim'],\n                   'lastname': ['Foo Bar', 'Bar', 'Foo Bar', 'ryan', 'con', 'sullivan', 'Ryan'],\n                   'email': ['Foo bar', 'Bar', 'Foo Bar', 'jim@com', 'john@com', 'mary@com', 'Jim@com'],\n                   'bank': [np.nan, 'abc', 'xyz', np.nan, 'tge', 'vbc', 'dfg']})\n\n# Keep records with bank account first\ndf = df.copy()\ndf['has_bank'] = df['bank'].notnull()\n\n# Standardize key columns\ndf['key'] = df[['firstname', 'lastname', 'email']] \\\n    .apply(lambda x: ''.join(x).lower().replace(' ', ''), axis=1)\n\n# Drop duplicates keeping the ones with a bank account\nresult = df.sort_values(by='has_bank', ascending=False) \\\n    .drop_duplicates(subset='key', keep='first')\n\nresult = result.drop(columns=['has_bank', 'key']).reset_index(drop=True)\nprint(result)\n```\n"], "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": ["```python\nresult = pd.to_numeric(s.str.replace(',', ''), errors='coerce')\n```"], "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": ["```python\nresult = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0)).mean()['Survived']\nresult.index = ['No Family', 'Has Family']\nresult\n```"], "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": ["```python\nresult = df.groupby(\n    (df['Survived'] > 0) | (df['Parch'] > 0)\n).SibSp.mean().rename({True: 'Has Family', False: 'No Family'})\n```"], "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": ["```python\ndf['Group'] = df.apply(lambda row: 'Has Family' if row['SibSp'] == 1 and row['Parch'] == 1 else\n                                    'No Family' if row['SibSp'] == 0 and row['Parch'] == 0 else\n                                    'New Family' if row['SibSp'] == 0 and row['Parch'] == 1 else\n                                    'Old Family', axis=1)\n\nresult = df.groupby('Group')['Survived'].mean()\nresult\n```\n"], "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": ["```python\nresult = df.sort_values(by='A').groupby('cokey', sort=False).apply(lambda x: x).reset_index(drop=True).set_index(['cokey', df.sort_values(by='A').groupby('cokey').cumcount()])\n```\n```"], "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": ["```python\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A', ascending=False))\n```"], "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": ["```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=[\"Caps\", \"Lower\"])\n```"], "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": ["```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Middle', 'Lower'])\n```"], "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": ["```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Middle', 'Lower'])\n```"], "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": ["```python\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n```"], "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": ["```python\nresult = df.groupby('a').b.agg(['mean', 'std'])\nprint(result)\n```"], "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": ["```python\nresult = df.groupby('b').a.agg(['mean', 'std'])\nprint(result)\n```\n```"], "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": ["```python\nimport numpy as np\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef min_max_norm(x):\n    return (x - x.min()) / (x.max() - x.min())\n\ndf[['softmax', 'min-max']] = df.groupby('a')['b'].transform(\n    lambda x: pd.DataFrame({'softmax': softmax(x), 'min-max': min_max_norm(x)})\n)\n\ndf\n```\n"], "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": ["```python\n# Remove columns and rows that sum to zero\ndf = df.loc[:, df.sum() != 0]\ndf = df.loc[df.sum(axis=1) != 0]\n\nresult = df\n```\n"], "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": ["```python\nresult = df.loc[df.sum(axis=1) != 0, df.sum() != 0]\n```"], "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": ["```python\nresult = df.loc[(df.max(axis=1) < 2), df.max(axis=0) < 2]\n```\n"], "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame([[1,2,0,1],[0,0,0,0],[1,0,0,1],[0,1,2,0],[1,1,0,1]], columns=['A','B','C','D'])\n\n# Set rows with max value of 2 to 0\ndf[df.max(axis=1) == 2] = 0\n\n# Set columns with max value of 2 to 0\ndf.loc[:, df.max(axis=0) == 2] = 0\n\nresult = df\n```\n"], "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": ["```python\nresult = s.sort_values(ascending=True).sort_index(ascending=True)\n```"], "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": ["```python\ndf = s.sort_index().sort_values(ascending=True).reset_index()\n```"], "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": ["```python\nresult = df[df['A'].apply(lambda x: isinstance(x, int))]\n```"], "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": ["```python\nresult = df[df['A'].apply(lambda x: isinstance(x, str))]\n```"], "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": ["```python\nresult = df[df.groupby(['Sp', 'Mt'])['count'].transform(max) == df['count']]\n```"], "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": ["```python\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n```"], "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": ["```python\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].transform('min') == df['count']]\n```\n"], "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": ["```python\nresult = df[df.groupby(['Sp', 'Value'])['count'].transform('max') == df['count']]\n```"], "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": ["```python\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n```"], "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": ["```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n```\n"], "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": ["```python\n    df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n    return df\n\nresult = f(example_dict, example_df)\n```"], "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": ["```python\ndf['Date'] = df['Member'].map(dict)\ndf['Date'] = df['Date'].fillna('17/8/1926')\ndf['Date'] = pd.to_datetime(df['Date'])\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n```"], "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\n\ndf['Count_m'] = df.Date.map(df.groupby(df['Date'].dt.to_period('M')).size())\ndf['Count_y'] = df.Date.map(df.groupby(df['Date'].dt.year).size())\n\nprint(df)\n```\n"], "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\n\n# Daily Count\ndf['Count_d'] = df['Date'].map(df.groupby('Date').size())\n\n# Monthly Count\ndf['month_year'] = df['Date'].dt.to_period('M')\ndf['Count_m'] = df['month_year'].map(df.groupby('month_year').size())\n\n# Yearly Count\ndf['year'] = df['Date'].dt.year\ndf['Count_y'] = df['year'].map(df.groupby('year').size())\n\n# Value-based Count\ndf['Count_Val'] = df.apply(lambda row: df[(df['year'] == row['year']) & (df['Val'] == row['Val'])].shape[0], axis=1)\n\n# Drop helper columns\ndf.drop(['month_year', 'year'], axis=1, inplace=True)\n\ndf\n```\n"], "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\n\n# Daily count\ndf['Count_d'] = df.groupby('Date')['Date'].transform('count')\n\n# Monthly count\ndf['Count_m'] = df.groupby(df['Date'].dt.to_period('M'))['Date'].transform('count')\n\n# Yearly count\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Date'].transform('count')\n\n# Weekday count\ndf['Count_w'] = df.groupby(df['Date'].dt.dayofweek)['Date'].transform('count')\n\n# Value count\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Val'].transform('count')\n\nprint(df)\n```\n"], "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": ["```python\nresult1 = df.groupby('Date').apply(lambda x: (x == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: (x != 0).sum())\n```"], "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": ["```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')\n\neven = df.set_index('Date').applymap(lambda x: x % 2 == 0).groupby('Date').sum()\nodd = df.set_index('Date').applymap(lambda x: x % 2 != 0).groupby('Date').sum()\n\nresult1 = even\nresult2 = odd\n```"], "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": ["```python\nresult = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```"], "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": ["```python\nresult = pd.pivot_table(\n    df, \n    values=['D', 'E'], \n    index=['B'], \n    aggfunc={'D': np.sum, 'E': np.mean}\n)\n```\n"], "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": ["```python\nresult = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```"], "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": ["```python\nresult = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.max, 'E': np.min})\n```"], "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": ["```python\nimport dask.dataframe as dd\n\n# Assuming `df` is your Dask DataFrame\nddf = dd.from_pandas(df, npartitions=1)\n\n# Explode the 'var2' column\nresult = ddf.assign(var2=ddf['var2'].str.split(',')).explode('var2')\n\n# Compute the result\nresult = result.compute()\nresult\n```"], "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": ["```python\nimport dask.dataframe as dd\n\n# Create the dask dataframe\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z,Y\"], [\"B\", \"X\"], [\"C\", \"W,U,V\"]], columns=['var1', 'var2']), npartitions=1)\n\n# Explode the dataframe\nresult = df.assign(var2=df['var2'].str.split(',')).explode('var2')\n\nresult.compute()\n```"], "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": ["```python\nimport dask.dataframe as dd\n\n# Create the dask dataframe\nddf = dd.from_pandas(df, npartitions=1)\n\n# Define the operation to split and explode\ndef split_and_explode(df):\n    df = df.copy()\n    lens = df['var2'].str.split('-').apply(len)\n    df = df.loc[df.index.repeat(lens)]\n    df['var2'] = [item for sublist in df['var2'].str.split('-') for item in sublist]\n    return df.reset_index(drop=True)\n\n# Apply the operation\nresult = ddf.map_partitions(split_and_explode).compute()\n```"], "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": ["```python\nimport pandas as pd\n\ndf = pd.read_csv('inn.txt', sep='\\t', names=['str'])\n\ndef count_special_char(string):\n    special_char = 0\n    for char in string:\n        if not char.isalpha() and not char.isspace():\n            special_char += 1\n    return special_char\n\ndf['new'] = df['str'].apply(count_special_char)\nprint(df)\n```\n"], "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": ["```python\ndf['new'] = df['str'].apply(lambda x: sum(1 for char in x if char.isalpha()))\n```"], "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": ["```python\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n```"], "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": ["```python\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n```"], "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": ["```python\ndf[['fips', 'medi', 'row']] = df['row'].str.extract(r'(\\d{5})\\s+([A-Z\\s]+)(.*)')\ndf\n```\n"], "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": ["```python\ndf.set_index('Name', inplace=True)\n\nresult = df.mask(df == 0).expanding(axis=1).mean().fillna(method='ffill', axis=1)\n\nresult.reset_index(inplace=True)\nresult\n```\n"], "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'Name': ['Name1', 'Name2', 'Name3'],\n                   '2001': [2, 1, 0],\n                   '2002': [5, 4, 5],\n                   '2003': [0, 2, 0],\n                   '2004': [0, 0, 0],\n                   '2005': [4, 4, 0],\n                   '2006': [6, 0, 2]})\n\ndef cumulative_average(row):\n    non_zero_counts = 0\n    running_total = 0\n    averages = []\n    for value in row[::-1]:\n        if value != 0:\n            non_zero_counts += 1\n            running_total += value\n        if non_zero_counts > 0:\n            averages.append(running_total / non_zero_counts)\n        else:\n            averages.append(0)\n    return averages[::-1]\n\ndf.iloc[:, 1:] = df.iloc[:, 1:].apply(cumulative_average, axis=1, result_type='expand')\n\nprint(df)\n```\n"], "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": ["```python\n    df = df.set_index('Name')\n    def cumulative_avg(row):\n        cumsum = 0\n        counts = 0\n        result = []\n        for val in row:\n            if val != 0:\n                cumsum += val\n                counts += 1\n            # Calculate cumulative average ignoring zeros\n            result.append(cumsum / counts if counts > 0 else 0)\n        return result\n\n    result_df = df.apply(cumulative_avg, axis=1, result_type='expand')\n    result_df.insert(0, 'Name', df.index)\n    return result_df\n\nresult = f(example_df)\nprint(result)\n```"], "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": ["```python\ndf.set_index('Name', inplace=True)\n\ndef cumulative_avg(row):\n    result = []\n    non_zero_values = []\n    for value in reversed(row):\n        if value != 0:\n            non_zero_values.append(value)\n        if non_zero_values:\n            result.append(sum(non_zero_values) / len(non_zero_values))\n        else:\n            result.append(0)\n    return list(reversed(result))\n\ndf = df.apply(cumulative_avg, axis=1)\n\ndf.reset_index(inplace=True)\nprint(df)\n```\n"], "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": ["```python\ndf['Label'] = (df['Close'] - df['Close'].shift(1) > 0).astype(int)\ndf.loc[0, 'Label'] = 1\ndf\n```"], "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": ["```python\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (0 if x == 0 else -1)).fillna(1)\n```"], "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": ["```python\ndf['label'] = df['Close'].diff(-1).apply(lambda x: -1 if x > 0 else (1 if x < 0 else 0))\ndf.loc[0, 'label'] = 1\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\nprint(df)\n```"], "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\nid = [\"Train A\", \"Train A\", \"Train A\", \"Train B\", \"Train B\", \"Train B\"]\narrival_time = [\"0\", \"2016-05-19 13:50:00\", \"2016-05-19 21:25:00\", \"0\", \"2016-05-24 18:30:00\", \"2016-05-26 12:15:00\"]\ndeparture_time = [\"2016-05-19 08:25:00\", \"2016-05-19 16:00:00\", \"2016-05-20 07:45:00\", \"2016-05-24 12:50:00\", \"2016-05-25 23:00:00\", \"2016-05-26 19:45:00\"]\n\ndf = pd.DataFrame({'id': id, 'arrival_time': arrival_time, 'departure_time': departure_time})\n\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\ndf['Duration'] = df['arrival_time'] - df['departure_time'].shift(1)\n\ndf\n```"], "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": ["```python\nimport pandas as pd\n\nid=[\"Train A\",\"Train A\",\"Train A\",\"Train B\",\"Train B\",\"Train B\"]\narrival_time = [\"0\",\"2016-05-19 13:50:00\",\"2016-05-19 21:25:00\",\"0\",\"2016-05-24 18:30:00\",\"2016-05-26 12:15:00\"]\ndeparture_time = [\"2016-05-19 08:25:00\",\"2016-05-19 16:00:00\",\"2016-05-20 07:45:00\",\"2016-05-24 12:50:00\",\"2016-05-25 23:00:00\",\"2016-05-26 19:45:00\"]\n\ndf = pd.DataFrame({'id': id, 'arrival_time': arrival_time, 'departure_time': departure_time})\n\n# Convert to datetime, setting invalid parsing to NaT\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\n# Calculate duration in seconds\ndf['Duration'] = (df['arrival_time'] - df['departure_time'].shift(1)).dt.total_seconds()\n\n# Display the DataFrame\ndf\n```"], "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": ["```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'].replace('0', pd.NaT))\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = (df['arrival_time'] - df['departure_time'].shift(1)).dt.total_seconds()\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S').fillna('')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf\n```\n"], "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": ["```python\nresult = df[df['key2'] == 'one'].groupby('key1').size().reset_index(name='count')\nresult = result.reindex(df['key1'].unique(), fill_value=0).reset_index(drop=True)\n```\n"], "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": ["```python\nresult = df[df['key2'] == 'two'].groupby('key1').size().reset_index(name='count')\n```"], "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": ["```python\nresult = df[df['key2'].str.endswith('e')].groupby('key1').size().reset_index(name='count')\nresult = result.append(pd.DataFrame({'key1': list(set(df['key1']) - set(result['key1'])), 'count': 0}))\nresult = result.sort_values('key1').reset_index(drop=True)\n"], "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": ["```python\nmax_result, min_result = df.index.max(), df.index.min()\n```"], "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": ["```python\nmode_result = df.index.mode()[0]\nmedian_result = df.index.to_series().sort_values().index[len(df) // 2]\n\nmode_result, median_result\n```"], "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": ["```python\nresult = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n```"], "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": ["```python\nresult = df[(df['closing_price'] < 99) | (df['closing_price'] > 101)]\n```\n"], "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": ["```python\nresult = df.loc[df.groupby(\"item\")[\"diff\"].idxmin()].reset_index(drop=True)\n```"], "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": ["```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: '_'.join(x.split('_')[:-1]) if '_' in x else x)\n```"], "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": ["```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.split('_')[-1])\n```"], "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": ["```python\n    result = df['SOURCE_NAME'].str.rsplit('_', n=1).str[0]\n    return result\n```\n"], "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": ["```python\nnan_count = df['Column_x'].isna().sum()\nhalf_nan = nan_count // 2\n\n# Fill the first half with 0\ndf.loc[df['Column_x'].isna().iloc[:half_nan].index, 'Column_x'] = 0\n\n# Fill the second half with 1\ndf.loc[df['Column_x'].isna().iloc[half_nan:].index, 'Column_x'] = 1\n```"], "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": ["```python\nnan_indices = df['Column_x'][df['Column_x'].isna()].index\ntotal_nans = len(nan_indices)\n\nfirst_30 = total_nans // 3\nsecond_30 = total_nans // 3\nthird_30 = total_nans - (first_30 + second_30)\n\ndf.loc[nan_indices[:first_30], 'Column_x'] = 0.0\ndf.loc[nan_indices[first_30:first_30+second_30], 'Column_x'] = 0.5\ndf.loc[nan_indices[first_30+second_30:], 'Column_x'] = 1.0\n```\n"], "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": ["```python\nnum_nans = df['Column_x'].isna().sum()\nhalf_nans = num_nans // 2\n\nfill_values = [0.0] * half_nans + [1.0] * half_nans\n\ndf.loc[df['Column_x'].isna(), 'Column_x'] = fill_values\n```"], "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": ["```python\nresult = pd.DataFrame({\n    col: list(zip(*[df[col] for df in [a, b]])) \n    for col in a.columns\n})\n```"], "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": ["```python\nimport pandas as pd\nimport numpy as np\n\na = pd.DataFrame(np.array([[1, 2],[3, 4]]), columns=['one', 'two'])\nb = pd.DataFrame(np.array([[5, 6],[7, 8]]), columns=['one', 'two'])\nc = pd.DataFrame(np.array([[9, 10],[11, 12]]), columns=['one', 'two'])\n\ndfs = [a, b, c]\n\nresult = pd.DataFrame({\n    col: list(zip(*[df[col] for df in dfs]))\n    for col in a.columns\n})\n\nresult\n```"], "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": ["```python\nresult = pd.concat([a, b], axis=0).reset_index(drop=True)\nmax_len = result.shape[0]\n\na_reindexed = a.reindex(range(max_len))\nb_reindexed = b.reindex(range(max_len))\n\na_b = pd.DataFrame(\n    {\n        col: list(zip(a_reindexed[col], b_reindexed[col]))\n        for col in a.columns\n    }\n)\n\nprint(a_b)\n```\n"], "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": ["```python\ndf['view_bins'] = pd.cut(df['views'], bins)\nresult = df.groupby(['username', 'view_bins']).size().unstack(fill_value=0)\n```\n"], "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": ["```python\ndf['binned'] = pd.cut(df['views'], bins)\nresult = df.groupby(['username', 'binned']).size().unstack(fill_value=0)\n```"], "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": ["```python\ndf['view_bins'] = pd.cut(df['views'], bins)\nresult = df.groupby(['username', 'view_bins'])['views'].count().unstack(fill_value=0)\nresult\n```\n```"], "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": ["```python\nresult = pd.DataFrame({'text': [', '.join(df['text'])]})\n```"], "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": ["```python\nresult = pd.DataFrame({'text': ['-'.join(df['text'])]})\n```"], "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": ["```python\nresult = pd.DataFrame({'text': [', '.join(df['text'][::-1])]})\n```"], "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": ["```python\nresult = pd.Series(', '.join(df['text']), name='text')\n```"], "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": ["```python\nresult = pd.Series('-'.join(df['text'][::-1]), name='text')\n```\n"], "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": ["```python\ndf2 = df2.merge(df1[['id', 'city', 'district']], on='id', how='left')\nresult = pd.concat([df1, df2], axis=0)\nresult\n```\n"], "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": ["```python\ndf_combined = pd.concat([df1, df2], ignore_index=True)\ndf_combined = df_combined.sort_values(by=['id', 'date'], ascending=[True, False])\n\ndf_combined['city'].fillna(method='ffill', inplace=True)\ndf_combined['district'].fillna(method='ffill', inplace=True)\n\ndf_combined['date'] = pd.to_datetime(df_combined['date'])\ndf_combined['date'] = df_combined['date'].dt.strftime('%d-%b-%Y')\n\nresult = df_combined.reset_index(drop=True)\nresult\n```\n"], "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": ["```python\nmerged = pd.concat([df1, df2], sort=False).sort_values(by=['id', 'date'])\nmerged[['city', 'district']] = merged[['city', 'district']].fillna(method='ffill')\nmerged\n```\n"], "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": ["```python\nresult = pd.concat([C.set_index('A'), D.set_index('A')]).groupby(level=0).last().reset_index()\n```"], "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": ["```python\nresult = pd.merge(C, D, how='outer', on='A').sort_values('A').assign(B=lambda df: df['B_y'].combine_first(df['B_x'])).drop(columns=['B_x', 'B_y']).sort_index()\nprint(result)\n```\n"], "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": ["```python\nimport pandas as pd\n\nC = pd.DataFrame({\"A\": [\"AB\", \"CD\", \"EF\"], \"B\": [1, 2, 3]})\nD = pd.DataFrame({\"A\": [\"CD\", \"GH\"], \"B\": [4, 5]})\n\nresult = pd.merge(C, D, how='outer', on='A', suffixes=('', '_y'))\nresult['B'] = result['B_y'].combine_first(result['B'])\nresult['dulplicated'] = result['B_y'].notna()\nresult = result.drop(columns='B_y')\nresult['dulplicated'] = result.apply(lambda row: row['A'] in D['A'].values, axis=1)\n\nprint(result)\n```"], "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": ["```python\nresult = df.sort_values(['user', 'time']).groupby('user').apply(lambda x: x[['time', 'amount']].values.tolist())\n```"], "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": ["```python\nresult = df.sort_values(by=['user', 'time']).groupby('user').apply(lambda x: x[['time', 'amount']].values.tolist())\n```"], "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": ["```python\nresult = df.sort_values('time').groupby('user').apply(lambda x: list(zip(x['time'], x['amount'])))\n```\n"], "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": ["```python\ndf = pd.DataFrame(series.tolist(), index=series.index)\n```\n"], "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": ["```python\ndf = pd.DataFrame(series.tolist(), index=series.index).reset_index()\ndf.columns = ['name', 0, 1, 2, 3]\n```\n"], "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": ["```python\nresult = [col for col in df.columns if s in col]\n```"], "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": ["```python\nresult = [col for col in df.columns if s in col]\ndf_result = df[result]\ndf_result\n```\n"], "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": ["```python\nimport pandas as pd\n\ndata = {'spike-2': [1, 2, 3], 'hey spike': [4, 5, 6], 'spiked-in': [7, 8, 9], 'no': [10, 11, 12]}\ndf = pd.DataFrame(data)\ns = 'spike'\n\n# Find columns with the string 'spike'\ncolumns_with_spike = [col for col in df.columns if s in col]\n\n# Rename these columns to spike1, spike2, etc.\nrenamed_columns = {col: f'spike{i+1}' for i, col in enumerate(columns_with_spike)}\n\n# Rename columns in the dataframe\ndf = df.rename(columns=renamed_columns)\n\nresult = df\n```\n"], "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": ["```python\nresult = df['codes'].apply(pd.Series).add_prefix('code_')\n```"], "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": ["```python\nresult = df['codes'].apply(pd.Series).rename(columns=lambda x: f'code_{x+1}')\n```"], "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({'codes': [[71020], [77085], [36415], [99213, 99287], [99234, 99233, 99233]]})\n\nresult = df['codes'].apply(lambda x: sorted(x)).apply(pd.Series)\nresult.columns = [f'code_{i+1}' for i in range(result.shape[1])]\n\nprint(result)\n```\n"], "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": ["```python\nimport ast\n\n# Assuming the column name is 'User IDs'\ndf['User IDs'] = df['User IDs'].apply(ast.literal_eval)\nresult = df.loc[0:index, 'User IDs'].sum()\n```"], "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": ["```python\nimport pandas as pd\nfrom ast import literal_eval\n\ndf = pd.DataFrame(dict(col1=[[\"1, 2, 3\"], [\"4, 5\"]]))\n\nresult = ','.join(\n    [str(item) for sublist in df['col1'].apply(literal_eval).apply(reversed) for item in sublist]\n)\n```\n"], "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": ["```python\nimport pandas as pd\nimport ast\n\ndf = pd.DataFrame(dict(col1=[[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]]))\n\n# Convert string representation of lists to actual lists\ndf['col1'] = df['col1'].apply(ast.literal_eval)\n\n# Flatten the list and concatenate as a string\nresult = ','.join(sum(df['col1'].tolist(), []))\n```"], "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": ["```python\ndf = df.set_index('Time').resample('2T').mean().reset_index()\n\n# Interpolation (Optional)\ndf['Value'] = df['Value'].interpolate()\n```"], "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": ["```python\ndf = df.set_index('Time').resample('3T').sum().reset_index()\n```\n"], "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'ID': ['01', '01', '01', '02', '02'],\n    'TIME': ['2018-07-11 11:12:20', '2018-07-12 12:00:23', '2018-07-13 12:00:00', '2019-09-11 11:00:00', '2019-09-12 12:00:00']\n})\n\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n```"], "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": ["```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n```"], "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": ["```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\n\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n\ndf['TIME'] = df['TIME'].dt.strftime('%d-%b-%Y %a %H:%M:%S')\n```"], "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": ["```python\nresult = df[df.index.get_level_values('a').map(filt)]\n```"], "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": ["```python\nresult = df.loc[filt[df.index.get_level_values('a')].values]\n```"], "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": ["```python\nresult = df.columns[(df.iloc[0] != df.iloc[8]) & ~(df.iloc[0].isna() & df.iloc[8].isna())]\nresult\n```\n"], "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": ["```python\nresult = df.columns[df.iloc[0].eq(df.iloc[8])].tolist()\n```\n"], "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": ["```python\nresult = [col for col in df.columns if not (pd.isna(df.at[0, col]) and pd.isna(df.at[8, col])) and df.at[0, col] != df.at[8, col]]\n```\n"], "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": ["```python\nresult = [(df.iloc[0, i], df.iloc[8, i]) for i in range(df.shape[1]) \n          if not (pd.isna(df.iloc[0, i]) and pd.isna(df.iloc[8, i])) and df.iloc[0, i] != df.iloc[8, i]]\n```"], "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": ["```python\nts = df.set_index('Date')['Value']\n```\n"], "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": ["```python\ndf = pd.DataFrame([df.values.flatten()], \n                  columns=[f'{col}_{i+1}' for i in df.index for col in df.columns])\n```\n"], "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": ["```python\ndf = pd.DataFrame([df.values.flatten()], columns=[f\"{col}_{i}\" for i in range(len(df)) for col in df.columns])\n```\n"], "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame([(.21, .3212), (.01, .61237), (.66123, .03), (.21, .18), (pd.NA, .18)],\n                  columns=['dogs', 'cats'])\n\ndf['dogs'] = df['dogs'].astype(float).round(2)\n```"], "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": ["```python\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else pd.NA)\ndf['cats'] = df['cats'].apply(lambda x: round(x, 2) if pd.notna(x) else pd.NA)\n```"], "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": ["```python\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n```"], "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": ["```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n```"], "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": ["```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n```"], "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": ["```python\nresult = df.sort_index(level='time', sort_remaining=False)\n```"], "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": ["```python\nresult = df.sort_values(by='VIM', kind='mergesort')\n```"], "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": ["```python\ndates_to_remove = ['2020-02-17', '2020-02-18']\nresult = df[~df.index.normalize().isin(pd.to_datetime(dates_to_remove))]\n```"], "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": ["```python\n# Remove specific days\ndates_to_remove = ['2020-02-17', '2020-02-18']\ndf = df[~df.index.normalize().isin(pd.to_datetime(dates_to_remove))]\n\n# Format the date index with day of the week\ndf.index = df.index.strftime('%d-%b-%Y %A')\n\nresult = df\n```\n"], "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": ["```python\nresult = corr.where((corr > 0.3) & (corr < 1)).stack().reset_index()\nresult.columns = ['Col1', 'Col2', 'Pearson Correlation Coefficient']\nresult\n```"], "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": ["```python\nresult = corr.where(np.triu(corr, 1) > 0.3).stack()\n```"], "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": ["```python\ndf.columns.values[-1] = 'Test'\nresult = df\n```"], "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": ["```python\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=list('ABA'))\ndf.columns = ['Test'] + list(df.columns[1:])\nresult = df\n```\n"], "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": ["```python\ndf['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda row: (row == row['frequent']).sum(), axis=1)\n```\n"], "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": ["```python\ndf['frequent'] = df.apply(lambda row: row.mode().iloc[0], axis=1)\ndf['freq_count'] = df.apply(lambda row: (row == row['frequent']).sum(), axis=1)\n```"], "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": ["```python\nimport pandas as pd\n\ndata = pd.read_csv('myData.csv', sep=',')\n\ndef frequent_values(row):\n    counts = row.value_counts()\n    max_count = counts.max()\n    frequent = counts[counts == max_count].index.tolist()\n    return pd.Series([frequent, max_count])\n\ndata[['frequent', 'freq_count']] = data.apply(frequent_values, axis=1)\n```"], "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": ["```python\ndf['bar'] = pd.to_numeric(df['bar'], errors='coerce')  # Convert 'NULL' to NaN\nresult = df.groupby([\"id1\", \"id2\"], as_index=False).mean()\nresult.set_index(['id1', 'id2'], inplace=True)\n```"], "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": ["```python\nimport pandas as pd\n\n# Convert 'NULL' to 0 and change 'bar' to numeric\ndf['bar'] = df['bar'].replace('NULL', 0).astype(float)\n\n# Group and calculate mean\nresult = df.groupby([\"id1\", \"id2\"])[[\"foo\", \"bar\"]].mean()\n```"], "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": ["```python\nresult = pd.merge(df_a, df_b[['EntityNum', 'a_col']], on='EntityNum')\n```"], "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": ["```python\nresult = pd.merge(df_a, df_b[['EntityNum', 'b_col']], on='EntityNum')\n```\n"], "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": ["result = a.shape\n"], "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": ["x = x[~np.isnan(x)]"], "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": ["```python\nx = np.where(np.isnan(x), np.inf, x)\n```"], "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": ["```python\nresult = [list(filter(lambda v: not np.isnan(v), sublist)) for sublist in x]\n```"], "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": ["```python\nn_classes = a.max() + 1\nb = np.eye(n_classes + 1)[a]\n```"], "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": ["```python\nb = np.eye(np.max(a) + 1)[a]\n```"], "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": ["```python\nnum_classes = np.max(a) - np.min(a) + 1\nb = np.eye(num_classes)[a - np.min(a)]\n```"], "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": ["```python\nindices = np.argsort(a)\nb = np.eye(len(a))[indices.argsort()]\n```"], "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": ["```python\nimport numpy as np\n\na = np.array([[1, 0, 3], [2, 4, 1]])\nmin_val = a.min()\nmax_val = a.max()\nnum_classes = max_val - min_val + 1\n\nb = np.eye(num_classes)[a.flatten() - min_val].reshape(a.shape[0], a.shape[1], -1)\nb = b.reshape(-1, num_classes)\n```"], "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": ["```python\nresult = np.percentile(a, p)\n```"], "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": ["```python\nB = A.reshape((-1, ncol))\n```"], "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": ["```python\nB = A.reshape((nrow, -1))\n```"], "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": ["```python\nB = A[:A.size - A.size % ncol].reshape(-1, ncol)\n```"], "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": ["```python\nA_reversed = A[::-1]\nnrow = len(A_reversed) // ncol\nB = A_reversed[:nrow * ncol].reshape(nrow, ncol)\n```"], "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": ["```python\ndef shift(arr, num, fill_value=np.nan):\n    result = np.empty_like(arr)\n    if num > 0:\n        result[:num] = fill_value\n        result[num:] = arr[:-num]\n    elif num < 0:\n        result[num:] = fill_value\n        result[:num] = arr[-num:]\n    else:\n        result[:] = arr\n    return result\n\nresult = shift(a, shift)\n```"], "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": ["```python\nresult = np.empty_like(a)\nif shift > 0:\n    result[:, :shift] = np.nan\n    result[:, shift:] = a[:, :-shift]\nelse:\n    result[:, shift:] = np.nan\n    result[:, :shift] = a[:, -shift:]\n```\n```"], "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": ["```python\nresult = np.empty_like(a)\nresult[:] = np.nan\n\nfor i, sh in enumerate(shift):\n    if sh > 0:\n        result[i, sh:] = a[i, :-sh]\n    elif sh < 0:\n        result[i, :sh] = a[i, -sh:]\n    else:\n        result[i] = a[i]\n\nprint(result)\n```\n"], "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": ["```python\nnp.random.seed(42)\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n```"], "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": ["```python\nresult = np.argmax(a, axis=None)\n```"], "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": ["```python\nresult = np.argmin(a)\n```"], "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": ["```python\nresult = np.unravel_index(np.argmax(a, axis=None), a.shape, order='F')\n```"], "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": ["```python\nresult = np.unravel_index(np.argmax(a, axis=None), a.shape)\n```"], "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": ["```python\n    return np.argmax(a)\n```"], "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": ["```python\nflat_indices = np.argsort(a, axis=None)\nsecond_largest_index = flat_indices[-2]\nresult = np.unravel_index(second_largest_index, a.shape)\n```"], "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": ["```python\na = a[:, ~np.any(np.isnan(a), axis=0)]\n```"], "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": ["```python\na = a[~np.isnan(a).any(axis=1)]\n```"], "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": ["```python\nresult = np.array(a)\n```"], "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": ["```python\na = a[:, permutation]\n```"], "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": ["```python\nresult = a[permutation]\n```"], "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": ["```python\nresult = np.unravel_index(np.argmin(a), a.shape)\n```"], "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": ["```python\nresult = np.unravel_index(np.argmax(a), a.shape)\n```"], "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": ["```python\nresult = np.argwhere(a == np.min(a))\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": ["```python\nresult = np.sin(np.radians(degree))\n```"], "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": ["```python\nresult = np.cos(np.radians(degree))\n```"], "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": ["```python\nif np.sin(np.radians(number)) > np.sin(number):\n    result = 0  # degree\nelse:\n    result = 1  # radian\n```"], "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": ["```python\nresult = np.degrees(np.arcsin(value))\n```"], "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": ["```python\nresult = np.pad(A, (0, length - len(A)), 'constant')\n```\nEND SOLUTION\n```python\nimport numpy as np\nA = np.array([1,2,3,4,5])\nlength = 8\n```"], "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": ["```python\nimport numpy as np\n\ndef pad(A, length):\n    if len(A) >= length:\n        return A\n    return np.pad(A, (0, length - len(A)), 'constant', constant_values=0)\n\nA = np.array([1,2,3,4,5])\nlength = 8\nresult = pad(A, length)\n```\n"], "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": ["```python\na = np.power(a, power)\n```"], "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": ["```python\n    result = np.power(a, power)\n    return result\n# Example usage:\nresult = f(example_a, 5)\nprint(result)\n```"], "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": ["```python\nfrom math import gcd\n\nnumerator = 98\ndenominator = 42\n\ncommon_divisor = gcd(numerator, denominator)\nresult = (numerator // common_divisor, denominator // common_divisor)\n```\n"], "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": ["```python\n    gcd = np.gcd(numerator, denominator)\n    return (numerator // gcd, denominator // gcd)\n### END SOLUTION\n```"], "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": ["```python\nimport numpy as np\nnumerator = 98\ndenominator = 42\n\ndef reduce_fraction(n, d):\n    if d == 0:\n        return (np.nan, np.nan)\n    gcd = np.gcd(n, d)\n    return (n // gcd, d // gcd)\n\nresult = reduce_fraction(numerator, denominator)\n```\n"], "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": ["```python\nresult = (a + b + c) / 3\n```"], "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": ["```python\nresult = np.maximum(np.maximum(a, b), c)\n```"], "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": ["```python\ndiagonal = (np.arange(5), np.arange(4, -1, -1))\nresult = a[diagonal]\n```"], "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": ["```python\nresult = np.fliplr(a).diagonal()\n```"], "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": ["```python\nn = a.shape[0]\ndiagonal1 = a[np.arange(n), np.arange(n)]\ndiagonal2 = a[np.arange(n), np.arange(n - 1, -1, -1)]\nresult = np.array([diagonal1, diagonal2])\n```\n"], "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": ["```python\nresult = [np.diag(np.fliplr(a), k) for k in range(-a.shape[0] + 1, a.shape[1])]\nEND SOLUTION\n```"], "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": ["```python\nresult = [element for row in X for element in row]\n```"], "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": ["```python\nresult = list(X.flatten(order='C'))\n```"], "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": ["```python\n    result = [elem for row in X for elem in row]\n    return result\n    ### END SOLUTION\n```"], "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": ["```python\nresult = X.flatten('F').tolist()\n```"], "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": ["```python\nresult = np.array(list(map(int, mystr)))\n```"], "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": ["```python\na[:, col] *= multiply_number\nresult = np.cumsum(a[:, col])\n```"], "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": ["```python\na[row] *= multiply_number\nresult = np.cumsum(a[row])\n```"], "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": ["```python\na[row] /= divide_number\nresult = np.prod(a[row])\n```"], "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": ["```python\nimport numpy as np\nfrom sympy import Matrix\n\na = np.array([[0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]])\nm = Matrix(a)\nindependent_rows = m.rref()[0].tolist()\n\nresult = [list(row) for row in independent_rows if any(row)]\nprint(result)\n```\n"], "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": ["```python\nresult = a.shape[1]\n```"], "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": ["```python\nt_stat, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n```"], "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": ["```python\n# Remove nans from the data\na = a[~np.isnan(a)]\nb = b[~np.isnan(b)]\n\n# Perform the t-test\nt_stat, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n```\n"], "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": ["```python\n# Calculate pooled standard deviation\npooled_std = np.sqrt(((anobs - 1) * avar + (bnobs - 1) * bvar) / (anobs + bnobs - 2))\n\n# Calculate t-statistic\nt_statistic = (amean - bmean) / (pooled_std * np.sqrt(1/anobs + 1/bnobs))\n\n# Degrees of freedom\ndf = anobs + bnobs - 2\n\n# Calculate p-value for the two-tailed test\np_value = 2 * scipy.stats.t.sf(np.abs(t_statistic), df)\n```\n"], "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": ["```python\noutput = np.array([a for a in A if not any(np.array_equal(a, b) for b in B)])\n```"], "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": ["```python\nset_A = set(map(tuple, A))\nset_B = set(map(tuple, B))\nsymmetric_diff = np.array(list(set_A.symmetric_difference(set_B)))\noutput = symmetric_diff\n```\n```"], "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": ["```python\nsort_indices = np.argsort(a, axis=0)\nc = np.empty_like(b)\nfor i in range(a.shape[1]):\n    for j in range(a.shape[2]):\n        c[:, i, j] = b[sort_indices[:, i, j], i, j]\n```\n"], "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": ["```python\nsort_indices = np.argsort(a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": ["```python\nsort_indices = np.argsort(-a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\nc\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": ["```python\nsums = a.sum(axis=(1, 2))\nsorted_indices = np.argsort(sums)[::-1]\nresult = b[sorted_indices]\n```"], "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": ["```python\na = np.delete(a, 2, axis=1)\n```"], "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": ["```python\na = np.delete(a, 2, axis=0)\n```"], "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": ["```python\na = np.delete(a, [0, 2], axis=1)\n```"], "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": ["```python\nresult = np.delete(a, [col for col in del_col if col < a.shape[1]], axis=1)\n```"], "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": ["```python\na = np.insert(a, pos, element)\n```"], "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": ["```python\na = np.insert(a, pos + 1, element, axis=0)\n```"], "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": ["```python\n    return np.insert(a, pos, element)\n```"], "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": ["```python\na = np.insert(a, pos, element, axis=0)\n```"], "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": ["```python\nimport numpy as np\nimport copy\n\npairs = [(2, 3), (3, 4), (4, 5)]\narray_of_arrays = np.array([np.arange(a*b).reshape(a,b) for (a, b) in pairs], dtype=object)\n\nresult = copy.deepcopy(array_of_arrays)\n```\n"], "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": ["```python\nresult = np.all(a == a[0], axis=1).all()\n```"], "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": ["```python\nresult = np.all(a == a[:, [0]], axis=0)\n```"], "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": ["```python\n    return np.all(a == a[0], axis=1).all()\n```"], "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": ["```python\nimport numpy as np\nimport scipy.integrate as spi\n\nx = np.linspace(0, 1, 20)\ny = np.linspace(0, 1, 30)\n\nX, Y = np.meshgrid(x, y)\nZ = np.cos(X)**4 + np.sin(Y)**2\n\nresult = spi.simps(spi.simps(Z, y), x)\n```"], "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": ["```python\n    X, Y = np.meshgrid(x, y, indexing='ij')\n    Z = np.cos(X)**4 + np.sin(Y)**2\n\n    dx = x[1] - x[0]\n    dy = y[1] - y[0]\n\n    # Simpson's rule weights\n    Sx = np.ones(len(x))\n    Sx[1:-1:2] = 4\n    Sx[2:-2:2] = 2\n\n    Sy = np.ones(len(y))\n    Sy[1:-1:2] = 4\n    Sy[2:-2:2] = 2\n\n    # 2D Simpson's rule\n    integral = (dx * dy / 9.0) * np.sum(Sx[:, None] * Sy * Z)\n\n    return integral\n\nresult = f()\n```"], "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": ["```python\nimport numpy as np\nfrom scipy.stats import rankdata\n\ndef ecdf(x):\n    sorted_x = np.sort(x)\n    return rankdata(x, method='max') / len(x)\n\nresult = ecdf(grades)\n```\n"], "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": ["```python\nimport numpy as np\nfrom scipy.stats import rankdata\n\ndef ecdf(x):\n    n = len(x)\n    # Sort the data\n    x_sorted = np.sort(x)\n    # Calculate the ECDF values\n    return rankdata(x_sorted, method='max') / n, x_sorted\n\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\neval = np.array([88, 87, 62])\n\n# Get ECDF values and sorted data\necdf_values, sorted_grades = ecdf(grades)\n\n# Apply the ECDF\nresult = np.interp(eval, sorted_grades, ecdf_values)\n\nresult\n```\n"], "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": ["```python\nfrom scipy import stats\n\n# Compute ECDF\ndef ecdf(x):\n    return stats.rankdata(x, method='max') / len(x)\n\n# Apply ECDF\necdf_values = ecdf(grades)\n\n# Find the longest interval [low, high) where ECDF < threshold\nsorted_grades = np.sort(grades)\nlow, high = None, None\n\nfor i, grade in enumerate(sorted_grades):\n    if ecdf_values[i] < threshold:\n        continue\n    else:\n        if i > 0:\n            low = sorted_grades[0]\n            high = sorted_grades[i]\n        break\n\nprint(\"low:\", low, \"high:\", high)\n```\n"], "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": ["```python\nnums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n```"], "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": ["```python\na_np = a.numpy()\n```"], "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": ["```python\na_pt = torch.from_numpy(a)\n```"], "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": ["```python\na_np = a.numpy()\n```"], "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": ["```python\na_tf = tf.convert_to_tensor(a)\n```"], "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": ["```python\nresult = np.argsort(-a)\n```"], "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": ["```python\nresult = np.argsort(a)\n```"], "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": ["```python\nresult = np.argsort(a)[-N:][::-1]\n```\n"], "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": ["```python\nresult = np.linalg.matrix_power(A, n)\n```"], "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": ["```python\nresult = a.reshape(2, 2, 2, 2).swapaxes(1, 2).reshape(-1, 2, 2)\n```\n```"], "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": ["```python\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\n\nresult = np.array([a[i:i+2, j:j+2] for i in range(a.shape[0] - 1) for j in range(a.shape[1] - 1)])\n```"], "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": ["```python\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\n\nresult = a.reshape(2, 2, 2, 2).swapaxes(1, 2).reshape(-1, 2, 2)\nprint(result)\n```\n"], "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": ["```python\nresult = a[:4, :4].reshape(2, 2, 2, 2).swapaxes(1, 2).reshape(-1, 2, 2).tolist()\n```"], "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": ["```python\nresult = a.reshape(h, w)\n```\n"], "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": ["```python\nresult = []\nfor i in range(0, a.shape[0] - patch_size + 1, patch_size):\n    for j in range(0, a.shape[1] - patch_size + 1, patch_size):\n        patch = a[i:i+patch_size, j:j+patch_size]\n        result.append(patch)\nresult = np.array(result)\n```"], "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": ["```python\nresult = a[:, low:high]\n```\n"], "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": ["result = a[low:high]"], "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": ["```python\nresult = a[:, low:min(high, a.shape[1])]\n```"], "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": ["```python\na = np.array(eval(string.replace(' ', ',')))\n```\n"], "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": ["```python\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n```"], "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": ["```python\nresult = np.exp(np.random.uniform(min, max, n))\n```\n"], "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": ["```python\n    log_min = np.log(min)\n    log_max = np.log(max)\n    result = np.exp(np.random.uniform(log_min, log_max, n))\n    return result\n# Example usage\n# result = f(min=1, max=np.e, n=10000)\n```"], "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": ["```python\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\nB\n```"], "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": ["```python\nB = pd.Series(index=A.index, dtype=float)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    if t == 1:\n        B[t] = a * A[t] + b * B[t-1]\n    else:\n        B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\nB\n```"], "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": ["```python\nresult = np.array([])\n```"], "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": ["```python\nresult = np.empty((3, 0))\n```"], "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": ["```python\nresult = np.ravel_multi_index(index, dims, order='F')\n```"], "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": ["```python\nresult = np.ravel_multi_index(index, dims, order='C')\n```"], "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": ["```python\ndata = {'a': np.zeros(2, dtype='int32'),\n        'b': np.zeros(2, dtype='float32'),\n        'c': np.zeros(2, dtype='float32')}\n\ndf = pd.DataFrame(data, index=index, columns=columns)\n```\n"], "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": ["```python\nresult = np.bincount(accmap, weights=a)\n```"], "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": ["```python\nresult = np.bincount(index, weights=a, minlength=np.max(index)+1)\ncounts = np.bincount(index, minlength=np.max(index)+1)\nresult = result / counts\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": ["```python\nimport numpy as np\na = np.arange(1, 11)\naccmap = np.array([0, 1, 0, 0, 0, -1, -1, 2, 2, 1]) % 3\nresult = np.bincount(accmap, weights=a)\nprint(result)\n```\n"], "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": ["```python\nresult = np.zeros(np.max(index)+1)\nfor ix in range(len(result)):\n    result[ix] = np.min(a[index == ix])\nresult = np.array(result, dtype=int)\n"], "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": ["```python\nimport numpy as np\n\nx = np.array([[2, 2, 2],\n              [2, 2, 2],\n              [2, 2, 2]])\ny = np.array([[3, 3, 3],\n              [3, 3, 3],\n              [3, 3, 1]])\n\ndef elementwise_function(element_1, element_2):\n    return element_1 + element_2\n\nz = np.vectorize(elementwise_function)(x, y)\nprint(z)\n```\n"], "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": ["```python\nresult = np.random.choice(len(lista_elegir), samples, p=probabilit)\nresult = [lista_elegir[i] for i in result]\n```\n```"], "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": ["```python\nresult = np.zeros((high_index - low_index, high_index - low_index))\ns1 = slice(max(0, low_index), min(a.shape[0], high_index))\ns2 = slice(max(0, low_index), min(a.shape[1], high_index))\nresult[(s1.start - low_index):(s1.stop - low_index), (s2.start - low_index):(s2.stop - low_index)] = a[s1, s2]\n```\n"], "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": ["```python\nresult = x[x >= 0]\n```"], "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": ["```python\nresult = x[np.iscomplex(x)]\n```"], "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": ["```python\nbin_data_mean = np.mean(data[:len(data) - len(data) % bin_size].reshape(-1, bin_size), axis=1)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": ["```python\nbin_data_max = np.max(data[:len(data) - len(data) % bin_size].reshape(-1, bin_size), axis=1)\n```"], "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": ["```python\nimport numpy as np\n\ndata = np.array([[4, 2, 5, 6, 7],\n                 [5, 4, 3, 5, 7]])\nbin_size = 3\n\n# Compute the number of complete bins\nnum_bins = data.shape[1] // bin_size\n\n# Reshape and calculate the mean across the bins\nbin_data_mean = data[:, :num_bins * bin_size].reshape(data.shape[0], num_bins, bin_size).mean(axis=2)\n\nprint(bin_data_mean)\n```\n"], "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": ["```python\nbin_data_mean = [np.mean(data[i:i + bin_size]) for i in range(len(data) - bin_size, -1, -bin_size)]\n```"], "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": ["```python\nbin_data = data[:, -(len(data[0]) // bin_size * bin_size):]\nreshaped_data = bin_data.reshape(data.shape[0], -1, bin_size)\nbin_data_mean = reshaped_data.mean(axis=2)\n```"], "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": ["```python\ndef bin_and_average(data, bin_size):\n    num_bins = data.shape[1] // bin_size\n    # Slice the array to align to end and fit into bins\n    sliced_data = data[:, -num_bins * bin_size:]\n    # Reshape and calculate mean\n    reshaped = sliced_data.reshape(data.shape[0], num_bins, bin_size)\n    return reshaped.mean(axis=2)\n\nbin_data_mean = bin_and_average(data, bin_size)\n```\n"], "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": ["```python\ndef smoothclamp(x, x_min, x_max):\n    t = (x - x_min) / (x_max - x_min)\n    t = np.clip(t, 0, 1)\n    smoothed_t = t * t * (3 - 2 * t)\n    return x_min + smoothed_t * (x_max - x_min)\n\nresult = smoothclamp(x, x_min, x_max)\nprint(result)\n```"], "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": ["```python\ndef smoothclamp(x, x_min, x_max, N):\n    t = (x - x_min) / (x_max - x_min)\n    t = np.clip(t, 0, 1)\n    smoothed_t = t ** N * (t * (t * 6 - 15) + 10)\n    return x_min + smoothed_t * (x_max - x_min)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": ["```python\nresult = np.fft.ifft(np.fft.fft(a) * np.fft.fft(b).conj()).real\n```"], "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": ["```python\nresult = df.unstack(level=0).values.transpose(2, 0, 1)\n```\n```python\n"], "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": ["```python\nresult = df.values.reshape(15, 4, 5)\n```\n"], "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": ["```python\nresult = np.array([np.binary_repr(x, width=m) for x in a], dtype='U' + str(m))\nresult = np.array([[int(bit) for bit in x] for x in result])\n```\n"], "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": ["```python\nresult = ((a[:, None] & (1 << np.arange(m))) > 0).astype(int)\n```\n"], "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": ["```python\nbin_array = ((a[:, None] & (1 << np.arange(m))) > 0).astype(int)\nresult = np.bitwise_xor.reduce(bin_array, axis=0)\nresult\n```\n"], "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": ["```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 3 * std_dev, mean + 3 * std_dev)\n"], "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": ["```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 2 * std_dev, mean + 2 * std_dev)\n"], "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": ["```python\n    mean = np.mean(a)\n    std_dev = np.std(a)\n    return (mean - 3 * std_dev, mean + 3 * std_dev)\n\nresult = f(a)\n```"], "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": ["```python\nmean = np.mean(a)\nstd_dev = np.std(a)\nlower_bound = mean - 2 * std_dev\nupper_bound = mean + 2 * std_dev\nresult = (a < lower_bound) | (a > upper_bound)\n```"], "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": ["```python\nimport numpy.ma as ma\n\nmasked_data = ma.masked_where(DataArray < 0, DataArray)\nprob = np.percentile(masked_data.compressed(), percentile)\n```\n"], "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": ["```python\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n# Result in 'a'\nEND SOLUTION\n```"], "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": ["```python\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n```"], "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": ["```python\na[1, :] = 0\na[:, 0] = 0\n```\n"], "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": ["```python\nmask = a == np.amax(a, axis=1, keepdims=True)\n```\n"], "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": ["```python\nmask = a == np.min(a, axis=1, keepdims=True)\n```"], "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": ["```python\nresult = np.corrcoef(post, distance)[0, 1]\n```"], "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": ["```python\nresult = np.einsum('ij,kj->jik', X, X)\n```"], "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": ["```python\nX = np.sqrt(np.diagonal(Y, axis1=1, axis2=2)).T\n```"], "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": ["```python\nis_contained = number in a\n```"], "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": ["```python\nC = A[~np.isin(A, B)]\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": ["```python\nC = A[np.isin(A, B)]\n```"], "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": ["```python\nC = A[(A > B[0]) & (A < B[1]) | ((A > B[1]) & (A < B[2]))]\n```"], "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": ["```python\nresult = len(a) - rankdata(a, method='min').astype(int) + 1\n"], "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": ["```python\nresult = np.argsort(np.argsort(-np.array(a)))\n```"], "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": ["```python\n    return len(a) - rankdata(a, method='min') + 1\n\nresult = f(example_a)\n```"], "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": ["```python\ndists = np.stack((x_dists, y_dists), axis=-1)\n```"], "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": ["dists = np.dstack((x_dists, y_dists))\n"], "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": ["```python\nresult = a[:, second][:, :, third]\n```"], "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": ["```python\narr = np.zeros((20, 10, 10, 2))\n```"], "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": ["```python\nl1 = np.sum(np.abs(X), axis=1)\nresult = X / l1[:, np.newaxis]\nprint(result)\n```"], "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": ["```python\nresult = X / LA.norm(X, axis=1, keepdims=True)\n```\n"], "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": ["```python\nresult = X / np.max(np.abs(X), axis=1, keepdims=True)\n```"], "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": ["```python\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'a': [1, 'foo', 'bar']})\ntarget = 'f'\nconditions = [df['a'].astype(str).str.contains(target, na=False)]\nchoices = ['XX']\nresult = np.select(conditions, choices, default=np.nan)\nprint(result)\n```\n"], "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": ["```python\nfrom scipy.spatial.distance import cdist\n\nresult = cdist(a, a, metric='euclidean')\n```\n"], "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": ["```python\nfrom scipy.spatial.distance import cdist\n\nresult = cdist(a, a)\n```\n"], "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": ["```python\nfrom scipy.spatial.distance import pdist, squareform\n\n# Calculate the pairwise distances\ndistance_matrix = squareform(pdist(a))\n\n# Create the upper triangular matrix\nresult = np.triu(distance_matrix)\n\nresult\n```"], "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": ["```python\nNA = NA.astype(float)\nAVG = np.mean(NA, axis=0)\n```"], "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": ["```python\nNA = np.asarray(A, dtype=float)\nAVG = np.mean(NA)\nprint(AVG)\n```"], "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": ["```python\nNA = np.array([float(x) if x != 'np.inf' else np.inf for x in A])\nAVG = np.mean(NA)\nprint(AVG)\n```"], "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": ["```python\nimport numpy as np\n\na = np.array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3])\nresult = a[np.insert(np.diff(a) != 0, 0, True)]\nresult = result[result != 0]\n```"], "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": ["```python\nresult = np.array([v for i, v in enumerate(a.flatten()) if v != 0 and (i == 0 or v != a[i-1, 0])]).reshape(-1, 1)\n```\n"], "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": ["```python\ndf = pd.DataFrame({\n    'lat': lat.ravel(),\n    'lon': lon.ravel(),\n    'val': val.ravel()\n})\n```"], "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": ["```python\n    lat_flat = lat.flatten()\n    lon_flat = lon.flatten()\n    val_flat = val.flatten()\n    data = {'lat': lat_flat, 'lon': lon_flat, 'val': val_flat}\n    df = pd.DataFrame(data)\n    return df\n\ndf = f(lat, lon, val)\n```"], "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": ["```python\ndf = pd.DataFrame({\n    'lat': lat.ravel(),\n    'lon': lon.ravel(),\n    'val': val.ravel()\n})\ndf['maximum'] = df[['lat', 'lon', 'val']].max(axis=1)\n```"], "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": ["```python\nresult = []\nrows, cols = a.shape\nwin_row, win_col = size\n\nfor i in range(rows):\n    for j in range(cols):\n        row_start = max(0, i - win_row // 2)\n        row_end = min(rows, i + win_row // 2 + 1)\n        col_start = max(0, j - win_col // 2)\n        col_end = min(cols, j + win_col // 2 + 1)\n        result.append(a[row_start:row_end, col_start:col_end])\n```\n"], "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": ["```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef sliding_window(a, size):\n    m, n = a.shape\n    y, x = size\n    padded = np.pad(a, ((y//2,), (x//2,)), mode='constant', constant_values=0)\n    shape = (m + y - 1, n + x - 1, y, x)\n    strides = padded.strides * 2\n    windows = as_strided(padded, shape=shape, strides=strides)\n    result = []\n\n    for i in range(m):\n        for j in range(n):\n            window = windows[i, j]\n            non_zero = window[window != 0]\n            valid_shape = (min(y, i+y-y//2, m), min(x, j+x-x//2, n))\n            result.append(non_zero.reshape(valid_shape))\n    \n    return result\n\na = np.array([[1,2,3,4],\n       [2,3,4,5],\n       [3,4,5,6],\n       [4,5,6,7]])\n\nsize = (3, 3)\nresult = sliding_window(a, size)\nprint(result)\n```\n"], "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": ["```python\nresult = np.nan_to_num(np.mean(a), nan=np.inf)\n```"], "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": ["```python\n    real_parts = np.array([np.inf if np.isinf(c.real) else c.real for c in a])\n    imag_parts = np.array([np.nan if np.isinf(c.imag) else c.imag for c in a])\n\n    mean_real = np.mean(real_parts)\n    mean_imag = np.nanmean(imag_parts)\n\n    return mean_real + mean_imag * 1j\n\nresult = f()\n```"], "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": ["```python\nresult = Z[[slice(None)] * (Z.ndim - 1) + [slice(-1, None)]]\n```"], "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": ["```python\nresult = a[tuple(slice(-1, None) if i == 0 else slice(None) for i in range(a.ndim))]\n```"], "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": ["```python\nresult = any(np.array_equal(c, cnt) for cnt in CNTS)\n```"], "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": ["```python\nresult = any(np.array_equal(c, cnt, equal_nan=True) for cnt in CNTS)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": ["```python\nf = intp.interp2d(np.arange(2), np.arange(2), a[:2, :2], kind='linear')\nresult = f(x_new, y_new)\n```"], "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": ["```python\ndf = pd.DataFrame(data)\ndf['Q_cum'] = df.groupby('D')['Q'].cumsum()\n```\n"], "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": ["i = np.diag(i)\n"], "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": ["```python\na = np.diag(np.diag(a))\n```"], "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": ["```python\nstart_epoch = pd.Timestamp(start).value\nend_epoch = pd.Timestamp(end).value\ntimestamps = np.linspace(start_epoch, end_epoch, n)\nresult = pd.to_datetime(timestamps)\n```"], "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": ["```python\nresult = np.where((x == a) & (y == b))[0][0] if np.any((x == a) & (y == b)) else -1\n```"], "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": ["```python\nresult = np.where((x == a) & (y == b))[0]\n```"], "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": ["```python\nresult = np.polyfit(x, y, 2)\n```"], "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": ["```python\nresult = np.polyfit(x, y, degree)\n```"], "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": ["```python\ndf = temp_df.apply(lambda x: x - temp_arr[x.name], axis=1)\n```"], "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": ["```python\nresult = np.einsum('ijk,kl->ijl', A, B)\n```"], "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": ["```python\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, 1)).reshape(a.shape)\n```"], "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": ["```python\nscaler = MinMaxScaler()\nresult = np.array([scaler.fit_transform(row.reshape(-1, 1)).flatten() for row in arr])\n```"], "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": ["```python\nresult = np.array([MinMaxScaler().fit_transform(matrix) for matrix in a])\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": ["```python\narr_temp = arr.copy()\nmask1 = arr_temp < -10\nmask2 = arr_temp >= 15\n\narr[mask1] = 0\narr[mask2] = 30\narr[~mask1 & ~mask2] += 5\n```"], "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": ["```python\nfor i in range(arr.shape[0]):\n    mask1 = arr[i] < n1[i]\n    mask2 = arr[i] >= n2[i]\n    mask3 = (~mask1) & (~mask2)\n    arr[i][mask1] = 0\n    arr[i][mask2] = 30\n    arr[i][mask3] += 5\n```\n"], "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": ["```python\nresult = np.count_nonzero(~np.isclose(s1, s2))\n```"], "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": ["```python\nresult = np.sum(~np.isclose(s1, s2, equal_nan=True))\n```"], "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": ["```python\nresult = all(np.array_equal(a[0], arr) for arr in a)\n```"], "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": ["```python\nresult = all(np.isnan(arr).any() for arr in a)\n```"], "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": ["```python\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), mode='constant')\n```"], "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": ["```python\nresult = np.zeros(shape)\nresult[:a.shape[0], :a.shape[1]] = a\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": ["```python\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), constant_values=element)\n```"], "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": ["```python\n    padded_arr = np.zeros(shape)\n    padded_arr[:arr.shape[0], :arr.shape[1]] = arr\n    return padded_arr\n\nresult = f(arr, shape=(93, 13))\n```\n"], "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": ["```python\nimport numpy as np\na = np.ones((41, 12))\nshape = (93, 13)\n\ndef pad_to_shape(a, shape):\n    pad_height_top = (shape[0] - a.shape[0]) // 2\n    pad_height_bottom = shape[0] - a.shape[0] - pad_height_top\n    pad_width_left = (shape[1] - a.shape[1]) // 2\n    pad_width_right = shape[1] - a.shape[1] - pad_width_left\n    \n    return np.pad(\n        a,\n        ((pad_height_top, pad_height_bottom), \n         (pad_width_left, pad_width_right)),\n        mode='constant'\n    )\n\nresult = pad_to_shape(a, shape)\n```"], "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": ["```python\na = a.reshape(a.shape[0] // 3, 3)\n```"], "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": ["```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n```"], "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": ["```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n```"], "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": ["```python\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n```\n"], "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": ["```python\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n```"], "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": ["```python\nmask = np.eye(a.shape[2], dtype=bool)[b]\nresult = a[~mask].sum()\n```"], "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": ["```python\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\nprint(result)\n```\n```"], "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": ["```python\nimport numpy as np\n\nim = np.array([[0,0,0,0,0,0],\n               [0,0,1,1,1,0],\n               [0,1,1,0,1,0],\n               [0,0,0,1,1,0],\n               [0,0,0,0,0,0]])\n\n# Find rows and columns where there is at least one non-zero element\nrows = np.any(im, axis=1)\ncols = np.any(im, axis=0)\n\n# Extract the subarray with only these rows and columns\nresult = im[np.ix_(rows, cols)]\n```\n"], "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": ["```python\nrows = np.any(A, axis=1)\ncols = np.any(A, axis=0)\ncropped_A = A[np.ix_(rows, cols)]\nresult = cropped_A\n```"], "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": ["```python\n# Identify rows and columns to keep\nrows = np.any(im != 0, axis=1)  # Rows with any non-zero\ncols = np.any(im != 0, axis=0)  # Columns with any non-zero\n\n# Trim the array\nresult = im[np.ix_(rows, cols)]\n```"], "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": ["```python\nresult = im[~np.all(im == 0, axis=1)][:, ~np.all(im == 0, axis=0)]\n```\n"], "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": ["```python\nplt.scatter(x, y, label='x-y')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": ["```python\nplt.minorticks_on()\nplt.tick_params(axis='y', which='minor', direction='in', length=5)\nplt.show()\n```"], "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": ["```python\nplt.minorticks_on()\n```"], "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": ["```python\nplt.minorticks_on()\nplt.tick_params(axis='y', which='minor', bottom=False)\nplt.show()\n```"], "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": ["```python\nstyles = ['-', '--', '-.', ':']\nfor i, style in enumerate(styles):\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=f'Style {style}')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": ["```python\nline_styles = ['-', '--', '-.', ':']\nfor style in line_styles:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=f'Style: {style}')\n\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": ["```python\nplt.plot(x, y, marker='D', markersize=5, linestyle='-')\nplt.show()\n```"], "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": ["```python\nplt.plot(x, y, marker='D', linewidth=2, markersize=10)\nplt.show()\n```"], "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": ["```python\nax.set_ylim(0, 40)\n```"], "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": ["```python\nplt.axvspan(2, 4, color='red', alpha=0.5)\nplt.show()\n```"], "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": ["```python\nplt.plot([0, 1], [0, 2], linestyle='-')\nplt.show()\n```"], "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": ["```python\nplt.plot([0, 1], [0, 2], marker='o')\nplt.show()\n```"], "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": ["```python\nseaborn.relplot(\n    data=df,\n    x=\"Height (cm)\",\n    y=\"Weight (kg)\",\n    hue=\"Gender\",\n    kind=\"scatter\"\n)\n\nplt.show()\n```"], "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": ["```python\nsns.lineplot(x=x, y=y)\nplt.show()\n```"], "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": ["```python\ndata = pd.DataFrame({'x': x, 'y': y})\nsns.lineplot(data=data, x='x', y='y')\nplt.show()\n```"], "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": ["```python\nplt.plot(x, y, marker='+', markersize=7)\n```"], "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": ["```python\nplt.legend(fontsize=20)\n```"], "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": ["```python\nplt.plot(x, y, label='cos(x)')\nplt.legend(title='xyz', title_fontsize=20)\n```"], "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": ["```python\nl.set_markerfacecolor((1, 0, 0, 0.2))\n```"], "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": ["```python\nl.set_markeredgecolor('black')\n```"], "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": ["```python\nl.set_color(\"red\")\nl.set_markerfacecolor(\"red\")\n```"], "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": ["```python\nplt.xticks(rotation=45)\n"], "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": ["```python\nplt.xticks(rotation=45)\n```"], "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": ["```python\nplt.xticks(np.arange(0, 7, 2))\n```"], "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": ["```python\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": ["```python\nplt.imshow(H, cmap='viridis')\nplt.colorbar()\nplt.show()\n```"], "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": ["```python\nplt.imshow(H, cmap='gray', interpolation='none')\nplt.colorbar()\nplt.show()\n```"], "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": ["```python\nplt.plot(x, y)\nplt.xlabel(\"X\", loc='right')\n```"], "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": ["```python\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\n```"], "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": ["```python\nplt.title(\"\\n\".join(myTitle[i:i+40] for i in range(0, len(myTitle), 40)))\n"], "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": ["```python\nplt.gca().invert_yaxis()\n```"], "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": ["```python\nplt.xticks([0, 1.5])\nplt.show()\n```"], "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": ["```python\nplt.yticks([-1, 1])\n```"], "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": ["```python\nplt.plot(z, color='blue', label='z', zorder=1)\nplt.plot(y, color='orange', label='y', zorder=2)\nplt.plot(x, color='green', label='x', zorder=3)\n\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": ["```python\nplt.scatter(x, y, edgecolors='black', facecolors='blue')\nplt.show()\n```"], "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": ["```python\nplt.plot(x, y)\nplt.xticks(ticks=np.arange(x.min(), x.max()+1, 1))\nplt.yticks(ticks=np.arange(int(y.min()), int(y.max())+1, 1))\nplt.show()\n```"], "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": ["```python\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()\n```"], "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": ["```python\nax = sns.lineplot(x=x, y=y, linestyle='--')\n```"], "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nax1.plot(x, y1)\nax1.set_title('Sine Wave')\nax2.plot(x, y2, 'r')\nax2.set_title('Cosine Wave')\nplt.xlabel('x')\nplt.tight_layout()\nplt.show()\n```"], "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\nax1.plot(x, y1)\nax1.set_frame_on(False)\n\nax2.plot(x, y2)\nax2.set_frame_on(False)\n\nplt.show()\n```"], "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": ["```python\nplt.xlabel(None)\n```"], "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": ["```python\nplt.xticks([])\n```"], "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": ["```python\nplt.xticks([3, 4])\nplt.grid(axis='x', which='both', linestyle='--', color='gray', alpha=0.7)\nplt.show()\n```"], "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": ["```python\nplt.yticks([3, 4])\nplt.grid(axis='y', which='both')\nplt.show()\n```"], "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": ["```python\nplt.yticks(ticks=[3, 4])\nplt.xticks(ticks=[1, 2])\nplt.grid(axis='y', which='both', linestyle='--', linewidth=0.7)\nplt.grid(axis='x', which='both', linestyle='--', linewidth=0.7)\nplt.show()\n```"], "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": ["```python\nplt.grid(True)\n"], "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": ["```python\nplt.legend(loc='lower right')\n```"], "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": ["```python\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.tight_layout()\nplt.show()\nplt.clf()\n```"], "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": ["```python\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\n```"], "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": ["```python\nax.xaxis.tick_top()\n```"], "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": ["```python\nplt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\nplt.show()\n```"], "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": ["```python\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n```"], "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": ["```python\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.yaxis.tick_right()\nplt.show()\n```"], "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": ["```python\nplt.plot(x, y)\nplt.ylabel('Y', labelpad=15, loc='right')\nplt.yticks(ticks=y)\nplt.show()\n```"], "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": ["```python\nsns.jointplot(data=tips, x='total_bill', y='tip', kind='reg', scatter_kws={'color': 'green'}, line_kws={'color': 'green'})\n```"], "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": ["```python\nsns.jointplot(data=tips, x='total_bill', y='tip', kind='reg', line_kws={'color': 'green'})\nplt.show()\n```"], "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": ["```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg')\nplt.show()\n```"], "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": ["```python\ndf.plot(\n    x='celltype', \n    kind='bar', \n    rot=0\n)\nplt.xlabel('celltype')\nplt.xticks(rotation=0)\nplt.show()\n```"], "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": ["```python\ndf.plot(x='celltype', y=['s1', 's2'], kind='bar')\nplt.xticks(rotation=45)\nplt.show()\n```"], "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": ["```python\nplt.plot(x, y)\nplt.xlabel(\"X\", color='red')\nplt.xticks(color='red')\nplt.show()\n```"], "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": ["```python\nplt.plot(x, y)\nplt.xlabel(\"X\", color=\"red\")\nplt.show()\n```"], "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": ["```python\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation='vertical')\nplt.yticks(fontsize=10)\nplt.show()\n```"], "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": ["```python\nx_values = [0.22058956, 0.33088437, 2.20589566]\nfor x in x_values:\n    plt.axvline(x=x, color='r', linestyle='--')\nplt.show()\n```"], "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": ["```python\nplt.imshow(rand_mat, cmap='viridis')\nplt.xticks(ticks=range(4), labels=xlabels)\nplt.yticks(ticks=range(4), labels=ylabels[::-1])\nplt.gca().xaxis.tick_top()\nplt.show()\n```"], "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": ["```python\nfig = plt.figure()\nax = fig.add_subplot(111)\n\np1, = ax.plot(time, Swdown, \"-\", label=\"Swdown\")\np2, = ax.plot(time, Rn, \"-\", label=\"Rn\")\n\nax2 = ax.twinx()\np3, = ax2.plot(time, temp, \"-r\", label=\"temp\")\n\nlines = [p1, p2, p3]\nax.legend(lines, [line.get_label() for line in lines], loc=0)\n\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\nplt.show()\nplt.clf()\n```"], "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\nax1.plot(x, y)\nax1.set_title(\"Y\")\n\nax2.plot(x, y)\nax2.set_title(\"Y\")\n\nplt.tight_layout()\nplt.show()\n```"], "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": ["```python\nsns.scatterplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", s=30)\nplt.show()\n```"], "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": ["```python\nplt.scatter(b, a)\n\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (b[i], a[i]))\n\nplt.xlabel('b')\nplt.ylabel('a')\nplt.title('Scatter plot of a over b with annotations from c')\nplt.show()\n```"], "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": ["```python\nplt.plot(x, y, label='y over x')\nplt.legend(title='Legend')\nplt.show()\n```"], "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": ["```python\nplt.plot(x, y, label='y over x')\nplt.legend(title='Legend', title_fontsize='bold')\nplt.show()\n```"], "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": ["```python\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n```"], "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]})\n\n# Plotting on the subplots\nax1.plot(x, y)\nax1.set_title('Wide Plot')\n\nax2.plot(x, y)\nax2.set_title('Narrow Plot')\n\nplt.tight_layout()\nplt.show()\n```"], "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": ["```python\nplt.hist(x, bins, alpha=0.5, label='x')\nplt.hist(y, bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()\n```"], "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": ["```python\nplt.hist([x, y], bins=10, label=['x', 'y'], alpha=0.7, histtype='bar', edgecolor='black')\nplt.legend()\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Grouped Histograms of x and y')\nplt.show()\n```"], "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": ["```python\nx = [0, 5]\ny = [(b + (x_val - a) * (d - b) / (c - a)) for x_val in x]\n\nplt.plot(x, y)\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.show()\n```"], "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": ["```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\nim1 = axs[0].imshow(x, cmap='viridis')\nim2 = axs[1].imshow(y, cmap='viridis')\n\n# Add a single colorbar\nfig.colorbar(im1, ax=axs, orientation='vertical', fraction=0.02, pad=0.04)\n\nplt.show()\n```"], "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": ["```python\nplt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": ["```python\nfig, axs = plt.subplots(2, 1, figsize=(8, 6))\nfig.suptitle(\"Y and Z\")\n\naxs[0].plot(x, y)\naxs[0].set_title('Y over X')\n\naxs[1].plot(a, z)\naxs[1].set_title('Z over A')\n\nplt.tight_layout(rect=[0, 0, 1, 0.95])\nplt.show()\n```"], "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": ["```python\nx, y = zip(*points)\n\nplt.plot(x, y)\nplt.yscale('log')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis (log scale)')\nplt.title('Line Plot with Logarithmic Y-axis')\nplt.show()\n```"], "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": ["```python\nplt.plot(x, y)\nplt.title('Plot of y vs x', fontsize=20)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=16)\nplt.show()\n```"], "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": ["```python\nax.plot(x, y)\nax.set_xticks(x)\nax.set_xticklabels(x + 1)\nplt.show()\n```"], "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": ["```python\nfor line, color in zip(lines, c):\n    (x1, y1), (x2, y2) = line\n    plt.plot([x1, x2], [y1, y2], color=color)\n\nplt.show()\n```"], "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": ["```python\nplt.figure()\nplt.plot(x, y)\nplt.xscale('log')\nplt.yscale('log')\nplt.xticks([1, 10, 100, 1000], ['1', '10', '100', '1000'])\nplt.yticks([1, 10, 100, 1000], ['1', '10', '100', '1000'])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Log-Log Plot')\nplt.grid(True, which=\"both\", ls=\"--\")\nplt.show()\n```"], "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": ["```python\ndf.plot(marker='o')\nplt.show()\n```"], "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": ["```python\ncounts, bins, patches = plt.hist(data, bins=5, density=True)\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{x*100:.0f}%'))\nplt.yticks(np.arange(0, 0.3, 0.1))\nplt.show()\n```"], "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": ["```python\nplt.plot(x, y, marker='o', linestyle='-', alpha=1, markerfacecolor='b', markeredgewidth=0.5, markeredgecolor='b', markeredgealpha=0.5)\nplt.show()\n```"], "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": ["```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\nline1, = axs[0].plot(x, y, label='y')\nline2, = axs[1].plot(a, z, label='a')\n\nfig.legend(handles=[line1, line2], labels=['y', 'a'], loc='upper right')\nplt.show()\n```"], "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": ["```python\nfig, axs = plt.subplots(1, 2, figsize=(12, 5))\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axs[0])\naxs[0].set_title(\"Bill Depth vs. Bill Length\")\n\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axs[1])\naxs[1].set_title(\"Flipper Length vs. Bill Length\")\n\nplt.tight_layout()\nplt.show()\n```"], "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": ["```python\nax.set_xticklabels(['1', 'second'] + [str(i) for i in range(3, 10)])\n```"], "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": ["```python\nplt.plot(x, y, label=r'$\\lambda$')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": ["```python\ncurrent_ticks = plt.xticks()[0]\nnew_ticks = np.append(current_ticks, [2.1, 3, 7.6])\nplt.xticks(new_ticks)\n"], "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": ["```python\nplt.xticks(rotation=-60, ha='left')\n"], "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": ["```python\nplt.yticks(rotation=-60)\nplt.xticks(va='top')\nplt.show()\n```"], "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": ["```python\nplt.xticks(alpha=0.5)\nplt.show()\n```"], "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": ["```python\nplt.margins(x=0, y=0.1)\n"], "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": ["```python\nplt.gca().set_ymargin(0)\nplt.gca().set_xmargin(0.05)\nplt.show()\n```"], "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": ["```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\nfig.suptitle('Figure')\n\nfor ax in axs:\n    ax.plot(x, y)\nplt.show()\n```"], "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": ["```python\ndf.plot(kind='line')\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.show()\n```"], "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": ["```python\nplt.scatter(x, y, marker='o', edgecolor='black', facecolor='none', linestyle='-', linewidth=1.5)\nplt.grid(True)\nplt.show()\n```"], "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": ["```python\nplt.scatter(x, y, marker='o', facecolors='none', edgecolors='black', hatch='|')\nplt.show()\n```"], "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": ["```python\nplt.scatter(x, y, marker='*')\nplt.show()\n```"], "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": ["```python\nplt.scatter(x, y, s=100, marker='o', edgecolors='black', facecolors='none', linewidths=1.5, hatch='*/')\nplt.show()\n```"], "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": ["```python\nplt.imshow(data, extent=(1, 5, 1, 4))\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.show()\n```"], "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": ["```python\nplt.stem(x, y, orientation='horizontal')\nplt.show()\n```"], "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": ["```python\nplt.bar(d.keys(), d.values(), color=[c[key] for key in d.keys()])\nplt.show()\n```"], "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": ["```python\nplt.axvline(x=3, color='r', linestyle='-', label='cutoff')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": ["```python\nax = plt.subplot(projection='polar')\ntheta = range(len(labels))\nax.bar(theta, height, tick_label=labels)\nplt.show()\n```"], "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": ["```python\nplt.pie(data, labels=l, wedgeprops={'width': 0.4})\nplt.show()\n```"], "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": ["```python\nplt.plot(x, y)\nplt.grid(True, linestyle='--', color='blue')\nplt.show()\n```"], "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": ["```python\nplt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', color='gray')\nplt.grid(which='major', linestyle='', color='')  # This line is optional and just emphasizes not showing major grid.\nplt.show()\n```"], "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": ["```python\nplt.pie(sizes, labels=labels, colors=colors, textprops={'fontweight': 'bold'})\nplt.show()\n```"], "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": ["```python\nplt.pie(sizes, labels=labels, colors=colors, textprops={'weight': 'bold'})\nplt.show()\n```"], "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": ["```python\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='blue')\nplt.show()\n```"], "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": ["```python\nplt.axvline(x=55, color='green', linestyle='--')\n"], "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": ["```python\nbar_width = 0.35\nindex = np.arange(len(blue_bar))\n\nplt.bar(index, blue_bar, bar_width, label='Blue')\nplt.bar(index + bar_width, orange_bar, bar_width, label='Orange')\n\nplt.xlabel('Category')\nplt.ylabel('Values')\nplt.title('Bar Plot')\nplt.xticks(index + bar_width / 2, ('A', 'B', 'C'))\nplt.legend()\n\nplt.show()\n```"], "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\nax1.plot(x, y, label='y over x')\nax2.plot(a, z, label='z over a')\n\nax1.legend(loc='upper left')\n\nplt.show()\n```"], "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": ["```python\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar(label='Value')\nplt.show()\n```"], "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": ["```python\nplt.plot(x, y)\nplt.xticks(np.arange(min(x), max(x)+1, 1))\nplt.show()\n```"], "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": ["```python\ng = sns.catplot(\n    data=df,\n    x=\"sex\",\n    y=\"bill_length_mm\",\n    col=\"species\",\n    kind=\"bar\",\n    sharey=False\n)\nplt.show()\n```"], "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": ["```python\ncircle = plt.Circle((0.5, 0.5), 0.2, edgecolor='black', facecolor='none')\nfig, ax = plt.subplots()\nax.add_patch(circle)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal', 'box')\nplt.show()\n```"], "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": ["```python\nplt.plot(x, y)\nplt.title(r'$\\mathbf{\\phi}$', fontweight='bold')\nplt.show()\n```"], "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": ["```python\nplt.plot(x, y, label=\"Line\")\nplt.legend(handletextpad=0.1)\nplt.show()\n```"], "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": ["```python\nplt.plot(x, y, label='Line')\nplt.legend(handlelength=0.3)\nplt.show()\n```"], "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": ["```python\nplt.legend(ncol=2)\nplt.show()\n```"], "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": ["```python\nplt.legend()\nplt.scatter([2, 7], [2, 7], color='red')  # Adding two markers\nplt.show()\n```"], "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": ["```python\nplt.imshow(data, cmap='viridis')\nplt.colorbar()\nplt.show()\n```"], "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": ["```python\nplt.plot(x, y)\nplt.title(r'$\\bf{Figure}$ 1')\nplt.show()\n```"], "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": ["```python\nsns.pairplot(df, x_vars=['x'], y_vars=['y'], hue='id', plot_kws={'legend': False})\nplt.gca().legend_.remove()\nplt.show()\n```"], "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": ["```python\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n```"], "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": ["```python\nplt.scatter(x, y, clip_on=False)\nplt.show()\n```"], "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": ["```python\nplt.scatter(x, y, facecolors='red', edgecolors='black')\nplt.show()\n```"], "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": ["```python\nfig, axs = plt.subplots(2, 2, figsize=(15, 15))\n\nfor ax in axs.flatten():\n    ax.plot(x, y)\n    ax.set_title('Plot of y over x')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\nplt.tight_layout()\nplt.show()\n```"], "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": ["```python\nplt.hist(x, bins=np.arange(0, 12, 2), edgecolor='black')\nplt.xlim(0, 10)\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram of x')\nplt.show()\n```"], "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": ["```python\nplt.plot(x, y, label='Data')\nplt.fill_between(x, y - error, y + error, color='gray', alpha=0.5)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Plot with Shaded Error')\nplt.legend()\nplt.show()\n```"], "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": ["```python\nplt.axhline(0, color='white', linewidth=0.8)\nplt.axvline(0, color='white', linewidth=0.8)\n```"], "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": ["```python\nax.errorbar(box_position, box_height, yerr=box_errors, fmt='none', ecolor=c)\n"], "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": ["```python\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y)\nax1.set_title(\"Y\")\n\nax2.plot(a, z)\nax2.set_title(\"Z\", pad=20)  # Increase padding to raise the title\n\nplt.tight_layout()\nplt.show()\n```"], "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": ["```python\nfig, axes = plt.subplots(4, 4, figsize=(10, 10))\nplt.subplots_adjust(hspace=0.5, wspace=0.5)\n\nfor ax in axes.flatten():\n    ax.plot(x, y)\n    ax.set_xticks(np.arange(0, 10, 2))\n    ax.set_yticks(np.arange(0, 10, 2))\n\nplt.show()\n```"], "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": ["```python\nplt.figure(figsize=(8, 8))\nplt.matshow(d, fignum=0)\nplt.show()\n```"], "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": ["```python\nfig, ax = plt.subplots(figsize=(8, 3))\nax.axis('tight')\nax.axis('off')\nthe_table = ax.table(cellText=df.values,\n                     colLabels=df.columns,\n                     cellLoc='center',\n                     loc='center',\n                     bbox=[0, 0, 1, 1])\nplt.show()\n```"], "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": ["```python\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.xaxis.set_ticks_position('both')\nplt.show()\n```"], "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": ["```python\nplt.plot(x, y)\nplt.tick_params(axis='x', which='both', bottom=True, top=True)\nplt.show()\n```"], "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": ["```python\nplt.plot(x, y)\nplt.xticks(ticks=x)\nplt.tick_params(axis='x', which='both', bottom=False)\nplt.show()\n```"], "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": ["```python\ng = sns.catplot(data=df, x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", kind=\"strip\")\n\ng.set_titles(\"Group: {col_name}\")\ng.set_titles(col_template=\"Group: {col_name.replace('fat', ' Fat')}\")\n```"], "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": ["```python\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_axis_labels(\"Exercise Time\", \"Pulse\")\nplt.show()\n```"], "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": ["```python\ng = sns.catplot(\n    data=df,\n    x=\"time\",\n    y=\"pulse\",\n    hue=\"kind\",\n    col=\"diet\",\n    kind=\"strip\",\n    legend_out=False\n)\ng.set_axis_labels(\"\", \"\")\nplt.show()\n```"], "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": ["```python\nplt.plot(x, y, label='y')\nplt.legend(fontsize=8)\nplt.show()\n```"], "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": ["```python\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n```"], "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": ["```python\nplt.plot(x, y, label='y')\nplt.legend(frameon=False)\nplt.show()\n```"], "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": ["```python\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.legend()\nplt.xlabel('t')\nplt.ylabel('Value')\nplt.title('Trigonometric Functions')\nplt.show()\n```"], "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": ["```python\nsns.stripplot(data=df, x=\"sex\", y=\"bill_length_mm\", hue=\"species\", dodge=True)\nplt.legend([], [], frameon=False)\nplt.show()\n```"], "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": ["```python\ng = sns.FacetGrid(df, row='b', height=4, aspect=1.5)\ng.map(sns.pointplot, 'a', 'c')\n\nfor ax in g.axes.flat:\n    ax.set_xticks(np.arange(0, 31, 1))  # Set xticks at intervals of 1\n    ax.set_xticklabels(np.arange(0, 31, 2))  # Set xtick labels at intervals of 2\n\nplt.show()\n```"], "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": ["```python\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(elev=50, azim=100)\nplt.show()\n```"], "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": ["```python\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\nplt.show()\n```"], "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": ["```python\ngs = gridspec.GridSpec(nrow, ncol, wspace=0, hspace=0)\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(x, cmap='viridis')\n        ax.set_xticks([])\n        ax.set_yticks([])\n\nplt.show()\n```"], "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": ["```python\nx.assign(1)\nresult = x.numpy()\n```"], "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": ["```python\nimport tensorflow as tf\n\nx = tf.Variable(0)\nx.assign(114514)\nresult = x.numpy()\n```"], "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": ["```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```"], "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": ["```python\nresult = tf.cast(tf.ones((len(labels), 10)), tf.int32)\nfor i, label in enumerate(labels):\n    result[i, label] = 0\nresult\n```"], "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": ["```python\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n```"], "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": ["```python\n    return tf.one_hot(labels, depth=10, dtype=tf.int32)\n# result = f(labels)\n```"], "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": ["```python\nclasses = 10\nresult = tf.tensor_scatter_nd_update(\n    tf.ones((len(labels), classes), dtype=tf.int32),\n    indices=[[i, labels[i]] for i in range(len(labels))],\n    updates=tf.zeros(len(labels), dtype=tf.int32)\n)\n"], "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": ["```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_eager_execution()\ninput = [10, 20, 30]\n\ndef my_map_func(i):\n    return [i, i+1, i+2]\n\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(lambda input: tf.data.Dataset.from_tensor_slices(\n    tf.compat.v1.py_func(func=my_map_func, inp=[input], Tout=[tf.int64])\n))\n\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n    for _ in range(9):\n        result.append(sess.run(element))\n\nprint(result)\n```\n"], "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": ["```python\n    dataset = tf.data.Dataset.from_tensor_slices(input)\n    \n    def my_map_func(i):\n        return tf.data.Dataset.from_tensor_slices([i, i + 1, i + 2])\n\n    dataset = dataset.flat_map(my_map_func)\n\n    element = tf.compat.v1.data.make_one_shot_iterator(dataset).get_next()\n    result = []\n    with tf.compat.v1.Session() as sess:\n        for _ in range(len(input) * 3):\n            result.append(sess.run(element))\n    return result\n\nresult = f()\n\nprint(result)\n```"], "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": ["```python\nmax_length = 8\nresult = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.int32)\nresult = 1 - result\nprint(result.numpy())\n```\n"], "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": ["```python\nmax_len = 8\nlengths_tensor = tf.constant(lengths)\nmask = tf.sequence_mask(lengths_tensor, maxlen=max_len, dtype=tf.int32)\nresult = 1 - mask\n```\n"], "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": ["```python\nmax_length = 8\nmask = tf.sequence_mask(lengths, maxlen=max_length)\nmask = tf.cast(mask, tf.float32)\nresult = tf.reverse(mask, axis=[1])\nprint(result)\n```\n"], "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": ["```python\n    max_length = 8\n    mask = tf.sequence_mask(lengths, maxlen=max_length, dtype=tf.int32)\n    return mask\n\nresult = f()\n```"], "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": ["```python\nmax_length = 8\nlengths_tensor = tf.constant(lengths)\nrange_tensor = tf.range(max_length)\n\nmask = tf.cast(range_tensor < (max_length - tf.expand_dims(lengths_tensor, -1)), tf.float32)\nresult = 1.0 - mask\nresult = tf.reverse(result, axis=[-1])\nprint(result)\n```\n"], "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": ["```python\nresult = tf.stack(tf.meshgrid(a, b, indexing='ij'), axis=-1)\nresult = tf.reshape(result, [-1, 2])\n```\n"], "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": ["```python\n    a_exp = tf.expand_dims(a, 1)\n    b_exp = tf.expand_dims(b, 0)\n    a_tile = tf.tile(a_exp, [1, tf.shape(b)[0]])\n    b_tile = tf.tile(b_exp, [tf.shape(a)[0], 1])\n    result = tf.stack([tf.reshape(a_tile, [-1]), tf.reshape(b_tile, [-1])], axis=1)\n    return result\n\nresult = f(example_a, example_b)\n```"], "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": ["```python\nresult = tf.squeeze(a, axis=2)\n```"], "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": ["```python\nresult = tf.expand_dims(a, axis=2)\n```"], "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": ["```python\nresult = tf.reshape(a, (1, 50, 100, 1, 512))\n```"], "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": ["```python\nresult = tf.reduce_sum(A, axis=1)\n```"], "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": ["```python\nresult = tf.reduce_prod(A, axis=1)\n```"], "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": ["```python\nresult = tf.math.reciprocal_no_nan(A)\n```"], "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": ["```python\nresult = tf.reduce_sum(tf.square(a - b), axis=1)\n```"], "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": ["```python\nimport tensorflow as tf\n\na = tf.constant([\n  [1, 1, 1],\n  [1, 1, 1]\n])\nb = tf.constant([\n  [0, 0, 0],\n  [1, 1, 1]\n])\n\nsquared_diff = tf.square(a - b)\nresult = tf.reduce_sum(squared_diff, axis=0)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": ["```python\n    squared_diff = tf.square(tf.subtract(A, B))\n    result = tf.reduce_sum(squared_diff, axis=1)\n    return result\n\nresult = f()\n```"], "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": ["```python\nresult = tf.gather_nd(x, tf.stack([y, z], axis=1))\n```"], "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": ["```python\nresult = tf.gather_nd(x, tf.stack([row, col], axis=1))\n```"], "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": ["```python\n    return tf.gather_nd(x, tf.stack([y, z], axis=1))\n\nresult = f()\n```"], "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": ["```python\nA_exp = tf.expand_dims(A, axis=0)\nB_exp = tf.expand_dims(B, axis=1)\nresult = tf.reduce_sum(A_exp * B_exp, axis=-1)\n```"], "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": ["```python\nresult = tf.linalg.matmul(A, B, transpose_b=True)\n```"], "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": ["```python\nresult = tf.strings.unicode_decode(x, input_encoding='UTF-8')\nresult = tf.strings.unicode_encode(result, output_encoding='UTF-8')\n```"], "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": ["```python\n    strings = [tf.compat.as_text(item, encoding='utf-8') for item in x]\n    return strings\n\nresult = f(example_x)\n```"], "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": ["```python\nnon_zero_mask = tf.cast(x != 0, tf.float32)\nsum_x = tf.reduce_sum(x, axis=-2)\ncount_non_zero = tf.reduce_sum(non_zero_mask, axis=-2)\ny = sum_x / tf.maximum(count_non_zero, 1)\nresult = y\n```"], "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": ["```python\nnon_zero_mask = tf.cast(x != 0, tf.float32)\ncount_non_zero = tf.reduce_sum(non_zero_mask, axis=2, keepdims=True)\n\nmean_non_zero = tf.reduce_sum(x, axis=2, keepdims=True) / tf.maximum(count_non_zero, 1)\nmean_non_zero = tf.where(count_non_zero > 0, mean_non_zero, tf.zeros_like(mean_non_zero))\n\nsquared_diff = tf.square(x - mean_non_zero) * non_zero_mask\nvariance_non_zero = tf.reduce_sum(squared_diff, axis=2) / tf.maximum(count_non_zero[..., 0] - 1, 1)\n\nresult = variance_non_zero\n```\n"], "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": ["```python\n    non_zero_mask = tf.not_equal(x, 0)\n    non_zero_count = tf.reduce_sum(tf.cast(non_zero_mask, tf.float32), axis=-2, keepdims=True)\n    sum_non_zero = tf.reduce_sum(x, axis=-2)\n    average_non_zero = sum_non_zero / non_zero_count\n    return average_non_zero\n\nresult = f(example_x)\n```"], "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": ["```python\nimport tensorflow as tf\n\ntf.random.set_seed(10)\nA = tf.random.normal([100, 100])\nB = tf.random.normal([100, 100])\n\n# Eager execution is enabled by default in TF 2.x\nresult = tf.reduce_sum(tf.matmul(A, B))\n\nprint(result)\n```"], "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": ["```python\nresult = tf.argmax(a, axis=1)\n```"], "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": ["```python\nresult = tf.argmax(a, axis=1)\n```"], "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": ["```python\n    return tf.argmax(a, axis=1)\n\nresult = f(example_a)\n```"], "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": ["```python\nresult = tf.argmin(a, axis=0)\n```\n"], "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": ["```python\nmodel.save('export/1', save_format='tf')\n```\n"], "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": ["```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform([10], minval=1, maxval=5, dtype=tf.int32)\n```\n"], "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": ["```python\nimport tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\n\nresult = tf.random.uniform(shape=[114], minval=2, maxval=6, dtype=tf.int32)\n```"], "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": ["```python\n    tf.random.set_seed(seed_x)\n    result = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n    return result\n```\n"], "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": ["```python\nresult = tf.__version__\n```"], "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": ["```python\nlogx = np.log(x)\nresult = np.polyfit(logx, y, 1)\n```"], "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": ["```python\nlog_x = np.log(x)\nresult = np.polyfit(log_x, y, 1)\n```"], "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": ["```python\ndef exp_func(x, A, B, C):\n    return A * np.exp(B * x) + C\n\nresult, _ = scipy.optimize.curve_fit(exp_func, x, y, p0=p0)\n```"], "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": ["```python\nstatistic, p_value = stats.ks_2samp(x, y)\n```"], "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": ["```python\ntest_stat, p_value = stats.ks_2samp(x, y)\nresult = p_value < alpha\n```"], "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": ["```python\ndef f(variables):\n    a, b, c = variables\n    return ((a + b - c) - 2)**2 + ((3 * a - b - c))**2 + sin(b) + cos(b) + 4\n\nresult = optimize.minimize(f, initial_guess)\nresult_list = result.x.tolist()\nprint(result_list)\n```"], "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": ["```python\np_values = scipy.stats.norm.cdf(z_scores)\n```"], "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": ["```python\np_values = scipy.stats.norm.cdf(z_scores)\n```"], "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": ["z_scores = scipy.stats.norm.ppf(p_values)\n"], "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": ["```python\nshape = stddev  # shape parameter for lognorm\nscale = np.exp(mu)  # scale parameter\nresult = stats.lognorm.cdf(x, shape, scale=scale)\n```"], "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": ["```python\nexpected_value = np.exp(mu + (stddev**2) / 2)\nmedian = np.exp(mu)\n```"], "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": ["```python\nresult = sa.multiply(c)\n```"], "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": ["```python\n    result = sA.multiply(sB)\n    return result\n```"], "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": ["```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\nprint(result)\n```\n"], "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": ["```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\nresult\n```\n```"], "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": ["```python\nfrom scipy import misc\nfrom scipy.ndimage import rotate\nimport numpy as np\n\ndata_orig = misc.face()\nx0, y0 = 580, 300  # original point\nangle = 66  # rotation angle\n\n# Get the shape of the original image\nh, w, _ = data_orig.shape\ncx, cy = w / 2, h / 2  # center of the image\n\n# Translate point to origin for rotation\nx0_translated, y0_translated = x0 - cx, y0 - cy\n\n# Apply rotation matrix\ntheta = np.radians(angle)\ncos_theta, sin_theta = np.cos(theta), np.sin(theta)\nx_rot = x0_translated * cos_theta - y0_translated * sin_theta\ny_rot = x0_translated * sin_theta + y0_translated * cos_theta\n\n# Translate point back to the rotated image's origin\nxrot, yrot = x_rot + cx, y_rot + cy\n\ndata_rot = rotate(data_orig, angle)\n\n# Return as integer values\nxrot, yrot = int(round(xrot)), int(round(yrot))\n```\n"], "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": ["```python\nresult = M.diagonal()\n```"], "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": ["```python\n# Normalize times to be between 0 and 1\nnormalized_times = np.array(times) / T\n\n# Perform the KS test against the uniform distribution\nresult = stats.kstest(normalized_times, \"uniform\", args=(0, 1))\nprint(result)\n```"], "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": ["```python\n    scaled_times = np.array(times) / T\n    result = stats.kstest(scaled_times, 'uniform', args=(0, 1))\n    return result\n# Use the function to get the K-S test result\nresult = f()\nprint(result)\n```"], "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": ["```python\n# Normalize times to be between 0 and 1, as required by the KS test for uniformity\nnormalized_times = np.array(times) / T\n\n# Perform the KS test\nks_statistic, p_value = stats.kstest(normalized_times, \"uniform\")\n\n# Interpret the result\nconfidence_level = 0.95\nresult = p_value > (1 - confidence_level)\nEND SOLUTION\nprint(result)\n```"], "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": ["```python\nFeature = sparse.hstack([c1, c2]).tocsr()\n```"], "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": ["```python\nFeature = sparse.hstack([c1, c2])\n```"], "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": ["```python\nFeature = sparse.vstack([c1, c2])\n```"], "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": ["```python\ndist_matrix = scipy.spatial.distance_matrix(points1, points2)\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(dist_matrix)\nresult = col_ind.tolist()\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": ["```python\nmanhattan_distances = scipy.spatial.distance.cdist(points1, points2, metric='cityblock')\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(manhattan_distances)\nresult = col_ind\n```"], "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": ["```python\nb = b.tolil()\nb.setdiag(0)\nb = b.tocsr()\n```\n"], "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": ["```python\nlabeled_array, num_features = ndimage.label(img > threshold, structure=np.ones((3, 3)))\nresult = num_features\n```"], "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": ["```python\nbinary_img = img < threshold\nlabeled_array, num_features = ndimage.label(binary_img)\nresult = num_features\n```"], "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": ["```python\n    mask = img > threshold\n    labeled_array, num_features = ndimage.label(mask, structure=np.ones((3, 3)))\n    return num_features\n\n# result = f(img)\n```"], "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": ["```python\n# Identify regions exceeding the threshold\nbinary_img = img > threshold\n\n# Label connected regions\nlabeled_img, num_features = ndimage.label(binary_img)\n\n# Calculate the center of mass for each region\ncenters_of_mass = ndimage.center_of_mass(binary_img, labeled_img, range(1, num_features + 1))\n\n# Calculate distances from the top left corner\ndistances = [np.sqrt(x**2 + y**2) for y, x in centers_of_mass]\n\nresult = distances\n```"], "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": ["```python\nM = M + M.T - sparse.diags(M.diagonal())\n```"], "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": ["```python\n    sA = sA + sA.T  # Make the matrix symmetric\n    sA.setdiag(sA.diagonal() / 2)  # To handle the diagonal elements correctly\n    return sA\n```"], "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": ["```python\nlabeled_array, num_features = scipy.ndimage.label(square)\nsizes = scipy.ndimage.sum(square, labeled_array, range(num_features + 1))\nmask_size = sizes <= 1\nremove_pixel = mask_size[labeled_array]\nsquare[remove_pixel] = 0\n```\n"], "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": ["```python\nimport numpy as np\nimport scipy.ndimage\n\n# Create the initial square array\nsquare = np.zeros((32, 32))\nsquare[10:-10, 10:-10] = np.random.randint(1, 255, size=(12, 12))\nnp.random.seed(12)\nx, y = (32 * np.random.random((2, 20))).astype(int)\nsquare[x, y] = np.random.randint(1, 255, size=(20,))\n\n# Remove isolated cells\nstructure = np.array([[1, 1, 1],\n                      [1, 0, 1],\n                      [1, 1, 1]])\n\nisolated_cells = (square != 0) & (scipy.ndimage.convolve(square != 0, structure, mode='constant', cval=0) == 0)\nsquare[isolated_cells] = 0\n```\n"], "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": ["```python\nmean = col.mean()\nstandard_deviation = np.sqrt((col.power(2).mean()) - (mean ** 2))\n```"], "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": ["```python\nMax = col.max()\nMin = col.min()\n```"], "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": ["```python\nfrom scipy import stats\n\n# Extract non-zero elements and their positions\ndata = col.data\nindices = col.indices\n\n# Find the mode\nmode_result = stats.mode(data)\nmode = mode_result.mode[0]\n\n# Create a full 988 element array for median computation\nfull_vector = np.zeros(988)\nfull_vector[indices] = data\n\n# Find the median\nmedian = np.median(full_vector)\n\nMedian, Mode = median, mode\n```\n"], "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": ["```python\ndef fourier_n(x, *coeffs):\n    return sum(a * np.cos(n * np.pi / tau * x) for n, a in enumerate(coeffs, start=1))\n\ninitial_guess = np.ones(degree)\npopt, pcov = curve_fit(fourier_n, z, Ua, p0=initial_guess)\n```"], "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": ["```python\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\n# Get unique region IDs excluding background (0)\nregion_ids = np.unique(example_array)\nregion_ids = region_ids[region_ids != 0]\n\n# Dictionary to hold region coordinates\nregions = {}\n\n# Collect coordinates for each region\nfor region_id in region_ids:\n    coords = np.column_stack(np.where(example_array == region_id))\n    regions[region_id] = coords\n\n# Prepare result container\nresult = []\n\n# Calculate pairwise distances\nfor i, id1 in enumerate(region_ids):\n    for id2 in region_ids[i+1:]:\n        coords1 = regions[id1]\n        coords2 = regions[id2]\n        distances = cdist(coords1, coords2)\n        min_distance = np.min(distances)\n        result.append((id1, id2, min_distance))\n\nprint(result)\n```\n"], "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": ["```python\ndef calculate_pairwise_manhattan_distances(array):\n    unique_ids = np.unique(array[array != 0])\n    coords = {uid: np.argwhere(array == uid) for uid in unique_ids}\n    \n    result = []\n    for i, id1 in enumerate(unique_ids):\n        for j, id2 in enumerate(unique_ids):\n            if j > i:\n                distances = scipy.spatial.distance.cdist(coords[id1], coords[id2], metric='cityblock')\n                min_distance = np.min(distances)\n                result.append([id1, id2, min_distance])\n    return np.array(result)\n\nresult = calculate_pairwise_manhattan_distances(example_array)\n```\n"], "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": ["```python\n    ids = np.unique(example_array)\n    ids = ids[ids != 0]\n    regions = {i: np.argwhere(example_array == i) for i in ids}\n    distances = []\n\n    for i, region1 in regions.items():\n        for j, region2 in regions.items():\n            if i < j:\n                dist_matrix = scipy.spatial.distance.cdist(region1, region2, metric='euclidean')\n                min_dist = np.min(dist_matrix)\n                distances.append((i, j, min_dist))\n\n    return distances\n\nresult = f(example_array)\n```"], "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": ["```python\nresult = np.zeros((5, 100))\n\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k=2, s=4)\n    result[i] = interpolate.splev(x_val, tck, ext=0)\n\nplt.figure(figsize=(5.15, 5.15))\nplt.subplot(111)\nfor i in range(5):\n    plt.plot(x[:, i], y[:, i], linestyle='', marker='o')\n    plt.plot(x_val, result[i], linestyle=':', linewidth=0.25, color='black')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n```\n"], "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": ["```python\ndata = [x1, x2, x3, x4]\nstatistic, critical_values, significance_level = ss.anderson_ksamp(data)\n```"], "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": ["```python\nresult = ss.anderson_ksamp([x1, x2])\nsignificance_level = 0.05\np_value = result.significance_level / 100\n\n# Check if p-value is greater than the significance level\nsame_population = p_value > significance_level\nEND SOLUTION\n```"], "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": ["```python\ndef rolling_kendalltau(data, window):\n    result = data.copy()\n    pairs = [('A', 'B'), ('A', 'C'), ('B', 'C')]\n\n    for col1, col2 in pairs:\n        result[f'{col1}{col2}'] = np.nan\n        for i in range(window - 1, len(data)):\n            x = data[col1].iloc[i - window + 1:i + 1]\n            y = data[col2].iloc[i - window + 1:i + 1]\n            tau, _ = stats.kendalltau(x, y)\n            result.at[data.index[i], f'{col1}{col2}'] = tau\n\n    return result\n\ndf = rolling_kendalltau(df, 3)\n```\n"], "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": ["```python\nresult = sa.nnz == 0\n```"], "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": ["```python\nresult = (sa.nnz == 0)\n```"], "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": ["```python\nresult = block_diag(*a)\n```"], "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": ["```python\nresult = stats.ranksums(pre_course_scores, during_course_scores)\np_value = result.pvalue\n```"], "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": ["```python\n    _, p_value = stats.ranksums(pre_course_scores, during_course_scores)\n    return p_value\n```"], "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": ["```python\nn = len(a)\nmean_a = np.mean(a)\nm2 = np.sum((a - mean_a)**2) / n\nm4 = np.sum((a - mean_a)**4) / n\nkurtosis_result = m4 / m2**2\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": ["```python\nkurtosis_result = scipy.stats.kurtosis(a, fisher=False, bias=False)\n```"], "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": ["```python\ninterpolator = scipy.interpolate.RegularGridInterpolator((np.linspace(-1, 1, 10), np.linspace(-2, 0, 10)), z.T, method='cubic')\npoints = np.array([s, t]).T\nresult = interpolator(points)\n```\n"], "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": ["```python\n    interpolator = scipy.interpolate.interp2d(x.ravel(), y.ravel(), z.ravel(), kind='cubic')\n    result = interpolator(s, t).diagonal()\n    return result\n```\n"], "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": ["```python\nimport numpy as np\n\n# Initialize result array with zeros\nresult = np.zeros(len(points), dtype=int)\n\n# Function to check if a point is inside a polygon\ndef point_in_polygon(point, vertices):\n    path = scipy.spatial.ConvexHull(vertices)\n    new_points = np.append(vertices, [point], axis=0)\n    new_hull = scipy.spatial.ConvexHull(new_points)\n    return np.array_equal(path.vertices, new_hull.vertices[:len(path.vertices)])\n\n# Iterate over the extra points\nfor ep in extraPoints:\n    for i, region in enumerate(vor.point_region):\n        if -1 not in vor.regions[region]:  # Check if the region is bounded\n            vertices = vor.vertices[vor.regions[region]]\n            if point_in_polygon(ep, vertices):\n                result[i] += 1\n                break\n\nresult\n```\n"], "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": ["```python\nimport numpy as np\n\n# Function to check if a point is inside a polygon\ndef is_point_in_polygon(point, polygon):\n    hull = scipy.spatial.ConvexHull(polygon)\n    new_points = np.concatenate((polygon, [point]))\n    new_hull = scipy.spatial.ConvexHull(new_points)\n    return np.array_equal(hull.vertices, new_hull.vertices)\n\n# Count extra points in each Voronoi region\nregion_counts = np.zeros(len(vor.point_region))\n\nfor extra_point in extraPoints:\n    for i, region_index in enumerate(vor.point_region):\n        region = vor.regions[region_index]\n        if -1 not in region:  # Ignore infinite regions\n            polygon = [vor.vertices[i] for i in region]\n            if is_point_in_polygon(extra_point, polygon):\n                region_counts[i] += 1\n\nresult = region_counts\n```\n"], "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": ["```python\npadded_vectors = [np.pad(vec, (0, max_vector_size - vec.size), 'constant') for vec in vectors]\nsparse_matrix = sparse.csr_matrix(padded_vectors)\nresult = sparse_matrix\n```\n"], "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": ["```python\nb = scipy.ndimage.median_filter(a, size=3, origin=(0, -1))\n```"], "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": ["```python\nresult = M[row, column]\n```"], "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": ["```python\nresult = M[row, column].toarray().flatten()\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": ["```python\nf_interp = scipy.interpolate.interp1d(x, array, axis=0)\nnew_array = f_interp(x_new)\n```"], "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": ["from scipy.integrate import quad\n\ndef NormalDistro(u, o2, x):\n    dev = abs((x - u) / o2)\n    P_inner, _ = quad(NDfx, -dev, dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer / 2\n    return P\n\nprob = NormalDistro(u, o2, x)\n"], "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": ["```python\nfrom scipy.integrate import quad\n\ndef NormalDistro(u, o2, x):\n    dev = abs((x - u) / o2)\n    P_inner, _ = quad(NDfx, -dev, dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer / 2\n    return P\n\n# Example function usage:\nprob = NormalDistro(u=1, o2=3, x=2.5)\nprob\n```"], "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": ["```python\nresult = sf.dct(np.eye(N), norm='ortho', axis=0)\n```"], "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": ["```python\nresult = diags([matrix[1], matrix[0], matrix[2]], [0, -1, 1], (5, 5)).toarray()\n```\n"], "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": ["```python\nresult = np.zeros((N + 1, N + 1))\nfor i in range(N + 1):\n    result[i, :i + 1] = scipy.stats.binom.pmf(range(i + 1), i, p)\n```"], "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": ["```python\nresult = df.apply(stats.zscore, axis=1)\n```"], "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": ["```python\nresult = df.apply(stats.zscore)\nresult\n```"], "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": ["```python\nz_scores = df.apply(lambda x: stats.zscore(x, nan_policy='omit'), axis=1)\nresult = pd.concat([df, z_scores], keys=['data', 'zscore'], axis=1).swaplevel(0, 1, axis=1).sort_index(axis=1)\nresult\n```"], "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": ["```python\n# Calculate z-scores\nz_scores = df.apply(lambda x: stats.zscore(x, nan_policy='omit'), axis=0)\n\n# Round data and z-scores to 3 decimal places\ndf_rounded = df.round(3)\nz_scores_rounded = z_scores.round(3)\n\n# Create a multi-index to store data and corresponding z-scores\narrays = [\n    np.repeat(df.index, 2),\n    ['data', 'zscore'] * len(df.index)\n]\n\nindex = pd.MultiIndex.from_arrays(arrays, names=('probegenes', None))\n\n# Concatenate data and z-scores\nresult = pd.DataFrame(\n    np.vstack([df_rounded.values, z_scores_rounded.values]).reshape(-1, df.shape[1]),\n    index=index,\n    columns=df.columns\n)\n\nresult\n```\n"], "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": ["```python\nresult = scipy.optimize.line_search(\n    test_func,\n    test_grad,\n    np.array(starting_point),\n    np.array(direction)\n)\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": ["```python\ny, x = np.indices(shape)\ncenter = np.array([(shape[0] - 1) / 2, (shape[1] - 1) / 2])\nresult = np.sqrt((x - center[1])**2 + (y - center[0])**2)\n```\n"], "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": ["```python\ncenter = np.array([(shape[0] - 1) / 2, (shape[1] - 1) / 2])\ny, x = np.indices(shape)\npoints = np.c_[y.ravel(), x.ravel()]\nresult = distance.cdist(points, [center], metric='cityblock').reshape(shape)\n```"], "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": ["```python\n    y, x = np.indices(shape)\n    center = np.array([(shape[0] - 1) / 2.0, (shape[1] - 1) / 2.0])\n    distances = np.sqrt((x - center[1])**2 + (y - center[0])**2)\n    return distances\n```\n"], "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": ["```python\nzoom_factors = (shape[0] / x.shape[0], shape[1] / x.shape[1])\nresult = scipy.ndimage.zoom(x, zoom_factors, order=1)\n```"], "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": ["```python\ndef objective(x, a, y):\n    model = a.dot(x ** 2)\n    return np.sum((y - model) ** 2)\n\nresult = scipy.optimize.minimize(objective, x0, args=(a, y))\nout = result.x\nprint(out)\n```\n"], "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": ["```python\ndef objective(x, a, y):\n    model = np.dot(a, x**2)\n    return np.sum((y - model)**2)\n\nbounds = [(0, None) for _ in range(len(x0))]\n\nout = scipy.optimize.minimize(objective, x0, args=(a, y), method='L-BFGS-B', bounds=bounds)\n```"], "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": ["```python\nimport scipy.integrate\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN0 = 10\ntime_span = [0, 10]\n\ndef dN1_dt(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt, t_span=time_span, y0=[N0], t_eval=np.linspace(time_span[0], time_span[1], 100))\nresult = sol.y\n\nplt.plot(sol.t, result[0])\nplt.xlabel('Time')\nplt.ylabel('N1')\nplt.title('Response to Time-Varying Input')\nplt.show()\n```"], "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": ["```python\ndef dN1_dt_varying(t, N1):\n    input_variation = t - np.sin(t) if 0 < t < 2 * np.pi else 2 * np.pi\n    return -100 * N1 + input_variation\n\nsol = scipy.integrate.solve_ivp(\n    fun=dN1_dt_varying,\n    t_span=time_span,\n    y0=[N0],\n    t_eval=np.linspace(time_span[0], time_span[1], 1000)\n)\n\nresult = sol.y\n```"], "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": ["```python\nfrom scipy.integrate import solve_ivp\nimport numpy as np\n\ndef dN1_dt_variable(t, N1):\n    return -100 * N1 - np.cos(t)\n\nN0 = 10\ntime_span = [0, 1]\nsol = solve_ivp(fun=dN1_dt_variable, t_span=time_span, y0=[N0], t_eval=np.linspace(0, 1, 100))\nresult = sol.y\n```\n"], "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": ["```python\nfor t in range(4):\n    cons.append({'type': 'ineq', 'fun': lambda x, t=t: x[t]})\n\nout = minimize(function, x0, method=\"SLSQP\", constraints=cons)\nx = out[\"x\"]\n```"], "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": ["```python\nresult = sparse.vstack([sa, sb])\n```"], "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": ["```python\nresult = sparse.hstack([sa, sb], format='csr')\n```"], "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": ["```python\nimport numpy as np\nfrom scipy import integrate\n\n# Load the constant values c from the file 'cooltemp.dat'\nfn = 'cooltemp.dat'\nc_values = np.loadtxt(fn, unpack=True, usecols=[1])\n\n# Initialize an empty list to store the results\nI = []\n\n# Loop over each constant c\nfor c in c_values:\n    # Define the integrand function\n    integrand = lambda x: 2 * c * x\n    # Perform the integration\n    result, error = integrate.quad(integrand, 0, 1)\n    # Append the result to the list I\n    I.append(result)\n\n# Convert the list to a numpy array\nI = np.array(I)\n```"], "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": ["```python\nimport numpy as np\nfrom scipy import integrate\n\ndef f(c_values, low=0, high=1):\n    I = []\n    for c in c_values:\n        result, error = integrate.quad(lambda x: 2 * c * x, low, high)\n        I.append(result)\n    return np.array(I)\n\n# Usage example\nc_values = np.loadtxt('cooltemp.dat', unpack=True, usecols=[1])\nI = f(c_values)\nprint(I)\n```"], "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": ["```python\nV = V.copy()\nfor (i, j), value in V.items():\n    V[i, j] = value + x\n```"], "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": ["```python\nV.data += x\n```"], "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": ["```python\nV.data += x\nA = V.copy()\nA.data += y\n```"], "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": ["```python\n# Normalize each column of the sparse matrix\nfor col in range(sa.shape[1]):\n    col_data = sa[:, col].data\n    col_len = math.sqrt(np.sum(col_data**2))\n    if col_len != 0:\n        sa.data[sa.indptr[col]:sa.indptr[col+1]] /= col_len\nsa\n```"], "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": ["```python\nfrom scipy import sparse\nimport numpy as np\n\nsa = sparse.random(10, 10, density=0.3, format='csr', random_state=42)\n\n# Iterate through columns\nfor col in range(sa.shape[1]):\n    col_data = sa[:, col].toarray().ravel()\n    norm = np.linalg.norm(col_data)\n    if norm != 0:\n        sa[:, col] = sparse.csr_matrix(col_data / norm).T\n```"], "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": ["```python\na = (a > 0).astype(int)\n```"], "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": ["```python\na = (a == 0).astype(int)\n```"], "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": ["```python\nfrom scipy.cluster.hierarchy import cut_tree\nfrom scipy.spatial.distance import cdist\n\n# Assuming you have the cluster assignments from cut_tree\nclusters = cut_tree(linkage_matrix, n_clusters=5).flatten()\n\nresult = []\nfor cluster_id in np.unique(clusters):\n    # Get indices of data points in the current cluster\n    cluster_indices = np.where(clusters == cluster_id)[0]\n    cluster_points = data[cluster_indices]\n    \n    # Calculate centroid of the current cluster\n    centroid = cluster_points.mean(axis=0)\n    \n    # Calculate distances from all points in the cluster to the centroid\n    distances = cdist(cluster_points, [centroid]).flatten()\n    \n    # Find the index of the closest point to the centroid\n    closest_index = cluster_indices[np.argmin(distances)]\n    \n    result.append(closest_index)\n```\n"], "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": ["```python\nresult = []\nfor centroid in centroids:\n    distances = scipy.spatial.distance.cdist(data, [centroid], 'euclidean').flatten()\n    closest_index = np.argmin(distances)\n    result.append(data[closest_index])\n```"], "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": ["```python\nfrom scipy.spatial.distance import cdist\n\ndef kth_closest_elements(centroids, data, k):\n    result = []\n    distances = cdist(data, centroids, 'euclidean')\n    \n    for cluster_idx in range(centroids.shape[0]):\n        cluster_distances = distances[:, cluster_idx]\n        sorted_indices = np.argsort(cluster_distances)\n        result.append(sorted_indices[k-1])\n\n    return result\n\nresult = kth_closest_elements(centroids, data, k)\n```\n"], "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": ["```python\ndef eqn_for_a(a, x, b):\n    return x + 2*a - b**2\n\nresult = [fsolve(eqn_for_a, x0=0.5, args=(x, b))[0] for x, b in zip(xdata, bdata)]\n```\n"], "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": ["```python\nresult = []\n\nfor x, a in zip(xdata, adata):\n    def target_eqn(b):\n        return eqn(x, a, b)\n    \n    # Attempt to find two roots by using different initial guesses\n    roots = []\n    for guess in [-10, 10]:\n        root, = fsolve(target_eqn, x0=guess)\n        roots.append(root)\n\n    roots.sort()  # Sort so that the smaller root is first\n    result.append(roots)\n\nresult = np.array(result)\n```\n"], "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": ["```python\ndef cdf_bekkers(x, a, m, d):\n    # Integrate the PDF from range_start to x to get the CDF\n    cdf_value, _ = integrate.quad(bekkers, range_start, x, args=(a, m, d))\n    # Normalize the CDF by integrating over the entire range\n    normalization, _ = integrate.quad(bekkers, range_start, range_end, args=(a, m, d))\n    return cdf_value / normalization\n\n# Prepare the CDF for KS test\ncdf_function = lambda x: cdf_bekkers(x, estimated_a, estimated_m, estimated_d)\n\n# Perform KS test\nresult = stats.kstest(sample_data, cdf_function)\n```\n"], "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": ["```python\nimport numpy as np\nimport scipy as sp\nfrom scipy import integrate, stats\n\ndef bekkers(x, a, m, d):\n    p = a * np.exp((-1 * (x**(1/3) - m)**2) / (2 * d**2)) * x**(-2/3)\n    return p\n\ndef bekkers_cdf(x, a, m, d, start, end):\n    result, _ = integrate.quad(lambda t: bekkers(t, a, m, d), start, x)\n    normalization, _ = integrate.quad(lambda t: bekkers(t, a, m, d), start, end)\n    return result / normalization\n\nrange_start = 1\nrange_end = 10\nestimated_a, estimated_m, estimated_d = 1, 1, 1\nsample_data = [1.5, 1.6, 1.8, 2.1, 2.2, 3.3, 4, 6, 8, 9]\n\ncdf = lambda x: bekkers_cdf(x, estimated_a, estimated_m, estimated_d, range_start, range_end)\nD, p_value = stats.kstest(sample_data, cdf)\n\nresult = p_value < 0.05\n```\n"], "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": ["```python\ndf['Time'] = pd.to_datetime(df['Time'], format='%Y-%m-%d-%H:%M:%S')\ndf.set_index('Time', inplace=True)\n\ndef rolling_integral(x):\n    times = (x.index - x.index[0]).total_seconds()\n    return integrate.trapz(x, times)\n\nintegral_df = df['A'].rolling('25S').apply(rolling_integral, raw=False)\nintegral_df.dropna(inplace=True)\nintegral_df\n```\n"], "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": ["```python\nresult = scipy.interpolate.griddata(x, y, eval, method='linear')\n```"], "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": ["```python\nvalues, counts = np.unique(a['A1'], return_counts=True)\ntotal_counts = sum(counts)\nweights = np.zeros(max(values) + 1)\nweights[values] = counts / total_counts\n"], "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": ["```python\nresult = sciopt.minimize(e, x0=np.array([1.0, 1.0]), args=(x, y), bounds=[(0.5, 1.5), (0.7, 1.8)])\npopt = result.x\n```\n"], "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": ["```python\nresult = signal.argrelmin(arr, order=n)[0]\n```"], "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": ["```python\nresult = []\n\nfor i, row in enumerate(arr):\n    for j in range(len(row)):\n        start = max(0, j - n)\n        end = min(len(row), j + n + 1)\n        neighborhood = row[start:end]\n        if row[j] <= min(neighborhood):\n            result.append([i, j])\n\nresult\n```\n"], "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": ["```python\nnumeric_cols = df.select_dtypes(include=[np.number]).columns\ndf = df[(np.abs(stats.zscore(df[numeric_cols])) < 3).all(axis=1)]\n```\n"], "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": ["```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```\n"], "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": ["```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n```\n"], "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": ["```python\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n```\n"], "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": ["```python\ndef solve(data):\n    df = pd.DataFrame(data.data, columns=data.feature_names)\n    df['target'] = data.target\n    return df\n\nresult = solve(data)\n```"], "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": ["```python\ndf = pd.DataFrame({\n    'Col1': ['C', 'A', 'B'],\n    'Col2': [33, 2.5, 42],\n    'Col3': [['Apple', 'Orange', 'Banana'], ['Apple', 'Grape'], ['Banana']]\n})\n\ndf_out = df.drop(columns='Col3').join(df['Col3'].explode().str.get_dummies().groupby(level=0).sum())\n```"], "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": ["```python\ndf_out = df.drop('Col3', axis=1).join(\n    df['Col3'].apply(lambda x: pd.Series({i: 1 for i in x}))\n).fillna(0).astype(int)\n```"], "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": ["```python\ndf_out = df.drop(columns='Col4').join(df['Col4'].explode().str.get_dummies().groupby(level=0).max())\n```\n"], "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": ["```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Assuming df is already loaded and the last column contains lists\nmlb = MultiLabelBinarizer()\n\n# Fit and transform the last column\nencoded = mlb.fit_transform(df.iloc[:, -1])\n\n# Create a DataFrame with the encoded features\nencoded_df = pd.DataFrame(encoded, columns=mlb.classes_)\n\n# Concatenate original DataFrame (except last column) with the new encoded DataFrame\ndf_out = pd.concat([df.iloc[:, :-1], encoded_df], axis=1)\n"], "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": ["```python\ndf_out = df.copy()\n\n# Extract the last column\nlast_col = df_out.iloc[:, -1]\n\n# Get unique elements across all rows in the last column\nunique_elements = set(elem for sublist in last_col for elem in sublist)\n\n# Create a dictionary of new columns with default 1s\nnew_columns = {elem: np.ones(len(df)) for elem in unique_elements}\n\n# Fill in 0s where elements are present\nfor i, sublist in enumerate(last_col):\n    for elem in sublist:\n        new_columns[elem][i] = 0\n\n# Add new columns to dataframe\nfor elem in unique_elements:\n    df_out[elem] = new_columns[elem]\n\n# Drop the original last column\ndf_out = df_out.drop(df_out.columns[-1], axis=1)\n```\n"], "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": ["```python\nfrom sklearn.calibration import CalibratedClassifierCV\n\ncalibrated_svm = CalibratedClassifierCV(base_estimator=svmmodel, cv=5)\ncalibrated_svm.fit(X, y)\nproba = calibrated_svm.predict_proba(x_test)\n"], "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": ["```python\nfrom sklearn.calibration import CalibratedClassifierCV\n\ncalibrated_model = CalibratedClassifierCV(model, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_predict)\n```\n"], "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": ["```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\n# Assuming df_origin is your original dataframe and transform_output is the encoded sparse matrix\none_hot_df = pd.DataFrame(transform_output.toarray(), columns=encoder.get_feature_names_out())\n\n# Concatenate the original dataframe with the one-hot encoded dataframe\ndf = pd.concat([df_origin.reset_index(drop=True), one_hot_df.reset_index(drop=True)], axis=1)\n```"], "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": ["```python\ndf_sparse = pd.DataFrame.sparse.from_spmatrix(transform_output, index=df_origin.index)\ndf = pd.concat([df_origin, df_sparse], axis=1)\n```"], "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": ["```python\n    # Convert the sparse matrix to a dense array\n    dense_array = transform_output.toarray()\n    \n    # Create a DataFrame from the dense array\n    encoded_df = pd.DataFrame(dense_array, columns=encoder.get_feature_names_out())\n\n    # Reset the index of the encoded DataFrame to align with the original DataFrame\n    encoded_df.reset_index(drop=True, inplace=True)\n    \n    # Concatenate the original DataFrame with the encoded DataFrame\n    result = pd.concat([df.reset_index(drop=True), encoded_df], axis=1)\n    \n    return result\n```"], "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": ["```python\n# To delete a step\ndel clf.steps[1]  # Removes the 'poly' step\nclf\n```"], "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": ["```python\n# Delete a step\nsteps = clf.steps\nclf.steps = [step for step in steps if step[0] != 'reduce_poly']\nprint(clf)\n\n# Insert a step\nfrom sklearn.feature_selection import SelectKBest\nsteps = clf.steps\nclf.steps.insert(0, ('select_kbest', SelectKBest()))\nprint(clf)\n```"], "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": ["```python\n# Deleting the 'pOly' step (2nd step)\ndel clf.steps[1]\n\n# Updating named_steps to reflect the change\nclf.named_steps = dict(clf.steps)\n```\n"], "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": ["```python\n# To delete a step\nsteps = clf.steps\nsteps = [step for step in steps if step[0] != 'poly']\nclf = Pipeline(steps)\n\n# To insert a step back\nsteps.insert(1, ('poly', PolynomialFeatures()))\nclf = Pipeline(steps)\n```"], "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": ["```python\n# Remove a step\ndef remove_step(pipeline, step_name):\n    pipeline.steps = [(name, step) for name, step in pipeline.steps if name != step_name]\n\n# Insert a step\ndef insert_step(pipeline, step_name, step, position):\n    pipeline.steps.insert(position, (step_name, step))\n\n# Example usage\nclf = Pipeline([('AAA', PCA()), ('BBB', SVC())])\n\n# Remove 'AAA' step\nremove_step(clf, 'AAA')\n\n# Insert 'AAA' step back in position 0\ninsert_step(clf, 'AAA', PCA(), 0)\n\n# Check the pipeline structure\nprint(clf)\n```\n"], "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": ["```python\n# Insert ('t1919810', PCA()) before 'svdm'\nsteps = clf.steps\nsteps.insert(steps.index(('svdm', clf.named_steps['svdm'])), ('t1919810', PCA()))\nclf = Pipeline(steps)\n```\n"], "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": ["```python\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV, TimeSeriesSplit\n\n# Example variable gridsearch setup\nxgb_model = xgb.XGBRegressor()\nparamGrid = {\n    'max_depth': [3, 5, 7],\n    'learning_rate': [0.01, 0.1, 0.2],\n    'n_estimators': [100, 200]\n}\n\nfit_params = {\n    \"early_stopping_rounds\": 42,\n    \"eval_metric\": \"mae\",\n    \"eval_set\": [(testX, testY)]\n}\n\ntscv = TimeSeriesSplit(n_splits=5)\n\ngridsearch = GridSearchCV(\n    estimator=xgb_model,\n    param_grid=paramGrid,\n    scoring='neg_mean_absolute_error',\n    cv=tscv,\n    n_jobs=-1,\n    verbose=1\n)\n\ngridsearch.fit(trainX, trainY, **fit_params)\n\n# Extract scores and make predictions\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n```\n"], "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": ["```python\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV, TimeSeriesSplit\n\n# Assuming trainX, trainY, testX, testY are defined\n\nmodel = xgb.XGBRegressor()\n\nparam_grid = {\n    # Define the parameter grid\n}\n\n# Define TimeSeriesSplit for cross-validation\ncv = TimeSeriesSplit(n_splits=3)\n\n# Create instance of GridSearchCV\ngridsearch = GridSearchCV(\n    estimator=model,\n    param_grid=param_grid,\n    cv=cv,\n    verbose=1,\n    n_jobs=-1\n)\n\n# Fit the gridsearch with early stopping\ngridsearch.fit(\n    trainX,\n    trainY,\n    early_stopping_rounds=42,\n    eval_metric=\"mae\",\n    eval_set=[(testX, testY)],\n    verbose=False\n)\n\n# Get the best score\nb = gridsearch.best_score_\n\n# Predict using the best estimator\nc = gridsearch.predict(testX)\n```"], "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": ["```python\nproba = []\n\nfor train_idx, test_idx in cv:\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train, y_test = y[train_idx], y[test_idx]\n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test)[:, 1])  # Assuming binary classification\n\nproba = np.array(proba)\n```\n"], "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": ["```python\nproba = []\n\nfor train_idx, test_idx in cv:\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train = y[train_idx]\n    \n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test)[:, 1])\n\nproba = np.concatenate(proba)\n```"], "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": ["```python\ninversed = scaler.inverse_transform(scaled)\n```"], "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": ["```python\n    inversed = scaler.inverse_transform(scaled)\n    return inversed\n```"], "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": ["```python\nmodel_name = model.__class__.__name__\n```"], "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": ["```python\nmodel_name = type(model).__name__\n```"], "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": ["```python\nmodel_name = model.__class__.__name__\n```"], "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": ["```python\ntf_idf = pipe.named_steps[\"tf_idf\"]\ntf_idf_out = tf_idf.fit_transform(data.test)\n```"], "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": ["```python\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n```"], "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": ["```python\nselect_out = pipe.named_steps['select'].fit_transform(data, target)\n```"], "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": ["```python\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n```"], "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": ["```python\nX = X.reshape(-1, 1)\nX_test = X_test.reshape(-1, 1)\n\nregressor = RandomForestRegressor(n_estimators=150, random_state=42)\nrgr = regressor.fit(X, y)\npredict = regressor.predict(X_test)\n```"], "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": ["```python\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\nX = np.array([\n    [233.176], [234.270], [235.270], [523.176],\n    [237.176], [238.270], [239.270], [524.176],\n    [241.176], [242.270], [243.270], [524.176],\n    [245.176], [246.270], [247.270], [524.176]\n])\n\ny = np.array([\n    0.00, 1.36, 4.46, 8.72,\n    1.31, 1.73, 2.29, 3.12,\n    4.11, 5.07, 6.14, 7.34,\n    7.87, 8.46, 9.71, 1.07\n])\n\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=2, random_state=42)\nrgr = regressor.fit(X, y)\n\nX_test = np.array([[250.0]])\npredict = rgr.predict(X_test)\n```\n"], "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": ["```python\ntfidf = TfidfVectorizer(preprocessor=preprocess)\ndocuments = [\"This is a test.\", \"Another document.\"]\ntfidf_matrix = tfidf.fit_transform(documents)\nprint(tfidf_matrix.toarray())\n```"], "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": ["```python\ndef prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n\n# Example usage:\ndocuments = [\"This is a Sample\", \"Another Sample TEXT\"]\ntfidf_matrix = tfidf.fit_transform(documents)\n\nprint(tfidf_matrix.toarray())\n```\n"], "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": ["```python\ndf_out = pd.DataFrame(preprocessing.scale(data), index=data.index, columns=data.columns)\n```"], "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": ["```python\ndf_out = pd.DataFrame(preprocessing.scale(data), index=data.index, columns=data.columns)\n```"], "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": ["```python\ngrid.fit(X, y)\nbest_model = grid.best_estimator_\ncoef = best_model.named_steps['model'].coef_\n```"], "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": ["```python\ngrid.fit(X, y)\nbest_model = grid.best_estimator_.named_steps['model']\ncoef = best_model.coef_\n```"], "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": ["```python\ncolumn_names = X.columns[model.get_support()]\n```"], "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": ["```python\ncolumn_names = X.columns[model.get_support(indices=True)]\n```"], "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": ["```python\ncolumn_names = X.columns[model.get_support()]\n```"], "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": ["```python\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\ndf = pd.read_csv('los_10_one_encoder.csv')\ny = df['LOS'] \nX = df.drop('LOS', axis=1)\n\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\n\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\n\ncolumn_names = X.columns[model.get_support()].tolist()\n```"], "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": ["```python\ndistances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\nclosest_50_indices = np.argsort(distances)[:50]\nclosest_50_samples = X[closest_50_indices]\n```"], "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": ["```python\nkm.fit(X)\ncluster_center = km.cluster_centers_[p]\ndistances = np.linalg.norm(X - cluster_center, axis=1)\nclosest_50_indices = np.argsort(distances)[:50]\nclosest_50_samples = X[closest_50_indices]\n```\n"], "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": ["```python\n# Fit the k-means\nkm.fit(X)\n\n# Compute distances to the p^th cluster center\ndistances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\n\n# Get indices of the 100 closest samples\nclosest_indices = np.argsort(distances)[:100]\n\n# Get the closest samples\nclosest_100_samples = X[closest_indices]\n```\n"], "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": ["```python\n    km.fit(X)\n    cluster_center = km.cluster_centers_[p]\n    distances = np.linalg.norm(X - cluster_center, axis=1)\n    indices = np.argsort(distances)[:50]\n    samples = X[indices]\n    return samples\n```"], "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": ["```python\nX_train = pd.get_dummies(X_train, columns=[0])\n```"], "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": ["```python\nX_train = pd.get_dummies(X_train, columns=[0])\nclf = GradientBoostingClassifier(learning_rate=0.01, max_depth=8, n_estimators=50).fit(X_train, y_train)\n```\n"], "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": ["```python\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='rbf')  # Gaussian kernel\nmodel.fit(X, y)\npredict = model.predict(X)\n```"], "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": ["```python\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='rbf')\nmodel.fit(X, y)\npredict = model.predict(X)\n```"], "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": ["```python\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='poly', degree=2)\nmodel.fit(X, y)\npredict = model.predict(X)\n```"], "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": ["```python\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='poly', degree=2)\nmodel.fit(X, y)\npredict = model.predict(X)\n```"], "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": ["```python\n# Transform the queries into the same feature space\nquery_tfidf = tfidf.transform(queries)\n\n# Calculate cosine similarity\ncosine_similarities_of_queries = (query_tfidf * tfidf.transform(documents).T).toarray()\n```\n"], "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": ["```python\nquery_tfidf = tfidf.transform(queries)\ndoc_tfidf = tfidf.transform(documents)\ncosine_similarities_of_queries = np.dot(query_tfidf, doc_tfidf.T).toarray()\nEND SOLUTION\n```"], "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": ["```python\n    query_tfidf = tfidf.transform(queries)\n    document_tfidf = tfidf.transform(documents)\n    cosine_similarities = np.dot(query_tfidf, document_tfidf.T).toarray()\n    return cosine_similarities\n\ncosine_similarities_of_queries = solve(queries, documents)\n```\n"], "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": ["```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Given features\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\n# Use MultiLabelBinarizer to transform the list of features\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n\nprint(new_features)\n# To see the feature names you can use:\nprint(mlb.classes_)\n```\n"], "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": ["```python\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nf = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n\nmlb = MultiLabelBinarizer()\nnew_f = mlb.fit_transform(f)\n```\n"], "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": ["```python\nimport pandas as pd\n\n# Input data\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(features)\n\n# Get dummies for one-hot encoding, then fill NaNs with 0 and sum the columns group-wise\nnew_features = pd.get_dummies(df.stack()).groupby(level=0).sum()\n\n# Fill missing columns with zeros\nall_columns = sorted(set(f for sublist in features for f in sublist))\nnew_features = new_features.reindex(columns=all_columns).fillna(0).astype(int)\n\nnew_features\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": ["```python\n    unique_features = sorted(set(f for sublist in features for f in sublist))\n    feature_matrix = np.zeros((len(features), len(unique_features)), dtype=int)\n\n    for i, sample in enumerate(features):\n        for feature in sample:\n            feature_matrix[i, unique_features.index(feature)] = 1\n\n    return feature_matrix\n\nnew_features = solve(features)\n### END SOLUTION\n```"], "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": ["```python\nimport pandas as pd\n\n# Unique feature extraction\nunique_features = sorted(set(feature for sublist in f for feature in sublist))\n\n# Creation of the 2D array\nnew_features = pd.DataFrame(\n    [[1 if feature in row else 0 for feature in unique_features] for row in f],\n    columns=unique_features\n)\n\nnew_features\n```\n"], "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": ["```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\nfrom scipy.spatial.distance import squareform\n\n# Convert the distance matrix to a format suitable for linkage\ncondensed_dist_matrix = squareform(data_matrix)\n\n# Perform hierarchical clustering using linkage\nlinkage_matrix = linkage(condensed_dist_matrix, method='average')\n\n# Form flat clusters\ncluster_labels = fcluster(linkage_matrix, 2, criterion='maxclust')\n\nprint(cluster_labels)\n```\n"], "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": ["```python\nfrom sklearn.cluster import AgglomerativeClustering\n\ndata_matrix = [[0, 0.8, 0.9], [0.8, 0, 0.2], [0.9, 0.2, 0]]\ndata_matrix = np.array(data_matrix)\n\n# Set the diagonal to a large number, since we are clustering similarity distances\nnp.fill_diagonal(data_matrix, np.max(data_matrix) + 1)\n\n# Perform Agglomerative Clustering\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = clustering.fit_predict(data_matrix)\n\nprint(cluster_labels.tolist())\n```\n"], "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": ["```python\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.spatial.distance import squareform\n\n# Convert similarity matrix to distance matrix\ndistance_matrix = 1 - np.array(simM)\n\n# Flatten the distance matrix into a condensed form\ncondensed_distance = squareform(distance_matrix)\n\n# Apply Agglomerative Clustering\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average')\ncluster_labels = clustering.fit_predict(squareform(condensed_distance))\n\nlist(cluster_labels)\n```\n"], "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": ["```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\n\n# Convert the similarity matrix to distance matrix\ndistance_matrix = 1 - np.array(data_matrix)\n\n# Create the linkage matrix\nlinked = linkage(distance_matrix, 'average')\n\n# Form flat clusters and get the labels\ncluster_labels = fcluster(linked, 2, criterion='maxclust')\nlist(cluster_labels)\n```\n"], "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": ["```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\n\n# Convert the distance matrix to a condensed distance matrix\ncondensed_matrix = scipy.spatial.distance.squareform(data_matrix)\n\n# Perform hierarchical clustering using the linkage function\nZ = linkage(condensed_matrix, method='average')\n\n# Form flat clusters from the hierarchical clustering\ncluster_labels = fcluster(Z, t=2, criterion='maxclust')\n\nprint(cluster_labels)\n```"], "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": ["```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\n\n# Convert similarity to distance\ndistM = 1 - np.array(simM)\n\n# Perform hierarchical clustering\nZ = linkage(distM, method='complete')\n\n# Form clusters\ncluster_labels = fcluster(Z, 2, criterion='maxclust')\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer, StandardScaler\n\n# Assuming 'data' is your dataset\n# Apply Box-Cox transformation\npt = PowerTransformer(method='box-cox')\ndata_boxcox = pt.fit_transform(data)\n\n# Centering and scaling\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data_boxcox)\n```\n"], "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": ["```python\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n```"], "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\n# Example data, similar to what was set in R\nnp.random.seed(1)\nx1 = np.random.normal(5, 2, 1000)\nx2 = np.random.exponential(1/10.0, 1000)\ndata = np.column_stack((x1, x2))\n\n# Applying the PowerTransformer for Box-Cox\nscaler = PowerTransformer(method='box-cox', standardize=True)\n\n# Transforming the data\nbox_cox_data = scaler.fit_transform(data)\n```"], "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming data needs to be reshaped if it's not 2D.\ndata = data.reshape(-1, 1)\n\n# Initialize the PowerTransformer with method='box-cox'\npt = PowerTransformer(method='box-cox', standardize=False)\n\n# Fit and transform the data\nbox_cox_data = pt.fit_transform(data)\n```\n"], "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\n# Assuming 'data' is a numpy array\ntransformer = PowerTransformer(method='yeo-johnson', standardize=True)\nyeo_johnson_data = transformer.fit_transform(data)\n```"], "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": ["```python\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n```"], "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": ["```python\nvectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b|[!?\\\"\\']\")\ntransformed_text = vectorizer.fit_transform([text])\n```\n"], "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": ["```python\nfrom sklearn.model_selection import train_test_split\n\n# Split into features and target\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\n# Split into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```"], "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": ["```python\nfrom sklearn.model_selection import train_test_split\n\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```"], "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": ["```python\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into features and target\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\n# Split into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n```"], "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": ["```python\n    from sklearn.model_selection import train_test_split\n\n    # Splitting the dataset into x and y\n    x = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n\n    # Splitting the data into training and testing sets (80/20)\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n    return x_train, y_train, x_test, y_test\n```\n"], "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": ["```python\nfrom sklearn.cluster import KMeans\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"generate_csv/all_data_device.csv\", parse_dates=[\"date\"])\nmse_values = df['mse'].values.reshape(-1, 1)\nkmeans = KMeans(n_clusters=2, n_init=10).fit(mse_values)\nlabels = kmeans.labels_\n```"], "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": ["```python\nfrom sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\n\n# Load data\ndf = pd.read_csv(\"file.csv\", parse_dates=[\"date\"])\n\n# Prepare data for clustering\nf1 = df['mse'].values\nf2 = np.arange(len(f1))\nX = np.array(list(zip(f1, f2)))\n\n# Perform KMeans clustering\nkmeans = KMeans(n_clusters=2, n_init=10).fit(X)\nlabels = kmeans.labels_\n\n# Calculate mean for each cluster\ndf['cluster'] = labels\nmean_cluster_0 = df[df['cluster'] == 0]['mse'].mean()\nmean_cluster_1 = df[df['cluster'] == 1]['mse'].mean()\n\nprint(\"Mean of cluster 0:\", mean_cluster_0)\nprint(\"Mean of cluster 1:\", mean_cluster_1)\n```"], "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": ["```python\nmodel = LinearSVC(penalty='l1', dual=False)\nmodel.fit(X, y)\ncoef = model.coef_\nselected_indices = np.where(coef != 0)[1]\nselected_feature_names = np.asarray(vectorizer.get_feature_names_out())[selected_indices]\n```\n"], "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": ["```python\nsvc = LinearSVC(penalty='l1', dual=False, max_iter=10000)\nsvc.fit(X, y)\nmodel = SelectFromModel(svc, prefit=True)\nselected_feature_names = np.asarray(vectorizer.get_feature_names_out())[model.get_support()]\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": ["```python\n    svc = LinearSVC(penalty='l1', dual=False, max_iter=10000).fit(X, y)\n    coef = svc.coef_\n    feature_mask = (coef != 0).reshape(-1)\n    selected_feature_names = np.array(vectorizer.get_feature_names_out())[feature_mask]\n    return selected_feature_names\n### END SOLUTION\n```"], "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": ["```python\nvocabulary = ['Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX']\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={word: i for i, word in enumerate(vocabulary)})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vocabulary  # Use provided order\nEND SOLUTION\n\nprint(feature_names)\nprint(X.toarray())\n```"], "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": ["```python\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, \n                             vocabulary=['Jscript','.Net','TypeScript','NodeJS','Angular',\n                                         'Mongo','CSS','Python','PHP','Photoshop','Oracle',\n                                         'Linux','C++',\"Java\",'TeamCity','Frontend','Backend',\n                                         'Full stack', 'UI Design', 'Web','Integration',\n                                         'Database design','UX'])\n\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\nX = X.toarray()\n"], "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": ["```python\nvocabulary = ['Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX']\n\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\n\n# Order the feature names according to the vocabulary\nfeature_names = vocabulary\n\n# Use Pandas to order the columns through a DataFrame\ndf = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())\nX_ordered = df[feature_names].to_numpy()\n\nprint(feature_names)\nprint(X_ordered)\n```\n"], "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": ["```python\nvectorizer = CountVectorizer(\n    stop_words=\"english\",\n    binary=True,\n    lowercase=False,\n    vocabulary=[\n        'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS',\n        'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', \"Java\", \n        'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web',\n        'Integration', 'Database design', 'UX'\n    ],\n    dtype=int  # ensure binary=True works by using int dtype\n)\n\nX = vectorizer.transform(corpus)\n\n# Flipping binary values\nX_flipped = np.abs(X.toarray() - 1)\n\nfeature_names = vectorizer.get_feature_names_out()\n\n# Display results\nprint(feature_names)\nprint(X_flipped)\n```\n"], "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": ["```python\nslopes = []\n\nfor col in df1.columns[1:]:\n    df2 = df1[['Time', col]].dropna()\n    if len(df2) > 1:  # Ensure there's enough data to fit\n        X = df2[['Time']].values\n        Y = df2[col].values\n        slope = LinearRegression().fit(X, Y).coef_[0]\n        slopes.append(slope)\n\nslopes = np.array(slopes)\n```\n"], "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": ["```python\nslopes = []\nfor col in df1.columns[1:]:\n    df2 = df1[['Time', col]].dropna()\n    if len(df2) > 1:  # Check if there are enough points to fit the model\n        X, Y = df2[['Time']], df2[col]\n        slope = LinearRegression().fit(X, Y).coef_[0]\n        slopes.append(slope)\n    else:\n        slopes.append(np.nan)\nEND SOLUTION\n```\n"], "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": ["```python\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ntransformed_df = df\n```\n"], "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\ndf = pd.read_csv('data.csv')\n\nlabel_encoder = LabelEncoder()\ndf['Sex'] = label_encoder.fit_transform(df['Sex'])\n\ntransformed_df = df\n```"], "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": ["```python\n    le = LabelEncoder()\n    df['Sex'] = le.fit_transform(df['Sex'])\n    return df\n### END SOLUTION\n```"], "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": ["```python\nElasticNet = linear_model.ElasticNet()  # corrected instance creation\nElasticNet.fit(X_train, y_train)  # fit data\n\n# Calculate R^2 for training and test sets\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n\nprint(\"R^2 for training set:\", training_set_score)\nprint('-' * 50)\nprint(\"R^2 for test set:\", test_set_score)\n```"], "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": ["```python\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n```"], "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": ["```python\ntransformed = MinMaxScaler().fit_transform(np_array.flatten().reshape(-1, 1)).reshape(np_array.shape)\n```"], "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": ["```python\n    scaler = MinMaxScaler()\n    flattened = a.flatten().reshape(-1, 1)\n    normalized = scaler.fit_transform(flattened).reshape(a.shape)\n    return normalized\n    ### END SOLUTION\n```"], "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": ["```python\npredict = clf.predict(b)\n```\n```"], "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": ["```python\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Convert string data to numerical using OneHotEncoder\nencoder = OneHotEncoder(sparse=False)\nnew_X = encoder.fit_transform(X)\n\nclf.fit(new_X, ['2', '3'])\n```\n"], "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": ["```python\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Use OneHotEncoder to handle non-numeric data\nencoder = OneHotEncoder()\nnew_X = encoder.fit_transform(X).toarray()\n\nclf.fit(new_X, ['2', '3'])\n```\n"], "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": ["```python\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Define the data\nX = [['dsa', '2'], ['sato', '3']]\n\n# Encode categorical features\nencoder = ColumnTransformer([('encoder', OneHotEncoder(), [0])], remainder='passthrough')\nX_encoded = encoder.fit_transform(X)\n\n# Train the model\nclf = DecisionTreeClassifier()\nclf.fit(X_encoded, ['4', '5'])\n\n# Example of new data\nnew_X = [['dsa', '4']]\nnew_X_encoded = encoder.transform(new_X)\n\n# Model prediction\nprediction = clf.predict(new_X_encoded)\nprint(prediction)\n```\n"], "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": ["```python\n# Correct the data preparation for fitting\nX = dataframe.drop(\"Class\", axis=1).astype(float)\ny = dataframe[\"Class\"].astype(int)\n\nlogReg = LogisticRegression()\n\n# Fit the model to the data\nlogReg.fit(X, y)\n\n# Example prediction (using the same data)\npredict = logReg.predict(X)\n```"], "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": ["```python\n# Separate features and target\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1].astype(int)\n\n# Initialize and fit logistic regression model\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n\n# Example prediction using the model\npredict = logReg.predict(X)\n```\n"], "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": ["```python\ntrain_size = 0.2\nsorted_dataframe = features_dataframe.sort_values(\"date\")\n\ntrain_index = int(len(sorted_dataframe) * train_size)\n\ntrain_dataframe = sorted_dataframe.iloc[:train_index]\ntest_dataframe = sorted_dataframe.iloc[train_index:]\n```\n"], "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": ["```python\n# Calculate the split index\nsplit_index = int(len(features_dataframe) * 0.2)\n\n# Split the data into test and train sets\ntest_dataframe = features_dataframe.iloc[:split_index]\ntrain_dataframe = features_dataframe.iloc[split_index:]\n\n# Sort the dataframes by date if needed (assuming 'date' is a column)\ntrain_dataframe = train_dataframe.sort_values(by=\"date\")\ntest_dataframe = test_dataframe.sort_values(by=\"date\")\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": ["```python\n    train_size = 0.2\n    # Ensure data is sorted by date\n    sorted_data = features_dataframe.sort_values(by='date')\n\n    # Calculate split index\n    split_index = int(train_size * len(sorted_data))\n\n    # Split the data\n    train_dataframe = sorted_data.iloc[:split_index]\n    test_dataframe = sorted_data.iloc[split_index:]\n\n    return train_dataframe, test_dataframe\n```"], "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": ["```python\ndf[['X2_scale', 'X3_scale']] = df.groupby('Month')[['X2', 'X3']].transform(lambda x: scaler.fit_transform(x))\n```"], "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": ["```python\nmyData[['new_A2', 'new_A3']] = myData.groupby('Month')[['A2', 'A3']].transform(lambda x: scaler.fit_transform(x))\n```"], "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": ["```python\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport re\n\nwords = \"Hello @friend, this is a good day. #good.\"\n\n# Custom tokenizer to split words including those with special characters\ndef custom_tokenizer(text):\n    return re.findall(r'\\b\\w+\\b|@[A-Za-z_]+|#[A-Za-z_]+', text)\n\ncount = CountVectorizer(lowercase=False, tokenizer=custom_tokenizer)\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\nprint(feature_names)\n```\n"], "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": ["```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Use the custom tokenizer to keep tokens with special characters\ndef custom_tokenizer(text):\n    return text.split()\n\nwords = \"ha @ji me te no ru bu ru wa, @na n te ko to wa na ka tsu ta wa. wa ta shi da ke no mo na ri za, mo u to kku ni #de a 't te ta ka ra\"\n\n# Initialize CountVectorizer with the custom tokenizer\ncount = CountVectorizer(lowercase=False, tokenizer=custom_tokenizer)\n\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\n\nprint(feature_names)\n```\n"], "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": ["```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\n```"], "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": ["```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_).sort_values(by='mean_fit_time')\n```\n"], "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": ["```python\nfrom sklearn.ensemble import IsolationForest\nimport pickle\n\n# Assuming 'fitted_model' is your trained model\n\n# Save the model to a file\nwith open('isolation_forest_model.pkl', 'wb') as file:\n    pickle.dump(fitted_model, file)\n\n# Load the model from the file\nwith open('isolation_forest_model.pkl', 'rb') as file:\n    loaded_model = pickle.load(file)\n\n# Use the loaded model to make predictions\n# predictions = loaded_model.predict(new_data)\n```"], "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": ["```python\n# Fit and transform the descriptions using the TF-IDF vectorizer\ntfidf_matrix = tfidf.fit_transform(df['description'])\n\n# Calculate the cosine similarity matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix)\n\n# Convert to a DataFrame for better readability\ncosine_similarity_df = pd.DataFrame(cosine_similarity_matrix, index=df['items'], columns=df['items'])\n\ncosine_similarity_df\n```"], "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": ["```python\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n```"], "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": ["```python\ndef update_learning_rate(optimizer, new_lr):\n    for param_group in optimizer.param_groups:\n        param_group['lr'] = new_lr\n\n# Example usage during training loop\nif loss_increases:  # Replace with actual condition to check if loss increases.\n    update_learning_rate(optim, 0.001)\n```"], "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": ["for param_group in optim.param_groups:\n    param_group['lr'] = 0.0005\n"], "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": ["```python\n# Update learning rate directly\nfor param_group in optim.param_groups:\n    param_group['lr'] = new_learning_rate\n```"], "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": ["```python\n# Extract weights from the Word2Vec model\nweights = torch.FloatTensor(word2vec.wv.vectors)\n\n# Create a PyTorch embedding layer\nembedding_layer = torch.nn.Embedding.from_pretrained(weights)\n\n# Assuming input_Tensor contains the indices of the words, use the embedding layer\nembedded_input = embedding_layer(input_Tensor)\n```"], "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": ["```python\n    weights = torch.Tensor(word2vec.wv.vectors)\n    embedding_layer = torch.nn.Embedding.from_pretrained(weights)\n\n    # Convert input to indices\n    indices = torch.tensor([[word2vec.wv.key_to_index[word] for word in sentence]\n                            for sentence in input_Tensor])\n\n    # Get embedded input\n    embedded_input = embedding_layer(indices)\n    return embedded_input\n```\n"], "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": ["```python\npx = pd.DataFrame(x.numpy())\n```"], "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": ["```python\npx = pd.DataFrame(x.numpy())\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": ["```python\npx = pd.DataFrame(x.numpy())\n```"], "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": ["```python\nC = B[:, A_log.bool()]\n```"], "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": ["```python\nimport torch\n\nA_logical = torch.ByteTensor([1, 0, 1])\nB = torch.LongTensor([[1, 2, 3], [4, 5, 6]])\n\nC = B[:, A_logical.bool()]\n# C should now be [[1, 3], [4, 6]]\n```"], "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": ["```python\nC = B[:, A_log.bool()]\n```"], "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": ["```python\nB = torch.LongTensor([[1, 2, 3], [4, 5, 6]])\nA_log = torch.ByteTensor([0, 1, 0])\n\n# Convert logical index to a boolean mask\nmask = A_log.bool()\n\n# Select columns corresponding to 0 in A_log\nC = B[:, ~mask]\n```"], "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": ["```python\n    C = B[:, A_log.bool()]\n    return C\n```"], "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": ["```python\nA_log = torch.ByteTensor([0, 0, 1])\nB = torch.LongTensor([[999, 777, 114514], [9999, 7777, 1919810]])\nC = B[:, A_log.bool()]\nEND SOLUTION\n```"], "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": ["```python\nC = torch.index_select(B, 1, idx)\n```"], "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": ["```python\nx_tensor = torch.tensor(np.vstack(x_array), dtype=torch.float16)\n```\n"], "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": ["```python\nx_tensor = torch.tensor(np.vstack(x))\n```"], "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": ["```python\n    return torch.tensor(np.array(a.tolist(), dtype=np.float32))\n\n# Example usage:\na = np.array([\n    np.array([0.5, 1.0, 2.0], dtype=np.float16),\n    np.array([4.0, 6.0, 8.0], dtype=np.float16)\n], dtype=object)\n\nt = Convert(a)\n```"], "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": ["```python\nmax_len = max(lens)\nmask = torch.LongTensor([[1]*l + [0]*(max_len-l) for l in lens])\n```"], "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": ["```python\nmax_len = max(lens)\nmask = torch.arange(max_len).expand(len(lens), max_len) < torch.tensor(lens).unsqueeze(1)\nmask = mask.long()\n```\n```"], "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": ["```python\nmax_len = max(lens)\nmask = torch.arange(max_len).expand(len(lens), max_len) < torch.tensor(lens).unsqueeze(1)\nmask = mask.long()\n```"], "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": ["```python\n    max_len = max(lens)\n    mask = torch.arange(max_len).expand(len(lens), max_len) < torch.tensor(lens).unsqueeze(1)\n    return mask.long()\n### END SOLUTION\n```"], "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": ["```python\nTensor_3D = torch.stack([torch.diag(t) for t in Tensor_2D])\n```"], "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": ["```python\n    # Create a 3D tensor with zeros\n    batch_size, diag_size = t.size()\n    diag_matrices = torch.zeros((batch_size, diag_size, diag_size))\n\n    # Fill the diagonal of each 2D slice\n    for i in range(batch_size):\n        diag_matrices[i] = torch.diag(t[i])\n\n    return diag_matrices\n    ### END SOLUTION\n```"], "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": ["```python\nab = torch.cat((a, b), dim=0)\n```"], "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": ["```python\nab = torch.cat((a, b), dim=0)\n```"], "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": ["```python\n    ab = torch.cat((a, b), dim=0)\n    return ab\n```"], "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": ["```python\nfor i, length in enumerate(lengths):\n    a[i, length:, :] = 0\n```"], "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": ["```python\nfor i in range(a.size(0)):\n    a[i, lengths[i]:, :] = 2333\n# a is now updated as required\n```"], "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": ["```python\nfor i in range(a.size(0)):\n    a[i, :int(lengths[i]), :] = 0\n```"], "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": ["```python\nfor i, length in enumerate(lengths):\n    a[i, :length, :] = 2333\n```"], "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": ["```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```"], "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": ["```python\nnew_tensors = torch.stack(list)\n```"], "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": ["```python\n    tt = torch.stack(lt)\n    return tt\n# Example usage:\ntt = Convert(list_of_tensors)\n```"], "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": ["```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```\n"], "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": ["```python\nresult = t[torch.arange(t.size(0)), torch.tensor(idx)]\n```"], "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": ["```python\nresult = t[torch.arange(t.size(0)), idx]\n```"], "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": ["```python\nresult = t[torch.arange(t.size(0)), 1 - torch.from_numpy(idx)]\n```"], "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": ["```python\nresult = x.gather(1, ids.expand(-1, 1, x.size(-1))).squeeze(1)\n```"], "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": ["```python\nresult = x.gather(1, ids.expand(-1, 1, x.size(2))).squeeze(1)\n```"], "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": ["```python\nresult = torch.sum(ids.unsqueeze(-1) * x, dim=1)\n```"], "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": ["```python\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\nEND SOLUTION\n```"], "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": ["```python\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n```"], "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": ["```python\ny = torch.argmin(softmax_output, dim=1).unsqueeze(1)\n```"], "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": ["```python\n    return torch.argmax(softmax_output, dim=1).unsqueeze(1)\n# Example usage:\n# y = solve(softmax_output)\n```"], "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": ["```python\n    y = torch.argmin(softmax_output, dim=1)\n    return y\nEND SOLUTION\n\n# Example usage\nsoftmax_output = torch.tensor([[0.2, 0.1, 0.7],\n                               [0.6, 0.3, 0.1],\n                               [0.15, 0.8, 0.05]])\nsolve(softmax_output)\n# Output: tensor([1, 2, 2])\n```"], "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": ["```python\ndef cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, h, w), target: (n, h, w)\n    n, c, h, w = input.size()\n    log_p = F.log_softmax(input, dim=1)\n    log_p = log_p.permute(0, 2, 3, 1).contiguous()\n    log_p = log_p.view(-1, c)\n    \n    target = target.view(-1)\n    mask = target >= 0\n    target = target[mask]\n    log_p = log_p[mask]\n    \n    loss = F.nll_loss(log_p, target, weight=weight, reduction='sum')\n    if size_average:\n        loss /= mask.sum()\n    return loss\n\n# Generate random inputs and targets\nimages = Variable(torch.randn(5, 3, 4, 4))\nlabels = Variable(torch.LongTensor(5, 4, 4).random_(3))\nloss = cross_entropy2d(images, labels)\n```\n"], "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": ["```python\ncnt_equal = (A == B).sum().item()\n```\n"], "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": ["```python\ncnt_equal = torch.sum(A == B).item()\n```"], "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": ["```python\ncnt_not_equal = torch.sum(A != B).item()\n```"], "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": ["```python\n    return (A == B).sum().item()\n```"], "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": ["```python\ncnt_equal = torch.sum(A[-x:] == B[-x:]).item()\n```"], "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": ["```python\ncnt_not_equal = (A[x:] != B[x:]).sum().item()\n```"], "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": ["```python\nimport torch\n\na = torch.randn(1, 3, 10, 40, 1)\n\nchunk_dim = 10\ntensors_31 = [a[:, :, :, i:i + chunk_dim, :] for i in range(31)]\n# Each element in tensors_31 will have shape (1, 3, 10, 10, 1)\n```"], "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": ["```python\nimport torch\n\n# Example tensor\na = torch.randn(1, 3, 40, 10, 1)\nchunk_dim = 10\n\n# Create list to hold split tensors\ntensors_31 = []\n\n# Split tensor in a sliding window manner\nfor i in range(31):\n    tensors_31.append(a[:, :, i:i+chunk_dim, :, :])\n\n# Verifying each tensor shape\nfor idx, t in enumerate(tensors_31, start=1):\n    print(f\"Shape of tensor_{idx}: {t.shape}\")\n```\n"], "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": ["```python\noutput[mask.bool()] = clean_input_spectrogram[mask.bool()]\n```"], "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": ["```python\noutput = torch.where(mask.unsqueeze(-1) == 0, clean_input_spectrogram, output)\n```"], "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": ["```python\nsigned_min = torch.where(torch.abs(x) < torch.abs(y), x, y)\n```"], "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": ["```python\nsigned_max = torch.where(torch.abs(x) > torch.abs(y), x, y)\n```"], "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": ["```python\n    min_abs = torch.min(torch.abs(x), torch.abs(y))\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    signed_min = torch.where(torch.abs(x) < torch.abs(y), min_abs * sign_x, min_abs * sign_y)\n    return signed_min\n```"], "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": ["```python\noutput = MyNet(input)\nsoftmax_output = torch.nn.functional.softmax(output, dim=1)\nconfidence_score, classes = torch.max(softmax_output, 1)\nconfidence_score = confidence_score.item()\nclass_names = '012'\nreturn confidence_score, class_names[classes.item()]\n```"], "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": ["```python\nresult = torch.cat((a[:, :-1], (a[:, -1:] + b[:, :1]) / 2, b[:, 1:]), dim=1)\nresult\n```\nEND SOLUTION\n```"], "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": ["```python\n    overlap = (a[:, -1] + b[:, 0]) / 2\n    result = torch.cat((a[:, :-1], overlap.unsqueeze(1), b[:, 1:]), dim=1)\n    return result\n\nresult = solve(a, b)\n```"], "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": ["```python\nimport torch\n\nt = torch.tensor([\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8]\n], dtype=torch.float)\n\n# Create a tensor of appropriate shape filled with zeros\nnew_shape = (t.size(0) + 2, t.size(1) + 2)\nresult = torch.zeros(new_shape)\n\n# Insert the original tensor into the zero-padded tensor\nresult[1:-1, 1:-1] = t\n\nprint(result)\n```\n"], "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": ["```python\nimport torch\n\nt = torch.tensor([[1., 2.], [3., 4.]])\npadding = (1, 1, 1, 1)  # (left, right, top, bottom)\nresult = torch.nn.functional.pad(t, padding, mode='constant', value=0)\nprint(result)\n```\n"], "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": ["```python\nimport torch\n\nt = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\n\n# Create the border of -1s\ntop_bottom = torch.full((1, 4), -1)\nleft_right = torch.full((4, 1), -1)\n\n# Concatenate -1s to the sides\nt_with_sides = torch.cat((left_right, t, left_right), dim=1)\n\n# Concatenate -1s to the top and bottom\nresult = torch.cat((top_bottom, t_with_sides, top_bottom), dim=0)\n\nprint(result)\n```\n"], "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": ["```python\nW = W.view(hid_dim, 1)  # Reshape W to (hid_dim, 1)\nresult = torch.bmm(data, W).squeeze(-1)  # Perform batch matrix multiplication and remove the last dimension\nresult = result.view(10, 2, 3)\n```"], "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
