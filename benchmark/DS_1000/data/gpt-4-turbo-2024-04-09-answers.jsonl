{"id": 0, "code": ["result = df.iloc[List]\n<code>"], "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": ["shuffled_df = df.iloc[List].reset_index(drop=True)\ntype_changes = (shuffled_df['Type'] != df['Type']).sum()\nresult = type_changes\n"], "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": ["<code>\nfor column in df.columns:\n    counts = df[column].value_counts()\n    frequent_values = counts[counts >= 2].index\n    df[column] = df[column].apply(lambda x: x if x in frequent_values else 'other')\n"], "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": ["<code>\nfor column in df.columns:\n    counts = df[column].value_counts()\n    frequent_items = counts[counts >= 3].index\n    df[column] = df[column].apply(lambda x: x if x in frequent_items else 'other')\n"], "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": ["<code>\nimport pandas as pd\n\n# Create the DataFrame\ndata = pd.DataFrame({\n    'Qu1': ['apple', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'egg'],\n    'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n    'Qu3': ['apple', 'potato', 'sausage', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'egg']\n})\n\n# Function to replace values based on frequency\ndef replace_values(df):\n    for column in df.columns:\n        # Calculate value counts and filter based on condition\n        counts = df[column].value_counts()\n        to_keep = counts[counts >= 2].index\n        # Replace values not meeting the condition with 'other'\n        df[column] = df[column].apply(lambda x: x if x in to_keep else 'other')\n    return df\n\n# Apply the function to the DataFrame\nresult = replace_values(data)\nprint(result)\n"], "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": ["<code>\n# Count values in each column\ncounts_qu1 = df['Qu1'].value_counts()\ncounts_qu2 = df['Qu2'].value_counts()\ncounts_qu3 = df['Qu3'].value_counts()\n\n# Apply conditions to replace values with 'other' based on counts\ndf['Qu1'] = df['Qu1'].apply(lambda x: x if counts_qu1[x] >= 3 else 'other')\ndf['Qu2'] = df['Qu2'].apply(lambda x: x if counts_qu2[x] >= 2 else 'other')\ndf['Qu3'] = df['Qu3'].apply(lambda x: x if counts_qu3[x] >= 2 else 'other')\n\nresult = df\n"], "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": ["<code>\n# Count values in each column\ncounts_qu1 = df['Qu1'].value_counts()\ncounts_qu3 = df['Qu3'].value_counts()\n\n# Define thresholds\nthreshold_qu1 = 3\nthreshold_qu3 = 2\n\n# Apply conditions to replace values below threshold with 'other', except for 'apple'\ndf['Qu1'] = df['Qu1'].apply(lambda x: x if (counts_qu1[x] >= threshold_qu1 or x == 'apple') else 'other')\ndf['Qu3'] = df['Qu3'].apply(lambda x: x if counts_qu3[x] >= threshold_qu3 else 'other')\n\nresult = df\n"], "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": ["<code>\nresult = pd.concat([\n    df[df['keep_if_dup'] == 'Yes'],\n    df[df['keep_if_dup'] == 'No'].drop_duplicates(subset='url', keep='first')\n]).sort_index()\n"], "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": ["<code>\nresult = pd.concat([\n    df[df['drop_if_dup'] == 'No'],\n    df[df['drop_if_dup'] == 'Yes'].drop_duplicates(subset='url', keep='first')\n]).sort_index()\n"], "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": ["<code>\nresult = pd.concat([\n    df[df['keep_if_dup'] == 'Yes'],\n    df[df['keep_if_dup'] == 'No'].drop_duplicates(subset='url', keep='last')\n]).sort_index()\n"], "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": ["result = {}\nfor _, row in df.iterrows():\n    d = result\n    for col in df.columns[:-1]:\n        if row[col] not in d:\n            d[row[col]] = {}\n        d = d[row[col]]\n    d.update({row[df.columns[-2]]: row[df.columns[-1]]})\n"], "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": ["<code>\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n"], "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": ["<code>\nimport pandas as pd\n\nexample_df = pd.DataFrame({'datetime': ['2015-12-01 00:00:00-06:00', '2015-12-02 00:01:00-06:00', '2015-12-03 00:00:00-06:00']})\nexample_df['datetime'] = pd.to_datetime(example_df['datetime'])\ndef f(df=example_df):\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    return df\n\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": ["df['datetime'] = df['datetime'].dt.tz_localize(None)\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf = df.sort_values(by='datetime')\n<code>"], "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": ["<code>\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf.sort_values(by='datetime', inplace=True)\n"], "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": ["def parse_message(message):\n    message = message.strip('[]')\n    key_values = message.split(', ')\n    result_dict = {}\n    for item in key_values:\n        key, value = item.split(': ')\n        if value == '' or value == ' ':\n            value = 'none'\n        result_dict[key.strip()] = value.strip()\n    return result_dict\n\n# Apply the function to the 'message' column and convert to DataFrame\ndf_expanded = df['message'].apply(parse_message).apply(pd.Series)\n\n# Fill NaN with 'none'\ndf_expanded.fillna('none', inplace=True)\n\n# Merge the expanded DataFrame with the original DataFrame\nresult = pd.concat([df[['name', 'status', 'number']], df_expanded], axis=1)\n"], "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": ["<code>\ndf.loc[df['product'].isin(products), 'score'] *= 10\n"], "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": ["<code>\ndf['score'] = df.apply(lambda x: x['score'] * 10 if x['product'] not in products else x['score'], axis=1)\n"], "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": ["<code>\nfor product_range in products:\n    df.loc[df['product'].between(product_range[0], product_range[1]), 'score'] *= 10\n"], "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": ["<code>\n# Filter the dataframe to get only the rows for the specified products\nfiltered_df = df[df['product'].isin(products)]\n\n# Perform Min-Max normalization on the filtered scores\nmin_score = filtered_df['score'].min()\nmax_score = filtered_df['score'].max()\ndf.loc[df['product'].isin(products), 'score'] = (filtered_df['score'] - min_score) / (max_score - min_score)\n"], "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": ["<code>\ndf['category'] = df.idxmax(axis=1)\n"], "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": ["<code>\ndf['category'] = df.idxmin(axis=1)\n"], "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": ["df['category'] = df.apply(lambda row: [col for col in df.columns if row[col] == 1], axis=1)\n"], "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": ["<code>\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n"], "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": ["<code>\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n"], "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": ["<code>\ndf = df[(df['Date'] >= pd.to_datetime(List[0])) & (df['Date'] <= pd.to_datetime(List[1]))]\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y %A')\n"], "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": ["<code>\ndf['#1'] = df['#1'].shift(1)\ndf['#1'].iloc[0] = df['#1'].iloc[-1]\ndf['#1'].iloc[-1] = df['#1'].shift(1).iloc[0]\n"], "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": ["<code>\ndf['#1'] = df['#1'].shift(-1)\ndf.loc[df.index[-1], '#1'] = df.loc[df.index[0], '#1']\n"], "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": ["<code>\ndf['#1'] = df['#1'].shift(1).fillna(df['#1'].iloc[-1])\ndf['#2'] = df['#2'].shift(-1).fillna(df['#2'].iloc[0])\n"], "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": ["<code>\nimport numpy as np\n\ndef calculate_r_squared(df):\n    correlation_matrix = np.corrcoef(df['#1'], df['#2'])\n    correlation_xy = correlation_matrix[0,1]\n    r_squared = correlation_xy**2\n    return r_squared\n\nmin_r_squared = float('inf')\noptimal_df = df.copy()\n\nfor _ in range(len(df)):\n    current_r_squared = calculate_r_squared(df)\n    if current_r_squared < min_r_squared:\n        min_r_squared = current_r_squared\n        optimal_df = df.copy()\n    df['#1'] = df['#1'].shift(-1)\n    df.iloc[0, 0] = df.iloc[-1, 0]\n\noptimal_df\n"], "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": ["df.columns = [x + 'X' for x in df.columns]\n<code>"], "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": ["df.columns = ['X' + col for col in df.columns]\n<code>"], "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": ["df.columns = ['X' + col + ('X' if not col.endswith('X') else '') for col in df.columns]\n<code>"], "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": ["grouped = df.groupby('group').agg({col: 'mean' if 'val' in col else 'first' for col in df.columns})\n"], "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": ["aggregation = {col: \"sum\" for col in df.columns if \"val\" in col}\naggregation[\"group_color\"] = \"first\"\nresult = df.groupby(\"group\").agg(aggregation)\n"], "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": ["<code>\nimport pandas as pd\n\n# Sample DataFrame\ndf = pd.DataFrame({\n    'group': ['A', 'A', 'A', 'B', 'B'],\n    'group_color': ['green', 'green', 'green', 'blue', 'blue'],\n    'val1': [5, 2, 3, 4, 5],\n    'val2': [4, 2, 8, 5, 7],\n    'val42': [1, 1, 4, 5, 1]\n})\n\n# Dynamically determine aggregation functions based on column names\nagg_funcs = {'group_color': 'first'}\nfor col in df.columns:\n    if col.startswith('val'):\n        if col.endswith('2'):\n            agg_funcs[col] = 'mean'\n        else:\n            agg_funcs[col] = 'sum'\n\n# Group by 'group' and aggregate using the dynamically created dictionary\nresult = df.groupby('group').agg(agg_funcs)\nprint(result)\n"], "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": ["result = df.loc[row_list, column_list].mean()\n<code>"], "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": ["result = df.loc[row_list, column_list].sum()\n<code>"], "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": ["result = df.loc[row_list, column_list].sum()\nresult = result.drop(result.idxmax())\n"], "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": ["result = df.apply(pd.Series.value_counts)\nresult.stack()"], "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": ["result = df.replace('null', pd.NA).isna().sum()\nresult.name = 'null'\nresult = result.astype(float)\n<code>"], "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": ["result = []\nfor column in df.columns:\n    result.append(f\"---- {column} ----\")\n    result.append(str(df[column].value_counts()))\nresult = \"\\n\".join(result)\nprint(result)\n<code>"], "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": ["<code>\n# Merge the first and second rows for headers\nnew_header = df.iloc[0] + ' | ' + df.iloc[1].astype(str)\ndf.columns = new_header\ndf = df.drop([0, 1])\ndf.reset_index(drop=True, inplace=True)\nresult = df\n"], "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": ["<code>\n# Merge the first and second rows for headers\nnew_header = df.iloc[0] + ' | ' + df.iloc[1].astype(str)\ndf.columns = new_header\ndf = df.drop([0, 1])\ndf.reset_index(drop=True, inplace=True)\nresult = df\n"], "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": ["<code>\nresult = df.apply(lambda x: pd.Series(x.dropna().to_numpy()), axis=1)\n"], "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": ["<code>\nresult = df.apply(lambda x: sorted(x, key=pd.isna), axis=1)\n"], "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": ["result = df.apply(lambda x: sorted(x, key=pd.isna), axis=0)\n<code>"], "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": ["mask = df['value'] < thresh\nsum_value = df.loc[mask, 'value'].sum()\ndf = df.loc[~mask]\ndf.loc['X'] = sum_value\ndf.sort_index(inplace=True)\n"], "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": ["below_thresh = df['value'] < thresh\nabove_thresh = df['value'] >= thresh\n\n# Rows below the threshold remain unchanged\nresult = df[below_thresh]\n\n# Calculate the average of the values above the threshold\nif above_thresh.any():\n    avg_value = df[above_thresh]['value'].mean()\n    result = result.append(pd.DataFrame({'value': [avg_value]}, index=['X']))\n\nresult.sort_index(inplace=True)\n"], "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": ["mask = (df['value'] < section_left) | (df['value'] > section_right)\naverage_value = df.loc[mask, 'value'].mean()\ndf = df.loc[~mask]\ndf.loc['X'] = average_value\nresult = df\n"], "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": ["for col in df.columns:\n    df[f'inv_{col}'] = 1 / df[col]\nresult = df\n<code>"], "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": ["import numpy as np\n\nfor column in df.columns:\n    df[f'exp_{column}'] = np.exp(df[column])\nresult = df\n<code>"], "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": ["import pandas as pd\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 0]})\n\nfor column in df.columns:\n    df[f'inv_{column}'] = df[column].apply(lambda x: 1/x if x != 0 else 0)\n\nresult = df\n<code>"], "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": ["import numpy as np\n\n# Apply the sigmoid function to each column and add it to the dataframe with a new column name\nfor column in df.columns:\n    df[f'sigmoid_{column}'] = 1 / (1 + np.exp(-df[column]))\n"], "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": ["min_indices = df.idxmin()\nresult = df.apply(lambda col: col.loc[:min_indices[col.name]].idxmax())\nresult\n<code>"], "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": ["min_indices = df.idxmin()\nresult = pd.Series(dtype='datetime64[ns]')\nfor col in df.columns:\n    max_before_min = df.loc[:min_indices[col], col].idxmax()\n    result[col] = max_before_min\nresult\n"], "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": ["<code>\nall_dates = pd.date_range(start=df['dt'].min(), end=df['dt'].max())\nusers = df['user'].unique()\n\n# Create a new DataFrame with all combinations of users and dates\nfull_df = pd.MultiIndex.from_product([users, all_dates], names=['user', 'dt']).to_frame(index=False)\n\n# Merge with the original data\nresult = pd.merge(full_df, df, on=['user', 'dt'], how='left').fillna({'val': 0})\nresult['val'] = result['val'].astype(int)\n"], "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": ["<code>\nall_dates = pd.date_range(start=df['dt'].min(), end=df['dt'].max())\nresult = df.set_index(['user', 'dt']).reindex(pd.MultiIndex.from_product([df['user'].unique(), all_dates], names=['user', 'dt']), fill_value=0).reset_index()\nresult['dt'] = result['dt'].dt.date\n"], "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": ["<code>\nimport pandas as pd\n\n# Create the DataFrame\ndf = pd.DataFrame({\n    'user': ['a', 'a', 'b', 'b'],\n    'dt': ['2016-01-01', '2016-01-02', '2016-01-05', '2016-01-06'],\n    'val': [1, 33, 2, 1]\n})\n\n# Convert 'dt' to datetime\ndf['dt'] = pd.to_datetime(df['dt'])\n\n# Find the min and max date for the range\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\n\n# Create a date range\ndate_range = pd.date_range(start=min_date, end=max_date)\n\n# Create a new DataFrame with all combinations of 'user' and 'date_range'\nall_dates = pd.MultiIndex.from_product([df['user'].unique(), date_range], names=['user', 'dt']).to_frame(index=False)\n\n# Merge the new DataFrame with the original DataFrame\nresult = pd.merge(all_dates, df, on=['user', 'dt'], how='left')\n\n# Fill NaN values in 'val' with 233\nresult['val'].fillna(233, inplace=True)\n\n# Convert 'val' to integer\nresult['val'] = result['val'].astype(int)\n"], "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": ["<code>\nimport pandas as pd\n\n# Create the DataFrame\ndf = pd.DataFrame({\n    'user': ['a', 'a', 'b', 'b'],\n    'dt': ['2016-01-01', '2016-01-02', '2016-01-05', '2016-01-06'],\n    'val': [1, 33, 2, 1]\n})\n\n# Convert 'dt' to datetime\ndf['dt'] = pd.to_datetime(df['dt'])\n\n# Get min and max date for each user\ndate_range = df.groupby('user')['dt'].agg([min, max])\n\n# Create a new DataFrame with all dates for each user\nall_dates = (date_range.apply(lambda x: pd.date_range(start=x['min'], end=x['max']), axis=1)\n             .explode()\n             .reset_index()\n             .rename(columns={0: 'dt'}))\n\n# Merge with original DataFrame to fill 'val'\nresult = pd.merge(all_dates, df, on=['user', 'dt'], how='left')\n\n# Forward fill 'val' within each user group\nresult['val'] = result.groupby('user')['val'].ffill()\n\n# Get the maximum 'val' for each user and use it to replace NaNs\nmax_vals = df.groupby('user')['val'].max()\nresult['val'] = result.apply(lambda x: max_vals[x['user']] if pd.isna(x['val']) else x['val'], axis=1)\n"], "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": ["<code>\nimport pandas as pd\n\n# Create the DataFrame\ndf = pd.DataFrame({\n    'user': ['a', 'a', 'b', 'b'],\n    'dt': ['2016-01-01', '2016-01-02', '2016-01-05', '2016-01-06'],\n    'val': [1, 33, 2, 1]\n})\n\n# Convert 'dt' to datetime\ndf['dt'] = pd.to_datetime(df['dt'])\n\n# Get min and max date for each user\ndate_range = df.groupby('user')['dt'].agg(['min', 'max'])\n\n# Reindex the DataFrame to fill dates for each user\nresult = df.set_index('dt').groupby('user').apply(\n    lambda x: x.reindex(pd.date_range(start=date_range.loc[x.name, 'min'], end=date_range.loc[x.name, 'max']))\n).reset_index(level=0, drop=True).reset_index().rename(columns={'index': 'dt'})\n\n# Forward fill the 'val' column and fill missing 'user' values\nresult['user'] = result['user'].ffill()\nresult['val'] = result.groupby('user')['val'].transform('max')\n\n# Convert 'dt' to the desired string format\nresult['dt'] = result['dt'].dt.strftime('%d-%b-%Y')\n\nresult\n"], "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": ["result = df.copy()\nresult['name'] = pd.factorize(df['name'])[0] + 1\n"], "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": ["result = df.copy()\nresult['a'] = df.groupby(['name', 'a']).ngroup() + 1\n"], "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": ["<code>\nimport pandas as pd\n\nexample_df = pd.DataFrame({'name': ['Aaron', 'Aaron', 'Aaron', 'Brave', 'Brave'],\n                           'a': [3, 3, 3, 4, 3],\n                           'b': [5, 6, 6, 6, 6],\n                           'c': [7, 9, 10, 0, 1]})\n\ndef replace_names_with_ids(df):\n    name_to_id = {name: idx + 1 for idx, name in enumerate(df['name'].unique())}\n    df['name'] = df['name'].map(name_to_id)\n    return df\n\nresult = replace_names_with_ids(example_df)\nprint(result)\n"], "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": ["df['ID'] = df['name'] + '_' + df['a'].astype(str)\ndf['ID'] = pd.factorize(df['ID'])[0] + 1\nresult = df.drop(['name', 'a'], axis=1)\n"], "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": ["<code>\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf['value'] = df['value'].abs()\n"], "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": ["df_melted = df.melt(id_vars=['user', '01/12/15'], var_name='others', value_name='value')\ndf_melted.sort_values(by='user', inplace=True)\ndf_melted.reset_index(drop=True, inplace=True)\n"], "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": ["df = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna(subset=['value'])\ndf = df.sort_values(by=['user', 'date'])\ndf.reset_index(drop=True, inplace=True)\n"], "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": ["result = df.loc[df['c'] > 0.5, columns].to_numpy()\n"], "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": ["result = df.loc[df['c'] > 0.45, columns].values\n"], "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": ["import numpy as np\nimport pandas as pd\n\n# Create a sample DataFrame\ndf = pd.DataFrame(np.random.rand(4,5), columns=list('abcde'))\n\n# Function to filter DataFrame and select specific columns\ndef filter_and_select(df, condition_col, threshold, columns):\n    filtered_df = df[df[condition_col] > threshold][columns]\n    return filtered_df\n\n# Example usage\nresult = filter_and_select(df, 'c', 0.5, ['b', 'e'])\nprint(result)\n\n# Convert the result to a numpy array\nresult_array = result.to_numpy()\nprint(result_array)\n### END SOLUTION\n<code>"], "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": ["import numpy as np\nimport pandas as pd\n\ndef f(df, columns=['b', 'e']):\n    # Filter rows where 'c' > 0.5 and select specified columns\n    filtered_df = df[df['c'] > 0.5][columns]\n    # Compute the sum of the selected columns and append as a new column\n    filtered_df['sum'] = filtered_df.sum(axis=1)\n    return filtered_df\n\n# Example DataFrame\ndf = pd.DataFrame(np.random.rand(4,5), columns=list('abcde'))\n\n# Using the function\nresult = f(df, columns=['b', 'e'])\nprint(result)\n### END SOLUTION\n<code>"], "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": ["<code>\ndef f(df, columns=['b', 'e']):\n    return df.loc[df['c'] > 0.5, columns]\n### END SOLUTION\n"], "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": ["import pandas as pd\nfrom datetime import timedelta\n\n# Sample DataFrame\ndf = pd.DataFrame({\n    'ID': [1, 2, 3, 4, 5, 6, 7],\n    'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n    'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]\n})\n\n# Convert date column to datetime\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Define the threshold for days\nX = 365\n\n# Sort the DataFrame by date\ndf = df.sort_values(by='date')\n\n# Initialize an empty list to store the indices of rows to keep\nkeep = []\n\n# Initialize the last kept date to a very early date\nlast_kept_date = pd.Timestamp('1800-01-01')\n\n# Iterate over the DataFrame\nfor index, row in df.iterrows():\n    # If the current date is more than X days after the last kept date, keep this row\n    if row['date'] > last_kept_date + timedelta(days=X):\n        keep.append(index)\n        last_kept_date = row['date']\n\n# Filter the DataFrame to only include the kept rows\nresult = df.loc[keep]\nresult.reset_index(drop=True, inplace=True)\n\n# Display the result\nprint(result)\n<code>"], "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": ["import pandas as pd\nfrom datetime import timedelta\n\n# Sample DataFrame\ndf = pd.DataFrame({\n    'ID': [1, 2, 3, 4, 5, 6, 7],\n    'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n    'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]\n})\n\n# Convert date column to datetime\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Weeks threshold\nX = 52\n\n# Sort the DataFrame by date\ndf = df.sort_values(by='date')\n\n# Initialize the list to keep track of non-overlapping rows\nnon_overlapping = []\n\n# Initialize the last added date\nlast_added_date = pd.Timestamp.min\n\n# Iterate through the DataFrame\nfor index, row in df.iterrows():\n    if row['date'] > last_added_date + pd.DateOffset(weeks=X):\n        non_overlapping.append(row)\n        last_added_date = row['date']\n\n# Create a new DataFrame from the non-overlapping rows\nresult = pd.DataFrame(non_overlapping)\n\n# Display the result\nprint(result)\n<code>"], "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": ["import pandas as pd\nfrom datetime import timedelta\n\n# Sample DataFrame\ndf = pd.DataFrame({\n    'ID': [1, 2, 3, 4, 5, 6, 7],\n    'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n    'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]\n})\n\n# Convert date column to datetime\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\n\n# Sort DataFrame by date\ndf.sort_values('date', inplace=True)\n\n# Define the number of weeks for the overlap\nX = 52  # weeks\n\n# Initialize the list to keep track of non-overlapping dates\nfiltered_df = pd.DataFrame()\n\n# Initialize the last date variable\nlast_date = pd.Timestamp.min\n\n# Iterate through the DataFrame\nfor index, row in df.iterrows():\n    if row['date'] > last_date + pd.Timedelta(weeks=X):\n        filtered_df = filtered_df.append(row)\n        last_date = row['date']\n\n# Reset index of the filtered DataFrame\nfiltered_df.reset_index(drop=True, inplace=True)\n\n# Convert date format\nfiltered_df['date'] = filtered_df['date'].dt.strftime('%d-%b-%Y')\n\n# Display the result\nprint(filtered_df)\n<code>"], "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": ["result = df.groupby(df.index // 3).mean()\n"], "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": ["result = df.groupby(df.index // 3)['col1'].mean().reset_index(drop=True)\n"], "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": ["result = df.groupby(df.index // 4).sum()\n<code>"], "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": ["result = df.iloc[::-1].groupby(df.index // 3).mean().iloc[::-1]\n"], "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": ["result = []\ni = 0\nwhile i < len(df):\n    if (i // 5) % 2 == 0:  # Check if it's a block of 3\n        result.append(df.iloc[i:i+3]['col1'].sum())\n        i += 3\n    else:  # Block of 2\n        result.append(df.iloc[i:i+2]['col1'].mean())\n        i += 2\n\nresult_df = pd.DataFrame(result, columns=['col1'])\n"], "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": ["import numpy as np\n\n# Reverse the DataFrame to work from end to head\ndf_reversed = df.iloc[::-1].reset_index(drop=True)\n\n# Initialize the result list\nresults = []\n\n# Set the index to start processing\nindex = 0\n\nwhile index < len(df_reversed):\n    if (index // 3) % 2 == 0:  # Check if it's a 'sum' block (0, 2, 4, ...)\n        # Calculate sum of the next 3 rows if possible\n        block = df_reversed['col1'][index:index+3]\n        results.append(block.sum())\n        index += 3\n    else:  # It's an 'avg' block (1, 3, 5, ...)\n        # Calculate average of the next 2 rows if possible\n        block = df_reversed['col1'][index:index+2]\n        if len(block) > 0:\n            results.append(block.mean())\n        index += 2\n\n# Create a DataFrame from the results\nresult = pd.DataFrame(results, columns=['col1'])\n"], "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": ["df.loc[df['A'] == 0, 'A'] = None\ndf['A'] = df['A'].fillna(method='ffill')\n<code>"], "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": ["df['A'] = df['A'].replace(0, pd.NA).bfill().astype(int)\n<code>"], "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": ["<code>\ndf['A'] = df['A'].replace(0, pd.NA)\ndf['forward_fill'] = df['A'].ffill()\ndf['backward_fill'] = df['A'].bfill()\ndf['A'] = df[['forward_fill', 'backward_fill']].max(axis=1)\ndf.drop(['forward_fill', 'backward_fill'], axis=1, inplace=True)\n"], "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": ["df['number'] = df['duration'].str.extract('(\\d+)', expand=False).astype(int)\ndf['time'] = df['duration'].str.extract('([a-zA-Z]+)', expand=False)\ntime_days = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_days'] = df['time'].map(time_days)\n"], "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": ["df[['time', 'number']] = df['duration'].str.extract(r'(\\D+)(\\d+)')\ndf['number'] = df['number'].astype(int)\ntime_days = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time'] = df['time'].str.strip()\ndf['time_day'] = df['time'].map(time_days)\n"], "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": ["    # Extract number and time units from the 'duration' column\n    df['number'] = df['duration'].str.extract('(\\d+)').astype(int)\n    df['time'] = df['duration'].str.extract('([a-zA-Z]+)')\n\n    # Define a dictionary to map time units to days\n    time_to_days = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\n\n    # Map the 'time' column using the dictionary to create 'time_days' column\n    df['time_days'] = df['time'].map(time_to_days)\n\n    return df\n\n# Apply the function to the example dataframe\nresult = f(example_df)\nresult\n### END SOLUTION\n<code>"], "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": ["df[['time', 'number']] = df['duration'].str.extract('([a-zA-Z]+)(\\d+)')\ndf['number'] = df['number'].astype(int)\ntime_to_days = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_day'] = df['time'].map(time_to_days) * df['number']\ndf\n"], "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": ["import numpy as np\n\nresult = np.where(df1[columns_check_list].ne(df2[columns_check_list]).any(axis=1))\nresult = result[0].tolist()\nprint(result)\n<code>"], "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": ["import numpy as np\n\nresult = np.all([df1[col] == df2[col] for col in columns_check_list], axis=0)\nprint(result)\n<code>"], "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": ["df.index = pd.MultiIndex.from_tuples([(i[0], pd.to_datetime(i[1])) for i in df.index], names=df.index.names)\n"], "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": ["df.index = pd.MultiIndex.from_tuples([(name, pd.to_datetime(date)) for name, date in df.index], names=df.index.names)\n"], "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\ndef f(df):\n    df.index = pd.to_datetime(df.index.get_level_values('date'), format='%m/%d/%Y')\n    return np.array(df.reset_index()[['date', 'x', 'y']])\n### END SOLUTION\n"], "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": ["    df.index = pd.MultiIndex.from_tuples([(i[1], pd.to_datetime(i[0])) for i in df.index], names=['id', 'date'])\n    df = df.swaplevel()\n    return df\n### END SOLUTION\n"], "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": ["<code>\ndf_long = df.pivot_table(index=['Country', df.columns[2:].tolist()], columns='Variable', values=df.columns[2:].tolist())\ndf_long = df_long.reset_index()\ndf_long.columns.name = None\ndf_long = pd.melt(df_long, id_vars=['Country'], var_name='year', value_name='value')\ndf_long = df_long.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf_long.columns.name = None\n"], "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": ["df_long = df.melt(id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf_pivot = df_long.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf_pivot = df_pivot.sort_values(by=['Country', 'year'], ascending=[True, False])\ndf_pivot.columns.name = None\ndf = df_pivot\n"], "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": ["value_columns = [col for col in df.columns if col.startswith('Value')]\ndf = df[df[value_columns].apply(lambda x: (x.abs() < 1).all(), axis=1)]\n<code>"], "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": ["value_columns = df.filter(like='Value').columns\ndf = df[df[value_columns].abs().max(axis=1) > 1]\n<code>"], "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": ["value_columns = [col for col in df.columns if col.startswith('Value_')]\ndf_filtered = df[df[value_columns].abs().max(axis=1) > 1]\ndf_filtered.columns = [col.replace('Value_', '') if 'Value_' in col else col for col in df_filtered.columns]\ndf = df_filtered\n<code>"], "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": ["df.replace('&AMP;', '&', regex=True)\n<code>"], "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": ["df.replace('&LT;', '<', regex=True)\n<code>"], "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": ["<code>\n    df = df.replace('&AMP;', '&', regex=True)\n    return df\n### END SOLUTION\n\n# Example usage:\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": ["df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n<code>"], "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": ["df.replace('&AMP;', '&', regex=True, inplace=True)\ndf['A'] = df['A'].apply(lambda x: f\"{x} = {eval(x.replace('&', 'and'))}\" if '&' in x else x)\ndf['C'] = df['C'].apply(lambda x: f\"{x} = {eval(x.replace('&', 'and'))}\" if '&' in x else x)\n"], "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": ["<code>\ndf['first_name'] = df['name'].apply(lambda x: x if ' ' not in x else x.split(' ')[0])\ndf['last_name'] = df['name'].apply(lambda x: None if ' ' not in x else ' '.join(x.split(' ')[1:]))\ndf.drop(columns=['name'], inplace=True)\n"], "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": ["import pandas as pd\n\n# Create the DataFrame\ndf = pd.DataFrame({'name': ['Jack Fine', 'Kim Q. Danger', 'Jane Smith', 'Juan de la Cruz']})\n\n# Define a function to split the name if it contains exactly one space\ndef split_name(name):\n    parts = name.split()\n    if len(parts) == 2:\n        return pd.Series([parts[0], parts[1]])\n    else:\n        return pd.Series([name, None])\n\n# Apply the function and create new columns\ndf[['1_name', '2_name']] = df['name'].apply(split_name)\n\n# Display the DataFrame\nprint(df[['1_name', '2_name']])\n"], "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\n# Create the DataFrame\ndf = pd.DataFrame({'name': ['Jack Fine', 'Kim Q. Danger', 'Jane 114 514 Smith', 'Zhongli']})\n\n# Function to split names based on the number of spaces\ndef split_name(name):\n    parts = name.split()\n    if len(parts) == 1:\n        return [parts[0], np.nan, np.nan]\n    elif len(parts) == 2:\n        return [parts[0], np.nan, parts[1]]\n    else:\n        return [parts[0], ' '.join(parts[1:-1]), parts[-1]]\n\n# Apply the function and create a new DataFrame\ndf[['first_name', 'middle_name', 'last_name']] = df['name'].apply(split_name).tolist()\n"], "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": ["df1.set_index('Timestamp', inplace=True)\ndf2.set_index('Timestamp', inplace=True)\nresult = df2.join(df1, how='left')\nresult.reset_index(inplace=True)\n"], "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": ["<code>\nresult = pd.merge_asof(df1.sort_values('Timestamp'), df2.sort_values('Timestamp'), on='Timestamp', direction='nearest')\n"], "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": ["<code>\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] <= 50 and row['col3'] <= 50 else max(row['col1'], row['col2'], row['col3']), axis=1)\n"], "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": ["<code>\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] > 50 and row['col3'] > 50 else row['col1'] + row['col2'] + row['col3'], axis=1)\n"], "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": ["error_values = []\nfor index, row in df.iterrows():\n    if not isinstance(row['Field1'], int):\n        error_values.append(row['Field1'])\ndf = error_values\n"], "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": ["integers = []\nfor index, row in df.iterrows():\n    if isinstance(row['Field1'], int):\n        integers.append(row['Field1'])\ndf = integers\n"], "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": ["<code>\n    error_values = []\n    for index, row in df.iterrows():\n        if not isinstance(row['Field1'], int):\n            error_values.append(row['Field1'])\n    return error_values\n### END SOLUTION\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": ["df.set_index('cat', inplace=True)\ndf = df.div(df.sum(axis=1), axis=0)\ndf.reset_index(inplace=True)\n"], "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": ["df.set_index('cat', inplace=True)\ndf = df.div(df.sum())\ndf.reset_index(inplace=True)\n"], "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": ["result = df.loc[test]\n<code>"], "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": ["result = df.loc[test]\n<code>"], "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": ["result = df.drop(test)\n<code>"], "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": ["    unique_test = list(dict.fromkeys(test))\n    return df.loc[unique_test]\n### END SOLUTION"], "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": ["import numpy as np\n\n# Group by time and calculate the nearest neighbour for each car\ndef nearest_neighbour(group):\n    positions = group[['x', 'y']].values\n    cars = group['car'].values\n    distances = np.sqrt(((positions[:, np.newaxis, :] - positions[np.newaxis, :, :]) ** 2).sum(axis=2))\n    np.fill_diagonal(distances, np.inf)\n    nearest_indices = np.argmin(distances, axis=1)\n    nearest_cars = cars[nearest_indices]\n    min_distances = distances[np.arange(len(distances)), nearest_indices]\n    return pd.DataFrame({\n        'car': cars,\n        'nearest_neighbour': nearest_cars,\n        'euclidean_distance': min_distances\n    }, index=group.index)\n\ndf2 = df.groupby('time').apply(nearest_neighbour).reset_index(level=1, drop=True)\ndf2\n"], "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": ["```python\nimport numpy as np\n\n# Function to calculate Euclidean distance\ndef euclidean_distance(x1, y1, x2, y2):\n    return np.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n# Group by time and calculate the farmost neighbour\ndef farmost_neighbour(group):\n    distances = []\n    cars = group['car'].tolist()\n    xs = group['x'].tolist()\n    ys = group['y'].tolist()\n    for i in range(len(cars)):\n        max_distance = 0\n        farmost_car = None\n        for j in range(len(cars)):\n            if i != j:\n                distance = euclidean_distance(xs[i], ys[i], xs[j], ys[j])\n                if distance > max_distance:\n                    max_distance = distance\n                    farmost_car = cars[j]\n        distances.append((cars[i], farmost_car, max_distance))\n    return pd.DataFrame(distances, columns=['car', 'farmost_neighbour', 'euclidean_distance'])\n\n# Apply the function to each group\ndf2 = df.groupby('time').apply(farmost_neighbour).reset_index().drop('level_1', axis=1)\ndf2\n```"], "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": ["<code>\ndf['keywords_all'] = df.apply(lambda row: ','.join([str(x) for x in row if pd.notna(x)]), axis=1)\n"], "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": ["<code>\ndf['keywords_all'] = df.apply(lambda row: '-'.join([str(x) for x in row if pd.notna(x)]), axis=1)\n"], "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": ["<code>\nkeyword_cols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf['keywords_all'] = df[keyword_cols].apply(lambda row: '-'.join(row.dropna()), axis=1)\n"], "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": ["<code>\nkeyword_cols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf['keywords_all'] = df[keyword_cols].apply(lambda row: '-'.join(row.dropna()), axis=1)\n"], "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": ["sampled_indices = df.sample(frac=0.2, random_state=0).index\ndf.loc[sampled_indices, 'Quantity'] = 0\n"], "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": ["sampled_indices = df.sample(frac=0.2, random_state=0).index\ndf.loc[sampled_indices, 'ProductId'] = 0\n"], "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": ["<code>\nimport numpy as np\n\n# Function to apply on each group\ndef zero_out_random_rows(group):\n    n = max(1, int(np.ceil(0.2 * len(group))))\n    indices_to_zero = group.sample(n=n, random_state=0).index\n    group.loc[indices_to_zero, 'Quantity'] = 0\n    return group\n\n# Apply the function to each group and combine the results\ndf = df.groupby('UserId').apply(zero_out_random_rows).reset_index(drop=True)\n"], "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": ["<code>\nduplicate_bool = df.duplicated(subset=['col1', 'col2'], keep='first')\ndf['index_original'] = df.index.where(~duplicate_bool).ffill().astype(int)\nduplicate = df.loc[duplicate_bool]\nresult = duplicate\n"], "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": ["<code>\nduplicate_bool = df.duplicated(subset=['col1', 'col2'], keep='last')\nduplicates = df.loc[duplicate_bool]\nlast_occurrences = df.drop_duplicates(subset=['col1', 'col2'], keep='last')\nlast_indices = last_occurrences.index\nduplicates['index_original'] = duplicates.apply(lambda row: last_indices[(last_occurrences['col1'] == row['col1']) & (last_occurrences['col2'] == row['col2'])].tolist()[0], axis=1)\nresult = duplicates\n"], "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": ["<code>\nimport pandas as pd\n\nexample_df = pd.DataFrame(data=[[1, 2], [3, 4], [1, 2], [1, 4], [1, 2]], columns=['col1', 'col2'])\n\ndef f(df=example_df):\n    # Finding duplicates\n    duplicate_bool = df.duplicated(subset=['col1', 'col2'], keep='first')\n    duplicates = df.loc[duplicate_bool].copy()\n    \n    # Mapping first occurrence index\n    first_occurrence = df.drop_duplicates(subset=['col1', 'col2'], keep='first')\n    first_occurrence['index_original'] = first_occurrence.index\n    duplicates = duplicates.merge(first_occurrence[['col1', 'col2', 'index_original']], on=['col1', 'col2'], how='left')\n    \n    return duplicates\n\nresult = f()\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": ["<code>\nduplicate_bool = df.duplicated(subset=['col1', 'col2', '3col'], keep=False)\ndf['index_original'] = df.groupby(['col1', 'col2', '3col']).transform('idxmin')\nduplicate = df.loc[duplicate_bool]\nresult = duplicate\n"], "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": ["<code>\nduplicate_bool = df.duplicated(subset=['col1', 'col2'], keep='last')\nduplicates = df.loc[duplicate_bool]\nlast_indices = df.drop_duplicates(subset=['col1', 'col2'], keep='last').index\nduplicates['index_original'] = duplicates.apply(lambda row: last_indices[(df['col1'] == row['col1']) & (df['col2'] == row['col2'])].tolist()[0], axis=1)\nresult = duplicates\n"], "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": ["result = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n"], "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": ["grouped = df.groupby(['Sp', 'Mt'])\nresult = grouped.apply(lambda x: x[x['count'] == x['count'].max()])\nresult.reset_index(drop=True, inplace=True)\n"], "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": ["result = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\nprint(result)\n<code>"], "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": ["grouped = df.groupby(['Sp', 'Value'])\nresult = grouped.apply(lambda x: x[x['count'] == x['count'].max()])\nresult.reset_index(drop=True, inplace=True)\n<code>"], "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": ["result = df.query(\"Category in @filter_list\")\n<code>"], "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": ["result = df.query(\"Category not in @filter_list\")\n"], "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": ["value_vars = list(zip(*df.columns.levels))\nresult = pd.melt(df, value_vars=value_vars)\n"], "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": ["value_vars = list(df.columns)\nresult = pd.melt(df.reset_index(), value_vars=value_vars, var_name=['variable_2', 'variable_1', 'variable_0'], value_name='value')\n"], "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\ndf\n<code>"], "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\ndf\n<code>"], "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\n<code>"], "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": ["df['cummax'] = df.groupby('id')['val'].cummax()\ndf\n<code>"], "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\ndf['cumsum'] = df['cumsum'].clip(lower=0)\ndf\n<code>"], "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": ["result = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False))\n<code>"], "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": ["result = df.groupby('r')['v'].apply(lambda x: x.sum(skipna=False))\n<code>"], "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": ["result = df.groupby('l', as_index=False).agg(lambda x: x.sum(skipna=False))\n<code>"], "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": ["<code>\ndef determine_relationship(df):\n    columns = df.columns\n    relationships = []\n    for col1 in columns:\n        for col2 in columns:\n            if col1 != col2:\n                unique_col1 = df[col1].nunique()\n                unique_col2 = df[col2].nunique()\n                unique_pairs = df[[col1, col2]].drop_duplicates().shape[0]\n                \n                if unique_col1 == unique_pairs and unique_col2 == unique_pairs:\n                    relation = 'one-to-one'\n                elif unique_col1 == unique_pairs:\n                    relation = 'one-to-many'\n                elif unique_col2 == unique_pairs:\n                    relation = 'many-to-one'\n                else:\n                    relation = 'many-to-many'\n                \n                relationships.append(f'{col1} {col2} {relation}')\n    return relationships\n\nresult = determine_relationship(df)\n"], "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": ["<code>\ndef determine_relationship(df):\n    columns = df.columns\n    relationships = []\n    for col1 in columns:\n        for col2 in columns:\n            if col1 != col2:\n                unique_col1 = df[col1].nunique()\n                unique_col2 = df[col2].nunique()\n                unique_pairs = df[[col1, col2]].drop_duplicates().shape[0]\n                \n                if unique_col1 == unique_pairs and unique_col2 == unique_pairs:\n                    relation = 'one-2-one'\n                elif unique_col1 == unique_pairs:\n                    relation = 'one-2-many'\n                elif unique_col2 == unique_pairs:\n                    relation = 'many-2-one'\n                else:\n                    relation = 'many-2-many'\n                \n                relationships.append(f'{col1} {col2} {relation}')\n    return relationships\n\nresult = determine_relationship(df)\n"], "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": ["<code>\ndef relationship_type(df):\n    n = df.shape[1]\n    result = pd.DataFrame(index=df.columns, columns=df.columns)\n    for i in df.columns:\n        for j in df.columns:\n            if i != j:\n                unique_i = df[i].nunique()\n                unique_j = df[j].nunique()\n                unique_pairs = df[[i, j]].drop_duplicates().shape[0]\n                \n                if unique_i == unique_pairs and unique_j == unique_pairs:\n                    result.at[i, j] = 'one-to-one'\n                elif unique_i == unique_pairs:\n                    result.at[i, j] = 'one-to-many'\n                elif unique_j == unique_pairs:\n                    result.at[i, j] = 'many-to-one'\n                else:\n                    result.at[i, j] = 'many-to-many'\n    return result\n\nresult = relationship_type(df)\n"], "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": ["<code>\ndef relationship_type(df):\n    n = df.shape[1]\n    cols = df.columns\n    result = pd.DataFrame(index=cols, columns=cols)\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                result.iloc[i, j] = None\n                continue\n            \n            unique_i = df[cols[i]].nunique()\n            unique_j = df[cols[j]].nunique()\n            unique_pairs = df[[cols[i], cols[j]]].drop_duplicates().shape[0]\n            \n            if unique_i == unique_pairs and unique_j == unique_pairs:\n                result.iloc[i, j] = 'one-2-one'\n            elif unique_i == unique_pairs:\n                result.iloc[i, j] = 'one-2-many'\n            elif unique_j == unique_pairs:\n                result.iloc[i, j] = 'many-2-one'\n            else:\n                result.iloc[i, j] = 'many-2-many'\n    \n    return result\n\nresult = relationship_type(df)\n"], "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": ["df['firstname'] = df['firstname'].str.lower().str.replace(\" \", \"\")\ndf['lastname'] = df['lastname'].str.lower().str.replace(\" \", \"\")\ndf['email'] = df['email'].str.lower().str.replace(\" \", \"\")\n\ndf.sort_values(by='bank', ascending=False, inplace=True)\ndf.drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='first', inplace=True)\nresult = df\nresult.reset_index(drop=True, inplace=True)\n"], "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": ["<code>\nresult = s.str.replace(',', '').replace('', 'NaN').astype(float)\n"], "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": ["df['FamilyStatus'] = df.apply(lambda row: 'Has Family' if row['SibSp'] > 0 or row['Parch'] > 0 else 'No Family', axis=1)\nresult = df.groupby('FamilyStatus')['Survived'].mean()\n"], "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": ["df['Group'] = df.apply(lambda row: 'Has Family' if (row['Survived'] > 0) or (row['Parch'] > 0) else 'No Family', axis=1)\nresult = df.groupby('Group')['SibSp'].mean()\n"], "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": ["df['Group'] = 'Other'\ndf.loc[(df['SibSp'] == 1) & (df['Parch'] == 1), 'Group'] = 'Has Family'\ndf.loc[(df['SibSp'] == 0) & (df['Parch'] == 0), 'Group'] = 'No Family'\ndf.loc[(df['SibSp'] == 0) & (df['Parch'] == 1), 'Group'] = 'New Family'\ndf.loc[(df['SibSp'] == 1) & (df['Parch'] == 0), 'Group'] = 'Old Family'\n\nresult = df.groupby('Group')['Survived'].mean()\n"], "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": ["<code>\nresult = df.sort_values(['cokey', 'A']).groupby('cokey')\n"], "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": ["<code>\nresult = df.sort_values(['cokey', 'A']).groupby('cokey')\n"], "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": ["tuples = [tuple(col) if isinstance(col, tuple) else (col,) for col in df.columns]\ndf.columns = pd.MultiIndex.from_tuples(tuples)\ndf.columns.names = ['Caps', 'Lower']\n<code>"], "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": ["df.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack([0, 1]).unstack([1, 2])\ndf.sort_index(axis=1, inplace=True)\n<code>"], "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": ["<code>\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n"], "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": ["result = pd.DataFrame({\n    'birdType': someTuple[0],\n    'birdCount': someTuple[1]\n})\n"], "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": ["grouped = df.groupby('a')['b']\nresult = grouped.agg(['mean', 'std'])\nprint(result)\n<code>"], "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": ["<code>\nresult = df.groupby('b')['a'].agg(['mean', 'std'])\nprint(result)\n"], "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": ["import numpy as np\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef min_max(x):\n    return (x - x.min()) / (x.max() - x.min())\n\ndf['softmax'] = df.groupby('a')['b'].transform(lambda x: softmax(x))\ndf['min-max'] = df.groupby('a')['b'].transform(lambda x: min_max(x))\n"], "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": ["result = df.loc[(df.sum(axis=1) != 0), df.sum(axis=0) != 0]\n"], "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": ["non_zero_rows = df.loc[df.sum(axis=1) != 0]\nnon_zero_cols = non_zero_rows.loc[:, non_zero_rows.sum(axis=0) != 0]\nresult = non_zero_cols\n"], "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": ["max_val_cols = df.max() == 2\nfiltered_cols = df.columns[~max_val_cols]\nresult = df.loc[:, filtered_cols]\nresult = result[df.max(axis=1) != 2]\n"], "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": ["max_cols = df.max() == 2\nmax_rows = (df == 2).any(axis=1)\ndf.loc[max_rows, max_cols[max_cols].index] = 0\nresult = df\n"], "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": ["result = s.sort_values().sort_index(kind='mergesort')\n<code>"], "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": ["df = s.sort_values().sort_index(kind='mergesort').reset_index()\ndf.columns = ['index', 1]\ndf"], "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": ["result = df[pd.to_numeric(df['A'], errors='coerce').notna()]\n<code>"], "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": ["result = df[df['A'].apply(lambda x: isinstance(x, str))]\n<code>"], "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": ["result = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n"], "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": ["grouped = df.groupby(['Sp', 'Mt'])\nresult = grouped.apply(lambda x: x[x['count'] == x['count'].max()])\nresult.reset_index(drop=True, inplace=True)\n<code>"], "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": ["<code>\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n"], "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": ["grouped = df.groupby(['Sp', 'Value'])\nresult = grouped.apply(lambda x: x[x['count'] == x['count'].max()])\nresult.reset_index(drop=True, inplace=True)\n<code>"], "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": ["df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n<code>"], "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": ["df['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n<code>"], "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\nexample_dict = {'abc':'1/2/2003', 'def':'1/5/2017', 'ghi':'4/10/2013'}\nexample_df = pd.DataFrame({'Member':['xyz', 'uvw', 'abc', 'def', 'ghi'], 'Group':['A', 'B', 'A', 'B', 'B'], 'Date':[np.nan, np.nan, np.nan, np.nan, np.nan]})\n\ndef map_dates_to_df(mapping_dict, df):\n    df['Date'] = df['Member'].map(mapping_dict).fillna(df['Date'])\n    return df\n\nresult_df = map_dates_to_df(example_dict, example_df)\nprint(result_df)\n"], "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": ["<code>\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\ndf['Date'] = pd.to_datetime(df['Date'], dayfirst=True).dt.strftime('%d-%b-%Y')\n"], "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": ["<code>\nimport pandas as pd\n\nd = ({\n    'Date' : ['1/1/18','1/1/18','2/1/18','3/1/18','1/2/18','1/3/18','2/1/19','3/1/19'],                 \n    'Val' : ['A','B','C','D','A','B','C','D'],                                      \n})\ndf = pd.DataFrame(data = d)\ndf['Date'] = pd.to_datetime(df['Date'], format= '%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.dt.to_period('M').map(df.groupby(df.Date.dt.to_period('M')).size())\ndf['Count_y'] = df.Date.dt.to_period('Y').map(df.groupby(df.Date.dt.to_period('Y')).size())\nprint(df)\n"], "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": ["<code>\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Val'].transform('count')\ndf['Count_m'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month])['Val'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Val'].transform('count')\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Val'].transform('count')\n"], "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": ["<code>\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Date'].transform('count')\ndf['Count_m'] = df.groupby(df['Date'].dt.to_period('M'))['Date'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.to_period('Y'))['Date'].transform('count')\ndf['Count_w'] = df.groupby(df['Date'].dt.to_period('W'))['Date'].transform('count')\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Val'].transform('count')\n"], "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": ["df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)\ndf.set_index('Date', inplace=True)\n\nresult1 = df.groupby(df.index).apply(lambda x: (x == 0).sum())\nresult2 = df.groupby(df.index).apply(lambda x: (x != 0).sum())\n"], "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": ["is_even = df[['B', 'C']] % 2 == 0\nis_odd = ~is_even\n\nresult1 = is_even.groupby(df['Date']).sum()\nresult2 = is_odd.groupby(df['Date']).sum()\n"], "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": ["result = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n"], "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": ["result = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n<code>"], "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": ["result = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n"], "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": ["result = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.max, 'E': np.min})\n"], "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": ["import dask.dataframe as dd\n\n# Create a Dask DataFrame\nddf = dd.from_pandas(df, npartitions=2)\n\n# Define a function to split and expand the 'var2' column\ndef split_and_explode(df):\n    # Split the 'var2' column into a list\n    df['var2'] = df['var2'].str.split(',')\n    # Explode the 'var2' list into multiple rows\n    return df.explode('var2')\n\n# Apply the function to the Dask DataFrame\nresult = ddf.map_partitions(split_and_explode, meta=ddf)\nresult.compute()\n<code>"], "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": ["import dask.dataframe as dd\n\n# Create a Dask DataFrame\nddf = dd.from_pandas(df, npartitions=2)\n\n# Define a function to split and expand the 'var2' column\ndef split_expand(row):\n    var2_items = row['var2'].split(',')\n    return pd.DataFrame({\n        'var1': [row['var1']] * len(var2_items),\n        'var2': var2_items\n    })\n\n# Apply the function and concatenate the results\nresult = ddf.map_partitions(lambda df: pd.concat(df.apply(split_expand, axis=1).tolist(), ignore_index=True))\nresult.compute()\n<code>"], "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": ["import dask.dataframe as dd\n\n# Create a Dask DataFrame\nddf = dd.from_pandas(df, npartitions=1)\n\n# Define a function to split and expand the 'var2' column\ndef split_expand(row):\n    split_values = row['var2'].split('-')\n    return pd.DataFrame({\n        'var1': [row['var1']] * len(split_values),\n        'var2': split_values\n    })\n\n# Apply the function and concatenate the results\nresult = ddf.map_partitions(lambda df: pd.concat(df.apply(split_expand, axis=1).tolist(), ignore_index=True)).compute()\n<code>"], "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": ["import pandas as pd\n\n# Load the data\ndf = pd.read_csv('inn.txt', sep='\\t', header=None, names=['str'])\n\n# Define the function to count special characters\ndef count_special_char(string):\n    special_char = 0\n    for char in string:\n        if not char.isalnum() and not char.isspace():\n            special_char += 1\n    return special_char\n\n# Apply the function to the 'str' column\ndf['new'] = df['str'].apply(count_special_char)\n\n# Print the DataFrame\nprint(df)\n"], "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": ["<code>\ndef count_letters(string):\n    return sum(c.isalpha() for c in string)\n\ndf['new'] = df['str'].apply(count_letters)\nprint(df)\n"], "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": ["df[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n<code>"], "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": ["df[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n<code>\nEND SOLUTION"], "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": ["df['fips'] = df['row'].str[:5]\ndf['medi'] = df['row'].str[6:]\ndf['row'] = df['row']\n<code>"], "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": ["df.set_index('Name', inplace=True)\ndf_cumavg = df.replace(0, pd.NA).expanding(axis=1).mean().fillna(method='ffill', axis=1)\ndf_cumavg.reset_index(inplace=True)\n"], "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": ["df.set_index('Name', inplace=True)\ndf = df.replace(0, pd.NA)\ndf = df.apply(lambda x: x[::-1].expanding().mean()[::-1], axis=1)\ndf = df.fillna(0)\ndf.reset_index(inplace=True)\n"], "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": ["<code>\nimport pandas as pd\n\nexample_df = pd.DataFrame({'Name': ['Name1', 'Name2', 'Name3'],\n                   '2001': [2, 1, 0],\n                   '2002': [5, 4, 5],\n                   '2003': [0, 2, 0],\n                   '2004': [0, 0, 0],\n                   '2005': [4, 4, 0],\n                   '2006': [6, 0, 2]})\n\ndef f(df=example_df):\n    df = df.set_index('Name')\n    df_cumsum = df.cumsum(axis=1)\n    df_count = (df != 0).cumsum(axis=1)\n    df_avg = df_cumsum.div(df_count)\n    df_avg = df_avg.fillna(method='ffill', axis=1)\n    return df_avg.reset_index()\n\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": ["df.set_index('Name', inplace=True)\ndf = df.replace(0, pd.NA)\ndf = df.apply(lambda x: x[::-1].expanding().mean()[::-1], axis=1)\ndf = df.fillna(0)\ndf.reset_index(inplace=True)\n"], "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": ["<code>\ndf['Label'] = (df['Close'].diff() > 0).astype(int)\ndf['Label'].iloc[0] = 1\n"], "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": ["<code>\ndf['label'] = df['Close'].diff().fillna(0).apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\ndf.loc[0, 'label'] = 1\n"], "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": ["<code>\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf['label'] = df['Close'].diff().shift(-1).fillna(0)\ndf['label'] = df['label'].apply(lambda x: 1 if x > 0 else -1 if x < 0 else 0)\ndf.loc[0, 'label'] = 1\n"], "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": ["<code>\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\n\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\ndf.loc[df['id'] != df['id'].shift(-1), 'Duration'] = pd.NaT\n"], "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": ["<code>\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = (df['departure_time'].shift(-1) - df['arrival_time']).dt.total_seconds()\ndf.loc[df['id'] != df['id'].shift(-1), 'Duration'] = None\n"], "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\n# Create DataFrame\nid = [\"Train A\", \"Train A\", \"Train A\", \"Train B\", \"Train B\", \"Train B\"]\narrival_time = [\"0\", \"2016-05-19 13:50:00\", \"2016-05-19 21:25:00\", \"0\", \"2016-05-24 18:30:00\", \"2016-05-26 12:15:00\"]\ndeparture_time = [\"2016-05-19 08:25:00\", \"2016-05-19 16:00:00\", \"2016-05-20 07:45:00\", \"2016-05-24 12:50:00\", \"2016-05-25 23:00:00\", \"2016-05-26 19:45:00\"]\ndf = pd.DataFrame({'id': id, 'arrival_time': arrival_time, 'departure_time': departure_time})\n\n# Convert to datetime, handling '0' as NaT\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\n\n# Calculate duration in seconds\ndf['Duration'] = (df['departure_time'].shift(-1) - df['arrival_time']).dt.total_seconds()\n\n# Format datetime columns\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\n\n# Replace 'NaT' with NaN after formatting\ndf.replace('NaT', np.nan, inplace=True)\n"], "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": ["result = df[df['key2'] == 'one'].groupby('key1').size().reindex(df['key1'].unique(), fill_value=0).reset_index(name='count')\n"], "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": ["result = df[df['key2'] == 'two'].groupby('key1').size().reset_index(name='count')\n<code>"], "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": ["result = df[df['key2'].str.endswith('e')].groupby('key1').size().reindex(df['key1'].unique(), fill_value=0).reset_index(name='count')\n"], "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": ["<code>\nmax_result = df.index.max()\nmin_result = df.index.min()\n"], "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": ["<code>\nmode_result = df.index.value_counts().idxmax()\nmedian_result = pd.to_datetime(df.index).sort_values()[len(df.index)//2]\n"], "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": ["result = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n<code>"], "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": ["result = df[(df['closing_price'] < 99) | (df['closing_price'] > 101)]\n"], "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": ["result = df.loc[df.groupby('item')['diff'].idxmin()]\n"], "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": ["df['SOURCE_NAME'] = df['SOURCE_NAME'].str.rsplit('_', 1).str[0]\n<code>"], "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": ["df['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[-1] if '_' in x else x)\n<code>"], "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": ["<code>\n    df['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: '_'.join(x.split('_')[:-1]) if '_' in x else x)\n    return df\n### END SOLUTION\n"], "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": ["nan_indices = df[df['Column_x'].isna()].index\nhalf_point = len(nan_indices) // 2\n\ndf.loc[nan_indices[:half_point], 'Column_x'] = 0\ndf.loc[nan_indices[half_point:], 'Column_x'] = 1\n"], "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": ["nan_indices = df[df['Column_x'].isna()].index\ntotal_nans = len(nan_indices)\nfirst_third = int(total_nans * 0.3)\nsecond_third = int(total_nans * 0.6)\n\ndf.loc[nan_indices[:first_third], 'Column_x'] = 0\ndf.loc[nan_indices[first_third:second_third], 'Column_x'] = 0.5\ndf.loc[nan_indices[second_third:], 'Column_x'] = 1\n"], "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": ["nan_count = df['Column_x'].isna().sum()\nhalf_nan_count = nan_count // 2\n\nzeros = [0] * half_nan_count\nones = [1] * (nan_count - half_nan_count)\n\nfill_values = zeros + ones\nnp.random.shuffle(fill_values)  # This step is not necessary as per the problem statement\n\ndf.loc[df['Column_x'].isna(), 'Column_x'] = fill_values\n"], "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": ["result = pd.DataFrame({col: list(zip(a[col], b[col])) for col in a.columns})\n"], "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": ["dfs = [a, b, c]\nresult = pd.DataFrame({\n    col: pd.Series(tuple(dfs[i][col] for i in range(len(dfs)))) for col in a.columns\n})\nresult = result.applymap(lambda x: tuple(x))\n"], "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": ["dfs = [a, b]\nmax_len = max(len(df) for df in dfs)\nresult = pd.DataFrame({\n    col: [\n        tuple(df[col].iloc[i] if i < len(df) else np.nan for df in dfs)\n        for i in range(max_len)\n    ]\n    for col in a.columns\n})\n"], "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": ["result = df.groupby('username')['views'].apply(lambda x: pd.cut(x, bins).value_counts()).unstack(fill_value=0)\n"], "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": ["result = df.pivot_table(index='username', columns=pd.cut(df['views'], bins), aggfunc='size', fill_value=0)\n"], "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": ["df['view_bins'] = pd.cut(df['views'], bins=bins)\nresult = df.pivot_table(index='username', columns='view_bins', aggfunc='size', fill_value=0)\n"], "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": ["result = pd.DataFrame({'text': [', '.join(df['text'])]})\n<code>"], "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": ["result = pd.DataFrame({'text': ['-'.join(df['text'])]})\n"], "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": ["result = pd.DataFrame({'text': [', '.join(df['text'][::-1])]})\n<code>"], "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": ["<code>\nresult = pd.Series([', '.join(df['text'])], name='text')\n"], "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": ["result = pd.Series({'text': '-'.join(df['text'][::-1])})\n<code>"], "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": ["<code>\ndf2 = df2.merge(df1[['id', 'city', 'district']], on='id', how='left')\nresult = pd.concat([df1, df2], ignore_index=True)\n"], "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": ["df1['date'] = pd.to_datetime(df1['date'], format='%Y/%m/%d').dt.strftime('%d-%b-%Y')\ndf2['date'] = pd.to_datetime(df2['date'], format='%Y/%m/%d').dt.strftime('%d-%b-%Y')\n\ndf2 = df2.merge(df1[['id', 'city', 'district']], on='id', how='left')\n\nresult = pd.concat([df1, df2], axis=0).sort_values(by=['id', 'date'])\nresult = result[['id', 'city', 'district', 'date', 'value']]\n"], "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": ["df2 = df2.merge(df1[['id', 'city', 'district']], on='id', how='left')\nresult = pd.concat([df1, df2], axis=0)\nresult = result.sort_values(by=['id', 'date'])\nresult = result[['id', 'city', 'district', 'date', 'value']]\n"], "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": ["result = pd.merge(C, D, on='A', how='outer', suffixes=('', '_y'))\nresult['B'] = result['B_y'].combine_first(result['B'])\nresult.drop(columns='B_y', inplace=True)\n"], "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": ["result = pd.merge(C, D, on='A', how='outer', suffixes=('', '_y'))\nresult['B'] = result['B'].fillna(result['B_y'])\nresult.drop(columns='B_y', inplace=True)\n"], "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": ["result = pd.merge(C, D, on='A', how='outer', suffixes=('_C', '_D'))\nresult['B'] = result['B_D'].combine_first(result['B_C'])\nresult['duplicated'] = result['B_D'].notna()\nresult = result.drop(columns=['B_C', 'B_D'])\nresult = result.sort_values(by='A', key=lambda x: x.map({k: i for i, k in enumerate(C['A'])}))\nresult.reset_index(drop=True, inplace=True)\n"], "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": ["<code>\nimport pandas as pd\n\ndf = pd.DataFrame({'user':[1,1,2,2,3], 'time':[20,10,11,18, 15], 'amount':[10.99, 4.99, 2.99, 1.99, 10.99]})\n\n# Sort the DataFrame by 'user' and 'time' to ensure transactions are in the correct order\ndf_sorted = df.sort_values(by=['user', 'time'])\n\n# Group by 'user' and aggregate 'time' and 'amount' into lists of tuples\nresult = df_sorted.groupby('user').apply(lambda x: list(zip(x['time'], x['amount'])))\n"], "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": ["result = df.sort_values(by=['user', 'time']).groupby('user').apply(lambda x: list(zip(x['time'], x['amount']))).reset_index(name='amount-time-tuple')\n"], "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": ["result = df.sort_values(by=['user', 'time']).groupby('user').apply(lambda x: list(zip(x['time'], x['amount']))).reset_index(name='amount-time-tuple')\n"], "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": ["df = pd.DataFrame(series.tolist(), index=series.index)\n<code>"], "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": ["<code>\ndf = pd.DataFrame(series.tolist(), index=series.index).reset_index()\ndf.columns = ['name', 0, 1, 2, 3]\n"], "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": ["result = [col for col in df.columns if s in col and col != s]\n<code>"], "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": ["result = df[[col for col in df.columns if s in col and col != s]]\nprint(result)\n<code>"], "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": ["import pandas as pd\n\n# Sample data\ndata = {'spike-2': [1, 2, 3], 'hey spike': [4, 5, 6], 'spiked-in': [7, 8, 9], 'no': [10, 11, 12]}\ndf = pd.DataFrame(data)\n\n# Search string\nsearch_str = 'spike'\n\n# Find columns containing 'spike' but not exactly matching 'spike'\nfiltered_columns = [col for col in df.columns if search_str in col and col != search_str]\n\n# Rename the columns to spike1, spike2, ...\nfor i, col in enumerate(filtered_columns, 1):\n    df.rename(columns={col: f'spike{i}'}, inplace=True)\n\n# Resulting DataFrame\nresult = df[[col for col in df.columns if 'spike' in col]]\nprint(result)\n<code>"], "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": ["result = df['codes'].apply(pd.Series)\nresult.columns = ['code_' + str(col) for col in result.columns]\n"], "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": ["result = df['codes'].apply(pd.Series)\nresult.columns = ['code_' + str(i+1) for i in range(result.shape[1])]\n"], "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": ["result = df['codes'].apply(lambda x: pd.Series(sorted(x))).rename(columns=lambda x: f'code_{x+1}')\n"], "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": ["import ast\n\n# Assuming df['User IDs'] contains string representations of lists\ndf['User IDs'] = df['User IDs'].apply(ast.literal_eval)\n\n# Concatenate all lists into one\nresult = sum(df['User IDs'].tolist(), [])\n<code>"], "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": ["reversed_lists = [list(reversed(lst)) for lst in df['col1']]\nflattened_list = [item for sublist in reversed_lists for item in sublist]\nresult = ','.join(map(str, flattened_list))\n"], "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": ["result = ','.join(map(str, sum(df['col1'].tolist(), [])))\n<code>"], "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": ["df.set_index('Time', inplace=True)\ndf = df.resample('2T').mean().dropna()\ndf.reset_index(inplace=True)\n<code>"], "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": ["df.set_index('Time', inplace=True)\ndf = df.resample('3T').sum().reset_index()\n"], "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": ["<code>\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(method='dense', ascending=True)\n"], "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": ["<code>\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n"], "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": ["<code>\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['TIME_FORMATTED'] = df['TIME'].dt.strftime('%d-%b-%Y %a %H:%M:%S')\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n"], "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": ["result = df.loc[filt[df.index.get_level_values('a')].values]\n"], "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": ["result = df[df.index.get_level_values('a').map(filt) & (df.index.get_level_values('b') != 2)]\n"], "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": ["<code>\nresult = df.columns[df.iloc[0] != df.iloc[8]]\n"], "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": ["<code>\nresult = df.columns[df.iloc[0].eq(df.iloc[8]) | (df.iloc[0].isna() & df.iloc[8].isna())]\n"], "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": ["<code>\nresult = [col for col in df.columns if df.loc[0, col] != df.loc[8, col] or (pd.isna(df.loc[0, col]) and not pd.isna(df.loc[8, col])) or (not pd.isna(df.loc[0, col]) and pd.isna(df.loc[8, col]))]\n"], "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": ["<code>\nresult = [(df.iloc[0, i], df.iloc[8, i]) for i in range(df.shape[1]) if df.iloc[0, i] != df.iloc[8, i]]\n"], "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": ["ts = pd.Series(df['Value'].values, index=df['Date'])\nprint(ts)\n<code>"], "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": ["new_columns = [f\"{col}_{i+1}\" for i in range(len(df)) for col in df.columns]\ndf = pd.DataFrame([df.values.flatten()], columns=new_columns)\n"], "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": ["<code>\ndf = df.stack().to_frame().T\ndf.columns = [f'{col}_{int(idx)}' for idx, col in df.columns]\n"], "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": ["df['dogs'] = df['dogs'].astype('float').round(2)\ndf['cats'] = df['cats'].round(2)\n"], "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": ["df['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\ndf['cats'] = df['cats'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\n"], "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": ["<code>\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n"], "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": ["<code>\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n"], "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": ["df['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n"], "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": ["<code>\nresult = df.sort_index(level='time', sort_remaining=False)\n"], "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": ["<code>\nresult = df.sort_values(by='VIM', kind='mergesort')\n"], "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": ["dates_to_remove = ['2020-02-17', '2020-02-18']\ndf = df[~df.index.normalize().isin(pd.to_datetime(dates_to_remove))]\nresult = df\n<code>"], "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": ["dates_to_remove = ['2020-02-17', '2020-02-18']\ndf = df[~df.index.normalize().isin(pd.to_datetime(dates_to_remove))]\n\ndf.index = df.index.strftime('%d-%b-%Y %A')\nresult = df\n"], "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": ["result = corr.stack().reset_index()\nresult.columns = ['Col1', 'Col2', 'Pearson Correlation Coefficient']\nresult = result[result['Col1'] != result['Col2']]\nresult = result[result['Pearson Correlation Coefficient'] > 0.3]\nresult.set_index(['Col1', 'Col2'], inplace=True)\n"], "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": ["result = corr.where(corr > 0.3).stack()\n"], "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": ["df.columns = list(df.columns[:-1]) + ['Test']\nresult = df\n<code>"], "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": ["df.columns = ['Test'] + df.columns[1:].tolist()\nresult = df\n<code>"], "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": ["<code>\ndf['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.eq(df['frequent'], axis=0).sum(axis=1)\n"], "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": ["<code>\ndf['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda row: (row == row['frequent']).sum(), axis=1)\n"], "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": ["<code>\nfrom collections import Counter\n\ndef find_frequent_values(row):\n    counts = Counter(row)\n    max_count = max(counts.values())\n    frequent_values = [key for key, value in counts.items() if value == max_count]\n    return frequent_values, max_count\n\ndf['frequent'], df['freq_count'] = zip(*df.apply(find_frequent_values, axis=1))\n"], "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": ["df['bar'] = pd.to_numeric(df['bar'], errors='coerce')\nresult = df.groupby(['id1', 'id2']).mean().reset_index()\nprint(result)\n<code>"], "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": ["df['bar'] = df['bar'].replace('NULL', 0).astype(float)\nresult = df.groupby(['id1', 'id2']).mean().reset_index()\n"], "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": ["result = pd.merge(df_a, df_b[['EntityNum', 'a_col']], on='EntityNum')\n"], "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": ["result = pd.merge(df_a, df_b[['EntityNum', 'b_col']], on='EntityNum')\n<code>"], "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": ["<code>\nresult = a.shape\n"], "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": ["x = x[~np.isnan(x)]"], "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": ["x[np.isnan(x)] = np.inf\n<code>"], "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": ["result = [list(filter(lambda v: not np.isnan(v), row)) for row in x]\n<code>"], "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": ["b = np.eye(np.max(a) + 1)[a]\n<code>"], "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": ["b = np.eye(np.max(a) + 1)[a]\n<code>"], "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": ["<code>\nmin_val = np.min(a)\nmax_val = np.max(a)\nrange_size = max_val - min_val + 1\nb = np.zeros((a.size, range_size), dtype=int)\nb[np.arange(a.size), a - min_val] = 1\n"], "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": ["indices = np.argsort(a)\nb = np.eye(len(a), dtype=int)[indices]\n"], "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": ["flattened_a = a.flatten()\nmax_val = flattened_a.max()\nmin_val = flattened_a.min()\nrange_val = max_val - min_val + 1\nb = np.zeros((flattened_a.size, range_val), dtype=int)\nb[np.arange(flattened_a.size), flattened_a - min_val] = 1\n"], "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": ["result = np.percentile(a, p)"], "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": ["B = A.reshape(-1, ncol)\n<code>"], "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": ["<code>\nB = A.reshape(nrow, -1)\n"], "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": ["<code>\nnrows = len(A) // ncol\nB = A[:nrows * ncol].reshape(nrows, ncol)\n"], "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": ["A_reversed = A[::-1]\nnrows = len(A_reversed) // ncol\nB = A_reversed[:nrows * ncol].reshape(nrows, ncol)\n"], "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": ["<code>\nresult = np.roll(a, shift)\nresult[:shift] = np.nan\n"], "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": ["<code>\nimport numpy as np\n\ndef shift(arr, num, fill_value=np.nan):\n    result = np.empty_like(arr)\n    if num > 0:\n        result[:num, :] = fill_value\n        result[num:, :] = arr[:-num, :]\n    elif num < 0:\n        result[num:, :] = fill_value\n        result[:num, :] = arr[-num:, :]\n    else:\n        result = arr\n    return result\n\nxs = np.array([[0., 1., 2., 3., 4., 5., 6., 7., 8., 9.],\n               [1., 2., 3., 4., 5., 6., 7., 8., 9., 10.]])\nshifted_xs = shift(xs, 3)\nprint(shifted_xs)\nshifted_xs_neg = shift(xs, -3)\nprint(shifted_xs_neg)\n"], "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": ["<code>\nresult = np.empty_like(a)\nfor i, row in enumerate(a):\n    if shift[i] > 0:\n        result[i, :shift[i]] = np.nan\n        result[i, shift[i]:] = row[:-shift[i]]\n    elif shift[i] < 0:\n        result[i, shift[i]:] = np.nan\n        result[i, :shift[i]] = row[-shift[i]:]\n    else:\n        result[i] = row\n"], "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": ["np.random.seed(42)\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n<code>"], "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": ["<code>\nresult = np.argmax(a)\n"], "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": ["<code>\nresult = np.argmin(a)\n"], "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": ["<code>\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\nresult = np.unravel_index(np.argmax(a, axis=None), a.shape, order='F')\n"], "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": ["<code>\nresult = np.unravel_index(np.argmax(a), a.shape)\n"], "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": ["<code>\nimport numpy as np\n\ndef find_max_index(a):\n    return np.argmax(a)\n\n# Example usage\na = np.array([[10, 50, 30], [60, 20, 40]])\nmax_index = find_max_index(a)\nprint(max_index)\n"], "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": ["<code>\nflattened_index = np.argsort(a, axis=None)[-2]\nresult = np.unravel_index(flattened_index, a.shape)\n"], "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": ["<code>\na = a[:, ~np.any(np.isnan(a), axis=0)]\n"], "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": ["a = a[~np.isnan(a).any(axis=1)]\n<code>"], "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": ["result = np.array(a)\n<code>"], "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": ["a = a[:, permutation]\n<code>"], "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": ["result = a[permutation]\n<code>"], "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": ["<code>\nresult = np.unravel_index(np.argmin(a), a.shape)\n"], "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": ["<code>\nresult = np.unravel_index(np.argmax(a), a.shape)\n"], "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": ["min_val = np.min(a)\nresult = np.argwhere(a == min_val)\n"], "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": ["result = np.sin(np.radians(degree))\n<code>"], "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": ["result = np.cos(np.radians(degree))\n<code>"], "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": ["sin_degree = np.sin(np.deg2rad(number))\nsin_radian = np.sin(number)\nresult = 0 if sin_degree > sin_radian else 1\n<code>"], "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": ["result = np.degrees(np.arcsin(value))\n<code>"], "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": ["<code>\nresult = np.pad(A, (0, length - len(A)), 'constant')\n"], "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": ["import numpy as np\n\ndef pad(A, length):\n    return np.pad(A, (0, max(0, length - len(A))), 'constant')\n\nA = np.array([1,2,3,4,5])\nresult = pad(A, 8)\nprint(result)\n\nresult = pad(A, 3)\nprint(result)\n<code>"], "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": ["a = np.power(a, power)\n<code>"], "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": ["<code>\nimport numpy as np\n\ndef square_array(a, power=2):\n    return np.power(a, power)\n\n# Example usage\na = np.arange(4).reshape(2, 2)\nresult = square_array(a)\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": ["gcd = np.gcd(numerator, denominator)\nresult = (numerator // gcd, denominator // gcd)\n"], "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": ["    gcd = np.gcd(numerator, denominator)\n    reduced_numerator = numerator // gcd\n    reduced_denominator = denominator // gcd\n    return (reduced_numerator, reduced_denominator)\n### END SOLUTION\n"], "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": ["from fractions import Fraction\nif denominator == 0:\n    result = (np.nan, np.nan)\nelse:\n    fraction = Fraction(numerator, denominator)\n    result = (fraction.numerator, fraction.denominator)\n<code>"], "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": ["<code>\nresult = (a + b + c) / 3\n"], "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": ["<code>\nresult = np.maximum(np.maximum(a, b), c)\n"], "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": ["<code>\nimport numpy as np\n\n# Create a sample 5x5 array\na = np.arange(25).reshape(5, 5)\n\n# Get the diagonal from the top right to bottom left\nresult = a[:, ::-1].diagonal()\n"], "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": ["<code>\nrows = np.arange(a.shape[0])\ncols = np.arange(a.shape[1] - 1, a.shape[1] - a.shape[0] - 1, -1)\nresult = a[rows, cols]\n"], "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": ["<code>\nimport numpy as np\n\n# Create a sample 5x5 array\na = np.arange(25).reshape(5, 5)\n\n# Get the main diagonal (top-left to bottom-right)\nmain_diagonal = a.diagonal()\n\n# Get the anti-diagonal (top-right to bottom-left)\nanti_diagonal = np.fliplr(a).diagonal()\n\n# Combine both diagonals into a single array\nresult = np.array([main_diagonal, anti_diagonal])\n"], "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": ["<code>\nresult = []\nfor offset in range(a.shape[1]):\n    diag = np.diag(a[:, ::-1], k=offset)\n    if diag.size > 0:\n        result.append(diag)\nresult = np.array(result)\n"], "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": ["<code>\nresult = [element for row in X for element in row]\n"], "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": ["result = [element for row in X for element in row]\n<code>"], "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": ["<code>\n    result = []\n    for row in X:\n        for element in row:\n            result.append(element)\n    return result\n### END SOLUTION\n"], "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": ["<code>\nresult = X.flatten(order='F').tolist()\n"], "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": ["result = np.array(list(mystr), dtype=int)\n<code>"], "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": ["result = np.cumsum(a[:, col] * multiply_number)\n<code>"], "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": ["result = np.cumsum(a[row] * multiply_number)\n<code>"], "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": ["divided_row = a[row] / divide_number\nresult = np.prod(divided_row)\n"], "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": ["q, r = np.linalg.qr(a.T)\nindependent_indices = np.where(abs(r.diagonal()) > 1e-10)[0]\nresult = a[independent_indices]\n"], "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": ["result = a.shape[1]\n<code>"], "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": ["t_stat, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n"], "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": ["a = np.random.normal(loc=0, scale=1, size=100)  # Sample 1: mean=0, std=1, n=100\nb = np.random.normal(loc=0, scale=2, size=120)  # Sample 2: mean=0, std=2, n=120\n\n# Remove NaN values if any\na_clean = a[~np.isnan(a)]\nb_clean = b[~np.isnan(b)]\n\n# Perform the weighted two-tailed t-test\nt_stat, p_value = scipy.stats.ttest_ind(a_clean, b_clean, equal_var=False)\n\np_value\n"], "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": ["pooled_variance = ((anobs - 1) * avar + (bnobs - 1) * bvar) / (anobs + bnobs - 2)\nstandard_error = np.sqrt(pooled_variance * (1/anobs + 1/bnobs))\nt_statistic = (amean - bmean) / standard_error\ndf = anobs + bnobs - 2\np_value = scipy.stats.t.sf(np.abs(t_statistic), df) * 2\n"], "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": ["output = A[~np.isin(A, B).all(axis=1)]\n<code>"], "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": ["def symmetric_difference_2d(A, B):\n    # Convert arrays to sets of tuples for comparison\n    set_A = set(map(tuple, A))\n    set_B = set(map(tuple, B))\n\n    # Find symmetric difference\n    sym_diff = set_A.symmetric_difference(set_B)\n\n    # Convert back to numpy array\n    result = np.array(list(sym_diff))\n\n    # Sort result by appearance in A then B\n    sorted_result = np.concatenate([\n        result[np.isin(result, A, assume_unique=True, axis=0)],\n        result[np.isin(result, B, assume_unique=True, axis=0)]\n    ])\n    return sorted_result\n\noutput = symmetric_difference_2d(A, B)\n"], "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": ["sort_indices = np.argsort(a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n"], "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": ["<code>\nimport numpy as np\n\n# Example arrays\na = np.array([[[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],\n              [[3., 3., 3.], [3., 3., 3.], [3., 3., 3.]],\n              [[2., 2., 2.], [2., 2., 2.], [2., 2., 2.]]])\nb = np.arange(3*3*3).reshape((3, 3, 3))\n\n# Sorting indices from 'a'\nsort_indices = np.argsort(a, axis=0)\n\n# Using advanced indexing to sort 'b' based on 'a'\nc = np.take_along_axis(b, sort_indices, axis=0)\n"], "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": ["sort_indices = np.argsort(-a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n"], "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": ["<code>\nsums = np.sum(a, axis=(1, 2))\nsorted_indices = np.argsort(sums)\nresult = b[sorted_indices]\n"], "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": ["<code>\na = np.delete(a, 2, axis=1)\n"], "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": ["a = np.delete(a, 2, axis=0)\n<code>"], "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": ["<code>\na = np.delete(a, [0, 2], axis=1)\n"], "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": ["<code>\nimport numpy as np\n\n# Define the array\narr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n\n# Define the columns to be deleted\ndel_col = np.array([1, 2, 4, 5])\n\n# Filter out out-of-bound indices\ndel_col = del_col[del_col < arr.shape[1]]\n\n# Delete the specified columns\nresult = np.delete(arr, del_col, axis=1)\n"], "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": ["a = np.insert(a, pos, element)\nprint(a)\n<code>"], "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": ["<code>\na = np.insert(a, pos, element, axis=0)\nprint(a)\n"], "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": ["<code>\nimport numpy as np\n\ndef insert_element(arr, pos, element):\n    return np.insert(arr, pos, element)\n\n# Example usage\na = np.array([1, 2, 3, 4])\nresult = insert_element(a, 2, 66)\nprint(result)\n"], "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": ["<code>\nresult = []\nlast_index = 0\nfor index, row in zip(pos, element):\n    result.extend(a[last_index:index])\n    result.append(row)\n    last_index = index\nresult.extend(a[last_index:])\na = np.array(result)\nprint(a)\n"], "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": ["import copy\nresult = [copy.deepcopy(arr) for arr in array_of_arrays]\n<code>"], "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": ["result = np.all(a == a[0], axis=0).all()\n<code>"], "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": ["result = np.all(a == a[:,0][:, np.newaxis], axis=0)\n<code>"], "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": ["    return np.all(a == a[0], axis=0).all()\n### END SOLUTION"], "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": ["import numpy as np\nfrom scipy.integrate import simps\n\n# Define the function to integrate\ndef integrand(x, y):\n    return (np.cos(x)**4) + (np.sin(y)**2)\n\n# Create a meshgrid for x and y\nX, Y = np.meshgrid(x, y)\n\n# Evaluate the function on the grid\nZ = integrand(X, Y)\n\n# Apply Simpson's rule in both x and y directions\nresult = simps(simps(Z, x), y)\n<code>"], "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": ["import numpy as np\nfrom scipy.integrate import simps\n\n# Define the function to integrate\ndef func(x, y):\n    return (np.cos(x)**4) + (np.sin(y)**2)\n\n# Create a meshgrid for x and y values\nx = np.linspace(0, np.pi, 100)\ny = np.linspace(0, np.pi, 100)\nX, Y = np.meshgrid(x, y)\n\n# Evaluate the function on the grid\nZ = func(X, Y)\n\n# Integrate using Simpson's rule\n# Integrate over y for each x\nintegrated_over_y = simps(Z, y, axis=0)\n# Integrate the result over x\nresult = simps(integrated_over_y, x)\n\nprint(\"The 2D integral over the region is:\", result)\n### END SOLUTION\n"], "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": ["<code>\nimport numpy as np\n\ndef ecdf(data):\n    \"\"\"Compute ECDF for a one-dimensional array of measurements.\"\"\"\n    # Sort data\n    x = np.sort(data)\n    # Create a count array, with float division for Python 2 compatibility\n    n = len(data)\n    y = np.arange(1, n+1) / float(n)\n    return x, y\n\n# Using the function\ngrades = np.array([93.5, 93, 60.8, 94.5, 82, 87.5, 91.5, 99.5, 86, 93.5, 92.5, 78, 76, 69, 94.5,\n                   89.5, 92.8, 78, 65.5, 98, 98.5, 92.3, 95.5, 76, 91, 95, 61])\nsorted_grades, ecdf_values = ecdf(grades)\nresult = ecdf_values[np.searchsorted(sorted_grades, grades, side='right') - 1]\n"], "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": ["import numpy as np\nfrom scipy.stats import rankdata\n\ndef ecdf(data):\n    \"\"\"Compute the empirical cumulative distribution function for a numpy array.\"\"\"\n    sorted_data = np.sort(data)\n    ranks = rankdata(sorted_data, method='ordinal')\n    cdf_values = ranks / len(data)\n    return lambda x: cdf_values[np.searchsorted(sorted_data, x, side='right') - 1]\n\n# Data\ngrades = np.array((93.5, 93, 60.8, 94.5, 82, 87.5, 91.5, 99.5, 86, 93.5, 92.5, 78, 76, 69, 94.5,\n                   89.5, 92.8, 78, 65.5, 98, 98.5, 92.3, 95.5, 76, 91, 95, 61))\neval = np.array([88, 87, 62])\n\n# ECDF function\necdf_func = ecdf(grades)\n\n# Applying ECDF to eval array\nresult = ecdf_func(eval)\n<code>"], "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": ["```python\nimport numpy as np\nfrom scipy.stats import rankdata\n\ndef ecdf(data):\n    \"\"\" Compute ECDF for a one-dimensional array of measurements.\"\"\"\n    # Sort data\n    sorted_data = np.sort(data)\n    # Calculate ECDF values\n    ecdf_values = np.arange(1, len(sorted_data) + 1) / len(sorted_data)\n    return sorted_data, ecdf_values\n\n# Data and threshold\ngrades = np.array([93.5, 93, 60.8, 94.5, 82, 87.5, 91.5, 99.5, 86, 93.5, 92.5, 78, 76, 69, 94.5,\n                   89.5, 92.8, 78, 65.5, 98, 98.5, 92.3, 95.5, 76, 91, 95, 61])\nthreshold = 0.5\n\n# Compute ECDF\nsorted_grades, ecdf_values = ecdf(grades)\n\n# Find the longest interval [low, high) where ECDF(x) < threshold\nlow = high = None\nmax_length = 0\ncurrent_start = sorted_grades[0]\n\nfor i in range(len(sorted_grades)):\n    if ecdf_values[i] >= threshold:\n        current_length = sorted_grades[i] - current_start\n        if current_length > max_length:\n            max_length = current_length\n            low = current_start\n            high = sorted_grades[i]\n        break\n    elif i == len(sorted_grades) - 1 or ecdf_values[i + 1] >= threshold:\n        current_length = sorted_grades[i + 1] - current_start\n        if current_length > max_length:\n            max_length = current_length\n            low = current_start\n            high = sorted_grades[i + 1]\n        break\n    elif sorted_grades[i] != sorted_grades[i + 1]:\n        current_start = sorted_grades[i + 1]\n\nlow, high\n```"], "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": ["<code>\nnums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n"], "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": ["<code>\na_np = a.numpy()\n"], "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": ["<code>\na_pt = torch.from_numpy(a)\n"], "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": ["<code>\na_np = a.numpy()\n"], "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": ["<code>\na_tf = tf.convert_to_tensor(a)\n"], "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": ["result = np.argsort(-a)\n"], "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": ["result = np.argsort(a).tolist()\n<code>"], "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": ["indices = np.argsort(a)[-N:][::-1]\nresult = indices.tolist()\n"], "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": ["import numpy as np\nA = np.arange(16).reshape(4, 4)\nn = 5\nresult = np.linalg.matrix_power(A, n)\n<code>"], "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": ["result = a.reshape(2, 2, 2, 2).swapaxes(1, 2).reshape(-1, 2, 2)\n"], "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": ["h, w = a.shape\npatch_size = 2\nresult = []\n\nfor i in range(h - patch_size + 1):\n    for j in range(w - patch_size + 1):\n        patch = a[i:i+patch_size, j:j+patch_size]\n        result.append(patch)\n"], "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": ["h, w = a.shape\nph, pw = 2, 2  # patch height and width\nresult = [a[i:i+ph, j:j+pw] for i in range(0, h, ph) for j in range(0, w, pw)]\n"], "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": ["result = [a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0], patch_size) for j in range(0, a.shape[1], patch_size) if i+patch_size <= a.shape[0] and j+patch_size <= a.shape[1]]\n"], "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": ["result = a.reshape(h, w)\n<code>"], "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": ["h, w = a.shape\nresult = []\nfor i in range(0, h, patch_size):\n    if i + patch_size > h:\n        break\n    for j in range(0, w, patch_size):\n        if j + patch_size > w:\n            break\n        patch = a[i:i+patch_size, j:j+patch_size]\n        result.append(patch)\nresult = np.array(result)\n"], "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": ["result = a[:, low:high]\n<code>"], "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": ["result = a[low:high]\n<code>"], "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": ["<code>\nresult = a[:, low:min(high, a.shape[1])]\n"], "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": ["import numpy as np\n\ndef from_string(array_str):\n    return np.array(eval(array_str))\n\nstring = \"[[ 0.5544  0.4456], [ 0.8811  0.1189]]\"\na = from_string(string)\nprint(a)"], "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": ["base = np.e\nlog_min = np.log(min) / np.log(base)\nlog_max = np.log(max) / np.log(base)\nuniform_samples = np.random.uniform(log_min, log_max, n)\nresult = np.power(base, uniform_samples)\n"], "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": ["base = np.e\nlog_min = np.log(min)\nlog_max = np.log(max)\nuniform_samples = np.random.uniform(log_min, log_max, n)\nresult = np.power(base, uniform_samples)\n"], "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": ["<code>\nimport numpy as np\n\ndef log_uniform_samples(n, min_val, max_val, base=np.e):\n    log_min = np.log(min_val) / np.log(base)\n    log_max = np.log(max_val) / np.log(base)\n    uniform_samples = np.random.uniform(log_min, log_max, n)\n    return base ** uniform_samples\n### END SOLUTION\n"], "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": ["B = pd.Series(np.zeros_like(A))\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n"], "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": ["<code>\nB = pd.Series(np.zeros_like(A))\nB[0] = a * A[0]\nif len(A) > 1:\n    B[1] = a * A[1] + b * B[0]\nfor t in range(2, len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n"], "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": ["<code>\nimport numpy as np\nresult = np.array([], dtype=float)\n"], "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": ["<code>\nimport numpy as np\nresult = np.empty((3, 0))\n"], "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": ["<code>\nresult = np.ravel_multi_index(index, dims, order='F')\n"], "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": ["result = np.ravel_multi_index(index, dims)\n<code>"], "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": ["<code>\nvalues = np.zeros((2, 3), dtype=[('a', 'int32'), ('b', 'float32'), ('c', 'float32')])\ndf = pd.DataFrame(values, index=index)\n"], "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": ["result = np.bincount(accmap, weights=a)\n"], "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": ["result = np.maximum.reduceat(a, np.r_[np.where(np.diff(index))[0] + 1, len(a)])\n<code>"], "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": ["accmap[accmap < 0] += len(a)\nresult = np.bincount(accmap, weights=a)\n<code>"], "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": ["unique_indices = np.unique(index)\nresult = np.array([np.min(a[index == idx]) for idx in unique_indices])\n"], "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": ["x_np = np.array(x)\ny_np = np.array(y)\nz = x_np + y_np\n"], "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": ["result = np.random.choice(len(lista_elegir), samples, p=probabilit)\nselected_tuples = [lista_elegir[i] for i in result]\n<code>"], "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": ["padded_a = np.pad(a, pad_width=1, mode='constant', constant_values=0)\nresult = padded_a[1 + low_index:1 + high_index + 1, 1 + low_index:1 + high_index + 1]\n"], "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": ["result = x[x >= 0]\n<code>"], "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": ["result = x[np.iscomplex(x)]\n<code>"], "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": ["n_bins = len(data) // bin_size\nreshaped_data = data[:n_bins * bin_size].reshape(n_bins, bin_size)\nbin_data_mean = reshaped_data.mean(axis=1)\n"], "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": ["<code>\nn_bins = len(data) // bin_size\nreshaped_data = data[:n_bins * bin_size].reshape(n_bins, bin_size)\nbin_data_max = reshaped_data.max(axis=1)\n"], "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": ["<code>\nbin_data_mean = np.array([np.mean(data[:, i:i+bin_size], axis=1) for i in range(0, data.shape[1] - bin_size + 1, bin_size)])\n"], "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": ["<code>\nreversed_data = data[::-1]\nn_bins = len(reversed_data) // bin_size\nbinned_data = np.array_split(reversed_data[:n_bins * bin_size], n_bins)\nbin_data_mean = [np.mean(bin) for bin in binned_data]\n"], "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": ["reversed_data = np.fliplr(data)\nn_bins = reversed_data.shape[1] // bin_size\nbin_data = np.array([reversed_data[:, i*bin_size:(i+1)*bin_size] for i in range(n_bins)])\nbin_data_mean = bin_data.mean(axis=2)\nbin_data_mean = np.fliplr(bin_data_mean)\n"], "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": ["<code>\ndef bin_and_mean(data, bin_size):\n    means = []\n    for row in data:\n        # Calculate the start index to align bins to the end\n        start_idx = len(row) % bin_size\n        # Slice the row from the start index to the end\n        trimmed_row = row[start_idx:]\n        # Reshape the row into bins of the specified size\n        reshaped_row = trimmed_row.reshape(-1, bin_size)\n        # Calculate the mean of each bin\n        row_means = reshaped_row.mean(axis=1)\n        means.append(row_means)\n    return np.array(means)\n\nbin_data_mean = bin_and_mean(data, bin_size)\n"], "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": ["<code>\ndef smoothclamp(x, x_min, x_max):\n    if x < x_min:\n        return x_min\n    elif x > x_max:\n        return x_max\n    else:\n        t = (x - x_min) / (x_max - x_min)\n        return x_min + (x_max - x_min) * (3 * t**2 - 2 * t**3)\n"], "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": ["<code>\ndef smoothclamp(x, x_min, x_max, N):\n    if x <= x_min:\n        return x_min\n    elif x >= x_max:\n        return x_max\n    else:\n        t = (x - x_min) / (x_max - x_min)\n        result = 0\n        for n in range(N+1):\n            result += comb(N, n) * t**n * (1 - t)**(N-n)\n        return x_min + (x_max - x_min) * result\n"], "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": ["result = np.fft.ifft(np.fft.fft(a) * np.fft.fft(b[::-1]).conj()).real\n"], "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": ["<code>\nresult = df.unstack(level=0).values.reshape(4, 15, 5)\n"], "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": ["result = df.unstack(level='timestamp').values.reshape(15, 4, 5)\n"], "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": ["<code>\nresult = np.unpackbits(a[:, np.newaxis].astype(np.uint8), axis=1)[:, -m:]\n"], "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": ["<code>\nresult = np.array([(np.binary_repr(x, width=m)) for x in a])\nresult = np.array([[int(bit) for bit in num] for num in result])\n"], "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": ["b = np.array([np.binary_repr(x, width=m) for x in a])\nb = np.array([[int(digit) for digit in num] for num in b])\nresult = np.bitwise_xor.reduce(b)\n"], "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": ["mean = np.mean(a)\nstd_dev = np.std(a)\nthird_std_dev = 3 * std_dev\nresult = (mean - third_std_dev, mean + third_std_dev)\n"], "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": ["mean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 2 * std_dev, mean + 2 * std_dev)\n"], "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": ["<code>\nimport numpy as np\n\nexample_a = np.array([0, 1, 2, 5, 6, 7, 8, 8, 8, 10, 29, 32, 45])\n\ndef f(a=example_a):\n    mean_a = np.mean(a)\n    std_a = np.std(a)\n    return (mean_a - 3 * std_a, mean_a + 3 * std_a)\n\nresult = f(example_a)\n### END SOLUTION\n"], "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": ["mean_a = np.mean(a)\nstd_a = np.std(a)\nlower_bound = mean_a - 2 * std_a\nupper_bound = mean_a + 2 * std_a\nresult = (a < lower_bound) | (a > upper_bound)\n"], "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": ["import numpy.ma as ma\n\nmasked_data = ma.masked_less(DataArray, 0)\nprob = np.percentile(masked_data.compressed(), percentile)\n"], "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": ["a[zero_rows, :] = 0\na[:, zero_cols] = 0\n"], "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": ["<code>\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n"], "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": ["<code>\na[1, :] = 0\na[:, 0] = 0\n"], "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": ["mask = a == np.max(a, axis=1, keepdims=True)\n<code>"], "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": ["min_indices = np.argmin(a, axis=1)\nmask = np.arange(a.shape[1]) == min_indices[:, None]\nprint(mask)\n<code>"], "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": ["result = np.corrcoef(post, distance)[0, 1]\n"], "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": ["<code>\nresult = np.einsum('ij,ik->jik', X, X)\n"], "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": ["<code>\nimport numpy as np\nfrom numpy.linalg import cholesky\n\n# Assuming Y is given and is N x M x M\nN = Y.shape[0]\nM = Y.shape[1]\n\n# Initialize X\nX = np.zeros((M, N))\n\n# Compute the Cholesky decomposition for each matrix in Y\nfor i in range(N):\n    L = cholesky(Y[i])\n    X[:, i] = L[:, 0]\n\nX\n"], "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": ["is_contained = number in a\n<code>"], "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": ["C = A[~np.isin(A, B)]\n<code>"], "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": ["C = A[np.isin(A, B)]\n<code>"], "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": ["C = A[np.logical_or.reduce([np.logical_and(A > B[i], A < B[i+1]) for i in range(len(B)-1)])]\n<code>"], "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": ["result = len(a) + 1 - rankdata(a).astype(int)\n<code>"], "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": ["<code>\n# Calculate ranks in ascending order\nascending_ranks = rankdata(a, method='ordinal') - 1\n# Reverse the ranks to get descending order\nresult = len(a) - ascending_ranks - 1\n"], "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": ["<code>\nimport numpy as np\nfrom scipy.stats import rankdata\n\nexample_a = [1, 2, 3, 4, 3, 2, 3, 4]\n\ndef f(a=example_a):\n    ranks = rankdata(a, method='max')\n    reverse_ranks = len(a) + 1 - ranks\n    return reverse_ranks.astype(int)\n\nresult = f(example_a)\nprint(result)\n"], "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": ["dists = np.dstack((x_dists, y_dists))\n"], "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": ["dists = np.stack((x_dists, y_dists), axis=-1)\n"], "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": ["result = a[:, second, :][:, :, third]\n<code>"], "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": ["arr = np.zeros((20, 10, 10, 2))\n<code>"], "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": ["l1_norms = np.sum(np.abs(X), axis=1, keepdims=True)\nresult = X / l1_norms\nprint(result)\n<code>"], "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": ["norms = LA.norm(X, axis=1, keepdims=True)\nresult = X / norms\nprint(result)\n<code>"], "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": ["```python\nresult = X / np.max(np.abs(X), axis=1, keepdims=True)\n```"], "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": ["conditions = [df['a'].astype(str).str.contains(target)]\nresult = np.select(conditions, choices, default='YY')\n<code>"], "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": ["distances = np.sqrt(((a[:, np.newaxis] - a) ** 2).sum(axis=2))\nresult = distances\n"], "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": ["<code>\nfrom scipy.spatial.distance import cdist\n\nresult = cdist(a, a)\n"], "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": ["import numpy as np\n\n# Generate random data for demonstration\nnp.random.seed(0)\ndim = np.random.randint(4, 8)\na = np.random.rand(np.random.randint(5, 10), dim)\n\n# Calculate the distance matrix\nfrom scipy.spatial.distance import pdist, squareform\n\n# Compute the pairwise distances and convert to a square form\ndistances = pdist(a, 'euclidean')\nresult = squareform(distances)\nresult = np.triu(result)\n<code>"], "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": ["AVG = np.mean(NA.astype(float))\nprint(AVG)\n<code>"], "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": ["<code>\nimport numpy as np\nA = ['inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A, dtype=np.float64)\nAVG = np.mean(NA)\nprint(AVG)\n"], "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": ["AVG = np.mean(np.array([float(x) if x != 'np.inf' else np.inf for x in A]))\nprint(AVG)\n<code>"], "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": ["import numpy as np\n\n# Input array\na = np.array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3])\n\n# Remove zeros\nnon_zero = a[a != 0]\n\n# Remove adjacent duplicates\nresult = non_zero[np.append(True, non_zero[1:] != non_zero[:-1])]\n<code>"], "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": ["import numpy as np\n\n# Input array\na = np.array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3]).reshape(-1, 1)\n\n# Remove zeros and find unique consecutive non-zero elements\nnon_zeros = a[a != 0].flatten()\nunique_consecutives = np.array([v for i, v in enumerate(non_zeros) if i == 0 or v != non_zeros[i-1]]).reshape(-1, 1)\n\nresult = unique_consecutives\n<code>"], "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": ["df = pd.DataFrame({\n    'lat': lat.ravel(),\n    'lon': lon.ravel(),\n    'val': val.ravel()\n})\n<code>"], "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": ["<code>\nimport numpy as np\nimport pandas as pd\n\n# Define the arrays\nlat = np.array([[10, 20, 30],\n                [20, 11, 33],\n                [21, 20, 10]])\nlon = np.array([[100, 102, 103],\n                [105, 101, 102],\n                [100, 102, 103]])\nval = np.array([[17, 2, 11],\n                [86, 84, 1],\n                [9, 5, 10]])\n\n# Flatten the arrays\nlat_flat = lat.flatten()\nlon_flat = lon.flatten()\nval_flat = val.flatten()\n\n# Create a DataFrame\ndf = pd.DataFrame({\n    'lat': lat_flat,\n    'lon': lon_flat,\n    'val': val_flat\n})\n\nprint(df)\n"], "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": ["df = pd.DataFrame({\n    'lat': lat.flatten(),\n    'lon': lon.flatten(),\n    'val': val.flatten()\n})\ndf['maximum'] = df.max(axis=1)\n"], "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": ["<code>\ndef rolling_window(a, window):\n    pad_width = ((window[0]//2, window[0]//2), (window[1]//2, window[1]//2))\n    padded_a = np.pad(a, pad_width, mode='constant', constant_values=np.nan)\n    shape = (a.shape[0], a.shape[1]) + window\n    strides = padded_a.strides + padded_a.strides\n    windows = np.lib.stride_tricks.as_strided(padded_a, shape=shape, strides=strides)\n    return windows\n\nresult = rolling_window(a, size)\n"], "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": ["<code>\ndef rolling_window(a, window):\n    pad_width = ((window[0]//2, window[0]//2), (window[1]//2, window[1]//2))\n    padded_a = np.pad(a, pad_width, mode='constant', constant_values=np.nan)\n    shape = (a.shape[0], a.shape[1]) + window\n    strides = padded_a.strides + padded_a.strides\n    windows = np.lib.stride_tricks.as_strided(padded_a, shape=shape, strides=strides)\n    return windows\n\nresult = rolling_window(a, size)\n"], "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": ["result = np.nanmean(a.real) + 0j\n"], "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": ["<code>\nimport numpy as np\n\ndef f(a=np.array([1 + 0j, 2 + 3j, np.inf + 0j])):\n    finite_mask = np.isfinite(a)\n    if np.any(finite_mask):\n        finite_values = a[finite_mask]\n        return np.mean(finite_values)\n    else:\n        return np.nan + 0j\n### END SOLUTION\n"], "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": ["result = Z[(slice(None),) * (Z.ndim - 1) + (-1,)]\n"], "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": ["<code>\nresult = a[-1:]\n"], "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": ["result = any(np.array_equal(c, cnt) for cnt in CNTS)\n"], "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": ["def arrays_equal(a, b):\n    try:\n        return np.array_equal(a, b) or (np.isnan(a) & np.isnan(b)).all()\n    except TypeError:\n        return False\n\nresult = any(arrays_equal(c, cnt) for cnt in CNTS)\n"], "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": ["f = intp.interp2d([0, 1], [0, 1], a, kind='linear')\nresult = f(x_new, y_new)\n"], "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": ["<code>\ndf = pd.DataFrame(data)\ndf[name] = df.groupby('D')['Q'].cumsum()\n"], "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": ["i = np.diag(i)\n<code>"], "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": ["<code>\na = np.diag(np.diag(a))\n"], "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": ["<code>\nstart_ts = pd.to_datetime(start)\nend_ts = pd.to_datetime(end)\ntimestamps = np.linspace(start_ts.value, end_ts.value, n)\nresult = pd.to_datetime(timestamps).to_pydatetime()\n"], "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": ["<code>\nindex = np.where((x == a) & (y == b))[0]\nresult = index[0] if index.size > 0 else -1\n"], "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": ["result = np.where((x == a) & (y == b))[0]\n"], "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": ["A = np.vstack([np.array(x)**2, np.array(x), np.ones(len(x))]).T\ncoefficients = np.linalg.lstsq(A, y, rcond=None)[0]\nresult = coefficients\n"], "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": ["coefficients = np.polyfit(x, y, degree)\nresult = coefficients[::-1]\n"], "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": ["df.apply(lambda x, idx: x - a[idx], axis=1)\n<code>"], "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": ["result = np.einsum('ijk,kl->ijl', A, B)\n<code>"], "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": ["<code>\nscaler = MinMaxScaler()\na_flattened = a.flatten().reshape(-1, 1)\na_scaled = scaler.fit_transform(a_flattened)\nresult = a_scaled.reshape(a.shape)\n"], "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": ["scaler = MinMaxScaler()\nresult = scaler.fit_transform(arr.T).T\n"], "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": ["scaler = MinMaxScaler()\nresult = np.array([scaler.fit_transform(matrix) for matrix in a])\n"], "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": ["arr[arr < -10] = 0\narr[arr >= 15] = 30\nmask = (arr >= -10) & (arr < 15)\narr[mask] += 5\n"], "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": ["for i in range(arr.shape[0]):\n    mask1 = arr[i] < n1[i]\n    mask2 = arr[i] >= n2[i]\n    arr[i, mask1] = 0\n    arr[i, ~mask1 & ~mask2] += 5\n    arr[i, mask2] = 30\n"], "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": ["import numpy as np\n\n# Define the size of the array\nn = 20\nm = 10\n\n# Generate random floats in a 2D array\ntag = np.random.rand(n, m)\n\n# Calculate the sum across rows for the original and reversed arrays\ns1 = np.sum(tag, axis=1)\ns2 = np.sum(tag[:, ::-1], axis=1)\n\n# Use np.isclose to compare s1 and s2 with a tolerance, count the number of False entries\nresult = np.sum(~np.isclose(s1, s2))\nprint(result)\n<code>"], "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": ["```python\nimport numpy as np\n\n# Define a function to compare arrays with tolerance and handling NaNs\ndef compare_arrays(a, b, tol=1e-10):\n    return np.sum((np.abs(a - b) > tol) & ~(np.isnan(a) & np.isnan(b)))\n\n# Example usage\nn = 20\nm = 10\ntag = np.random.rand(n, m)\ns1 = np.sum(tag, axis=1)\ns2 = np.sum(tag[:, ::-1], axis=1)\ns1 = np.append(s1, np.nan)\ns2 = np.append(s2, np.nan)\n\nresult = compare_arrays(s1, s2)\nprint(result)\n```"], "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": ["import numpy as np\n\n# List of numpy arrays\narrays = [np.array([1, 2, 3]), np.array([1, 2, 3]), np.array([1, 2, 3])]\n\n# Check if all arrays are equal\nresult = all(np.array_equal(arrays[0], arr) for arr in arrays)\n"], "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": ["<code>\nresult = all(np.isnan(arr).any() for arr in a)\n"], "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": ["<code>\npad_height = shape[0] - a.shape[0]\npad_width = shape[1] - a.shape[1]\nresult = np.pad(a, ((0, pad_height), (0, pad_width)), mode='constant', constant_values=0)\n"], "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": ["pad_height = shape[0] - a.shape[0]\npad_width = shape[1] - a.shape[1]\nresult = np.pad(a, ((0, pad_height), (0, pad_width)), mode='constant', constant_values=0)\n"], "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": ["pad_width = ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1]))\nresult = np.pad(a, pad_width, constant_values=element)\n"], "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": ["pad_height = shape[0] - arr.shape[0]\n    pad_width = shape[1] - arr.shape[1]\n    padded_arr = np.pad(arr, ((0, pad_height), (0, pad_width)), mode='constant', constant_values=0)\n    return padded_arr\n### END SOLUTION\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": ["<code>\npad_height = (shape[0] - a.shape[0]) // 2\npad_width = (shape[1] - a.shape[1]) // 2\n\npad_height_extra = (shape[0] - a.shape[0]) % 2\npad_width_extra = (shape[1] - a.shape[1]) % 2\n\nresult = np.pad(a, ((pad_height, pad_height + pad_height_extra), (pad_width, pad_width + pad_width_extra)), mode='constant', constant_values=0)\n"], "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": ["a = a.reshape(a.shape[0] // 3, 3)\n<code>"], "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": ["<code>\nresult = np.take_along_axis(a, b[..., np.newaxis], axis=2).squeeze()\n"], "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": ["<code>\nresult = np.take_along_axis(a, b[..., np.newaxis], axis=2).squeeze()\n"], "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": ["N, M = b.shape\nresult = np.array([a[i, j, b[i, j]] for i in range(N) for j in range(M)])\nresult = result.reshape(N, M)\n"], "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": ["<code>\nn, m = b.shape\nresult = np.sum(a[np.arange(n)[:, None], np.arange(m), b])\n"], "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": ["<code>\nresult = np.sum(a) - np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n"], "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": ["result = df['b'].where((df['a'] > 1) & (df['a'] <= 4), np.nan)\nprint(result.tolist())\n"], "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": ["non_zero_rows = np.any(im != 0, axis=1)\nnon_zero_cols = np.any(im != 0, axis=0)\nresult = im[non_zero_rows][:, non_zero_cols]\n"], "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": ["nonzero_indices = np.nonzero(A)\nrow_min = np.min(nonzero_indices[0])\nrow_max = np.max(nonzero_indices[0])\ncol_min = np.min(nonzero_indices[1])\ncol_max = np.max(nonzero_indices[1])\nresult = A[row_min:row_max+1, col_min:col_max+1]\n"], "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": ["<code>\nmask = im != 0\nvalid_rows = np.where(mask.any(axis=1))[0]\nvalid_cols = np.where(mask.any(axis=0))[0]\nif valid_rows.size > 0 and valid_cols.size > 0:\n    result = im[np.min(valid_rows):np.max(valid_rows)+1, np.min(valid_cols):np.max(valid_cols)+1]\nelse:\n    result = np.array([])\n"], "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": ["mask = np.any(im != 0, axis=1)\nim = im[mask]\nmask = np.any(im != 0, axis=0)\nresult = im[:, mask]\n"], "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": ["<code>\nplt.scatter(x, y, label='x-y')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": ["<code>\nplt.minorticks_on()\nplt.tick_params(axis='y', which='minor', left=True)\nplt.show()\n"], "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": ["<code>\nplt.minorticks_on()\nplt.show()\n"], "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": ["<code>\nplt.minorticks_on()\nplt.tick_params(axis='x', which='minor', bottom=True)\nplt.show()\n"], "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": ["<code>\nstyles = ['-', '--', '-.', ':']\nfor style in styles:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=f'Style {style}')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": ["<code>\nstyles = ['-', '--', '-.', ':']\nfor style in styles:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=f'Style {style}')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": ["<code>\nplt.plot(x, y, 'd-', markersize=4)\nplt.show()\n"], "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": ["<code>\nplt.plot(x, y, marker='D', linewidth=2, markersize=10)\nplt.show()\n"], "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": ["<code>\nax.set_ylim(0, 40)\nplt.show()\n"], "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": ["<code>\nplt.plot(x)\nplt.axvspan(2, 4, color='red', alpha=0.5)\nplt.show()\n"], "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": ["<code>\nplt.plot([0, 1], [0, 2], marker='o')\nplt.show()\n"], "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": ["<code>\nplt.plot([0, 1], [0, 2])\nplt.show()\n"], "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": ["<code>\nseaborn.relplot(data=df, x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\")\nplt.show()\n"], "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": ["<code>\nsns.set(style=\"whitegrid\")\nplt.plot(x, y)\nplt.title(\"Random Plot\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.show()\n"], "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": ["<code>\ndata = pd.DataFrame({\n    'X': x,\n    'Y': y\n})\n\nsns.lineplot(data=data, x='X', y='Y')\nplt.show()\n"], "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": ["<code>\nplt.plot(x, y, marker='+', markersize=7)\nplt.show()\n"], "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": ["<code>\nplt.legend(fontsize=20)\nplt.show()\n"], "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": ["<code>\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, label='Cosine Wave')\nplt.legend(title='xyz', title_fontsize=20)\nplt.show()\n"], "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": ["<code>\nl.set_markerfacecolor((1, 0, 0, 0.2))\n"], "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": ["<code>\nl.set_markeredgecolor(\"black\")\nplt.show()\n"], "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": ["<code>\nl.set_color('red')\nl.set_markerfacecolor('red')\nl.set_markeredgecolor('red')\n"], "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": ["<code>\nplt.xticks(rotation=45)\nplt.show()\n"], "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": ["<code>\nplt.xticks(rotation=45)\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": ["<code>\nplt.xticks(np.arange(0, 2*np.pi+1, 2))\nplt.show()\n"], "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": ["<code>\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": ["<code>\nplt.imshow(H, cmap='viridis')\nplt.colorbar()\nplt.show()\n"], "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": ["<code>\nplt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.show()\n"], "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\", ha='right')\nplt.show()\n"], "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": ["<code>\nplt.xticks(rotation=90)\nplt.show()\n"], "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": ["<code>\nplt.title(\"\\n\".join(textwrap.wrap(myTitle, 60)))\nplt.show()\n"], "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": ["<code>\nplt.scatter(x, y)\nplt.gca().invert_yaxis()\nplt.show()\n"], "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": ["<code>\nplt.xticks([0, 1.5])\nplt.show()\n"], "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": ["<code>\nplt.yticks([-1, 1])\nplt.show()\n"], "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": ["<code>\nplt.scatter(x, y, color='r', label='x')\nplt.scatter(y, z, color='g', label='y')\nplt.scatter(z, x, color='b', label='z')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": ["<code>\nplt.scatter(x, y, facecolors='blue', edgecolors='black')\nplt.show()\n"], "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": ["<code>\nfig, ax = plt.subplots()\nax.plot(x, y, 'o-')\nax.xaxis.set_major_locator(plt.MaxNLocator(integer=True))\nax.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\nplt.show()\n"], "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": ["<code>\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()\n"], "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": ["<code>\nax.lines[0].set_linestyle(\"--\")\nplt.show()\n"], "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(2, sharex=True)\nax1.plot(x, y1, 'r-')\nax1.set_title('Sine Wave')\nax2.plot(x, y2, 'b-')\nax2.set_title('Cosine Wave')\nplt.show()\n"], "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(2, 1)\nax1.plot(x, y1)\nax2.plot(x, y2)\n\nfor ax in [ax1, ax2]:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n\nplt.show()\n"], "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": ["<code>plt.xlabel(\"\")\n"], "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": ["<code>\nplt.xticks([])\nplt.show()\n"], "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": ["<code>\nplt.xticks([3, 4])\nplt.grid(True, which='both', axis='x', linestyle='-', linewidth=0.5)\nplt.show()\n"], "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": ["<code>\nplt.yticks([3, 4])\nplt.grid(axis='y', which='both', linestyle='--', linewidth=0.5)\nplt.show()\n"], "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": ["<code>\nplt.yticks([3, 4])\nplt.xticks([1, 2])\nplt.grid(True, which='both', axis='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()\n"], "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": ["<code>\nplt.grid(True)\nplt.show()\n"], "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": ["<code>\nplt.legend(loc=\"lower right\")\nplt.show()\n"], "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": ["<code>\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6), subplot_kw={'adjustable': 'datalim'})\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.subplots_adjust(hspace=0.5, wspace=0.5)\nplt.show()\nplt.clf()\n"], "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": ["<code>\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": ["<code>\nax.xaxis.tick_top()\nplt.xticks(np.arange(0.5, len(column_labels), 1), column_labels)\nplt.yticks(np.arange(0.5, len(row_labels), 1), row_labels)\nplt.show()\n"], "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\nplt.show()\n"], "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": ["<code>\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n"], "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": ["<code>\nplt.plot(x, y)\nplt.gca().yaxis.set_ticks_position('right')\nplt.show()\n"], "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": ["<code>\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.set_ylabel('Y')\nax.yaxis.set_label_position('right')\nax.yaxis.tick_left()\nplt.show()\n"], "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": ["<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', marginal_kws=dict(bins=50, fill=True, color='blue'))\nplt.show()\n"], "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": ["<code>\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"blue\", line_kws={\"color\": \"green\"})\nplt.show()\n"], "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": ["<code>\nsns.jointplot(data=tips, x=\"total_bill\", y=\"tip\", kind=\"reg\")\nplt.show()\n"], "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": ["<code>\nfig, ax = plt.subplots()\ndf.plot(kind='bar', x='celltype', y=['s1', 's2'], ax=ax)\nax.set_xticklabels(df['celltype'], rotation=0)\nplt.show()\n"], "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": ["<code>\nfig, ax = plt.subplots()\ndf.plot(kind='bar', x='celltype', y=['s1', 's2'], ax=ax)\nax.set_xlabel(\"Cell Type\")\nax.set_xticklabels(df['celltype'], rotation=45)\nplt.show()\n"], "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\", color='red')\nplt.xticks(color='red')\nplt.show()\n"], "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\")\nplt.axhline(0, color='red')\nplt.show()\n"], "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": ["<code>\nplt.figure(figsize=(8, 6))\nplt.plot(x, y)\nplt.xticks(rotation='vertical', fontsize=10)\nplt.show()\n"], "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": ["<code>\nimport matplotlib.pyplot as plt\n\nx_positions = [0.22058956, 0.33088437, 2.20589566]\nfor x in x_positions:\n    plt.axvline(x=x, color='r', linestyle='--')\n\nplt.xlim(0, 3)\nplt.show()\n"], "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": ["<code>\nfig, ax = plt.subplots()\nheatmap = ax.imshow(rand_mat, cmap='viridis')\n\nax.set_xticks(numpy.arange(len(xlabels)))\nax.set_yticks(numpy.arange(len(ylabels)))\n\nax.set_xticklabels(xlabels)\nax.set_yticklabels(ylabels[::-1])\n\nax.xaxis.set_ticks_position('top')\nax.xaxis.set_label_position('top')\n\nplt.colorbar(heatmap)\nplt.show()\n"], "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": ["<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(time, Swdown, \"-\", label=\"Swdown\")\nax.plot(time, Rn, \"-\", label=\"Rn\")\nax2 = ax.twinx()\nax2.plot(time, temp, \"-r\", label=\"Temp\")\n\n# Create combined legend for all plots\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc=0)\n\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\nplt.show()\nplt.clf()\n"], "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": ["<code>\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\nfor ax in axs:\n    ax.plot(x, y)\n    ax.set_title(\"Y\")\nplt.show()\n"], "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": ["<code>\nsns.scatterplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", s=30)\nplt.show()\n"], "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": ["<code>\nplt.scatter(a, b)\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (a[i], b[i]))\nplt.show()\n"], "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": ["<code>\nplt.plot(x, y, label='y over x')\nplt.legend(title='Legend')\nplt.show()\n"], "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": ["<code>\nplt.plot(x, y, label='y over x')\nplt.legend(title='Legend', title_fontweight='bold')\nplt.show()\n"], "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": ["<code>\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n"], "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]})\n\nax1.plot(x, y)\nax1.set_title('Plot 1')\n\nax2.plot(x, y)\nax2.set_title('Plot 2')\n\nplt.show()\n"], "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": ["<code>\nplt.hist(x, bins, alpha=0.5, label='x')\nplt.hist(y, bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()\n"], "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": ["<code>\nplt.hist([x, y], bins=5, alpha=0.7, label=['x', 'y'])\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": ["<code>\nimport numpy as np\n\n# Calculate the slope (m) and y-intercept (c) of the line\nm = (d - b) / (c - a)\nc = b - m * a\n\n# Define the x range for the line\nx = np.linspace(0, 5, 100)\ny = m * x + c\n\n# Plotting the line\nplt.plot(x, y, '-r', label=f'y = {m}x + {c}')\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Line through points')\nplt.legend(loc='best')\nplt.grid(True)\nplt.show()\n"], "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\ncmap = plt.get_cmap('viridis')\n\nim1 = ax1.imshow(x, cmap=cmap)\nax1.set_title('Random Matrix X')\n\nim2 = ax2.imshow(y, cmap=cmap)\nax2.set_title('Random Matrix Y')\n\nfig.colorbar(im1, ax=[ax1, ax2], orientation='vertical')\nplt.show()\n"], "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": ["<code>\nplt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": ["<code>\nfig, axs = plt.subplots(1, 2)\naxs[0].plot(x, y)\naxs[1].plot(a, z)\nfig.suptitle('Y and Z')\nplt.show()\n"], "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": ["<code>\nx, y = zip(*points)\nplt.plot(x, y)\nplt.yscale('log')\nplt.show()\n"], "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": ["<code>\nplt.figure(figsize=(10, 6))\nplt.plot(x, y)\nplt.title(\"Plot of Y over X\", fontsize=20)\nplt.xlabel(\"X axis\", fontsize=18)\nplt.ylabel(\"Y axis\", fontsize=16)\nplt.grid(True)\nplt.show()\n"], "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": ["<code>\nax.plot(x, y)\nax.set_xticks(np.arange(1, 11))\nax.set_yticks(np.arange(1, 11))\nplt.show()\n"], "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": ["<code>\nfor i, line in enumerate(lines):\n    x = [point[0] for point in line]\n    y = [point[1] for point in line]\n    plt.plot(x, y, color=c[i])\nplt.show()\n"], "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": ["<code>\nplt.figure()\nplt.loglog(x, y, basex=10, basey=10)\nplt.gca().set_xticks([1, 10, 100, 1000])\nplt.gca().set_yticks([1, 10, 100, 1000])\nplt.gca().get_xaxis().set_major_formatter(plt.ScalarFormatter())\nplt.gca().get_yaxis().set_major_formatter(plt.ScalarFormatter())\nplt.show()\n"], "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": ["<code>\nfig, axs = plt.subplots(2, 2, figsize=(10, 10))\n\naxs[0, 0].plot(df.index, df['A'], marker='o')\naxs[0, 0].set_title('Plot A')\n\naxs[0, 1].plot(df.index, df['B'], marker='o')\naxs[0, 1].set_title('Plot B')\n\naxs[1, 0].plot(df.index, df['C'], marker='o')\naxs[1, 0].set_title('Plot C')\n\naxs[1, 1].plot(df.index, df['D'], marker='o')\naxs[1, 1].set_title('Plot D')\n\nplt.tight_layout()\nplt.show()\n"], "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": ["<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = [1000, 1000, 5000, 3000, 4000, 16000, 2000]\n\n# Make a histogram of data and renormalize the data to sum up to 1\nweights = np.ones_like(data) / len(data)\ncounts, bins, patches = plt.hist(data, weights=weights, bins=5, edgecolor='black')\n\n# Format the y tick labels into percentage\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.0%}'.format(y)))\n\n# Set y tick labels as 10%, 20%, etc.\nplt.yticks(np.arange(0, 1.1, 0.1))\n\nplt.show()\n"], "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": ["<code>\nplt.plot(x, y, marker='o', alpha=0.5)\nplt.show()\n"], "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\nfig.legend(loc='upper right')\nplt.show()\n"], "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": ["<code>\nfig, axs = plt.subplots(1, 2, figsize=(12, 6), sharey=False)\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axs[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axs[1])\nplt.show()\n"], "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": ["<code>\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'second'\nax.set_xticklabels(labels)\nplt.show()\n"], "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": ["<code>\nplt.plot(x, y, label='$\\lambda$')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": ["<code>\ncurrent_ticks = plt.xticks()[0]\nnew_ticks = np.append(current_ticks, [2.1, 3, 7.6])\nplt.xticks(np.unique(new_ticks))\nplt.show()\n"], "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": ["<code>\nplt.xticks(rotation=-60, ha='left')\nplt.show()\n"], "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": ["<code>\nplt.xticks(rotation='vertical', va='top')\nplt.yticks(rotation=-60)\nplt.show()\n"], "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": ["<code>\nfor label in plt.gca().get_xticklabels():\n    label.set_alpha(0.5)\nplt.show()\n"], "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": ["<code>\nplt.margins(x=0, y=0.05)\nplt.show()\n"], "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": ["<code>\nplt.margins(x=0.05, y=0)\nplt.show()\n"], "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": ["<code>\nfig, axs = plt.subplots(1, 2)\naxs[0].plot(x, y)\naxs[1].plot(x, y)\nfig.suptitle('Figure')\nplt.show()\n"], "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": ["<code>\nplt.plot(df[\"Type A\"], label=\"Type A\")\nplt.plot(df[\"Type B\"], label=\"Type B\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": ["<code>\nplt.scatter(x, y, marker=(4, 0, 45))  # 4 sides, 0 rotation, 45 density\nplt.show()\n"], "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": ["<code>\nplt.scatter(x, y, edgecolor='none', marker='|')\nplt.show()\n"], "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": ["<code>\nplt.scatter(x, y, marker=(5, 1))\nplt.show()\n"], "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": ["<code>\nplt.scatter(x, y, s=100, marker=(5, 1, 0), hatch='|*')\nplt.show()\n"], "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": ["<code>\nplt.imshow(data, extent=[1, 5, 1, 4], aspect='auto')\nplt.colorbar()\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.show()\n"], "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": ["<code>\nfig, ax = plt.subplots()\nax.stem(x, y, orientation='horizontal')\nplt.show()\n"], "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": ["<code>\nplt.bar(d.keys(), d.values(), color=[c[key] for key in d.keys()])\nplt.show()\n"], "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": ["<code>\nimport matplotlib.pyplot as plt\n\nplt.axvline(x=3, label='cutoff', color='r')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": ["<code>\nfig = plt.figure()\nax = fig.add_subplot(111, projection='polar')\ntheta = [0, np.pi/2]\nbars = ax.bar(theta, height, tick_label=labels)\nplt.show()\n"], "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": ["<code>\nfig, ax = plt.subplots()\nax.pie(data, labels=l, wedgeprops=dict(width=0.4))\nax.set(aspect=\"equal\")\nplt.show()\n"], "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": ["<code>\nplt.plot(x, y)\nplt.grid(True, linestyle='--', color='b')\nplt.show()\n"], "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": ["<code>\nplt.figure()\nplt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', linewidth=0.5, color='gray')\nplt.grid(which='major', visible=False)\nplt.show()\n"], "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": ["<code>\nplt.pie(sizes, labels=labels, colors=colors)\nplt.legend(labels, loc=\"best\", fontsize='large', fontweight='bold')\nplt.show()\n"], "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": ["<code>\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.legend(labels, loc=\"best\")\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n"], "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": ["<code>\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgewidth=2, markeredgecolor='b')\nplt.title('Transparent Marker with Non-transparent Edge')\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.grid(True)\nplt.show()\n"], "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": ["<code>\nplt.axvline(x=55, color='green')\nplt.show()\n"], "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": ["<code>\n# Number of bars\nn = 3\nindex = np.arange(n)\nbar_width = 0.35\n\nplt.bar(index, blue_bar, bar_width, label='Blue Bar')\nplt.bar(index + bar_width, orange_bar, bar_width, label='Orange Bar')\n\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Side by Side Bar Chart')\nplt.xticks(index + bar_width / 2, ('Category 1', 'Category 2', 'Category 3'))\nplt.legend()\n\nplt.show()\n"], "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='Line Y')\nax2.plot(a, z, label='Line Z')\n\nax1.set_title('Plot of Y over X')\nax2.set_title('Plot of Z over A')\n\nax1.legend()\n\nplt.show()\n"], "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": ["<code>\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar(label='Value of y')\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.title('Scatter Plot of Y over X with Spectral Colormap')\nplt.show()\n"], "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": ["<code>\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, marker='o')\nplt.xticks(np.arange(min(x), max(x)+1, 1))\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.title('Line Plot of y over x')\nplt.grid(True)\nplt.show()\n"], "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": ["<code>\nsns.catplot(data=df, kind=\"bar\", x=\"sex\", y=\"bill_length_mm\", col=\"species\", sharey=False)\nplt.show()\n"], "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": ["<code>\nimport matplotlib.pyplot as plt\n\ncircle = plt.Circle((0.5, 0.5), 0.2, color='blue', fill=False)\nfig, ax = plt.subplots()\nax.add_artist(circle)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal', adjustable='box')\nplt.show()\n"], "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": ["<code>\nplt.plot(x, y)\nplt.title(r'$\\mathbf{\\phi}$', fontsize=14, fontweight='bold')\nplt.show()\n"], "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": ["<code>\nplt.plot(x, y, label=\"Line\")\nplt.legend(labelspacing=0.1)\nplt.show()\n"], "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": ["<code>\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\nplt.show()\n"], "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": ["<code>\nplt.legend(ncol=2)\nplt.show()\n"], "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": ["<code>\nplt.scatter([2, 7], [2, 7], color='red')  # Mark the points at x=2 and x=7\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": ["<code>\nplt.imshow(data, cmap='viridis')\nplt.colorbar()\nplt.show()\n"], "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": ["<code>\nplt.plot(x, y)\nplt.title(r\"$\\bf{Figure}$ 1\")\nplt.show()\n"], "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": ["<code>\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\", legend=False)\nplt.show()\n"], "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": ["<code>\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n"], "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": ["<code>\nplt.scatter(x, y)\nplt.gca().set_xlim(0, 10)\nplt.gca().set_ylim(0, 10)\nplt.gca().set_clip_on(False)\nplt.show()\n"], "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": ["<code>\nplt.scatter(x, y, color='red', edgecolor='black')\nplt.show()\n"], "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": ["<code>\nfig, axs = plt.subplots(2, 2, figsize=(15, 15))\nfor ax in axs.flat:\n    ax.plot(x, y)\nplt.show()\n"], "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": ["<code>\nplt.hist(x, bins=np.arange(0, 11, 2))\nplt.show()\n"], "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": ["<code>\nplt.fill_between(x, y - error, y + error, color='gray', alpha=0.5)\nplt.plot(x, y, marker='o')\nplt.show()\n"], "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": ["<code>\nplt.axhline(0, color='white')\nplt.axvline(0, color='white')\nplt.show()\n"], "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": ["<code>\nfor i in range(len(box_position)):\n    ax.errorbar(box_position[i], box_height[i], yerr=box_errors[i], fmt='o', color=c[i])\nplt.show()\n"], "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(x, y)\nax1.set_title(\"Y\")\nax2.plot(a, z)\nax2.set_title(\"Z\", y=1.05)\nplt.show()\n"], "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": ["<code>\nfig, axs = plt.subplots(4, 4, figsize=(5, 5))\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].tick_params(axis='x', labelsize=8)\n        axs[i, j].tick_params(axis='y', labelsize=8)\nplt.tight_layout()\nplt.show()\n"], "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": ["<code>\nplt.figure(figsize=(8, 8))\nplt.matshow(d, fignum=1)\nplt.show()\n"], "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": ["<code>\nfig, ax = plt.subplots(figsize=(10, 2))\nax.axis('tight')\nax.axis('off')\nthe_table = ax.table(cellText=df.values, colLabels=df.columns, loc='center', bbox=[0, 0, 1, 1])\nplt.show()\n"], "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": ["<code>\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.xaxis.set_ticks_position('both')\nax.tick_params(axis='x', labeltop=True)\nplt.show()\n"], "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": ["<code>\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.xaxis.set_ticks_position('both')\nax.tick_params(axis='x', direction='in', which='both')\nplt.show()\n"], "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": ["<code>\nplt.figure()\nplt.plot(x, y)\nplt.tick_params(axis='x', which='both', length=0)\nplt.show()\n"], "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": ["<code>\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_titles(\"Group: {col_name}\")\nplt.show()\n"], "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": ["<code>\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_axis_labels(\"Exercise Time\", \"Pulse Rate\")\nplt.show()\n"], "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": ["<code>\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set(ylabel=None)\nplt.show()\n"], "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": ["<code>\nplt.plot(x, y, label='y')\nplt.legend(fontsize=8)\nplt.show()\n"], "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": ["<code>\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n"], "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": ["<code>\nplt.plot(x, y, label='y')\nplt.legend(frameon=False)\nplt.show()\n"], "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": ["<code>\nplt.figure(figsize=(8, 6))\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.title('Plot of sin(t), cos(t), and sin(t) + cos(t)')\nplt.xlabel('t')\nplt.ylabel('Function value')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": ["<code>\n# Create the stripplot\nplt.figure(figsize=(10, 6))\nstrip_plot = sns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, jitter=True)\n\n# Remove the legend\nstrip_plot.legend_.remove()\n\nplt.show()\n"], "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": ["<code>\ng = sns.FacetGrid(df, row=\"b\")\ng.map(sns.pointplot, \"a\", \"c\")\n\nfor ax in g.axes.flat:\n    ax.set_xticks(np.arange(0, 30, 1))\n    ax.set_xticklabels(np.arange(1, 31, 2))\n\nplt.show()\n"], "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": ["<code>\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(50, 100)\nplt.show()\n"], "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.tick_params(axis='both', which='both', labelbottom=False, labelleft=False)\nplt.show()\n"], "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": ["<code>\ngs = gridspec.GridSpec(nrow, ncol, wspace=0, hspace=0)\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(x, aspect='auto')\n        ax.set_xticks([])\n        ax.set_yticks([])\nplt.show()\n"], "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": ["<code>\nx.assign(1)\nresult = x.numpy()\n"], "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": ["<code>\nx.assign(114514)\nresult = x.numpy()\n"], "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": ["<code>\nnum_classes = 10\nresult = tf.one_hot(labels, depth=num_classes, dtype=tf.int32)\n"], "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": ["<code>\nnum_classes = 10\nresult = tf.ones((len(labels), num_classes), dtype=tf.int32)\nfor i, label in enumerate(labels):\n    result = tf.tensor_scatter_nd_update(result, [[i, label]], [0])\n"], "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": ["<code>\nnum_classes = 10\nresult = tf.one_hot(labels, num_classes, dtype=tf.int32)\n"], "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": ["<code>\nimport tensorflow as tf\n\nexample_labels = [0, 6, 5, 4, 2]\ndef f(labels=example_labels):\n    num_classes = 10\n    return tf.one_hot(labels, depth=num_classes, dtype=tf.int32)\n\nresult = f(example_labels)\nprint(result)\n"], "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": ["<code>\nnum_classes = 10\nresult = tf.ones((len(labels), num_classes), dtype=tf.int32)\nfor i, label in enumerate(labels):\n    result = tf.tensor_scatter_nd_update(result, [[i, label]], [0])\n"], "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": ["<code>\ndef my_map_func(i):\n    return tf.data.Dataset.from_tensor_slices([i, i+1, i+2])\n\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(my_map_func)\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n    try:\n        while True:\n            result.append(sess.run(element))\n    except tf.errors.OutOfRangeError:\n        pass\n"], "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": ["<code>\nimport tensorflow as tf\n\ntf.compat.v1.disable_eager_execution()\n\ninput_data = [10, 20, 30]\n\ndef my_map_func(i):\n    return tf.data.Dataset.from_tensor_slices([i, i+1, i+2])\n\nds = tf.data.Dataset.from_tensor_slices(input_data)\nds = ds.flat_map(my_map_func)\n\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n    try:\n        while True:\n            result.append(sess.run(element))\n    except tf.errors.OutOfRangeError:\n        pass\n\nprint(result)\n"], "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": ["max_length = 8\nlengths_tensor = tf.constant(lengths)\nmasks = tf.sequence_mask(lengths_tensor, maxlen=max_length)\nresult = tf.cast(masks, tf.int32)\n"], "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": ["<code>\nmax_length = 8\nlengths_tensor = tf.constant(lengths)\nmasks = tf.sequence_mask(lengths_tensor, maxlen=max_length)\nresult = tf.cast(masks, tf.int32)\n"], "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": ["total_length = 8\nlengths_tensor = tf.constant(lengths)\nmasks = tf.sequence_mask(lengths_tensor, maxlen=total_length)\npadded_masks = tf.cast(masks, tf.float32)\nresult = padded_masks[:, ::-1]\n"], "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": ["<code>\nimport tensorflow as tf\n\nexample_lengths = [4, 3, 5, 2]\ndef f(lengths=example_lengths):\n    max_length = 8\n    # Create a range tensor that repeats from 0 to max_length-1\n    range_tensor = tf.range(max_length)\n    # Expand dimensions of lengths and range tensor for broadcasting\n    lengths_expanded = tf.expand_dims(lengths, 1)\n    # Create the mask by comparing the range tensor with each length\n    mask = tf.cast(range_tensor < lengths_expanded, tf.int32)\n    return mask\n\n# Call the function and print the result\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": ["<code>\nmax_length = 8\nlengths_tensor = tf.constant(lengths)\nmasks = tf.sequence_mask(lengths_tensor, maxlen=max_length)\nresult = tf.cast(masks, tf.float32)\n"], "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": ["a_expanded = tf.expand_dims(a, 1)\nb_expanded = tf.expand_dims(b, 0)\nresult = tf.add(a_expanded, b_expanded)\n"], "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": ["<code>\nimport tensorflow as tf\n\nexample_a = tf.constant([1,2,3])\nexample_b = tf.constant([4,5,6,7])\ndef f(a=example_a,b=example_b):\n    a = tf.expand_dims(a, 1)  # Convert 'a' to a column vector\n    b = tf.expand_dims(b, 0)  # Convert 'b' to a row vector\n    product = tf.tensordot(a, b, axes=0)  # Cartesian product\n    return tf.reshape(product, [-1, 2])  # Reshape to a 2D tensor\n\n# Example usage\nresult = f()\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": ["result = tf.squeeze(a, axis=2)\n"], "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": ["result = tf.expand_dims(a, axis=2)\n<code>"], "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": ["result = tf.reshape(a, (1, 50, 100, 1, 512))\n<code>"], "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": ["<code>\nresult = tf.reduce_sum(A, axis=1)\n"], "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": ["<code>\nresult = tf.reduce_prod(A, axis=1)\n"], "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": ["<code>\nresult = tf.math.reciprocal(A)\n"], "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": ["squared_diff = tf.square(tf.subtract(a, b))\nresult = tf.reduce_sum(squared_diff, axis=1)\n"], "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": ["diff = tf.square(tf.subtract(a, b))\nresult = tf.reduce_sum(diff, axis=0)\n<code>"], "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": ["<code>\nimport tensorflow as tf\n\nexample_a = tf.constant([\n  [1,1,1],\n  [1,1,1]\n])\nexample_b = tf.constant([\n  [0,0,0],\n  [1,1,1]\n])\ndef f(A=example_a,B=example_b):\n    # Calculate the squared differences\n    squared_diff = tf.square(tf.subtract(A, B))\n    # Reduce sum across the rows\n    result = tf.reduce_sum(squared_diff, axis=1)\n    return result\n\n# Call the function and print the result\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": ["indices = tf.stack([y, z], axis=1)\nresult = tf.gather_nd(x, indices)\n"], "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": ["result = tf.gather_nd(x, indices=tf.stack([row, col], axis=1))\n<code>"], "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": ["<code>\nimport tensorflow as tf\n\nexample_x = [[1,2,3],[4,5,6]]\nexample_y = [0,1]\nexample_z = [1,2]\nexample_x = tf.constant(example_x)\nexample_y = tf.constant(example_y)\nexample_z = tf.constant(example_z)\ndef f(x=example_x,y=example_y,z=example_z):\n    indices = tf.stack([y, z], axis=1)\n    return tf.gather_nd(x, indices)\n\nresult = f()\nprint(result.numpy())\n### END SOLUTION\n"], "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": ["<code>\nresult = tf.tensordot(A, B, axes=[[2], [2]])\n"], "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": ["result = tf.matmul(A, B, transpose_b=True)\n"], "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": ["tf.strings.unicode_decode(x, 'UTF-8')\n"], "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": ["<code>\nimport tensorflow as tf\n\nexample_x=[b'\\xd8\\xa8\\xd9\\x85\\xd8\\xb3\\xd8\\xa3\\xd9\\x84\\xd8\\xa9',\n    b'\\xd8\\xa5\\xd9\\x86\\xd8\\xb4\\xd8\\xa7\\xd8\\xa1',\n    b'\\xd9\\x82\\xd8\\xb6\\xd8\\xa7\\xd8\\xa1',\n    b'\\xd8\\xac\\xd9\\x86\\xd8\\xa7\\xd8\\xa6\\xd9\\x8a',\n    b'\\xd8\\xaf\\xd9\\x88\\xd9\\x84\\xd9\\x8a']\ndef f(x=example_x):\n    tensor_x = tf.constant(x)\n    return tf.strings.unicode_decode(tensor_x, 'UTF-8')\n\nresult = f()\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": ["mask = tf.cast(x != 0, tf.float32)\nsum_x = tf.reduce_sum(x * mask, axis=2)\ncount_nonzero = tf.reduce_sum(mask, axis=2)\nresult = sum_x / count_nonzero\n"], "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": ["mask = tf.cast(tf.not_equal(x, 0), tf.float32)\nsums = tf.reduce_sum(x * mask, axis=2)\ncounts = tf.reduce_sum(mask, axis=2)\nmeans = sums / counts\nsquared_diffs = tf.square(x - tf.expand_dims(means, axis=2)) * mask\nvariances = tf.reduce_sum(squared_diffs, axis=2) / counts\nresult = variances\n"], "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": ["mask = tf.cast(tf.not_equal(x, 0), tf.float32)\nnon_zero_count = tf.reduce_sum(mask, axis=2)\nsums = tf.reduce_sum(x * mask, axis=2)\naverages = sums / non_zero_count\nreturn averages\n### END SOLUTION\n"], "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": ["import tensorflow as tf\n\n# Set the seed for reproducibility\ntf.random.set_seed(10)\n\n# Create two random normal tensors\nA = tf.random.normal([100, 100])\nB = tf.random.normal([100, 100])\n\n# Perform matrix multiplication and then reduce sum\nresult = tf.reduce_sum(tf.matmul(A, B))\n"], "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": ["result = tf.argmax(a, axis=1)\n<code>"], "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": ["result = tf.argmax(a, axis=0)\nprint(result)\n<code>"], "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": ["<code>\nimport tensorflow as tf\n\nexample_a = tf.constant(\n    [[0.3232, -0.2321, 0.2332, -0.1231, 0.2435, 0.6728],\n     [0.2323, -0.1231, -0.5321, -0.1452, 0.5435, 0.1722],\n     [0.9823, -0.1321, -0.6433, 0.1231, 0.023, 0.0711]]\n)\n\ndef f(a=example_a):\n    return tf.argmax(a, axis=1)\n\nresult = f()\nprint(result)\n"], "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": ["result = tf.argmin(a, axis=0)\nprint(result)\n<code>"], "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": ["model.save('my_model', save_format='tf')\n<code>"], "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": ["import tensorflow as tf\n\ntf.random.set_seed(10)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n<code>"], "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": ["import tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[114], minval=2, maxval=6, dtype=tf.int32)\n<code>"], "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": ["<code>\nimport tensorflow as tf\n\ndef f(seed_x=10):\n    tf.random.set_seed(seed_x)\n    return tf.random.uniform(shape=(10,), minval=1, maxval=5, dtype=tf.int32)\n### END SOLUTION\n"], "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": ["<code>\nresult = tf.__version__\n"], "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": ["log_x = np.log(x)\ncoefficients = np.polyfit(log_x, y, 1)\nresult = np.array(coefficients)\n<code>"], "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": ["log_x = np.log(x)\ncoefficients = np.polyfit(log_x, y, 1)\nresult = np.array(coefficients)\n"], "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": ["def exponential_func(x, A, B, C):\n    return A * np.exp(B * x) + C\n\nresult, _ = scipy.optimize.curve_fit(exponential_func, x, y, p0=p0)\n"], "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": ["<code>\nstatistic, p_value = stats.ks_2samp(x, y)\n"], "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": ["<code>\nresult = stats.ks_2samp(x, y)\nreject_null = result.pvalue < alpha\n"], "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": ["def f(x):\n    a, b, c = x\n    return ((a + b - c) - 2)**2 + ((3*a - b - c))**2 + sin(b) + cos(b) + 4\n\nresult = optimize.minimize(f, initial_guess)\nprint(result.x)\n"], "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": ["<code>\np_values = scipy.stats.norm.cdf(z_scores)\n"], "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": ["p_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n"], "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": ["<code>\nz_scores = scipy.stats.norm.ppf(p_values)\n"], "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": ["sigma = stddev\nmean = np.exp(mu)\nshape = sigma\nscale = mean\ndist = stats.lognorm(s=shape, scale=scale)\nresult = dist.cdf(x)\n"], "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": ["import numpy as np\nfrom scipy.stats import lognorm\n\n# Parameters\nmu = 1.744\nsigma = 2.0785\n\n# Create a lognormal distribution\ndistribution = lognorm(s=sigma, scale=np.exp(mu))\n\n# Calculate expected value (mean) and median\nexpected_value = distribution.mean()\nmedian = distribution.median()\n<code>"], "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": ["<code>\nresult = sa.multiply(sb)\n"], "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": ["<code>\nfrom scipy import sparse\nimport numpy as np\n\nexample_sA = sparse.csr_matrix(np.array([[1,2,3],[4,5,6],[7,8,9]]))\nexample_sB = sparse.csr_matrix(np.array([0,1,2]).reshape(3,1))\n\ndef f(sA = example_sA, sB = example_sB):\n    return sA.multiply(sB)\n### END SOLUTION\n"], "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": ["interpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n"], "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": ["interpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n"], "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": ["data_rot = rotate(data_orig, angle, reshape=False)\nrows, cols, _ = data_orig.shape\ncx, cy = cols / 2, rows / 2\nx0_shifted, y0_shifted = x0 - cx, y0 - cy\ntheta = np.radians(angle)\ncos_theta, sin_theta = np.cos(theta), np.sin(theta)\nxrot = cos_theta * x0_shifted - sin_theta * y0_shifted + cx\nyrot = sin_theta * x0_shifted + cos_theta * y0_shifted + cy\nxrot, yrot = int(round(xrot)), int(round(yrot))\n"], "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": ["<code>\nresult = M.diagonal()\n"], "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": ["result = stats.kstest(times, 'uniform', args=(0, T))\n<code>"], "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": ["<code>\nfrom scipy import stats\nimport random\nimport numpy as np\n\ndef poisson_simul(rate, T):\n    time = random.expovariate(rate)\n    times = [0]\n    while (times[-1] < T):\n        times.append(time+times[-1])\n        time = random.expovariate(rate)\n    return times[1:]\n\ndef f(times, rate, T):\n    scaled_times = np.array(times) / T\n    result = stats.kstest(scaled_times, 'uniform')\n    return result\n\nexample_rate = 1.0\nexample_T = 100.0\nexample_times = poisson_simul(example_rate, example_T)\nresult = f(example_times, example_rate, example_T)\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": ["result = stats.kstest(times, 'uniform', args=(0, T))\nis_uniform = result.pvalue >= 0.05\nprint(is_uniform)\n<code>"], "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": ["Feature = sparse.hstack([c1, c2], format='csr')\n<code>"], "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": ["Feature = sparse.hstack([c1, c2], format='csr')\n<code>"], "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": ["Feature = sparse.vstack([c1, c2], format='csr')\n<code>"], "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": ["<code>\ndistance_matrix = scipy.spatial.distance.cdist(points1, points2)\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(distance_matrix)\nresult = col_ind\n"], "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": ["<code>\ndef manhattan_distance(p1, p2):\n    return np.sum(np.abs(p1 - p2))\n\ncost_matrix = np.zeros((N, N))\nfor i in range(N):\n    for j in range(N):\n        cost_matrix[i, j] = manhattan_distance(points1[i], points2[j])\n\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(cost_matrix)\nresult = col_ind\n"], "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": ["b.eliminate_zeros()\n"], "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": ["labeled_array, num_features = ndimage.label(img > threshold)\nresult = num_features\n"], "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": ["binary_img = img < threshold\nlabeled_array, num_features = ndimage.label(binary_img, structure=ndimage.generate_binary_structure(2, 2))\nresult = num_features\n"], "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": ["<code>\nimport numpy as np\nfrom scipy import ndimage\n\ndef count_regions_above_threshold(image, threshold=0.75):\n    # Apply threshold to create a binary image\n    binary_image = image > threshold\n    \n    # Label connected components\n    labeled_image, num_features = ndimage.label(binary_image, structure=np.ones((3, 3)))\n    \n    return num_features\n\n# Example usage:\nnp.random.seed(0)\ndata = np.random.rand(512, 512)\nprint(count_regions_above_threshold(data))\n"], "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": ["<code>\nlabeled_array, num_features = ndimage.label(img > threshold)\ncenters_of_mass = ndimage.center_of_mass(img, labeled_array, range(1, num_features + 1))\ndistances = [np.linalg.norm(center) for center in centers_of_mass]\nresult = distances\n"], "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": ["M = (M + M.T).tolil()\n<code>"], "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": ["<code>\nimport numpy as np\nfrom scipy.sparse import lil_matrix\n\ndef make_symmetric(sA):\n    if not isinstance(sA, lil_matrix):\n        raise ValueError(\"Input must be a LIL matrix\")\n    sA = sA + sA.T - lil_matrix(np.diag(sA.diagonal()))\n    return sA\n\n# Example usage:\nexample_sA = lil_matrix((10, 10))\nexample_sA[0, 1] = 1\nexample_sA[1, 2] = 2\nexample_sA = make_symmetric(example_sA)\nprint(example_sA.toarray())\n### END SOLUTION\n"], "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": ["kernel = np.array([[1, 1, 1],\n                   [1, 0, 1],\n                   [1, 1, 1]])\nneighbors = scipy.ndimage.convolve(square, kernel, mode='constant', cval=0)\nisolated = (square == 1) & (neighbors == 0)\nsquare[isolated] = 0\n"], "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": ["<code>\n# Define a function to check if a cell is isolated\ndef is_isolated(arr, x, y):\n    if arr[x, y] == 0:\n        return False\n    # Check all neighboring cells\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            nx, ny = x + dx, y + dy\n            if nx >= 0 and nx < arr.shape[0] and ny >= 0 and ny < arr.shape[1]:\n                if arr[nx, ny] != 0:\n                    return False\n    return True\n\n# Create a copy of the array to modify\ncleaned_square = square.copy()\n\n# Iterate over each cell in the array\nfor i in range(square.shape[0]):\n    for j in range(square.shape[1]):\n        if is_isolated(square, i, j):\n            cleaned_square[i, j] = 0\n\nsquare = cleaned_square\n"], "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": ["mean = col.sum() / col.shape[0]\nstandard_deviation = np.sqrt(col.multiply(col).sum() / col.shape[0] - mean**2)\n"], "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": ["Max = col.max()\nMin = col.min()\n"], "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": ["from scipy.stats import mode\n\n# Extract non-zero elements and their indices\ndata = col.data\nindices = col.indices\n\n# If the column is completely zero, handle separately\nif len(data) == 0:\n    Median = 0\n    Mode = 0\nelse:\n    # Calculate median\n    if len(data) < col.shape[0]:\n        # Append zeros to data to account for missing elements\n        data = np.append(data, np.zeros(col.shape[0] - len(data)))\n    Median = np.median(data)\n\n    # Calculate mode\n    mode_result = mode(data)\n    Mode = mode_result.mode[0]\n"], "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": ["def fourier_series(x, *coefficients):\n    return sum(c * np.cos((i + 1) * np.pi / tau * x) for i, c in enumerate(coefficients))\n\ninitial_guess = [1] * degree\npopt, pcov = curve_fit(fourier_series, z, Ua, p0=initial_guess)\nprint(\"Optimal parameters:\", popt)\nprint(\"Covariance of parameters:\", pcov)\n<code>"], "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": ["<code>\nimport numpy as np\nfrom scipy.spatial.distance import cdist\nfrom scipy.ndimage import distance_transform_edt\n\ndef calculate_min_distances(array):\n    unique_ids = np.unique(array)\n    unique_ids = unique_ids[unique_ids != 0]  # Exclude background if ID 0 is background\n    edge_distances = np.zeros((len(unique_ids), len(unique_ids)))\n\n    # Create a mask for each unique ID and calculate the distance transform\n    for i, id1 in enumerate(unique_ids):\n        mask1 = (array == id1)\n        dt1 = distance_transform_edt(~mask1)\n\n        for j, id2 in enumerate(unique_ids):\n            if i < j:  # To avoid redundant calculations\n                mask2 = (array == id2)\n                dt2 = distance_transform_edt(~mask2)\n                # Calculate minimum distance between the edges of two regions\n                distance = np.min(dt1[mask2] + dt2[mask1])\n                edge_distances[i, j] = edge_distances[j, i] = distance\n\n    return edge_distances, unique_ids\n\n# Calculate distances\ndistances, ids = calculate_min_distances(example_array)\n\n# Create a structured array to hold the result\ndtype = [('from_id', int), ('to_id', int), ('distance', float)]\nresult = np.zeros((len(ids) * (len(ids) - 1) // 2,), dtype=dtype)\nk = 0\nfor i in range(len(ids)):\n    for j in range(i + 1, len(ids)):\n        result[k] = (ids[i], ids[j], distances[i, j])\n        k += 1\n"], "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": ["<code>\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef find_edge_coordinates(array, label):\n    \"\"\" Find the coordinates of the edge pixels of a labeled region in the array. \"\"\"\n    mask = array == label\n    edge_mask = np.logical_xor(mask, np.binary_erosion(mask))\n    return np.column_stack(np.where(edge_mask))\n\ndef calculate_min_distances(array):\n    \"\"\" Calculate minimum Manhattan distances between all unique labeled regions. \"\"\"\n    labels = np.unique(array)\n    labels = labels[labels != 0]  # Exclude background if labeled as 0\n    edge_coordinates = {label: find_edge_coordinates(array, label) for label in labels}\n    \n    num_labels = len(labels)\n    distance_matrix = np.zeros((num_labels, num_labels))\n    \n    for i, label1 in enumerate(labels):\n        for j, label2 in enumerate(labels):\n            if label1 == label2:\n                distance_matrix[i, j] = np.inf  # Infinite distance to itself (or 0 if preferred)\n            else:\n                # Calculate all pairwise Manhattan distances and find the minimum\n                distances = cdist(edge_coordinates[label1], edge_coordinates[label2], 'cityblock')\n                distance_matrix[i, j] = np.min(distances)\n    \n    return labels, distance_matrix\n\n# Calculate distances\nlabels, result = calculate_min_distances(example_array)\nprint(\"Labels:\", labels)\nprint(\"Distance Matrix:\\n\", result)\n"], "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": ["<code>\nimport numpy as np\nfrom scipy.spatial.distance import cdist\nfrom scipy.ndimage import distance_transform_edt\n\ndef calculate_min_distances(array):\n    unique_ids = np.unique(array)\n    unique_ids = unique_ids[unique_ids != 0]  # Exclude background if zero is considered background\n    coordinates = {uid: np.argwhere(array == uid) for uid in unique_ids}\n    \n    # Create a distance matrix initialized with infinity\n    distance_matrix = np.full((len(unique_ids), len(unique_ids)), np.inf)\n    \n    for i, uid1 in enumerate(unique_ids):\n        mask1 = array == uid1\n        dt1 = distance_transform_edt(~mask1)  # Distance transform of the complement of the mask\n        \n        for j, uid2 in enumerate(unique_ids):\n            if uid1 == uid2:\n                continue  # Distance to self is not interesting\n            mask2 = array == uid2\n            # Minimum distance between the edges of two different regions\n            distance_matrix[i, j] = np.min(dt1[mask2])\n    \n    return distance_matrix, unique_ids\n\n# Example usage:\nexample_array = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\ndistances, ids = calculate_min_distances(example_array)\nprint(\"Distance Matrix:\\n\", distances)\nprint(\"IDs:\", ids)\n"], "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": ["result = np.zeros((5, 100))\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k=2, s=4)\n    result[i, :] = interpolate.splev(x_val, tck, der=0, ext=3)\n"], "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": ["statistic, critical_values, significance_level = ss.anderson_ksamp([x1, x2, x3, x4])\n"], "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": ["result = ss.anderson_ksamp([x1, x2]).significance_level < 0.05\n<code>"], "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": ["```python\ndef rolling_kendalltau(df, window):\n    def apply_kendalltau(series1, series2):\n        if len(series1) < window:\n            return np.nan\n        else:\n            tau, _ = stats.kendalltau(series1, series2)\n            return tau\n\n    results = pd.DataFrame(index=df.index)\n    columns = df.columns\n    for i in range(len(columns)):\n        for j in range(i + 1, len(columns)):\n            col1, col2 = columns[i], columns[j]\n            result = df[[col1, col2]].rolling(window=window).apply(\n                lambda x: apply_kendalltau(x[col1], x[col2]), raw=False)\n            results[f'{col1}{col2}'] = result[col1]\n\n    return results\n\ndf_result = rolling_kendalltau(df, 3)\n```\n"], "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": ["<code>\nresult = sa.nnz == 0\n"], "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": ["result = sa.nnz == 0\n"], "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": ["result = block_diag(*a)\n<code>"], "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": ["result = stats.ranksums(pre_course_scores, during_course_scores)\np_value = result.pvalue\nprint(p_value)\n<code>"], "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": ["<code>\n    result = stats.ranksums(pre_course_scores, during_course_scores)\n    p_value = result.pvalue\n    return p_value\n### END SOLUTION\n"], "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": ["<code>\nmean_a = np.mean(a)\nstd_a = np.std(a)\nkurtosis_result = np.sum((a - mean_a)**4) / (len(a) * std_a**4) - 3\n"], "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": ["<code>\nkurtosis_result = scipy.stats.kurtosis(a, fisher=True, bias=False)\n"], "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": ["f = scipy.interpolate.interp2d(x.ravel(), y.ravel(), z, kind='cubic')\nresult = f(s, t)\n"], "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": ["<code>\nimport numpy as np\nimport scipy.interpolate\n\n# Define the grid points where the data is known\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-2, 0, 10)\nX, Y = np.meshgrid(x, y)\nZ = (X + Y) * np.exp(-6.0 * (X**2 + Y**2))\n\n# Create the interpolator function\ninterpolator = scipy.interpolate.interp2d(x, y, Z, kind='cubic')\n\n# Define the points where we want to interpolate\ns = np.array([-0.5, 0.5])\nt = np.array([-1.5, -0.1])\n\n# Interpolate at the desired points\nresult = interpolator(s, t)\nresult_diagonal = np.diag(result)\n\nprint(result_diagonal)\n"], "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": ["import numpy as np\n\n# Function to find the index of the region that contains the point\ndef find_region(vor, point):\n    for i, region in enumerate(vor.regions):\n        if not region:  # skip empty regions\n            continue\n        polygon = [vor.vertices[vertex] for vertex in region if vertex >= 0]\n        if scipy.spatial.ConvexHull(polygon).find_simplex(np.array(point)) >= 0:\n            return i\n    return -1  # if no region found\n\n# Array to store the count of points in each region\nregion_count = np.zeros(len(vor.point_region))\n\n# Check each extra point and find its region\nfor point in extraPoints:\n    region_index = find_region(vor, point)\n    if region_index != -1:\n        point_region_index = np.where(vor.point_region == region_index)[0][0]\n        region_count[point_region_index] += 1\n\nresult = region_count\n<code>"], "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": ["<code>\nimport numpy as np\n\n# Function to find the Voronoi region a point belongs to\ndef find_region(vor, point):\n    distances = scipy.spatial.distance.cdist([point], vor.points)\n    closest_index = np.argmin(distances)\n    return closest_index\n\n# Array to count points in each Voronoi cell\ncounts = np.zeros(len(points), dtype=int)\n\n# Assign each extra point to a Voronoi cell\nfor extra_point in extraPoints:\n    region_index = find_region(vor, extra_point)\n    counts[region_index] += 1\n\nresult = counts\n"], "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": ["max_len = max(len(v) for v in vectors)\npadded_vectors = [np.pad(v, (0, max_len - len(v)), 'constant') for v in vectors]\nsparse_matrix = sparse.csr_matrix(padded_vectors)\nresult = sparse_matrix\n"], "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": ["b = scipy.ndimage.median_filter(a, size=3, origin=1)\n"], "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": ["result = M[row, column]\n<code>"], "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": ["result = [M[row[i], column[i]] for i in range(len(row))]\n<code>"], "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": ["new_array = scipy.interpolate.interp1d(x, array, axis=0)(x_new)\n<code>"], "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": ["def NormalDistro(u, o2, x):\n    dev = abs((x-u)/o2)\n    P_inner, _ = scipy.integrate.quad(NDfx, -np.inf, dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return P\n\nprob = NormalDistro(u, o2, x)\n"], "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": ["<code>\nimport scipy.integrate\nimport math\n\ndef NDfx(x):\n    return (1 / math.sqrt(2 * math.pi)) * math.exp(-0.5 * x**2)\n\ndef NormalDistro(u, o2, x):\n    dev = abs((x - u) / o2)\n    P_inner, _ = scipy.integrate.quad(NDfx, -dev, dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer / 2\n    return P\n### END SOLUTION\n"], "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": ["matrix = np.eye(N)\nfor i in range(N):\n    matrix[i, :] = sf.dct(matrix[i, :], norm='ortho')\nresult = matrix\n<code>"], "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": ["result = sparse.diags([matrix[0, 1:], matrix[1], matrix[2, :-1]], [1, 0, -1], shape=(5, 5)).toarray()\n"], "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": ["result = scipy.stats.binom.pmf(np.arange(N+1)[:, None], np.arange(N+1), p)\n<code>"], "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": ["result = df.apply(stats.zscore, axis=1)\n<code>"], "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": ["<code>\nresult = df.apply(stats.zscore)\n"], "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": ["zscore_df = df.apply(stats.zscore, axis=1)\nzscore_df.index = pd.MultiIndex.from_tuples([(idx, 'zscore') for idx in df.index])\ndf.index = pd.MultiIndex.from_tuples([(idx, 'data') for idx in df.index])\nresult = pd.concat([df, zscore_df]).sort_index(level=0)\nresult\n<code>"], "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": ["<code>\n# Calculate z-scores for each column\nz_scores = df.apply(stats.zscore).round(3)\n\n# Replace infinite values with NaN\nz_scores.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n# Create a multi-level index by adding 'data' and 'zscore' levels\ndata_index = pd.MultiIndex.from_product([df.index, ['data', 'zscore']])\ndata_values = pd.concat([df, z_scores]).sort_index(kind='merge').values\n\n# Construct the final DataFrame\nresult = pd.DataFrame(data_values, index=data_index, columns=df.columns)\nresult = result.round(3)  # Round to three decimal places\n"], "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": ["result = scipy.optimize.line_search(test_func, test_grad, np.array(starting_point), np.array(direction))\nprint(result[0])\n<code>"], "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": ["<code>\ny, x = np.indices(shape)\ncenter = np.array([(shape[0]-1)/2.0, (shape[1]-1)/2.0])\npoints = np.stack((y.ravel(), x.ravel()), axis=-1)\nresult = distance.cdist(points, [center]).reshape(shape)\n"], "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": ["center = np.array([shape[0]//2, shape[1]//2])\ny, x = np.indices(shape)\ngrid = np.stack((y, x), axis=-1)\nresult = distance.cdist(grid.reshape(-1, 2), [center], metric='cityblock').reshape(shape)\n"], "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": ["<code>\nimport numpy as np\n\ndef create_distance_array(shape):\n    rows, cols = shape\n    center = np.array([rows / 2.0, cols / 2.0])\n    y, x = np.indices(shape)\n    points = np.stack((y, x), axis=-1)\n    distances = np.sqrt(((points - center) ** 2).sum(axis=2))\n    return distances\n"], "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": ["zoom_factors = np.array(shape) / np.array(x.shape)\nresult = scipy.ndimage.zoom(x, zoom_factors, order=1)\n"], "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": ["def objective(x):\n    return np.sum((y - np.dot(a, x**2))**2)\n\nout = scipy.optimize.minimize(objective, x0)\n"], "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": ["<code>\ndef objective_function(x, a, y):\n    return np.sum((y - np.dot(a, x**2))**2)\n\nresult = scipy.optimize.minimize(objective_function, x0, args=(a, y), method='L-BFGS-B', bounds=[(lb, None) for lb in x_lower_bounds])\nout = result.x\n"], "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": ["def dN1_dt_time_variant(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_time_variant, t_span=time_span, y0=[N0])\nresult = sol.y\n<code>"], "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": ["import numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef dN1_dt_variable(t, N1):\n    if 0 < t < 2 * np.pi:\n        return -100 * N1 + t - np.sin(t)\n    else:\n        return -100 * N1 + 2 * np.pi\n\nsol = solve_ivp(fun=dN1_dt_variable, t_span=[0, 10], y0=[N0], t_eval=np.linspace(0, 10, 300))\nresult = sol.y\n<code>"], "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": ["def dN1_dt_varying(t, N1):\n    return -100 * N1 - np.cos(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_varying, t_span=time_span, y0=[N0])\nresult = sol.y\n<code>"], "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": ["for t in range(4):\n    cons.append({'type': 'ineq', 'fun': lambda x, t=t: x[t]})\nout = minimize(function, x0, method=\"SLSQP\", constraints=cons)\nx = out[\"x\"]\n<code>"], "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": ["result = sparse.vstack([sa, sb], format='csr')\n"], "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": ["result = sparse.hstack([sa, sb], format='csr')\n<code>"], "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": ["<code>\nimport numpy as np\nimport scipy.integrate\n\n# Define the constants and limits\nc_values = np.array([1, 2, 3, 4, 5])  # Example array of different c values\nlow = 0\nhigh = 1\n\n# Initialize an empty list to store the results\nresults = []\n\n# Define the integral function\ndef integrand(x, c):\n    return 2 * c * x\n\n# Loop over each value of c and perform the integration\nfor c in c_values:\n    result, error = scipy.integrate.quad(integrand, low, high, args=(c,))\n    results.append(result)\n\n# Convert results list to a numpy array\nresults_array = np.array(results)\n"], "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": ["<code>\nimport numpy as np\nimport scipy.integrate\n\n# Load the values of c from a file\nc_values = np.loadtxt('cooltemp.dat', unpack=True, usecols=[1])\n\n# Define the function to integrate\ndef integrand(x, c):\n    return 2 * c * x\n\n# Array to store the results\nresults = []\n\n# Loop over each value of c and perform the integration\nfor c in c_values:\n    result, error = scipy.integrate.quad(integrand, 0, 1, args=(c,))\n    results.append(result)\n\n# Convert results list to a numpy array\nresults_array = np.array(results)\nprint(results_array)\n"], "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": ["for key in V.keys():\n    V[key] += x\n"], "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": ["V.data = V.data + x\n"], "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": ["V.data = V.data + x\nA = V.tocsr()  # Convert to CSR format for efficient arithmetic operations\nA.data = A.data + y\n"], "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": ["<code>\nfor col in range(sa.shape[1]):\n    column = sa[:, col].toarray().ravel()\n    length = np.linalg.norm(column)\n    if length != 0:\n        sa[:, col] = sa[:, col] / length\n"], "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": ["from scipy import sparse\nimport numpy as np\nimport math\n\n# Create a random sparse matrix in CSR format\nsa = sparse.random(10, 10, density=0.3, format='csr', random_state=42)\n\n# Normalize each column by its length\nfor col in range(sa.shape[1]):\n    column = sa[:, col].toarray().ravel()  # Extract column as dense array\n    length = np.linalg.norm(column)  # Calculate the Euclidean norm (length)\n    if length != 0:\n        column_normalized = column / length  # Normalize the column\n        sa[:, col] = column_normalized  # Update the column in the sparse matrix\n\n# The matrix 'sa' now has each of its columns normalized\n<code>"], "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": ["a = (a > 0).astype(int)\n"], "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": ["a = (a == 0).astype(int)\n<code>"], "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": ["import scipy.cluster.hierarchy as sch\n\n# Assume 'data' is your dataset and 'Z' is the linkage matrix obtained from sch.linkage\nZ = sch.linkage(data, method='ward')\n\n# Number of clusters\nk = 5\n\n# Assign clusters\nclusters = sch.cut_tree(Z, n_clusters=k).flatten()\n\n# Calculate centroids\ncentroids = np.array([data[clusters == i].mean(axis=0) for i in range(k)])\n\n# Find the closest data point to each centroid\nresult = []\nfor i, centroid in enumerate(centroids):\n    # Calculate distances from centroid to all points in the cluster\n    distances = scipy.spatial.distance.cdist([centroid], data[clusters == i], 'euclidean')\n    # Get the index of the minimum distance\n    closest_index = distances.argmin()\n    # Get the actual index in the original dataset\n    original_index = np.where(clusters == i)[0][closest_index]\n    result.append(original_index)\n"], "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": ["distances = scipy.spatial.distance.cdist(data, centroids)\nclosest_indices = np.argmin(distances, axis=0)\nresult = data[closest_indices]\n"], "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": ["import scipy.cluster.hierarchy as sch\n\n# Assume 'Z' is the linkage matrix obtained from sch.linkage\n# and 'data' is the original dataset\nZ = sch.linkage(data, method='ward')\n\n# Number of clusters\nnum_clusters = 5\n\n# Cut the tree to form flat clusters\nclusters = sch.cut_tree(Z, n_clusters=num_clusters).flatten()\n\n# Initialize result list\nresult = []\n\n# Calculate centroids of each cluster\nfor i in range(num_clusters):\n    cluster_points = data[clusters == i]\n    centroid = np.mean(cluster_points, axis=0)\n    distances = scipy.spatial.distance.cdist([centroid], cluster_points)[0]\n    sorted_indices = np.argsort(distances)\n    # Get the index of the k-th closest point to the centroid in the original data\n    k_closest_index = np.where(clusters == i)[0][sorted_indices[k-1]]\n    result.append(k_closest_index)\n"], "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": ["def solve_for_a(x, b):\n    return fsolve(lambda a: eqn(x, a, b), x0=0)\n\nresult = np.array([solve_for_a(x, b) for x, b in zip(xdata, bdata)])\n"], "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": ["<code>\ndef solve_for_b(x, a):\n    return fsolve(lambda b: eqn(x, a, b), x0=0)\n\nresult = [sorted(solve_for_b(x, a)) for x, a in zip(xdata, adata)]\n"], "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": ["def bekkers_cdf(x, a, m, d):\n    return integrate.quad(lambda t: bekkers(t, a, m, d), range_start, x)[0]\n\nbekkers_cdf_vectorized = np.vectorize(bekkers_cdf, excluded=['a', 'm', 'd'])\n\ndef bekkers_dist(a, m, d):\n    return stats.rv_continuous(name='bekkers_dist').freeze(a=a, m=m, d=d)\n\nbekkers_fit = bekkers_dist(estimated_a, estimated_m, estimated_d)\n\nresult = stats.kstest(sample_data, bekkers_fit.cdf)\n<code>\nEND SOLUTION"], "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": ["def bekkers_cdf(x, a, m, d):\n    return integrate.quad(lambda t: bekkers(t, a, m, d), range_start, x)[0]\n\nbekkers_cdf_vectorized = np.vectorize(bekkers_cdf, excluded=['a', 'm', 'd'])\n\ndef bekkers_dist(a, m, d):\n    return stats.rv_continuous(name='bekkers_dist').freeze(a=a, m=m, d=d)\n\nbekkers_rv = bekkers_dist(estimated_a, estimated_m, estimated_d)\nbekkers_rv._cdf = lambda x: bekkers_cdf_vectorized(x, estimated_a, estimated_m, estimated_d)\n\nks_stat, p_value = stats.kstest(sample_data, bekkers_rv.cdf)\n\nresult = p_value < 0.05\n<code>"], "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": ["<code>\ndf['Time'] = pd.to_datetime(df['Time'], format='%Y-%m-%d-%H:%M:%S')\ndf.set_index('Time', inplace=True)\nwindow_size = '25S'  # Define the rolling window size\n# Convert the index as float (number of seconds since epoch), necessary for integration\ndf['time_seconds'] = (df.index - pd.Timestamp(\"1970-01-01\")) // pd.Timedelta('1s')\nintegral_df = df.rolling(window=window_size, on='time_seconds').apply(\n    lambda x: integrate.trapz(x['A'], x['time_seconds']), raw=True\n)\n"], "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": ["import numpy as np\nfrom scipy.interpolate import griddata\n\nx = np.array([(2, 2), (1, 2), (2, 3), (3, 2), (2, 1)])\ny = np.array([5, 7, 8, 10, 3])\neval_point = np.array([(2.7, 2.3)])\n\nresult = griddata(x, y, eval_point, method='linear')\nprint(result)\n"], "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": ["# Count the occurrences of each category\ncounts = a['A1'].value_counts().sort_index()\n\n# Total number of observations\ntotal_counts = counts.sum()\n\n# Calculate probabilities (weights) as the frequency of each category divided by the total number of observations\nweights = counts / total_counts\nweights = weights.reindex(np.arange(0, a['A1'].max()+1), fill_value=0)\n"], "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": ["result = sciopt.minimize(e, x0=[1, 1], bounds=[(0.5, 1.5), (0.7, 1.8)], args=(x, y))\n"], "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": ["<code>\nresult = signal.argrelextrema(arr, np.less_equal, order=n)[0]\n"], "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": ["kernel = np.array([1] * (2 * n + 1))\nkernel[n] = 0\nminima = signal.order_filter(arr, kernel, n)\nresult = np.argwhere(arr == minima)\n"], "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": ["numeric_cols = df.select_dtypes(include=[np.number])\ndf = df[(np.abs(stats.zscore(numeric_cols)) < 3).all(axis=1)]\n"], "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": ["<code>\ndata1 = pd.DataFrame(data=data.data, columns=data.feature_names)\n"], "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": ["<code>\ndata1 = pd.DataFrame(data=data.data, columns=data.feature_names)\ndata1['target'] = data.target\n"], "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": ["<code>\ndata1 = pd.DataFrame(data=data.data, columns=data.feature_names)\ndata1['Target'] = data.target\n"], "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": ["<code>\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport pandas as pd\n\ndata = load_iris()\n\ndef solve(data):\n    df = pd.DataFrame(data=data.data, columns=data.feature_names)\n    df['target'] = data.target\n    return df\n\nresult = solve(data)\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": ["df['Col3'] = df['Col3'].apply(lambda x: set(x))\nall_fruits = set.union(*df['Col3'])\nfor fruit in all_fruits:\n    df[fruit] = df['Col3'].apply(lambda x: 1 if fruit in x else 0)\ndf.drop('Col3', axis=1, inplace=True)\n"], "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": ["# Assuming df is already defined and loaded as per the user's description\n# Convert the list in 'Col3' to a one-hot encoded DataFrame\none_hot_df = pd.get_dummies(df['Col3'].explode()).groupby(level=0).max()\n\n# Merge the one-hot encoded DataFrame with the original DataFrame\ndf_out = df.drop('Col3', axis=1).join(one_hot_df)\n"], "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": ["<code>\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Assuming the last column contains the lists\nmlb = MultiLabelBinarizer()\nexpanded_labels = mlb.fit_transform(df.iloc[:, -1])\nnew_cols = pd.DataFrame(expanded_labels, columns=mlb.classes_)\n\n# Concatenate the new columns to the original dataframe\ndf_out = pd.concat([df.iloc[:, :-1], new_cols], axis=1)\n"], "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": ["```python\n# Assuming the last column contains the lists to be one-hot-encoded\nlast_column = df.columns[-1]\n\n# Get all unique items from the lists in the last column\nall_items = set()\ndf[last_column].apply(lambda x: all_items.update(x))\n\n# Create new columns for each unique item and set values based on presence in the lists\nfor item in all_items:\n    df[item] = df[last_column].apply(lambda x: 1 if item in x else 0)\n\n# Drop the original column with lists, if needed\ndf_out = df.drop(columns=[last_column])\n```"], "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": ["import pandas as pd\n\n# Example DataFrame\ndata = {\n    'Col1': ['C', 'A', 'B'],\n    'Col2': [33, 2.5, 42],\n    'Col3': [['Apple', 'Orange', 'Banana'], ['Apple', 'Grape'], ['Banana']]\n}\n\ndf = pd.DataFrame(data)\n\n# Get all unique items in the lists across all rows\nall_items = set()\ndf['Col3'].apply(lambda x: all_items.update(x))\n\n# Create new columns for each unique item\nfor item in all_items:\n    df[item] = df['Col3'].apply(lambda x: 0 if item in x else 1)\n\n# Drop the original column with lists\ndf.drop('Col3', axis=1, inplace=True)\n\ndf_out = df\n<code>"], "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": ["<code>\nfrom sklearn.calibration import CalibratedClassifierCV\n\n# Wrap LinearSVC with CalibratedClassifierCV\ncalibrated_svc = CalibratedClassifierCV(base_estimator=svmmodel, method='sigmoid', cv=5)\ncalibrated_svc.fit(X, y)\nproba = calibrated_svc.predict_proba(x_test)\n"], "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": ["<code>\nfrom sklearn.calibration import CalibratedClassifierCV\n\n# Train the LinearSVC model\nmodel.fit(X, y)\n\n# Calibrate the model on the training data\ncalibrated = CalibratedClassifierCV(model, method='sigmoid', cv=5)\ncalibrated.fit(X, y)\n\n# Predict probabilities on new data\nproba = calibrated.predict_proba(x_predict)\n"], "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": ["df = pd.concat([df_origin, pd.DataFrame(transform_output.toarray())], axis=1)\n<code>"], "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": ["df_dense = pd.DataFrame(transform_output.toarray())\ndf = pd.concat([df_origin.reset_index(drop=True), df_dense], axis=1)\n<code>"], "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": ["    dense_transform = transform_output.toarray()\n    df_transform = pd.DataFrame(dense_transform, columns=[f\"feature_{i}\" for i in range(dense_transform.shape[1])])\n    df_transform.index = df.index\n    result = pd.concat([df, df_transform], axis=1)\n    return result\n### END SOLUTION\n"], "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": ["# Remove the 'poly' step from the pipeline\nclf.steps = [step for step in clf.steps if step[0] != 'poly']\nclf.steps\n<code>"], "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": ["# Remove the 'dim_svm' step from the pipeline\nclf.steps = [step for step in clf.steps if step[0] != 'dim_svm']\nprint(clf)\n<code>"], "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": ["del clf.steps[1]\nclf.steps"], "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": ["clf.set_params(poly=None)"], "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": ["# Create a pipeline with initial steps\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\n\n# Define the initial steps\nsteps = [('PCA', PCA()), ('SVC', SVC())]\npipeline = Pipeline(steps)\n\n# Function to add a step\ndef add_step(pipeline, step_name, step, position=None):\n    new_steps = list(pipeline.steps)\n    if position is None:\n        position = len(new_steps)\n    new_steps.insert(position, (step_name, step))\n    pipeline.steps = new_steps\n\n# Function to remove a step\ndef remove_step(pipeline, step_name):\n    new_steps = [s for s in pipeline.steps if s[0] != step_name]\n    pipeline.steps = new_steps\n\n# Example usage\nadd_step(pipeline, 'NewStep', PCA(), 1)  # Insert new step at position 1\nremove_step(pipeline, 'PCA')            # Remove the 'PCA' step\n\n# Print the modified pipeline steps\nprint(pipeline.steps)"], "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": ["new_step = ('t1919810', PCA())\ninsert_position = [i for i, (name, _) in enumerate(clf.steps) if name == 'svdm'][0]\nclf.steps.insert(insert_position, new_step)\nclf.named_steps[new_step[0]] = new_step[1]\n"], "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": ["```python\nmodel = xgb.XGBRegressor()\nparam_grid = {\n    'max_depth': [3, 5, 7],\n    'n_estimators': [100, 200, 300],\n    'learning_rate': [0.01, 0.1, 0.2]\n}\nfit_params = {\n    \"early_stopping_rounds\": 42,\n    \"eval_metric\": \"mae\",\n    \"eval_set\": [(testX, testY)]\n}\ngridsearch = GridSearchCV(model, param_grid, verbose=1, cv=TimeSeriesSplit(n_splits=5).get_n_splits([trainX, trainY]), n_jobs=-1)\ngridsearch.fit(trainX, trainY, **fit_params)\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n```"], "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": ["<code>\nmodel = xgb.XGBRegressor()\nparam_grid = {\n    'max_depth': [3, 5, 7],\n    'n_estimators': [50, 100, 200],\n    'learning_rate': [0.01, 0.1, 0.2]\n}\nfit_params = {\n    \"early_stopping_rounds\": 42,\n    \"eval_metric\": \"mae\",\n    \"eval_set\": [(testX, testY)]\n}\ngridsearch = GridSearchCV(model, param_grid, verbose=1, cv=TimeSeriesSplit(n_splits=3).get_n_splits([trainX, trainY]), n_jobs=-1)\ngridsearch.fit(trainX, trainY, **fit_params)\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n"], "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": ["proba = []\nfor train_idx, test_idx in cv:\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train = y[train_idx]\n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test))\n"], "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": ["proba = []\nfor train_idx, test_idx in cv:\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train = y[train_idx]\n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test))\n"], "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": ["inversed = scaler.inverse_transform(scaled)\n<code>"], "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\n# Load your data\n# Assuming 'data' is a pandas DataFrame with the target column 't' and other feature columns\ndata = pd.DataFrame({\n    't': np.random.normal(loc=200, scale=10, size=100),\n    'f1': np.random.rand(100),\n    'f2': np.random.rand(100),\n    'f3': np.random.rand(100)\n})\n\n# Initialize the StandardScaler\nscaler = StandardScaler()\n\n# Fit the scaler on the target data\nscaler.fit(data[['t']])\n\n# Transform the target data\ndata['scaled_t'] = scaler.transform(data[['t']])\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(data[['f1', 'f2', 'f3']], data['scaled_t'], test_size=0.2, random_state=42)\n\n# Initialize and train the regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict using the model\npredictions_scaled = model.predict(X_test)\n\n# Inverse transform the scaled predictions to get the original scale\npredictions = scaler.inverse_transform(predictions_scaled.reshape(-1, 1))\n\n# Print the first 5 predicted values\nprint(predictions[:5])\n### END SOLUTION\n"], "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": ["model_name = model.__class__.__name__\nprint(f'Name Model: {model_name}')\n<code>"], "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": ["model_name = model.__class__.__name__\nprint(f'Name Model: {model_name}, Mean Score: {np.mean(scores)}')\n<code>"], "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": ["model_name = model.__class__.__name__\n<code>"], "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": ["tf_idf_out = pipe.named_steps['tf_idf'].fit_transform(data)\n<code>"], "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": ["<code>\n# Fit the pipeline up to the 'tf_idf' step\ntf_idf_transformer = pipe.named_steps['tf_idf']\ntf_idf_out = tf_idf_transformer.fit_transform(data.test)\n"], "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": ["pipe.fit(data, target)\nselect_out = pipe.named_steps['select'].transform(data)\n"], "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": ["clf = GridSearchCV(bc, param_grid)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)"], "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": ["import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Sample data\nX = np.array([[735233.27082176], [735234.27082176], [735235.27082176], [735236.27082176],\n              [735237.27082176], [735238.27082176], [735239.27082176], [735240.27082176],\n              [735241.27082176], [735242.27082176], [735243.27082176], [735244.27082176],\n              [735245.27082176], [735246.27082176], [735247.27082176], [735248.27082176]])\ny = np.array([0.0, 136.094276, 4466.08221, 8726.60888, 13137.5786, 17358.0193, 22942.0671,\n              31221.6341, 41139.5711, 50797.2062, 61490.4935, 73427.5322, 78733.3933,\n              84630.2456, 97107.4959, 107146.672])\n\n# Create the regressor\nregressor = RandomForestRegressor(n_estimators=150, random_state=42)\n\n# Fit the model\nregressor.fit(X, y)\n\n# Predict using the same X for simplicity\npredict = regressor.predict(X)\nprint(predict)\n<code>"], "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": ["import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Example data\nX = np.array([[233.176], [234.270], [235.270], [523.176],\n              [237.176], [238.270], [239.270], [524.176],\n              [241.176], [242.270], [243.270], [524.176],\n              [245.176], [246.270], [247.270], [524.176]])\ny = np.array([0.00, 1.36, 4.46, 8.72, 1.31, 1.73, 2.29, 3.12,\n              4.11, 5.07, 6.14, 7.34, 7.87, 8.46, 9.71, 1.07])\n\n# Create the regressor\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=2, random_state=42)\n\n# Fit the model\nregressor.fit(X, y)\n\n# Example prediction\npredict = regressor.predict(X)\n<code>"], "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": ["def preprocess(s):\n    return s.upper()\n\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n\n# Example usage\ntexts = [\"Hello world\", \"Learning is fun with Python\"]\ntransformed_texts = tfidf.fit_transform(texts)\n\nprint(transformed_texts)\n<code>"], "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": ["def prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n<code>"], "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": ["scaled_data = preprocessing.scale(data)\ndf_out = pd.DataFrame(scaled_data, index=data.index, columns=data.columns)\n"], "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": ["scaled_data = preprocessing.scale(data)\ndf_out = pd.DataFrame(scaled_data, index=data.index, columns=data.columns)\n<code>"], "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": ["<code>\ngrid.fit(X, y)\ncoef = grid.best_estimator_.named_steps['model'].coef_\nprint(coef)\n"], "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": ["<code>\ngrid.fit(X, y)\nbest_model = grid.best_estimator_.named_steps['model']\ncoef = best_model.coef_\nprint(coef)\n"], "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": ["column_names = X.columns[model.get_support()]\nprint(column_names)\n<code>"], "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": ["<code>\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\n# Load data\ndf = pd.read_csv('los_10_one_encoder.csv')\ny = df['LOS']  # Target variable\nX = df.drop('LOS', axis=1)  # Features\n\n# Train classifier\nclf = ExtraTreesClassifier(random_state=42)\nclf.fit(X, y)\n\n# Feature selection\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\n\n# Get selected feature names\nselected_features = X.columns[model.get_support()]\nprint(selected_features)\n"], "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": ["selected_features = X.columns[model.get_support()]\nprint(selected_features)\n<code>"], "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": ["selected_features = X.columns[model.get_support()]\nprint(selected_features.tolist())\n<code>"], "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": ["distances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\nclosest_indices = np.argsort(distances)[:50]\nclosest_50_samples = X[closest_indices]\n"], "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": ["km.fit(X)\ncenters = km.cluster_centers_\ndistances = np.linalg.norm(X - centers[p], axis=1)\nclosest_indices = np.argsort(distances)[:50]\nclosest_50_samples = X[closest_indices]\n"], "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": ["distances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\nclosest_indices = np.argsort(distances)[:100]\nclosest_100_samples = X[closest_indices]\n"], "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": ["<code>\n    km.fit(X)\n    distances = km.transform(X)[:, p]\n    closest_indices = np.argsort(distances)[:50]\n    closest_samples = X[closest_indices]\n    return closest_samples\n### END SOLUTION\n"], "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": ["<code>\nX_train = pd.get_dummies(X_train)\n"], "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": ["<code>\nX_train = pd.get_dummies(X_train)\n"], "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": ["<code>\nfrom sklearn.svm import SVR\n\n# Create the SVM model with a Gaussian kernel (rbf)\nmodel = SVR(kernel='rbf')\n\n# Fit the model\nmodel.fit(X, y)\n\n# Predict using the model\npredict = model.predict(X)\n"], "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": ["<code>\nfrom sklearn.svm import SVR\n\n# Create the SVM regressor with a Gaussian kernel (rbf)\nsvm_regressor = SVR(kernel='rbf')\n\n# Fit the model\nsvm_regressor.fit(X, y)\n\n# Predict using the same data\npredict = svm_regressor.predict(X)\n"], "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": ["from sklearn.svm import SVR\n\n# Create the SVM regressor with a polynomial kernel of degree 2\nmodel = SVR(kernel='poly', degree=2)\n\n# Fit the model on the training data\nmodel.fit(X, y)\n\n# Predict using the fitted model\npredict = model.predict(X)\n"], "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": ["<code>\nfrom sklearn.svm import SVR\n\n# Create the SVM regressor with a polynomial kernel of degree 2\nsvm_regressor = SVR(kernel='poly', degree=2)\n\n# Fit the model\nsvm_regressor.fit(X, y)\n\n# Predict using the fitted model\npredict = svm_regressor.predict(X)\n"], "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": ["<code>\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Fit the vectorizer on the documents\ntfidf_matrix = tfidf.fit_transform(documents)\n\n# Transform queries to the same tf-idf weighted space\nquery_tfidf = tfidf.transform(queries)\n\n# Compute the cosine similarity between documents and queries\ncosine_similarities_of_queries = cosine_similarity(query_tfidf, tfidf_matrix)\n"], "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": ["<code>\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Fit the vectorizer on the documents\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_matrix = tfidf_vectorizer.fit_transform(documents)\n\n# Transform the queries using the already fitted vectorizer\nquery_tfidf = tfidf_vectorizer.transform(queries)\n\n# Calculate the cosine similarity between documents and queries\ncosine_similarities_of_queries = cosine_similarity(query_tfidf, tfidf_matrix)\n"], "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": ["<code>\n    query_vectors = tfidf.transform(queries)\n    document_vectors = tfidf.transform(documents)\n    cosine_similarities = np.dot(query_vectors, document_vectors.T).toarray()\n    return cosine_similarities\n### END SOLUTION\ncosine_similarities_of_queries = solve(queries, documents)\nprint(pd.DataFrame(cosine_similarities_of_queries, index=[\"Query 1\", \"Query 2\", \"Query 3\"], columns=[\"Document 1\", \"Document 2\", \"Document 3\", \"Document 4\", \"Document 5\"]))\n"], "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": ["<code>\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Define the list of features for each sample\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\n# Initialize the MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\n\n# Transform the list of features to a binary array\ntransformed_features = mlb.fit_transform(features)\n\n# Convert the binary array to a DataFrame for better readability\nfeature_df = pd.DataFrame(transformed_features, columns=mlb.classes_)\n"], "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": ["<code>\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nnew_f = mlb.fit_transform(f)\n"], "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\n# Example data\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\n# Initialize MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\n\n# Transform the list of features to a binary array\ntransformed_features = mlb.fit_transform(features)\n\n# Create a DataFrame for better visualization and usage\nnew_features = pd.DataFrame(transformed_features, columns=mlb.classes_)\n"], "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": ["<code>\nimport pandas as pd\nimport numpy as np\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\ndef solve(features):\n    # Extract unique features for column headers\n    unique_features = sorted(set(feature for sublist in features for feature in sublist))\n    \n    # Initialize a zero matrix with dimensions (number of samples, number of unique features)\n    feature_matrix = np.zeros((len(features), len(unique_features)), dtype=int)\n    \n    # Create a mapping of feature to column index\n    feature_index = {feature: idx for idx, feature in enumerate(unique_features)}\n    \n    # Fill the feature matrix\n    for i, sublist in enumerate(features):\n        for feature in sublist:\n            feature_matrix[i, feature_index[feature]] = 1\n    \n    # Convert to DataFrame for better readability\n    feature_df = pd.DataFrame(feature_matrix, columns=unique_features)\n    return feature_df\n\nnew_features = solve(features)\nprint(new_features)\n### END SOLUTION\n"], "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": ["<code>\n# Extract unique features from the list of lists\nall_features = set(feature for sublist in features for feature in sublist)\n\n# Create a DataFrame initialized with zeros\nfeature_df = pd.DataFrame(0, index=np.arange(len(features)), columns=all_features)\n\n# Set the appropriate entries to 1\nfor i, sublist in enumerate(features):\n    feature_df.loc[i, sublist] = 1\n\nnew_features = feature_df\n"], "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": ["from sklearn.cluster import AgglomerativeClustering\n\n# Define the distance matrix\ndata_matrix = [[0, 0.8, 0.9], [0.8, 0, 0.2], [0.9, 0.2, 0]]\n\n# Create an Agglomerative Clustering model\n# affinity='precomputed' tells the algorithm that we are providing a distance matrix\n# linkage='average' is one of the methods to calculate the distance between newly formed clusters\ncluster = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average')\n\n# Fit model to the distance matrix\ncluster_labels = cluster.fit_predict(data_matrix)\ncluster_labels\n<code>"], "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": ["import numpy as np\nfrom sklearn.cluster import AgglomerativeClustering\n\n# Define the distance matrix\ndata_matrix = np.array([[0, 0.8, 0.9], [0.8, 0, 0.2], [0.9, 0.2, 0]])\n\n# Create the model for Agglomerative Clustering\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\n\n# Fit the model with the distance matrix\ncluster_labels = clustering.fit_predict(data_matrix)\n"], "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": ["from sklearn.cluster import AgglomerativeClustering\n\n# Convert similarity matrix to distance matrix\ndistance_matrix = 1 - np.array(simM)\n\n# Perform clustering\nclustering = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = clustering.fit_predict(distance_matrix)\n"], "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": ["import scipy.cluster.hierarchy as sch\nfrom scipy.spatial.distance import squareform\n\n# Convert the similarity matrix to a distance matrix\ndistance_matrix = 1 - np.array(data_matrix)\n\n# Convert the upper triangular part of the distance matrix to a condensed distance matrix\ncondensed_distance_matrix = squareform(distance_matrix)\n\n# Perform hierarchical clustering\nZ = sch.linkage(condensed_distance_matrix, method='average')\n\n# Assign clusters\ncluster_labels = sch.fcluster(Z, t=2, criterion='maxclust')\n"], "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": ["import scipy.cluster.hierarchy as sch\nfrom scipy.spatial.distance import squareform\n\n# Convert the upper triangular matrix to a condensed distance matrix\ncondensed_matrix = squareform(data_matrix)\n\n# Perform hierarchical clustering\nZ = sch.linkage(condensed_matrix, method='average')\n\n# Assign clusters\ncluster_labels = sch.fcluster(Z, t=2, criterion='maxclust')\n"], "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": ["from scipy.cluster.hierarchy import linkage, fcluster\nfrom scipy.spatial.distance import squareform\n\n# Convert the similarity matrix to a distance matrix\ndistance_matrix = 1 - np.array(simM)\n\n# Convert the upper triangular part of the distance matrix to a condensed distance matrix\ncondensed_distance_matrix = squareform(distance_matrix)\n\n# Perform hierarchical clustering\nZ = linkage(condensed_distance_matrix, 'complete')\n\n# Form flat clusters\ncluster_labels = fcluster(Z, t=2, criterion='maxclust')\n"], "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": ["from sklearn.preprocessing import StandardScaler, PowerTransformer\n\n# Assuming 'data' is a numpy array of your predictors\nscaler = StandardScaler()\ndata_centered_scaled = scaler.fit_transform(data)\n\n# Applying PowerTransformer for Box-Cox transformation\npt = PowerTransformer(method='box-cox')\n# Note: Box-Cox requires input data to be strictly positive. Shift data if necessary.\ndata_transformed = pt.fit_transform(data_centered_scaled)\n\ncentered_scaled_data = data_transformed\n"], "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": ["from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n"], "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": ["<code>\nfrom sklearn.preprocessing import PowerTransformer\n\n# Create a PowerTransformer object with Box-Cox transformation method\nbox_cox_transformer = PowerTransformer(method='box-cox')\n\n# Fit and transform the data\nbox_cox_data = box_cox_transformer.fit_transform(data)\n"], "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": ["<code>\nfrom sklearn.preprocessing import PowerTransformer\nbox_cox_transformer = PowerTransformer(method='box-cox')\nbox_cox_data = box_cox_transformer.fit_transform(data.reshape(-1, 1))\n"], "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": ["from sklearn.preprocessing import PowerTransformer\n\n# Create a PowerTransformer object with Yeo-Johnson method\ntransformer = PowerTransformer(method='yeo-johnson')\n\n# Fit and transform the data\nyeo_johnson_data = transformer.fit_transform(data)\n"], "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": ["<code>\nfrom sklearn.preprocessing import PowerTransformer\ntransformer = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = transformer.fit_transform(data)\n"], "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": ["<code>\nvectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w\\w+\\b|[!?\\\"']\")\ntransformed_text = vectorizer.fit_transform([text])\n"], "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": ["<code>\nfrom sklearn.model_selection import train_test_split\n\n# Splitting the dataset into training and testing sets\ntrain_set, test_set = train_test_split(dataset, test_size=0.2, random_state=42)\n\n# Splitting the training and testing sets into x (features) and y (target)\nx_train = train_set.iloc[:, :-1]\ny_train = train_set.iloc[:, -1]\nx_test = test_set.iloc[:, :-1]\ny_test = test_set.iloc[:, -1]\n"], "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": ["<code>\nfrom sklearn.model_selection import train_test_split\n\n# Assuming 'data' is your DataFrame\nX = data.iloc[:, :-1]  # all columns except the last one\ny = data.iloc[:, -1]   # the last column\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n"], "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": ["<code>\nfrom sklearn.model_selection import train_test_split\n\n# Splitting the dataset into training and testing sets\ntrain_set, test_set = train_test_split(dataset, test_size=0.4, random_state=42)\n\n# Splitting the training set into x (features) and y (target)\nx_train = train_set.iloc[:, :-1]\ny_train = train_set.iloc[:, -1]\n\n# Splitting the testing set into x (features) and y (target)\nx_test = test_set.iloc[:, :-1]\ny_test = test_set.iloc[:, -1]\n"], "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": ["from sklearn.model_selection import train_test_split\n\ndef load_data():\n    return pd.read_csv('example.csv', header=None, sep=',')\n\ndef solve(data):\n    # Splitting the dataset into features and target variable\n    X = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n    \n    # Splitting the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    return X_train, y_train, X_test, y_test\n\n### END SOLUTION\n<code>"], "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n# Load data\ndf = pd.read_csv(\"your_data.csv\")\n\n# Reshape data\nmse_values = df['mse'].values.reshape(-1, 1)\n\n# Apply KMeans clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(mse_values)\nlabels = kmeans.labels_\n\n# Plotting\nplt.scatter(df.index, df['mse'], c=labels, cmap='viridis')\nplt.xlabel('Index')\nplt.ylabel('MSE')\nplt.title('K-Means Clustering on MSE')\nplt.show()\n"], "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": ["from sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\n\n# Load data\ndf = pd.read_csv(\"file.csv\")\n\n# Prepare data\nmse_values = df['mse'].values.reshape(-1, 1)  # Reshape for KMeans\n\n# Clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(mse_values)\nlabels = kmeans.labels_\n\n# Output the cluster labels\nprint(labels)\n"], "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": ["<code>\nmodel = LinearSVC(penalty='l1', dual=False)\nmodel.fit(X, y)\ncoef = model.coef_.ravel()\nselected_indices = np.where(coef != 0)[0]\nselected_feature_names = np.array(vectorizer.get_feature_names())[selected_indices]\n"], "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": ["model = LinearSVC(penalty='l1', dual=False)\nmodel.fit(X, y)\ncoef = model.coef_.ravel()\nsupport = coef != 0\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[support]\n"], "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": ["<code>\n    svc = LinearSVC(penalty='l1', dual=False)\n    svc.fit(X, y)\n    model_coef = svc.coef_\n    selected_indices = np.where(model_coef != 0)[1]\n    selected_feature_names = np.array(vectorizer.get_feature_names())[selected_indices]\n    return selected_feature_names\n### END SOLUTION\nselected_feature_names = solve(corpus, y, vectorizer, X)\nprint(selected_feature_names)\n"], "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": ["vectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary=sorted({'Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', \"Java\", 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'}, key=lambda x: x.lower()))\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\nprint(feature_names)\nprint(X.toarray())\n"], "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": ["vectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\nprint(feature_names)\nprint(X.toarray())\n"], "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": ["vocabulary_ordered = ['Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX']\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary=vocabulary_ordered)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\nprint(feature_names)\nprint(X.toarray())\n"], "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": ["vocabulary_ordered = ['Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX']\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={word: idx for idx, word in enumerate(vocabulary_ordered)})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\nprint(feature_names)\nprint(X.toarray())\n"], "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": ["slopes = []\nfor col in df1.columns[1:]:  # Skip the 'Time' column\n    df2 = df1[['Time', col]].dropna()  # Drop rows where NaN appears in the current column\n    if not df2.empty:\n        X = df2[['Time']].values.reshape(-1, 1)  # Reshape for sklearn\n        Y = df2[col].values\n        model = LinearRegression().fit(X, Y)\n        slopes.append(model.coef_[0])  # Append the slope coefficient\n    else:\n        slopes.append(np.nan)  # Append NaN if data is insufficient\n"], "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": ["slopes = []\nfor col in df1.columns[1:]:  # Skip the 'Time' column\n    df2 = df1[['Time', col]].dropna()\n    if not df2.empty:\n        X = df2[['Time']]\n        Y = df2[col]\n        model = LinearRegression().fit(X, Y)\n        slopes.append(model.coef_[0])\n    else:\n        slopes.append(np.nan)\n"], "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": ["encoder = LabelEncoder()\ndf['Sex'] = encoder.fit_transform(df['Sex'])\ntransformed_df = df\n"], "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": ["encoder = LabelEncoder()\ndf['Sex'] = encoder.fit_transform(df['Sex'])\ntransformed_df = df\n"], "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": ["<code>\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\ndf = pd.read_csv('titanic.csv')\nencoder = LabelEncoder()\ndf['Sex'] = encoder.fit_transform(df['Sex'])\n"], "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": ["<code>\nElasticNet = linear_model.ElasticNet()\nElasticNet.fit(X_train, y_train)\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n"], "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": ["<code>\nscaler = MinMaxScaler()\n# Reshape the array to a single column\nreshaped = np_array.reshape(-1, 1)\n# Fit and transform the data\nscaled = scaler.fit_transform(reshaped)\n# Reshape back to original shape\ntransformed = scaled.reshape(np_array.shape)\n"], "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": ["<code>\nscaler = MinMaxScaler()\n# Reshape the array to a single column\nreshaped_array = np_array.reshape(-1, 1)\n# Fit and transform the data\nscaled_array = scaler.fit_transform(reshaped_array)\n# Reshape back to original shape\ntransformed = scaled_array.reshape(np_array.shape)\n"], "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": ["<code>\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Example data\nnp_array = np.array([[1, 2], [3, 4]])\n\n# Reshape the array to a single column\nreshaped_array = np_array.reshape(-1, 1)\n\n# Initialize the MinMaxScaler\nscaler = MinMaxScaler()\n\n# Fit and transform the data\nscaled_array = scaler.fit_transform(reshaped_array)\n\n# Reshape back to the original shape\nnormalized_array = scaled_array.reshape(np_array.shape)\n\nnormalized_array\n### END SOLUTION\n"], "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": ["close_buy1 = close[:-1].values\nm5 = ma50[:-1].values\nm10 = ma100[:-1].values\nma20 = ma200[:-1].values\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict(b)\n"], "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": ["new_X = pd.DataFrame(X).apply(lambda col: pd.factorize(col)[0]).values\nclf.fit(new_X, ['2', '3'])\n"], "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": ["<code>from sklearn.preprocessing import LabelEncoder\n\n# Convert string data to numerical data\nlabel_encoder = LabelEncoder()\nnew_X = np.array(X)\nnew_X[:, 0] = label_encoder.fit_transform(new_X[:, 0])\n\n# Fit the classifier\nclf.fit(new_X, ['2', '3'])\n"], "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": ["new_X = pd.DataFrame(X, columns=['feature1', 'feature2']).apply(pd.to_numeric, errors='coerce').fillna(0).values\nclf.fit(new_X, [4, 5])\n"], "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": ["```python\n# Convert the data types for numerical computation\ndataframe = dataframe.apply(pd.to_numeric)\n\n# Separating the data into dependent and independent variables\nX = dataframe.drop(\"Class\", axis=1)\ny = dataframe[\"Class\"]\n\n# Initialize the Logistic Regression model\nlogReg = LogisticRegression()\n\n# Fit the model\nlogReg.fit(X, y)\n\n# Make a prediction\npredict = logReg.predict(X)\n```"], "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": ["import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data\nfilename = \"animalData.csv\"\ndataframe = pd.read_csv(filename)\n\n# Drop the 'Name' column and replace 'Class' with numerical values\ndataframe = dataframe.drop([\"Name\"], axis=1)\ncleanup = {\"Class\": {\"Primary Hunter\": 0, \"Primary Scavenger\": 1}}\ndataframe.replace(cleanup, inplace=True)\n\n# Convert all columns to float except 'Class' which is now numerical\ndataframe = dataframe.astype(float)\n\n# Separate features and target\nX = dataframe.drop(\"Class\", axis=1)\ny = dataframe[\"Class\"]\n\n# Initialize and fit the logistic regression model\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n\n# Predict using the same features\npredict = logReg.predict(X)\n<code>"], "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": ["train_size = 0.2\nn = len(features_dataframe)\nsplit_index = int(n * train_size)\ntrain_dataframe = features_dataframe.iloc[:split_index]\ntest_dataframe = features_dataframe.iloc[split_index:]\n"], "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": ["# Assuming 'features_dataframe' is already sorted by date and 'date' is a column in the dataframe\ntotal_data = len(features_dataframe)\nsplit_index = int(total_data * 0.8)  # Calculate the index for 80% of the data\n\n# Splitting the data such that the test set is older than the train set\ntrain_dataframe = features_dataframe.iloc[split_index:]\ntest_dataframe = features_dataframe.iloc[:split_index]\n"], "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": ["train_size = 0.2\nn = len(features_dataframe)\nsplit_index = int(n * train_size)\ntrain_dataframe = features_dataframe.iloc[:split_index]\ntest_dataframe = features_dataframe.iloc[split_index:]\nreturn train_dataframe, test_dataframe\n### END SOLUTION\n"], "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": ["df[['X2_scale', 'X3_scale']] = df.groupby('Month')[['X2', 'X3']].transform(lambda x: scaler.fit_transform(x.to_numpy().reshape(-1, 1)).flatten())\n<code>"], "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": ["<code>\nfor month in myData['Month'].unique():\n    month_data = myData[myData['Month'] == month]\n    scaled_values = scaler.fit_transform(month_data[['A2', 'A3']])\n    myData.loc[myData['Month'] == month, 'new_A2'] = scaled_values[:, 0]\n    myData.loc[myData['Month'] == month, 'new_A3'] = scaled_values[:, 1]\n"], "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": ["<code>\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nwords = \"Hello @friend, this is a good day. #good.\"\ncount = CountVectorizer(token_pattern=r\"(?u)\\b\\w\\w+\\b|@\\w+|#\\w+\")\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\nprint(feature_names)\n"], "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": ["<code>\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nwords = \"ha @ji me te no ru bu ru wa, @na n te ko to wa na ka tsu ta wa. wa ta shi da ke no mo na ri za, mo u to kku ni \" \\\n        \"#de a 't te ta ka ra\"\n\n# Customizing the token pattern to include '@', '#' and alphabetic characters\ncount = CountVectorizer(lowercase=False, token_pattern=r\"(?u)@\\w+|#\\w+|\\b\\w+\\b\")\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\nprint(feature_names)\n"], "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": ["full_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nprint(full_results)\n"], "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": ["full_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results = full_results.sort_values(by='mean_fit_time')\n"], "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": ["import joblib\n\n# Assuming the model has been fitted as `fitted_model`\njoblib.dump(fitted_model, 'sklearn_model.pkl')\n"], "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": ["tfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarities = sklearn.metrics.pairwise.cosine_similarity(tfidf_matrix)\nsimilarity_df = pd.DataFrame(cosine_similarities, index=df['items'], columns=df['items'])\n"], "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": ["for param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n<code>"], "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": ["for param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n"], "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": ["for param_group in optim.param_groups:\n    param_group['lr'] = 0.0005\n<code>"], "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": ["for param_group in optim.param_groups:\n    param_group['lr'] = 0.0005\n"], "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": ["<code>\nweights = torch.FloatTensor(word2vec.wv.vectors)\nembedding = torch.nn.Embedding.from_pretrained(weights)\nembedded_input = embedding(input_Tensor)\n"], "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": ["<code>\nimport torch\nimport gensim\nfrom gensim.models import Word2Vec\nfrom gensim.test.utils import common_texts\nfrom torch import nn\n\n# Load pre-trained Word2Vec model\nmodel = Word2Vec(sentences=common_texts, vector_size=100, window=5, min_count=1, workers=4)\n\n# Extract the weights from the gensim model\nweights = torch.FloatTensor(model.wv.vectors)\n\n# Create a PyTorch embedding layer with the same dimensions\nembedding = nn.Embedding.from_pretrained(weights)\n\n# Define a function to embed input data using the pre-trained weights\ndef get_embedded_input(input_tensor):\n    return embedding(input_tensor)\n\n# Example usage\n# Assuming input_tensor is a tensor of indices for the words in the vocabulary\ninput_tensor = torch.LongTensor([0, 1, 2, 3, 4])  # Example tensor\nembedded_input = get_embedded_input(input_tensor)\nprint(embedded_input)\n### END SOLUTION\n"], "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": ["px = pd.DataFrame(x.numpy())"], "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": ["<code>\npx = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": ["<code>\npx = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": ["<code>\nC = B[:, A_log.bool()]\n"], "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": ["<code>\nimport torch\n\n# Define the tensor B and the logical index A_logical\nB = torch.LongTensor([[1, 2, 3], [4, 5, 6]])\nA_logical = torch.BoolTensor([True, False, True])\n\n# Use the logical index to select columns from B\nC = B[:, A_logical]\n"], "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": ["<code>\nC = B[:, A_log.bool()]\n"], "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": ["<code>\nC = B[:, A_log.bool()]\n"], "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": ["<code>\nimport torch\n\n# Define the tensor B and the logical index A_log\nB = torch.LongTensor([[1, 2, 3], [4, 5, 6]])\nA_log = torch.BoolTensor([True, False, True])\n\n# Use the logical index to select columns from B\nC = B[:, A_log]\nprint(C)\n### END SOLUTION\n"], "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": ["<code>\nC = B[:, A_log == 0]\n"], "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": ["C = B.index_select(1, idx)\n<code>"], "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": ["<code>\nx_tensor = torch.tensor([list(item) for item in x_array], dtype=torch.float16)\n"], "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": ["<code>\nx_tensor = torch.tensor(np.stack(x.tolist()).astype(np.float32))\n"], "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": ["<code>\nimport numpy as np\nimport torch\n\ndef convert_to_tensor(obj_array):\n    # Convert each sub-array to float32 and then stack them\n    tensor_list = [torch.tensor(a.astype(np.float32)) for a in obj_array]\n    return torch.stack(tensor_list)\n\n# Example usage:\nobj_array = np.array([\n    np.array([0.5, 1.0, 2.0], dtype=np.float16),\n    np.array([4.0, 6.0, 8.0], dtype=np.float16)\n], dtype=object)\n\ntensor = convert_to_tensor(obj_array)\nprint(tensor)\n### END SOLUTION\n"], "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": ["<code>\nimport torch\n\nlens = torch.tensor([3, 5, 4])\nmax_len = max(lens)\nmask = torch.arange(max_len)[None, :] < lens[:, None]\nmask = mask.long()\n"], "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": ["<code>\nimport torch\n\nlens = [1, 9, 3, 5]\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\n\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n"], "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": ["<code>\nimport torch\n\nlens = [3, 5, 4]\nmax_len = max(lens)\nmask = torch.zeros(len(lens), max_len, dtype=torch.long)\n\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n"], "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": ["<code>\nimport torch\n\ndef get_mask(lens):\n    max_len = max(lens)\n    mask = torch.zeros((len(lens), max_len), dtype=torch.long)\n    for i, length in enumerate(lens):\n        mask[i, :length] = 1\n    return mask\n\nlens = [3, 5, 4]\nmask = get_mask(lens)\nprint(mask)\n"], "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": ["<code>\nTensor_3D = torch.stack([torch.diag(v) for v in Tensor_2D])\n"], "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": ["<code>\nimport torch\n\ndef convert_to_diag_matrices(tensor_2d):\n    # Assuming tensor_2d is of shape [batch_size, n], where each row is to be converted to a diagonal matrix\n    batch_size, n = tensor_2d.shape\n    # Create a 3D tensor filled with zeros, where each slice along the first dimension will be a diagonal matrix\n    diag_matrices = torch.zeros(batch_size, n, n)\n    # Fill the diagonal of each matrix\n    for i in range(batch_size):\n        diag_matrices[i] = torch.diag(tensor_2d[i])\n    return diag_matrices\n\n# Example usage:\n# tensor_2d = torch.tensor([[1, 2], [3, 4]])\n# diag_matrices = convert_to_diag_matrices(tensor_2d)\n# print(diag_matrices)\n### END SOLUTION\n"], "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": ["b_expanded = b.expand_as(a)\nab = torch.cat((a, b_expanded), dim=0)\n"], "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": ["ab = torch.cat((a, b), dim=0)\n<code>"], "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": ["<code>\nimport torch\n\ndef solve(a, b):\n    # Ensure both tensors are on the same device and have the same dtype\n    b_expanded = b.expand_as(a)\n    ab = torch.cat((a, b_expanded), dim=0)\n    return ab\n\n# Example usage:\na = torch.randn(2, 11)\nb = torch.randn(1, 11)\nab = solve(a, b)\nprint(ab.shape)  # Should print torch.Size([3, 11])\n### END SOLUTION\n"], "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": ["<code>\nfor i, length in enumerate(lengths):\n    a[i, length:] = 0\n"], "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": ["<code>\nfor i, length in enumerate(lengths):\n    a[i, length:] = 2333\n"], "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": ["<code>\nfor i, length in enumerate(lengths):\n    a[i, :length] = 0\n"], "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": ["<code>\nfor i, length in enumerate(lengths):\n    a[i, :length] = 2333\n"], "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": ["<code>\ntensor_of_tensors = torch.stack(list_of_tensors)\n"], "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": ["<code>\nimport torch\n\n# Assuming all tensors in the list have the same shape\ntensor_list = [torch.randn(3), torch.randn(3), torch.randn(3)]\nnew_tensors = torch.stack(tensor_list)\n"], "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": ["<code>\nimport torch\n\nlist_of_tensors = [torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = torch.stack(list_of_tensors)\n### END SOLUTION\n"], "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": ["tensor_of_tensors = torch.stack(list_of_tensors)\n"], "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": ["<code>\nresult = t[torch.arange(t.size(0)), torch.tensor(idx)]\n"], "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": ["<code>\nresult = t[torch.arange(t.size(0)), torch.tensor(idx)]\n"], "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": ["<code>\nidx_torch = torch.from_numpy(idx)\nresult = torch.gather(t, 1, idx_torch.unsqueeze(1)).squeeze(1)\n"], "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": ["ids = ids.unsqueeze(-1).expand(-1, -1, x.size(2))\nresult = torch.gather(x, 1, ids).squeeze(1)\n<code>"], "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": ["result = torch.gather(x, 1, ids.expand(-1, 114)).squeeze(1)\n<code>"], "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": ["indices = torch.argmax(ids, dim=1)\nresult = torch.gather(x, 1, indices.unsqueeze(-1).expand(-1, -1, x.size(2))).squeeze(1)\n<code>"], "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": ["<code>\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n"], "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": ["<code>\ny = torch.argmax(softmax_output, dim=1).unsqueeze(1)\n"], "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": ["<code>\ny = torch.argmin(softmax_output, dim=1).unsqueeze(1)\n"], "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": ["<code>\nimport torch\n\ndef solve(softmax_output):\n    _, predicted_classes = torch.max(softmax_output, dim=1)\n    return predicted_classes.unsqueeze(1)\n\n# Example softmax output tensor\nsoftmax_output = torch.tensor([[0.2, 0.1, 0.7],\n                               [0.6, 0.2, 0.2],\n                               [0.1, 0.8, 0.1]])\n\n# Get the predicted classes\npredicted_classes = solve(softmax_output)\nprint(predicted_classes)\n"], "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": ["<code>\n    y = torch.argmin(softmax_output, dim=1)\n"], "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": ["```python\nimport torch\nimport torch.nn.functional as F\n\ndef cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, h, w), target: (n, h, w)\n    n, c, h, w = input.size()\n    # log_p: (n, c, h, w)\n    log_p = F.log_softmax(input, dim=1)\n    # log_p: (n*h*w, c)\n    log_p = log_p.permute(0, 2, 3, 1).contiguous().view(-1, c)\n    # target: (n*h*w,)\n    target = target.view(-1)\n    loss = F.nll_loss(log_p, target, weight=weight, reduction='sum')\n    if size_average:\n        loss /= target.size(0)\n    return loss\n\n# Example usage:\nimages = torch.randn(5, 7, 4, 4)  # Example tensor for images\nlabels = torch.randint(0, 7, (5, 4, 4))  # Example tensor for labels\nloss = cross_entropy2d(images, labels)\nprint(loss)\n```"], "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": ["<code>\ncnt_equal = torch.sum(A == B)\n"], "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": ["<code>\ncnt_equal = torch.sum(A == B)\n"], "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": ["cnt_not_equal = torch.sum(A != B)\n<code>"], "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": ["<code>\nimport torch\n\n# Example tensors\nA = torch.tensor([1, 2, 3, 4, 5])\nB = torch.tensor([1, 2, 0, 4, 0])\n\n# Counting equal elements\nequal_count = torch.sum(A == B).item()\n\nprint(equal_count)\n"], "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": ["<code>\ncnt_equal = torch.sum(A[-x:] == B[-x:]).item()\n"], "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": ["<code>\ncnt_not_equal = torch.sum(A[-len(A)//2:] != B[-len(B)//2:])\n"], "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": ["tensors_31 = [a[..., i:i+chunk_dim] for i in range(a.shape[3] - chunk_dim + 1)]\n<code>"], "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": ["tensors_31 = [a[:,:,i:i+chunk_dim,:,:] for i in range(a.shape[2] - chunk_dim + 1)]\n<code>"], "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": ["output = torch.where(mask.unsqueeze(2) == 1, clean_input_spectrogram, output)\n<code>"], "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": ["output[mask == 0] = clean_input_spectrogram[mask == 0]\n<code>"], "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": ["import torch\n\n# Example tensors\nx = torch.tensor([3, -1, 4, 5])\ny = torch.tensor([2, -2, 1, 7])\n\n# Compute the minimum by absolute values\nabs_min = torch.min(torch.abs(x), torch.abs(y))\n\n# Determine the sign from the original tensor where the minimum absolute value was taken\nsign_x = torch.sign(x)\nsign_y = torch.sign(y)\nsigns = torch.where(torch.abs(x) <= torch.abs(y), sign_x, sign_y)\n\n# Combine the signs with the minimum absolute values\nsigned_min = signs * abs_min\n<code>\n"], "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": ["import torch\n\n# Example tensors\nx = torch.tensor([-1, 2, 3, -4])\ny = torch.tensor([2, -3, 1, -5])\n\n# Compute the maximum of absolute values\nmax_abs = torch.max(torch.abs(x), torch.abs(y))\n\n# Determine the sign from x or y based on which absolute value was greater\nsign_x = torch.sign(x)\nsign_y = torch.sign(y)\nsigns = torch.where(torch.abs(x) >= torch.abs(y), sign_x, sign_y)\n\n# Multiply the maximum absolute values by the corresponding signs\nsigned_max = max_abs * signs\n"], "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": ["<code>\nimport torch\n\ndef solve(x, y):\n    abs_x = torch.abs(x)\n    abs_y = torch.abs(y)\n    min_abs = torch.min(abs_x, abs_y)\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    result = torch.where(abs_x <= abs_y, sign_x * min_abs, sign_y * min_abs)\n    return result\n\n# Example usage:\nx = torch.tensor([-3, 2, -8, 4])\ny = torch.tensor([5, -1, -7, 3])\nresult = solve(x, y)\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": ["softmax = torch.nn.Softmax(dim=1)\noutput = MyNet(input)\nprobabilities = softmax(output)\nconf, classes = torch.max(probabilities, 1)\nconfidence_score = conf.item()\n"], "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": ["<code>\nimport torch\n\n# Define the tensors\na = torch.Tensor([[1, 2, 3], [1, 2, 3]])\nb = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n\n# Calculate the average of the overlapping columns\noverlap = (a[:, -1] + b[:, 0]) / 2\n\n# Concatenate the non-overlapping and overlapping parts\nresult = torch.cat([a[:, :-1], overlap.unsqueeze(1), b[:, 1:]], dim=1)\n"], "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": ["<code>\nimport torch\n\ndef combine_tensors_with_overlap(a, b):\n    # Extract the overlapping columns\n    a_overlap = a[:, -1:]  # Last column of a\n    b_overlap = b[:, :1]   # First column of b\n\n    # Calculate the average of the overlapping columns\n    overlap_average = (a_overlap + b_overlap) / 2\n\n    # Concatenate all parts\n    result = torch.cat((a[:, :-1], overlap_average, b[:, 1:]), dim=1)\n    return result\n\n# Example tensors\na = torch.Tensor([[1, 2, 3], [1, 2, 3]])\nb = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n\n# Combine the tensors\nresult = combine_tensors_with_overlap(a, b)\nprint(result)\n"], "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": ["<code>\nimport torch\n\nt = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\npadding = torch.zeros((t.shape[0], 1), dtype=t.dtype)\nt_padded = torch.cat([padding, t, padding], dim=1)\ntop_bottom_padding = torch.zeros((1, t_padded.shape[1]), dtype=t.dtype)\nresult = torch.cat([top_bottom_padding, t_padded, top_bottom_padding], dim=0)\n"], "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": ["import torch\n\nt = torch.tensor([[1, 2], [3, 4]])\npadding = (1, 1, 1, 1)  # (padding_left, padding_right, padding_top, padding_bottom)\nresult = torch.nn.functional.pad(t, padding, \"constant\", 0)\nprint(result)\n<code>"], "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": ["t = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\npad = torch.tensor([-1, -1, -1, -1]).unsqueeze(0)\nt_padded = torch.cat([pad, t, pad])\nt_padded = torch.cat([torch.tensor([-1]).unsqueeze(1), t_padded, torch.tensor([-1]).unsqueeze(1)], dim=1)\nresult = t_padded\nprint(result)\n<code>"], "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": ["W = W.unsqueeze(0).unsqueeze(2)  # Reshape W to (1, hid_dim, 1) for broadcasting\nresult = torch.bmm(data, W).squeeze(-1)  # Perform batch matrix multiplication and squeeze the last dimension\nresult = result.view(10, 2, 3)  # Reshape result to (10, 2, 3)\n"], "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
