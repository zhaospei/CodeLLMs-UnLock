{"id": 0, "code": ["result = df.reindex(List)\n"], "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": ["df_new = df.reindex(List)\nresult = sum(df_new['Type'] != df['Type'])\n"], "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": ["for col in df.columns:\n    counts = df[col].value_counts()\n    mask = df[col].map(counts) < 2\n    df.loc[mask, col] = 'other'\nresult = df\n"], "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": ["for col in df.columns:\n    counts = df[col].value_counts()\n    mask = df[col].isin(counts[counts >= 3].index)\n    df.loc[~mask, col] = 'other'\nresult = df\n"], "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": ["<code>\n    for col in df.columns:\n        counts = df[col].value_counts()\n        mask = df[col].isin(counts[counts < 2].index)\n        df.loc[mask, col] = 'other'\n    return df\n### END SOLUTION\n"], "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": ["for col in df.columns:\n    if col == 'Qu1':\n        value_counts = df[col].value_counts()\n        to_remove = value_counts[value_counts < 3].index\n        df[col].replace(to_remove, 'other', inplace=True)\n    else:\n        value_counts = df[col].value_counts()\n        to_remove = value_counts[value_counts < 2].index\n        df[col].replace(to_remove, 'other', inplace=True)\nresult = df\n"], "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": ["for col in ['Qu1', 'Qu2', 'Qu3']:\n    if col == 'Qu1':\n        mask = df[col].map(df[col].value_counts()) < 3\n        df.loc[mask, col] = df.loc[mask, col].apply(lambda x: 'other' if x != 'apple' else x)\n    else:\n        mask = df[col].map(df[col].value_counts()) < 2\n        df.loc[mask, col] = 'other'\n\nresult = df\n"], "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": ["df_no_dup = df[df['keep_if_dup'] == 'No'].drop_duplicates(subset='url', keep='first')\ndf_yes_dup = df[df['keep_if_dup'] == 'Yes']\nresult = pd.concat([df_no_dup, df_yes_dup]).sort_index()\n"], "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": ["df_yes = df[df['drop_if_dup'] == 'Yes'].drop_duplicates(subset='url', keep='first')\ndf_no = df[df['drop_if_dup'] == 'No']\nresult = pd.concat([df_yes, df_no]).sort_index()\n"], "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": ["df_no = df[df['keep_if_dup'] == 'No'].drop_duplicates(subset='url', keep='last')\ndf_yes = df[df['keep_if_dup'] == 'Yes']\nresult = pd.concat([df_no, df_yes]).sort_index()\n"], "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": ["def nested_dict(df):\n    if len(df.columns) == 1:\n        if df.values.size == 1: return df.values[0][0]\n        return df.values.squeeze()\n    grouped = df.groupby(df.columns[0])\n    d = {k: nested_dict(g.iloc[:,1:]) for k,g in grouped}\n    return d\n\nresult = nested_dict(df)\n"], "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": ["df['datetime'] = df['datetime'].dt.tz_localize(None)\n"], "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": ["<code>\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    return df\n### END SOLUTION\n"], "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": ["df['datetime'] = df['datetime'].dt.tz_localize(None)\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf = df.sort_values(by='datetime')\n"], "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": ["df['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values(by='datetime')\n"], "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": ["def parse_message(message):\n    message = message.strip('[]')\n    pairs = message.split(',')\n    return {pair.split(':')[0].strip(): pair.split(':')[1].strip() for pair in pairs}\n\ndf['message'] = df['message'].apply(parse_message)\nresult = pd.concat([df.drop('message', axis=1), df['message'].apply(pd.Series)], axis=1)\nresult.fillna('none', inplace=True)\n"], "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": ["df.loc[df['product'].isin(products), 'score'] *= 10\n"], "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": ["df['score'] = df.apply(lambda row: row['score']*10 if row['product'] not in products else row['score'], axis=1)\n"], "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": ["for product_range in products:\n    df.loc[df['product'].between(product_range[0], product_range[1]), 'score'] *= 10\n"], "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": ["df.loc[df['product'].isin(products), 'score'] = (df['score'] - df['score'].min()) / (df['score'].max() - df['score'].min())\n"], "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": ["df['category'] = df.apply(lambda row: row.idxmax(), axis=1)\n"], "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": ["df['category'] = df.idxmin(axis=1)\n"], "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": ["df['category'] = df.apply(lambda row: row[row == 1].index.tolist(), axis=1)\n"], "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": ["df['Date'] = df['Date'].dt.strftime('%b-%Y')\n"], "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": ["df['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n"], "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": ["df = df[(df['Date'] > pd.to_datetime(List[0])) & (df['Date'] < pd.to_datetime(List[1]))]\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y %A')\n"], "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": ["df['#1'] = df['#1'].shift(-1)\ndf['#1'].iloc[0] = df['#1'].iloc[-1]\n"], "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": ["df['#1'] = df['#1'].shift(-1)\ndf['#1'].iloc[-1] = df['#1'].iloc[0]\n"], "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": ["df['#1'] = df['#1'].shift(1)\ndf['#1'].iloc[0] = df['#1'].iloc[-1]\n\ndf['#2'] = df['#2'].shift(-1)\ndf['#2'].iloc[-1] = df['#2'].iloc[0]\n"], "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": ["from sklearn.metrics import r2_score\n\nmin_r2 = r2_score(df['#1'], df['#2'])\nmin_df = df.copy()\n\nfor i in range(1, len(df)):\n    df['#1'] = df['#1'].shift(-1)\n    df.iloc[0, df.columns.get_loc('#1')] = df['#1'].iloc[-1]\n    r2 = r2_score(df['#1'], df['#2'])\n    if r2 < min_r2:\n        min_r2 = r2\n        min_df = df.copy()\n\ndf = min_df\n"], "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": ["df.columns = [col + 'X' for col in df.columns]\n"], "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": ["df.columns = 'X' + df.columns\n"], "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": ["df.columns = ['X' + col if not col.endswith('X') else col for col in df.columns]\n"], "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": ["agg_dict = {col: 'mean' for col in df.columns if 'val' in col}\nagg_dict['group_color'] = 'first'\nresult = df.groupby('group').agg(agg_dict)\n"], "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": ["agg_dict = {col: 'sum' for col in df.columns if 'val' in col}\nagg_dict['group_color'] = 'first'\nresult = df.groupby('group').agg(agg_dict)\n"], "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": ["agg_dict = {col: 'mean' if col.endswith('2') else 'sum' for col in df.columns if col not in ['group', 'group_color']}\nagg_dict['group_color'] = 'first'\nresult = df.groupby('group').agg(agg_dict)\n"], "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": ["result = df.loc[row_list, column_list].mean()\n"], "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": ["result = df.loc[row_list, column_list].sum()\n"], "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": ["result = df.loc[row_list, column_list].sum()\nresult = result.drop(result.idxmax())\n"], "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": ["result = df.apply(lambda x: x.value_counts()).T.stack()\n"], "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": ["result = df.isnull().sum()\n"], "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": ["result = \"\"\nfor col in df:\n    result += f\"---- {col} ---\\n\"\n    result += str(df[col].value_counts()) + \"\\n\"\n"], "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": ["# Read the excel file\nxl = pd.ExcelFile(\"nanonose.xls\")\n\n# Parse the first sheet of the excel file into a data frame\ndf = xl.parse(\"Sheet1\")\n\n# Drop the second column\ndf = df.drop('Unnamed: 2', axis=1)\n\n# Merge the first two rows\ndf.columns = df.iloc[0] + ' ' + df.iloc[1].astype(str)\n\n# Drop the first two rows\ndf = df.iloc[2:]\n\n# Print the data frame\nprint(df)\n"], "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": ["df.columns = df.iloc[0].fillna('') + df.iloc[1].fillna('')\ndf = df.iloc[2:]\ndf.reset_index(drop=True, inplace=True)\nresult = df\n"], "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": ["result = df.apply(lambda x: pd.Series(np.concatenate([x.dropna().values, [np.nan]*x.isna().sum()])), axis=1)\n"], "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": ["result = df.apply(lambda x: pd.Series(np.concatenate([x[x.isnull()].values, x[x.notnull()].values])), axis=1)\n"], "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": ["result = df.apply(lambda x: pd.Series(np.concatenate([x[x.isnull()], x.dropna()])), axis=0)\n"], "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": ["df_below_threshold = df[df['value'] < thresh]\ndf_above_threshold = df[df['value'] >= thresh]\nsum_below_threshold = df_below_threshold['value'].sum()\ndf_above_threshold.loc['X'] = sum_below_threshold\nresult = df_above_threshold\n"], "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": ["df_below_thresh = df[df['value'] < thresh]\ndf_above_thresh = df[df['value'] >= thresh]\navg_above_thresh = df_above_thresh['value'].mean()\ndf_result = df_below_thresh.append(pd.DataFrame({'value': avg_above_thresh}, index=['X']))\nresult = df_result\n"], "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": ["df_outside_section = df[(df['value'] < section_left) | (df['value'] > section_right)]\ndf_inside_section = df[(df['value'] >= section_left) & (df['value'] <= section_right)]\naverage_value = df_outside_section['value'].mean()\ndf_average = pd.DataFrame({'value': [average_value]}, index=['X'])\nresult = pd.concat([df_inside_section, df_average])\n"], "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": ["result = df.assign(**{f'inv_{col}': 1/df[col] for col in df.columns})\n"], "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": ["import numpy as np\n\nresult = df.copy()\nfor col in df.columns:\n    result['exp_' + col] = np.exp(df[col])\n"], "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": ["result = df.assign(**{f'inv_{col}': 1/df[col].replace(0, float('inf')) for col in df.columns})\n"], "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": ["import numpy as np\n\nfor col in df.columns:\n    df['sigmoid_'+col] = df[col].apply(lambda x: 1/(1+np.exp(-x)))\n\nresult = df\n"], "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": ["result = df.where(df.values == df.cummax().values).apply(lambda x: x.idxmax() if x.notna().any() else np.nan)\n"], "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": ["result = df.where(df.ge(df.min()).cummin()).idxmax()\n"], "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": ["df = df.set_index(['dt', 'user']).unstack(fill_value=0).stack().sort_index(level=1).reset_index()\ndf['dt'] = pd.date_range(start=df.dt.min(), end=df.dt.max())\nresult = df\n"], "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": ["df = df.set_index(['dt', 'user']).unstack(fill_value=0).stack().sort_index(level=1).reset_index()\ndf['dt'] = pd.date_range(start=df.dt.min(), end=df.dt.max())\nresult = df\n"], "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": ["df.set_index('dt').groupby('user').resample('D').asfreq().fillna(233).reset_index()\n"], "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": ["df = df.set_index('dt').groupby('user').resample('D').max().reset_index()\ndf['val'] = df.groupby('user')['val'].ffill()\nresult = df\n"], "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": ["df = df.set_index('dt').groupby('user').resample('D').max().reset_index()\ndf['val'] = df.groupby('user')['val'].ffill()\ndf['dt'] = df['dt'].dt.strftime('%d-%b-%Y')\nresult = df\n"], "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": ["df['name'] = df['name'].astype('category')\ndf['name'] = df['name'].cat.codes\n"], "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": ["df['a'] = df['name'].astype('category').cat.codes + 1\n"], "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": ["<code>\n    unique_names = df['name'].unique()\n    name_to_id = {name: id for id, name in enumerate(unique_names, start=1)}\n    df['name'] = df['name'].map(name_to_id)\n    return df\n### END SOLUTION\n"], "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": ["df['ID'] = df.groupby(['name', 'a']).ngroup() + 1\ndf = df.drop(['name', 'a'], axis=1)\nresult = df\n"], "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": ["df = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\n"], "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": ["df = df.melt(id_vars='user', var_name='others', value_name='value')\n"], "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": ["df = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna(subset=['value'])\ndf = df.sort_values('user')\n"], "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": ["result = df.loc[df['c'] > 0.5, columns].values\n"], "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": ["result = df.loc[df['c'] > 0.45, columns].values\n"], "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": ["df = df[df['c'] > 0.5][columns]\nreturn df.to_numpy()\n### END SOLUTION\n"], "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": ["df = df[df['c'] > 0.5][columns]\ndf['sum'] = df[columns].sum(axis=1)\nreturn df\n### END SOLUTION\n"], "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": ["df = df[df['c'] > 0.5][columns]\nreturn df\n### END SOLUTION\n"], "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": ["df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\ndf['diff'] = df['date'].diff().dt.days\nresult = df[df['diff'] > X].drop('diff', axis=1)\n"], "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": ["df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\ndf['diff'] = df['date'].diff().dt.days / 7\nresult = df[df['diff'] > X]\n"], "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": ["df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\ndf['date_diff'] = df['date'].diff().dt.days\nresult = df[df['date_diff'] > X*7].drop('date_diff', axis=1)\n"], "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": ["df['col1'] = df.groupby(df.index // 3)['col1'].transform('mean')\nresult = df.drop_duplicates()\n"], "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": ["df['col1'] = df.groupby(df.index // 3)['col1'].transform('sum')\ndf = df.drop_duplicates().reset_index(drop=True)\nresult = df\n"], "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": ["result = df.groupby(df.index // 4).sum()\n"], "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": ["df['col1'] = df['col1'][::-1].rolling(window=3).mean()[::-1]\nresult = df.dropna()\n"], "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": ["def process_group(group):\n    if len(group) == 3:\n        return group.sum()\n    else:\n        return group.mean()\n\ngrouped = df.groupby(df.index // 3)\nresult = grouped.apply(process_group).reset_index(drop=True)\n"], "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": ["def bin_rows(df, bin_sizes, operations):\n    result = []\n    start = 0\n    for bin_size, operation in zip(bin_sizes, operations):\n        end = start + bin_size\n        if operation == 'sum':\n            result.append(df.iloc[start:end]['col1'].sum())\n        elif operation == 'avg':\n            result.append(df.iloc[start:end]['col1'].mean())\n        start = end\n    return pd.DataFrame({'col1': result})\n\nbin_sizes = [3, 2, 3, 2]\noperations = ['sum', 'avg', 'sum', 'avg']\n\nresult = bin_rows(df, bin_sizes, operations)\n"], "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": ["df['A'] = df['A'].replace(0, pd.NA)\ndf['A'] = df['A'].fillna(method='ffill')\n"], "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": ["df['A'] = df['A'].replace(0, pd.NA)\ndf['A'] = df['A'].bfill()\n"], "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": ["df['A'] = df['A'].replace(0, pd.np.nan)\ndf['A'] = df['A'].fillna(df['A'].bfill().where(df['A'].bfill() > df['A'].ffill(), df['A'].ffill()))\n"], "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": ["df['number'] = df['duration'].str.extract('(\\d+)').astype(int)\ndf['time'] = df['duration'].str.extract('([a-zA-Z]+)')\ndf['time_days'] = df['time'].map({'year': 365, 'day': 1, 'week': 7, 'month': 30})\n"], "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": ["df[['time', 'number']] = df['duration'].str.split(' ', expand=True)\ndf['number'] = df['number'].astype(int)\ndf['time_day'] = df['time'].map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n"], "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": ["df['number'] = df['duration'].str.extract('(\\d+)').astype(int)\ndf['time'] = df['duration'].str.extract('([a-zA-Z]+)')\ndf['time_days'] = df['time'].map({'year': 365, 'month': 30, 'week': 7, 'day': 1})\nreturn df\n### END SOLUTION\n"], "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": ["df[['time', 'number']] = df['duration'].str.split(' ', expand=True)\ndf['number'] = df['number'].astype(int)\ndf['time_day'] = df['time'].map({'year': 365, 'month': 30, 'week': 7, 'day': 1}) * df['number']\n"], "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": ["result = (df1[columns_check_list] != df2[columns_check_list]).any(axis=1).tolist()\nprint(result)\n"], "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": ["result = (df1[columns_check_list] == df2[columns_check_list]).all(axis=1).tolist()\nprint(result)\n"], "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": ["df.index = df.index.set_levels([df.index.levels[0], pd.to_datetime(df.index.levels[1])])\n"], "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": ["df.index = df.index.set_levels([df.index.levels[0], pd.to_datetime(df.index.levels[1])])\n"], "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": ["df.index = df.index.set_levels([df.index.levels[0], pd.to_datetime(df.index.levels[1])])\noutput = df.reset_index().values\nreturn output\n### END SOLUTION\n"], "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": ["df.index = df.index.set_levels([pd.to_datetime(df.index.levels[0]), df.index.levels[1]])\ndf = df.swaplevel(0, 1)\nreturn df\n### END SOLUTION\n"], "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": ["df = df.pivot(index='Country', columns='Variable').stack().reset_index()\ndf.columns = ['Country', 'Year', 'Var1', 'Var2']\ndf\n"], "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": ["df = df.melt(id_vars=['Country', 'Variable'], var_name='year')\ndf['year'] = df['year'].astype(int)\ndf = df.sort_values(['Country', 'Variable', 'year'], ascending=[True, True, False])\ndf = df.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf.columns.name = None\n"], "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": ["value_cols = [col for col in df.columns if 'Value' in col]\ndf = df[df[value_cols].abs().max(axis=1) < 1]\n"], "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": ["value_cols = [col for col in df.columns if 'Value' in col]\ndf = df[df[value_cols].abs().max(axis=1) > 1]\n"], "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": ["# get all columns starting with 'Value'\nvalue_cols = [col for col in df.columns if col.startswith('Value')]\n\n# rename columns\ndf.columns = [col.replace('Value_', '') for col in df.columns]\n\n# filter rows\ndf = df[df[value_cols].abs().max(axis=1) > 1]\n"], "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": ["df = df.replace('&AMP;', '&', regex=True)\n"], "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": ["df = df.replace('&LT;', '<', regex=True)\n"], "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": ["<code>\n    df = df.replace(to_replace ='&AMP;', value = '&', regex = True)\n    return df\n### END SOLUTION\n"], "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": ["df = df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n"], "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": ["df = df.replace({'&AMP;': '&'}, regex=True)\n"], "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": ["df[['first_name', 'last_name']] = df['name'].str.split(' ', 1, expand=True)\ndf['last_name'] = df['last_name'].where(df['last_name'].notna(), None)\n"], "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": ["df[['1_name', '2_name']] = df['name'].str.split(' ', 1, expand=True)\ndf['2_name'] = df['2_name'].where(df['2_name'].notna(), df['1_name'])\ndf['1_name'] = df.apply(lambda row: row['1_name'] if pd.isnull(row['2_name']) else row['name'], axis=1)\n"], "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": ["df[['first_name','middle_name','last_name']] = df['name'].str.split(' ', n=2, expand=True)\ndf.loc[df['middle_name'].isna(), 'last_name'] = None\ndf.loc[df['last_name'].isna(), 'middle_name'] = None\n"], "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": ["result = pd.merge_asof(df2, df1, on='Timestamp', direction='backward')\n"], "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": ["result = pd.merge_asof(df1, df2, on='Timestamp')\n"], "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": ["df['state'] = df.apply(lambda row: row['col1'] if row['col2'] <= 50 and row['col3'] <= 50 else max(row['col1'], row['col2'], row['col3']), axis=1)\n"], "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": ["df['state'] = df.apply(lambda row: row['col1'] if row['col2']>50 and row['col3']>50 else row['col1']+row['col2']+row['col3'], axis=1)\n"], "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": ["error_values = []\nfor value in df['Field1']:\n    if not isinstance(value, int):\n        error_values.append(value)\n"], "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": ["integer_values = []\n\nfor index, row in df.iterrows():\n    if isinstance(row['Field1'], int):\n        integer_values.append(row['Field1'])\n\nprint(integer_values)\n"], "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": ["<code>\ndef f(df):\n    error_values = [value for value in df['Field1'] if not isinstance(value, int)]\n    return error_values\n\nresult = f(example_df)\nprint(result)\n"], "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": ["df.set_index('cat', inplace=True)\ndf = df.div(df.sum(axis=1), axis=0)\n"], "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": ["df.set_index('cat', inplace=True)\ndf = df.div(df.sum())\ndf.reset_index(inplace=True)\n"], "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": ["result = df.loc[test]\n"], "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": ["result = df.loc[test]\n"], "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": ["result = df.drop(test)\n"], "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": ["df = df.loc[test]\ndf = df[~df.index.duplicated(keep='first')]\nreturn df\n### END SOLUTION\n"], "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": ["import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\n\ndef nearest_neighbour(group):\n    distances = pdist(group[['x', 'y']], 'euclidean')\n    distances = squareform(distances)\n    np.fill_diagonal(distances, np.inf)\n    nearest = np.argmin(distances, axis=1)\n    group['nearest_neighbour'] = group.iloc[nearest]['car'].values\n    group['euclidean_distance'] = np.min(distances, axis=1)\n    return group\n\ndf = df.groupby('time').apply(nearest_neighbour)\n"], "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": ["import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\n\ndef get_farthest_neighbour(df):\n    dists = squareform(pdist(df[['x', 'y']]))\n    np.fill_diagonal(dists, np.inf)\n    farthest_neighbour = np.argmax(dists, axis=1)\n    return df.iloc[farthest_neighbour]['car'].values, np.max(dists, axis=1)\n\ndf2 = df.groupby('time').apply(get_farthest_neighbour).reset_index()\ndf2[['farthest_neighbour', 'euclidean_distance']] = pd.DataFrame(df2[0].tolist(), index=df2.index)\ndf2 = df2.drop(columns=[0])\ndf2\n"], "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": ["df['keywords_all'] = df.apply(lambda row: ','.join(row.dropna().astype(str)), axis=1)\n"], "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": ["df['keywords_all'] = df.apply(lambda row: '-'.join(row.dropna().astype(str)), axis=1)\n"], "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": ["df['keywords_all'] = df[['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']].apply(lambda x: '-'.join(x.dropna().astype(str)), axis=1)\n"], "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": ["df['keywords_all'] = df[['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']].apply(lambda x: '-'.join(x.dropna()[::-1]), axis=1)\n"], "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": ["# Select 20% of the dataframe rows\nsample_df = df.sample(frac=0.2, random_state=0)\n\n# Set the Quantity of these rows to 0\ndf.loc[sample_df.index, 'Quantity'] = 0\n"], "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": ["# Select 20% of rows randomly\nsample_df = df.sample(frac=0.2, random_state=0)\n\n# Change the value of the ProductId column of these rows to zero\nsample_df['ProductId'] = 0\n\n# Update the original dataframe with the changes\ndf.update(sample_df)\n\n# Print the updated dataframe\nprint(df)\n"], "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": ["df.loc[df.groupby('UserId').apply(lambda x: x.sample(frac=0.2, random_state=0)).index, 'Quantity'] = 0\n"], "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": ["# create a dictionary where keys are tuples of row values and values are the first index they appeared at\nfirst_occurrences = {tuple(row[1]): row[0] for row in df.drop_duplicates().iterrows()}\n\n# create a new column that maps each row to the first index it appeared at\ndf['index_original'] = df.apply(lambda row: first_occurrences[tuple(row)], axis=1)\n\n# find the duplicate rows\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nresult = duplicate\n"], "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": ["df['index_original'] = df[df.duplicated(subset=['col1','col2'], keep=False)].groupby(['col1','col2']).transform('idxmax')\ndf = df[df.duplicated(subset=['col1','col2'], keep='first')]\n"], "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": ["<code>\n    df['index_original'] = df.loc[df.duplicated(subset=['col1','col2'], keep='first')].groupby(['col1','col2']).transform('first').index\n    return df\n"], "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": ["df['index_original'] = df.duplicated(subset=['col1','col2', '3col'], keep='first').groupby(df[['col1','col2', '3col']].apply(tuple, axis=1)).cumsum()\ndf['index_original'] = df['index_original'].map(df['index_original'].value_counts())\ndf.loc[df.duplicated(subset=['col1','col2', '3col'], keep=False)]\n"], "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": ["# create a dictionary where keys are tuples of col1 and col2 values and values are the corresponding index\nindex_dict = {tuple(row[1:3]):idx for idx, row in df.iterrows()}\n\n# create a new column 'index_original' by mapping the 'col1' and 'col2' values to the index_dict\ndf['index_original'] = list(map(index_dict.get, zip(df['col1'], df['col2'])))\n\n# find the duplicates\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nresult = duplicate\n"], "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": ["idx = df.groupby(['Sp','Mt'])['count'].transform(max) == df['count']\nresult = df[idx]\n"], "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": ["result = df.loc[df.groupby(['Sp','Mt'])['count'].idxmax()]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": ["idx = df.groupby(['Sp','Mt'])['count'].transform(min) == df['count']\nresult = df[idx]\n"], "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": ["idx = df.groupby(['Sp','Value'])['count'].transform(max) == df['count']\nresult = df[idx]\n"], "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": ["result = df[df['Category'].isin(filter_list)]\n"], "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": ["result = df[~df['Category'].isin(filter_list)]\n"], "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": ["result = pd.melt(df, value_vars=df.columns.tolist())\n"], "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": ["df.columns = df.columns.map('_'.join)\ndf = df.reset_index().melt(id_vars='index', var_name=['variable_0', 'variable_1', 'variable_2'])\ndf['variable_0'], df['variable_1'], df['variable_2'] = zip(*df['variable_0'].str.split('_'))\ndf = df.sort_values(['variable_0', 'index']).drop(columns='index')\n"], "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\n"], "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\n"], "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\n"], "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": ["df['cummax'] = df.groupby('id')['val'].cummax()\n"], "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": ["df['cumsum'] = df.groupby('id')['val'].cumsum()\ndf['cumsum'] = df['cumsum'].where(df['cumsum'] > 0, 0)\n"], "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": ["result = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False))\n"], "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": ["result = df.groupby('r')['v'].apply(lambda x: x.sum(skipna=False))\n"], "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": ["result = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False)).reset_index()\n"], "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": ["def relationship_type(df, col1, col2):\n    if df[col1].is_unique and df[col2].is_unique:\n        return 'one-to-one'\n    elif df[col1].is_unique and not df[col2].is_unique:\n        return 'one-to-many'\n    elif not df[col1].is_unique and df[col2].is_unique:\n        return 'many-to-one'\n    else:\n        return 'many-to-many'\n\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            result.append(f'{col1} {col2} {relationship_type(df, col1, col2)}')\n"], "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": ["def relationship_type(df, col1, col2):\n    if df[col1].is_unique and df[col2].is_unique:\n        return 'one-2-one'\n    elif df[col1].is_unique and not df[col2].is_unique:\n        return 'one-2-many'\n    elif not df[col1].is_unique and df[col2].is_unique:\n        return 'many-2-one'\n    else:\n        return 'many-2-many'\n\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            result.append(f'{col1} {col2} {relationship_type(df, col1, col2)}')\n"], "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": ["def relationship_type(col1, col2):\n    if len(col1.unique()) == len(col2.unique()) == len(set(zip(col1, col2))):\n        return 'one-to-one'\n    elif len(col1.unique()) == len(set(zip(col1, col2))):\n        return 'one-to-many'\n    elif len(col2.unique()) == len(set(zip(col1, col2))):\n        return 'many-to-one'\n    else:\n        return 'many-to-many'\n\nresult = pd.DataFrame({col1: {col2: relationship_type(df[col1], df[col2]) for col2 in df.columns} for col1 in df.columns})\n"], "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": ["def relationship_type(df, col1, col2):\n    if df[col1].is_unique:\n        if df[col2].is_unique:\n            return 'one-2-one'\n        else:\n            return 'one-2-many'\n    else:\n        if df[col2].is_unique:\n            return 'many-2-one'\n        else:\n            return 'many-2-many'\n\nresult = pd.DataFrame(index=df.columns, columns=df.columns)\n\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            result.loc[col1, col2] = relationship_type(df, col1, col2)\n"], "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": ["# sort by bank, na_position='last' will put NaN at the end\ndf = df.sort_values(by='bank', ascending=False, na_position='last')\n\n# drop duplicates, keep='first' will keep the first occurrence\nresult = df.drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='first')\n"], "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": ["result = pd.to_numeric(s.str.replace(',', ''), errors='coerce')\n"], "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": ["df['Family'] = ['Has Family' if (x > 0) | (y > 0) else 'No Family' for x, y in zip(df['SibSp'], df['Parch'])]\nresult = df.groupby('Family')['Survived'].mean()\n"], "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": ["df['Group'] = ['Has Family' if x > 0 or y > 0 else 'No Family' for x, y in zip(df['Survived'], df['Parch'])]\nresult = df.groupby('Group')['SibSp'].mean()\n"], "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": ["conditions = [\n    (df['SibSp'] == 1) & (df['Parch'] == 1),\n    (df['SibSp'] == 0) & (df['Parch'] == 0),\n    (df['SibSp'] == 0) & (df['Parch'] == 1),\n    (df['SibSp'] == 1) & (df['Parch'] == 0)\n]\n\nchoices = ['Has Family', 'No Family', 'New Family', 'Old Family']\n\ndf['Family'] = np.select(conditions, choices, default='Other')\n\nresult = df.groupby('Family')['Survived'].mean()\n"], "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": ["df = df.sort_values(['cokey', 'A'])\nresult = df\n"], "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": ["df = df.sort_values(['cokey', 'A'], ascending=[True, False])\n"], "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": ["df.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Lower'])\n"], "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": ["df.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Middle', 'Lower'])\n"], "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": ["df.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Middle', 'Lower'])\n"], "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": ["result = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n"], "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": ["result = df.groupby('a').b.agg(['mean', 'std'])\n"], "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": ["result = df.groupby('b').agg(['mean', 'std'])\n"], "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": ["import numpy as np\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef min_max(x):\n    return (x - x.min()) / (x.max() - x.min())\n\ndf['softmax'] = df.groupby('a')['b'].transform(softmax)\ndf['min-max'] = df.groupby('a')['b'].transform(min_max)\n"], "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": ["df = df.loc[:, (df != 0).any(axis=0)]\ndf = df.loc[(df != 0).any(axis=1)]\n"], "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": ["df = df.loc[:, (df != 0).any(axis=0)]\ndf = df.loc[(df != 0).any(axis=1)]\n"], "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": ["result = df.loc[:, (df.max() != 2)]\nresult = result.loc[(result.max(axis=1) != 2), :]\n"], "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": ["result = df.where(df != 2, 0)\n"], "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": ["result = s.sort_values(ascending=True).sort_index(kind='mergesort')\n"], "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": ["df = s.reset_index().sort_values(['index', 0]).reset_index(drop=True)\ndf.columns = ['index', 1]\n"], "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": ["df = df[pd.to_numeric(df['A'], errors='coerce').notnull()]\n"], "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": ["result = df[df['A'].apply(lambda x: isinstance(x, str))]\n"], "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": ["idx = df.groupby(['Sp','Mt'])['count'].transform(max) == df['count']\nresult = df[idx]\n"], "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": ["result = df.loc[df.groupby(['Sp','Mt'])['count'].idxmax()]\n"], "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": ["idx = df.groupby(['Sp','Mt'])['count'].transform(min) == df['count']\nresult = df[idx]\n"], "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": ["idx = df.groupby(['Sp','Value'])['count'].transform(max) == df['count']\nresult = df[idx]\n"], "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": ["df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n"], "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": ["df['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n"], "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": ["<code>\ndef f(dict, df):\n    df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n    return df\n"], "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": ["df['Date'] = df['Member'].map(dict)\ndf['Date'] = df['Date'].fillna('17/8/1926')\ndf['Date'] = pd.to_datetime(df['Date']).dt.strftime('%d-%b-%Y')\n"], "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": ["df['Date'] = pd.to_datetime(df['Date'], format= '%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.dt.to_period('M').map(df.groupby(df.Date.dt.to_period('M')).size())\ndf['Count_y'] = df.Date.dt.to_period('Y').map(df.groupby(df.Date.dt.to_period('Y')).size())\n"], "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": ["df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Date'].transform('count')\ndf['Count_m'] = df.groupby(df['Date'].dt.to_period('M'))['Date'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.to_period('Y'))['Date'].transform('count')\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Val'].transform('count')\n"], "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": ["df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Date'].transform('count')\ndf['Count_m'] = df.groupby(df['Date'].dt.to_period('M'))['Date'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.to_period('Y'))['Date'].transform('count')\ndf['Count_w'] = df.groupby(df['Date'].dt.to_period('W'))['Date'].transform('count')\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Val'].transform('count')\n"], "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": ["result1 = df.groupby('Date').apply(lambda x: (x == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: (x != 0).sum())\n"], "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": ["df['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\n\nresult1 = df.applymap(lambda x: x % 2 == 0).groupby('Date').sum()\nresult2 = df.applymap(lambda x: x % 2 != 0).groupby('Date').sum()\n"], "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": ["result = df.pivot_table(values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n"], "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": ["result = df.pivot_table(values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n"], "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": ["result = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n"], "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": ["result = df.pivot_table(index='B', \n                        aggfunc={'D': np.max, \n                                 'E': np.min})\n"], "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": ["df = df.assign(var2=df.var2.str.split(',')).explode('var2')\n"], "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": ["import dask.dataframe as dd\n\n# Convert pandas dataframe to dask dataframe\nddf = dd.from_pandas(df, npartitions=1)\n\n# Define a function to split and explode the column\ndef split_and_explode(df, column, sep=','):\n    df[column] = df[column].str.split(sep)\n    df = df.explode(column)\n    return df\n\n# Apply the function to the dask dataframe\nresult = ddf.map_partitions(split_and_explode, 'var2', meta=ddf)\n"], "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": ["# first, split the 'var2' column\ndf['var2'] = df['var2'].str.split('-')\n\n# then explode the 'var2' column\nresult = df.explode('var2')\nresult.reset_index(drop=True, inplace=True)\n"], "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": ["def count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if not string[i].isalpha():\n            special_char = special_char + 1\n    return special_char\n\ndf[\"new\"] = df[\"str\"].apply(count_special_char)\n"], "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": ["def count_alpha_chars(string):\n    alpha_chars = 0\n    for i in range(len(string)):\n        if(string[i].isalpha()):\n            alpha_chars = alpha_chars + 1\n    return alpha_chars\n\ndf[\"new\"] = df[\"str\"].apply(count_alpha_chars)\n"], "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": ["df[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n"], "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": ["df[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n"], "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": ["df[['fips','medi']] = df['row'].str.split(' ', 1, expand=True)\n"], "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": ["df.set_index('Name', inplace=True)\ndf = df.mask(df == 0).expanding(axis=1).mean().round(3)\n"], "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": ["df.set_index('Name', inplace=True)\ndf = df.iloc[:, ::-1]\ndf = df.mask(df == 0).expanding(1).mean().round(2)\ndf = df.iloc[:, ::-1]\n"], "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": ["<code>\ndef f(df):\n    df = df.set_index('Name')\n    df = df.replace(0, pd.NA)\n    df = df.expanding().mean().fillna(0)\n    return df.reset_index()\n\nresult = f(example_df)\n"], "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": ["df.set_index('Name', inplace=True)\ndf = df.iloc[:, ::-1]\ndf = df.replace(0, pd.NA)\ndf = df.expanding(axis=1).mean()\ndf = df.iloc[:, ::-1]\n"], "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": ["df['Label'] = (df['Close'].diff() > 0).astype(int)\ndf['Label'].iloc[0] = 1\n"], "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": ["df['label'] = df['Close'].diff().fillna(1)\ndf['label'] = df['label'].apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\n"], "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": ["df['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\ndf['label'].iloc[0] = 1\n"], "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": ["df['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = df['arrival_time'].shift(-1) - df['departure_time']\ndf\n"], "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": ["df['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = (df['arrival_time'].shift(-1) - df['departure_time']).dt.total_seconds()\ndf\n"], "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": ["df['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = (df['departure_time'].shift(-1) - df['arrival_time']).dt.total_seconds()\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf\n"], "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": ["df['count'] = df['key2'] == 'one'\nresult = df.groupby('key1')['count'].sum().reset_index()\n"], "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": ["result = df[df['key2'] == 'two'].groupby(['key1']).size().reset_index(name='count')\n"], "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": ["result = df[df['key2'].str.endswith('e')].groupby('key1').size().reset_index(name='count')\n"], "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": ["max_result = df.index.max()\nmin_result = df.index.min()\n"], "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": ["df.index = pd.to_datetime(df.index)\nmode_result = df.index.mode()[0]\nmedian_result = df.index.median()\n"], "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": ["result = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n"], "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": ["df = df[~(df['closing_price'].between(99, 101))]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": ["df['ranked'] = df.groupby('item')['diff'].rank(method='min')\nresult = df[df['ranked']==1].drop('ranked', axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": ["df['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: \"_\".join(x.split(\"_\")[:-1]) if \"_\" in x else x)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": ["df['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[-1]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": ["    df['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: \"_\".join(x.split(\"_\")[:-1]) if \"_\" in x else x)\n    return df\n\nexample_df = f(example_df)\nprint(example_df)\n</code>\n### END SOLUTION"], "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": ["# number of NaNs in the column\nn_nan = df['Column_x'].isna().sum()\n\n# fill first half with 0's and second half with 1's\ndf.loc[df['Column_x'].isna().iloc[:n_nan//2], 'Column_x'] = 0\ndf.loc[df['Column_x'].isna(), 'Column_x'] = 1\n</code>\nEND SOLUTION\nprint(df)"], "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": ["# Count the number of NaN values\nnum_nan = df['Column_x'].isna().sum()\n\n# Calculate a third of the number of NaN values\na_third = num_nan // 3\n\n# Get the index of where the NaN values are\nnan_index = df[df['Column_x'].isna()].index\n\n# Replace the first third of NaN values with 0\ndf.loc[nan_index[:a_third], 'Column_x'] = 0\n\n# Replace the second third of NaN values with 0.5\ndf.loc[nan_index[a_third:2*a_third], 'Column_x'] = 0.5\n\n# Replace the final third of NaN values with 1\ndf.loc[nan_index[2*a_third:], 'Column_x'] = 1\n</code>\nEND SOLUTION\ndf"], "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": ["# compute the number of NaNs to replace with 0 and 1\nnum_nan = df['Column_x'].isna().sum()\nfill_with_0 = num_nan // 2\nfill_with_1 = num_nan - fill_with_0\n\n# create mask for NaNs\nmask = df['Column_x'].isna()\n\n# replace first half NaNs with 0 and second half with 1\ndf.loc[mask][:fill_with_0] = 0\ndf.loc[mask][fill_with_0:] = 1\n\ndf\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": ["result = pd.DataFrame({col: list(zip(a[col], b[col])) for col in a.columns})\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": ["def make_tuples(*dfs):\n    return pd.DataFrame({col: list(tuple(d[col].tolist()) for d in dfs) for col in dfs[0].columns})\n\nresult = make_tuples(a, b, c)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": ["def tuple_df(*dfs):\n    df_lengths = [df.shape[0] for df in dfs]\n    max_len = max(df_lengths)\n\n    padded_dfs = []\n    for df in dfs:\n        padded_df = df.reindex(range(max_len))\n        padded_dfs.append(padded_df)\n\n    result = pd.concat(padded_dfs, axis=1)\n    result = result.apply(lambda x: tuple(x.dropna().tolist()), axis=1)\n\n    return result\n\na_b = tuple_df(a, b)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": ["result = df.groupby(['username', pd.cut(df.views, bins)]).size().unstack().fillna(0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": ["df['bins'] = pd.cut(df['views'], bins)\nresult = df.groupby(['username', 'bins']).size().unstack(fill_value=0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": ["result = df.groupby(['username', pd.cut(df.views, bins)]).size().unstack().fillna(0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": ["df['text'] = df['text'].apply(lambda x: x + ',')\nresult = pd.DataFrame({'text': [df['text'].sum()[:-1]]}) \n</code> \nEND SOLUTION"], "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": ["df['text'] = df['text'].str.cat(sep='-')\nresult = pd.DataFrame(df['text'].iloc[[0]])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": ["result = pd.DataFrame({'text': [', '.join(df['text'][::-1])]})\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": ["result = pd.Series(df['text'].str.cat(sep=', ')).to_frame()\nresult.columns = ['text']\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": ["result = pd.Series({'text': '-'.join(df['text'][::-1])})\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": ["df2 = df2.merge(df1[['id', 'city', 'district']], on='id', how='left')\nresult = pd.concat([df1, df2], axis=0, sort=False).reset_index(drop=True)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": ["# Merge df1 and df2 on 'id' and fill NaN's with the value from df1\ndf3 = pd.merge(df1, df2, on='id', how='outer')\n\n# Convert 'date' to datetime\ndf3['date'] = pd.to_datetime(df3['date'])\n\n# Reorder by 'date'\ndf3.sort_values(['id', 'date'], ascending=[True, False], inplace=True)\n\n# Reset the index\ndf3.reset_index(drop=True, inplace=True)\n\n# Change the date format\ndf3['date'] = df3['date'].dt.strftime('%d-%b-%Y')\n</code>\nEND SOLUTION\nresult = df3"], "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": ["# merge df1 and df2 on 'id' to get 'city' and 'district'\ndf3 = pd.merge(df2, df1[['id', 'city', 'district']], on='id', how='left')\n\n# concatenate df1 and df3\ndf = pd.concat([df1, df3], sort=False)\n\n# sort values\ndf.sort_values(by=['id', 'date'], inplace=True)\n\n# reset index\ndf.reset_index(drop=True, inplace=True)\nresult = df\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": ["# first merge the dataframes\nmerged_df = C.merge(D, on='A', how='left', suffixes=('', '_y'))\n\n# now can fill NaN values in B with B_y values\nmerged_df['B'].fillna(merged_df['B_y'], inplace=True)\n\n# delete the B_y column\nmerged_df.drop('B_y', axis=1, inplace=True)\n\n# now add the missing rows from D to the merged dataframe\nmissing_rows = D[~D.A.isin(merged_df.A)]\nresult = pd.concat([merged_df, missing_rows], ignore_index=True)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": ["result = pd.concat([C,D]).drop_duplicates(['A'], keep='first')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": ["# Merge C and D with indicator\nresult = pd.merge(C, D, how='outer', on='A', suffixes=['', '_d'], indicator=True)\n\n# Replace values in column B where _merge value is 'both'\nresult.loc[result['_merge'] == 'both', 'B'] = result.loc[result['_merge'] == 'both', 'B_d']\n\n# Create the 'dulplicated' column based on the value of _merge column\nresult['dulplicated'] = (result['_merge'] == 'both')\n\n# Drop the unnecessary columns\nresult = result.drop(columns=['B_d', '_merge'])\n\n# Fill the NaN values with False\nresult['dulplicated'].fillna(False, inplace=True)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": ["df = df.sort_values(['user', 'time'])\nresult = df.groupby('user')[['time', 'amount']].apply(lambda x: list(map(list, x.values)))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": ["df['tuple'] = list(zip(df.time, df.amount))\nresult = df.groupby('user')['tuple'].apply(list)\nresult\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": ["df['tuples'] = list(zip(df.time, df.amount))\nresult = df.sort_values('time').groupby('user')['tuples'].apply(list)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": ["df = pd.DataFrame(series.tolist(), index=series.index)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": ["df = pd.DataFrame(series.values.tolist(), index=series.index).reset_index()\ndf.columns = ['name', 0, 1, 2, 3]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": ["result = [col for col in df.columns if s in col]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": ["result = [col for col in df.columns if s in col]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": ["result = {}\ncounter = 1\nfor column in df.columns:\n    if s in column:\n        result[\"spike\"+str(counter)] = df[column].values\n        counter += 1\ndf_result = pd.DataFrame(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": ["result = pd.DataFrame(df['codes'].tolist()).add_prefix('code_')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": ["result = pd.DataFrame(df['codes'].to_list(), columns=['code_1', 'code_2', 'code_3'])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": ["df['codes'].apply(lambda x: pd.Series(x)).rename(columns = lambda x: 'code_'+str(x+1)).sort_index(axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": ["result = [item for sublist in df.col1 for item in sublist]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": ["result = ','.join(str(e) for sublist in df['col1'].tolist() for e in reversed(sublist))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": ["result = ','.join(str(x) for sublist in df['col1'] for x in sublist)\n</code>\nEND SOLUTION\nYour dataframe column that contained list at each index is concatenated into one string. You can check by printing the variable 'result'."], "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": ["df = df.set_index('Time').resample('2Min').mean().reset_index()\n</code>\nEND SOLUTION\n<code>"], "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": ["df.set_index('Time', inplace=True)\ndf = df.resample('3T').sum().reset_index()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": ["df['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(method=\"first\", ascending=True)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": ["df['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.sort_values('TIME').groupby('ID').cumcount() + 1\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": ["df['TIME'] = pd.to_datetime(df['TIME']) \ndf['RANK'] = df.groupby('ID')['TIME'].rank(method=\"min\")\ndf['TIME'] = df['TIME'].dt.strftime(\"%d-%b-%Y %a %H:%M:%S\")\ndf.sort_values(['ID', 'RANK'], inplace=True)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": ["result = df[filt[df.index.get_level_values('a')].values]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": ["result = df[filt[df.index.get_level_values('a')]]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": ["result = df.columns[df.iloc[0].ne(df.iloc[8])]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": ["result = df.iloc[0][df.iloc[0].eq(df.iloc[8])].index\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": ["result = df.columns[df.iloc[0] != df.iloc[8]].tolist()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": ["# to get a pair of columns which are different in two rows\nresult = list(zip(df.iloc[0], df.iloc[8]))\nresult = [i for i in result if i[0]!=i[1]]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": ["ts = pd.Series(df['Value'].values, index=df['Date'])\nprint(ts)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": ["df = df.T.unstack().to_frame().T\ndf.columns = [f'{x[0]}_{x[1]+1}' for x in df.columns]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": ["df = pd.DataFrame(df.values.flatten()).T\ndf.columns = [f'{col}_{row}' for row in range(len(df.columns)) for col in df.columns]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": ["df = df.round(2)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": ["df['dogs'] = df['dogs'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\ndf['cats'] = df['cats'].apply(lambda x: round(x, 2) if pd.notna(x) else x)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": ["df['Sum'] = df[list_of_my_columns].sum(axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": ["df['Avg'] = df[list_of_my_columns].mean(axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": ["df['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": ["result = df.sort_index(level='time', sort_remaining=False)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": ["result = df.sort_values(by='VIM', kind='mergesort') \n</code>\nEND SOLUTION"], "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": ["# We filter the data frame such that it only contains rows where the date is not in the list of unwanted dates\nunwanted_dates = ['2020-02-17', '2020-02-18']\nresult = df[~df.index.strftime('%Y-%m-%d').isin(unwanted_dates)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": ["# delete specific days\ndays_to_delete = ['2020-02-17', '2020-02-18']\ndf = df[~df.index.strftime('%Y-%m-%d').isin(days_to_delete)]\n\n# add column with formatted date and day name\ndf['DayOfWeek'] = df.index.strftime('%d-%b-%Y %A')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": ["result = corr.stack()\nresult = result[result > 0.3]\nresult = result[result < 1]\nresult.index.names = ['Col1', 'Col2']\nresult = result.reset_index()\nresult.columns = ['Col1', 'Col2', 'Pearson Correlation Coefficient']\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": ["result = corr[corr > 0.3].stack()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": ["df.columns = [*df.columns[:-1], 'Test']\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": ["df.columns = ['Test' if x==df.columns[0] else x for x in df.columns]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": ["df['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda row: list(row).count(row['frequent']), axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": ["df['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda row: list(row).count(row['frequent']), axis=1)\n</code>\nEND SOLUTION."], "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": ["def frequent_values(row):\n    vals, counts = np.unique(row, return_counts=True)\n    max_count = max(counts)\n    max_freq_vals = vals[counts == max_count].tolist()\n    return max_freq_vals, max_count\n\ndf['frequent'], df['freq_count'] = zip(*df.apply(frequent_values, axis=1))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": ["# replace 'NULL' values with NaN\ndf['bar'] = pd.to_numeric(df['bar'], errors='coerce')\n\n# group by 'id1' and 'id2' and calculate the mean\nresult = df.groupby(['id1', 'id2']).mean().reset_index()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": ["# We replace 'NULL' with 0 first and then perform groupby and mean operation\n\ndf['bar'] = df['bar'].replace('NULL', 0)\nresult = df.groupby(['id1','id2']).mean()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": ["result = pd.merge(df_a, df_b[['EntityNum','a_col']], on='EntityNum')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": ["result = pd.merge(df_a, df_b[['EntityNum','b_col']], on='EntityNum')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": ["result = a.shape\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": ["x = x[np.logical_not(np.isnan(x))]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": ["x = np.where(np.isnan(x), np.inf, x)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": ["result = [[val for val in sublist if not np.isnan(val)] for sublist in x]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": ["b = np.eye(a.max()+1)[a]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": ["b = np.eye(max(a)+1)[a]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": ["b = np.eye(a.max() - a.min() + 1)[a - a.min()]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": ["unique_a, idx = np.unique(a, return_inverse=True)\nb = np.zeros((a.shape[0], unique_a.shape[0]))\nb[np.arange(a.shape[0]), idx] = 1\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": ["b = np.zeros((a.size, a.max()+1))\nb[np.arange(a.size), a.ravel()] = 1\nb = b.reshape(a.shape + (-1,))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": ["result = np.percentile(a, p)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": ["B = np.reshape(A, (-1, ncol))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": ["B = np.reshape(A, (nrow, -1))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": ["B = A[:len(A)-(len(A)%ncol)].reshape(-1,ncol)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": ["def vec2matrix(A, ncol):\n    row_extra = A.shape[0] % ncol\n    if row_extra > 0:\n        A = A[:-row_extra]  # Removed extra elements\n    B = A[::-1].reshape(-1, ncol)  # Reversed and Reshaped\n    return B\n\nB = vec2matrix(A, ncol)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": ["def shift(arr, num, fill_value=np.nan):\n    result = np.empty_like(arr)\n    if num > 0:\n        result[:num] = fill_value\n        result[num:] = arr[:-num]\n    elif num < 0:\n        result[num:] = fill_value\n        result[:num] = arr[-num:]\n    else:\n        result = arr\n    return result\n\nresult = shift(a, shift)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": ["def shift(arr, num, fill_value=np.nan):\n    result = np.empty_like(arr)\n    if num > 0:\n        result[:num] = fill_value\n        result[num:] = arr[:-num]\n    elif num < 0:\n        result[num:] = fill_value\n        result[:num] = arr[-num:]\n    else:\n        result = arr\n    return result\n\nresult = shift(a, shift)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": ["def shift(array, n):\n    return np.array([np.roll(row, num) if num >= 0 else np.concatenate((row[-num:], row[:-num])) for row, num in zip(array, n)])\n\nresult = shift(a, shift)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": ["np.random.seed(0)\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nnp.random.seed(0)\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": ["result = np.unravel_index(np.argmax(a, axis=None), a.shape)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": ["result = np.unravel_index(a.argmin(), a.shape)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": ["result = np.unravel_index(np.argmax(a, axis=None), a.shape, order='F')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": ["result = np.unravel_index(np.argmax(a, axis=None), a.shape)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": ["<code>\n    result = np.unravel_index(np.argmax(a, axis=None), a.shape)\n    return result\n</code>"], "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": ["result = np.unravel_index(np.argpartition(a, -2, None)[-2], a.shape)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": ["a = a[:, ~np.isnan(a).any(axis=0)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": ["a = a[~np.isnan(a).any(axis=1)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": ["result = np.array(a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": ["a = a[:, permutation]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": ["result = a[permutation]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": ["result = np.unravel_index(np.argmin(a, axis=None), a.shape)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": ["result = np.unravel_index(np.argmax(a), a.shape)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": ["result = np.argwhere(a == np.min(a))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": ["result = np.sin(np.radians(degree))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": ["result = np.cos(np.deg2rad(degree))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": ["if np.sin(np.deg2rad(number)) > np.sin(number):\n    result = 0\nelse:\n    result = 1\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": ["result = np.arcsin(value) * (180 / np.pi)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": ["result = np.pad(A, (0, length - len(A)), 'constant')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": ["def pad(A, length):\n    return np.pad(A, (0,length-len(A)), 'constant')\n\nA = np.array([1,2,3,4,5])\nresult = pad(A, 8)\n</code> \nEND SOLUTION"], "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": ["a = np.power(a, power)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": ["import numpy as np\n\ndef f(a, power):\n    return np.power(a, power)\n\nexample_a = np.arange(4).reshape(2, 2)\nresult = f(example_a, 2)\n\nprint(result)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": ["from fractions import Fraction\n\nresult = Fraction(numerator, denominator)\n\nresult = (result.numerator, result.denominator)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": ["import fractions\ndef reduce_fraction(numerator, denominator):\n    fraction = fractions.Fraction(numerator, denominator)\n    return (fraction.numerator, fraction.denominator)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": ["from math import gcd\nif denominator != 0:\n    common_divisor = gcd(numerator, denominator)\n    result = (numerator//common_divisor, denominator//common_divisor)\nelse:\n    result = (np.nan, np.nan)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": ["result = (a + b + c) / 3\nprint(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": ["result = np.maximum(np.maximum(a, b), c)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": ["result = np.diag(a[:, ::-1])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": ["def flip_and_diag(a):\n    flipped = np.fliplr(a)\n    return np.diag(flipped)\n\nresult = flip_and_diag(a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": ["result = [a[::-1,:].diagonal(i) for i in range(-a.shape[0]+1,a.shape[1])]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": ["result = np.fliplr(a).diagonal()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": ["result = [element for sublist in X for element in sublist]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": ["result = [element for row in X for element in row]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": ["result = [item for sublist in X for item in sublist]\nreturn result\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": ["result = [X[i] for i in np.ndindex(X.shape)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": ["result = np.array(list(mystr), dtype=int)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": ["a[:,col] *= multiply_number\nresult = np.cumsum(a[:, col])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": ["result = np.cumsum(a[row, :] * multiply_number)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": ["a[row, :] = a[row, :] / divide_number\nresult = np.prod(a[row, :])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": ["from scipy.linalg import lu\n\ndef get_lin_ind_vectors(a):\n    p, l, u = lu(a)  \n    return a[np.unique(u.argmax(axis=0))]\n\nresult = get_lin_ind_vectors(a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": ["result = a.shape[1]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": ["t_stat, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": ["a = a[~np.isnan(a)] # remove nans from a\nb = b[~np.isnan(b)] # remove nans from b\n_, p_value = scipy.stats.ttest_ind(a, b, equal_var = False)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": ["df = anobs + bnobs - 2\npooled_var = ((anobs-1)*avar + (bnobs-1)*bvar) / df\nse = np.sqrt(pooled_var * (1/anobs + 1/bnobs))\nt = (amean - bmean) / se\np_value = 2 * scipy.stats.t.sf(np.abs(t), df)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": ["output = np.array([item for item in A if item.tolist() not in B.tolist()])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": ["output = np.vstack((A[~np.isin(A, B).all(axis=1)], B[~np.isin(B, A).all(axis=1)]))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": ["sort_indices = np.argsort(a, axis=0)\nixgrid = np.ogrid[[slice(x) for x in sort_indices.shape]]\nixgrid[0] = sort_indices\nc = b[tuple(ixgrid)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": ["# Get the indices that would sort `a` along the first axis\nindices = np.argsort(a, axis=0)\n\n# Create an array of indices for the second and third axes that matches the shape of `a`\ni, j, k = np.ogrid[[slice(x) for x in a.shape]]\n\n# Use these arrays to index into `b` in a way that picks out the values in `b`\n# at the same indices as the sorted values in `a`\nc = b[indices, j, k]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": ["# array of indices that sorts array a along axis 0\nsort_indices = np.argsort(a, axis=0)\nindex_ranges = [np.arange(a.shape[i]) for i in range(a.ndim)]\nindex_ranges[0] = sort_indices\nc = b[tuple(index_ranges)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": ["order = np.argsort(a.sum(axis=(1,2)))\nresult = b[order]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": ["a = np.delete(arr, 2, 1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": ["a = np.delete(a, 2, 0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": ["a = np.delete(arr, [0, 2], axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": ["result = np.delete(a, np.where(np.in1d(np.arange(a.shape[1]), del_col)), axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": ["a = np.insert(a, pos, element)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": ["a = np.insert(a, pos, element, axis=0)\n</code>\nEND SOLUTION."], "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": ["a = np.insert(a, pos, element)\nreturn a\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": ["a = np.insert(a, pos, element, axis=0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": ["import copy\nresult = copy.deepcopy(array_of_arrays)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": ["result = np.all(a[1:] == a[:-1], axis=0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": ["result = np.all(a[:,1:] == a[:,:-1], axis = 0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": ["<code>\n    return np.all(a == a[0,:])\n</code>\n### END SOLUTIOn </code>"], "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": ["import scipy.integrate as integrate\n\ndef func(x, y):\n    return (np.cos(x))**4 + (np.sin(y))**2\n\nresult = integrate.dblquad(func, 0, 1, lambda x: 0, lambda x: 1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": ["<code>\n    return ((np.cos(x)) ** 4 + (np.sin(y)) ** 2)\nexample_z = f(np.array([example_x]), np.array([example_y]).T)  \ndx = example_x[1] - example_x[0]\ndy = example_y[1] - example_y[0]\n#Simpson rule in nerdy way\narea = dx * dy * (16 * example_z[1::2, 1::2].sum() + 4 * (example_z[1::2, 2::2] + example_z[2::2, 1::2]).sum()+ 2 * (example_z[2::2, 2::2] + example_z[::2, 1::2] + example_z[1::2, ::2]).sum() + (example_z[::2, ::2] + example_z[::2, 2::2] + example_z[2::2, ::2]).sum()) / 9\n#area is the integral over the 2D function\nprint(area)\n</code>\n### End SOLUTION"], "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": ["# Import library\nfrom statsmodels.distributions.empirical_distribution import ECDF\n\n# Create ECDF function\necdf = ECDF(grades)\n\n# Get ECDF values\nresult = ecdf(grades)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": ["def ecdf(data):\n    \"\"\" Compute ECDF \"\"\"\n    x = np.sort(data)\n    n = x.size\n    y = np.arange(1, n+1) / n\n    return(x,y)\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]\n\ndef get_ecdf_values(data, eval_array):\n    x, y = ecdf(data)\n    result = []\n    for value in eval_array:\n        nearest_x = find_nearest(x, value)\n        idx = np.where(x == nearest_x)[0][0]\n        result.append(y[idx])\n    return np.array(result)\n\nresult = get_ecdf_values(grades, eval)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": ["# calculate ECDF\nx = np.sort(grades)\nn = x.size\ny = np.arange(1, n+1) / n\n\n# find the longest interval\nlow, high = x[0], x[-1]\ninterval = high - low\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if y[j] - y[i] < threshold and x[j] - x[i] > interval:\n            low, high = x[i], x[j]\n            interval = high - low\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": ["nums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": ["a_np = a.numpy()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": ["a_pt = torch.from_numpy(a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": ["a_np = a.numpy()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": ["a_tf = tf.convert_to_tensor(a, dtype=tf.float32)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": ["result = np.argsort(-a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": ["result = np.argsort(a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": ["result = np.argsort(a)[-N:][::-1]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": ["result = np.linalg.matrix_power(A, n)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": ["def windowed_view(arr, window_size):\n    arr_shape = np.array(arr.shape)\n    window_shape = np.array(window_size)\n    steps = arr_shape // window_shape\n    sub_shape = tuple(window_shape * steps)\n    view_shape = tuple(np.stack((steps, window_shape)).T.flatten())\n    strides = tuple(np.stack((arr.strides * window_shape, arr.strides)).T.flatten())\n    return np.lib.stride_tricks.as_strided(arr, view_shape, strides)\n\nwindowed = windowed_view(a, (2, 2))\nresult = windowed.reshape(-1, 2, 2)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": ["import numpy.lib.stride_tricks as st\n\ni, j = a.shape\nN = 2\nresult = st.sliding_window_view(a, (N, N)).reshape(-1, N, N).tolist()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": ["result = []\nfor x in range(0, a.shape[0], 2):\n    for y in range(0, a.shape[1], 2):\n        result.append(a[x:x+2, y:y+2])\nresult = np.array(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": ["result = []\n\nfor i in range(0, a.shape[0], patch_size):\n    for j in range(0, a.shape[1], patch_size):\n        if i + patch_size <= a.shape[0] and j + patch_size <= a.shape[1]:\n            result.append(a[i : i + patch_size, j : j + patch_size])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": ["result = a.transpose(1,0,2).reshape(h,w)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": ["patched_a = []\nfor i in range(0, a.shape[0], patch_size):\n    for j in range(0, a.shape[1], patch_size):\n        patched_a.append(a[i:i+patch_size, j:j+patch_size])\nresult = [patch for patch in patched_a if patch.shape == (patch_size, patch_size)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": ["result = a[:, low:high]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": ["result = a[low:high]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": ["result = a[:, low:min(high, a.shape[1])]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": ["a = np.array(eval(string))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": ["log_min = np.log(min)\nlog_max = np.log(max)\nresult = np.exp(np.random.uniform(log_min, log_max, n))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": ["def log_uniform(min, max, n):\n    # Generate uniformly distributed values (log scale)\n    log_uniform_values = np.random.uniform(min, max, n)\n    \n    # Transform to original scale\n    uniform_values = np.exp(log_uniform_values)\n    \n    return uniform_values\n\nresult=log_uniform(min, max, n)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": ["import numpy as np\n\ndef loguni(n, min_val, max_val, base=np.e):\n    log_min_val = np.log(min_val)/np.log(base)\n    log_max_val = np.log(max_val)/np.log(base)\n\n    return np.power(base, np.random.uniform(log_min_val, log_max_val, n))\n\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": ["B = A.copy()\nfor i in range(1, len(A)):\n    B[i] = a * A[i] + b * B[i-1]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": ["B = pd.Series(index=A.index)\n\n# initial conditions\nB[0] = a * A[0]\nif len(A) > 1:\n    B[1] = a * A[1] + b * B[0]\n\n# recursive calculation\nfor t in range(2, len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": ["demod4 = np.empty(shape=(0,))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": ["demod4 = np.empty((3,0))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": ["result = np.ravel_multi_index(index, dims)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": ["result = np.ravel_multi_index(index, dims)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": ["values1 = np.zeros((2,1), dtype='int32')\nvalues2 = np.zeros((2,2), dtype='float32')\nvalues = np.hstack((values1, values2))\ndf = pd.DataFrame(data=values, index=index, columns=columns)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": ["import numpy_indexed as npi\nresult = npi.group_by(accmap).sum(a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": ["import numpy as np\nfrom scipy.sparse import coo_matrix\n\na = np.arange(1,11)\nindex = np.array([0,1,0,0,0,1,1,2,2,1])\n\ncoo = coo_matrix((a, (index, np.zeros_like(index))), shape=(index.max() + 1, 1))\nresult = coo.max(axis=1).A1\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": ["result = np.bincount(accmap, weights=a, minlength=accmap.max()+1)\nresult = np.add.at(result, np.minimum(accmap,0), a[accmap<0])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": ["import numpy as np\n\ndef min_values(a, index):\n  unique_index = np.unique(index)\n  result = np.empty(len(unique_index))\n  for i, idx in enumerate(unique_index):\n    if idx < 0:\n      result[i] = np.min(a[index==idx])\n    else:\n      result[i] = np.min(a[index==idx])\n  return result\n\na = np.arange(1,11)\nindex = np.array([0,1,0,0,0,-1,-1,2,2,1])\nresult = min_values(a, index)\nprint(result)\n</code> \nEND SOLUTION"], "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": ["def elementwise_function(element_1,element_2):\n    return (element_1 + element_2)\n\nx_np = np.array(x)\ny_np = np.array(y)\n\nz = np.vectorize(elementwise_function)(x_np, y_np)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": ["result = np.random.choice(len(lista_elegir), samples, p=probabilit)\nfinal_result = [lista_elegir[i] for i in result]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": ["def zero_pad_slice(inp, l_index, h_index):\n    pad_width = max(abs(l_index), h_index) \n    padded = np.pad(inp, ((pad_width, pad_width),)*inp.ndim, mode='constant')\n    indicies = tuple(slice(max(l_index+pad_width, 0), l_index+pad_width+h_index)\n                     for _ in range(inp.ndim))\n    return padded[indicies]\n\nresult = zero_pad_slice(a, low_index, high_index)\nprint(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": ["result = x[x >= 0]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": ["result = x[np.iscomplex(x)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": ["def bin_data_mean(data, bin_size):\n    length = len(data)\n    remainder = len(data) % bin_size\n    if remainder != 0:\n        data = data[:-remainder]\n    reshaped_data = data.reshape(-1, bin_size)\n    means = reshaped_data.mean(axis=1)\n    return means\n\nbin_data_mean = bin_data_mean(data, bin_size)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": ["def bin_max(data, bin_size):\n    length = len(data)\n    num_bins = length // bin_size\n    truncated = data[:num_bins*bin_size]\n    reshaped = np.reshape(truncated, (num_bins, bin_size))\n    maxes = np.amax(reshaped, axis=1)\n    return maxes\n\nbin_data_max = bin_max(data, bin_size)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": ["def bin_data(data, bin_size):\n    row, column = data.shape\n    data_cut = data[:,:column//bin_size*bin_size]\n    data_split = np.split(data_cut[0], column//bin_size)\n    return [np.mean(i) for i in data_split]\n\nbin_data_mean = bin_data(data, bin_size)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": ["def bin_data_mean(data, bin_size):\n    data_reversed = np.flip(data) # reverse the data\n    bin_count = len(data_reversed) // bin_size # determine number of bins\n    data_binned = np.split(data_reversed[:bin_count*bin_size], bin_count) # split data into bins\n    data_mean = [np.mean(partition) for partition in data_binned] # calculate mean for each bin\n    return data_mean\n\nbin_data_mean = bin_data_mean(data, bin_size)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": ["def bin_data_mean(data, bin_size):\n    data = np.flip(data, axis=1)\n    shape = data.shape[:-1] + (data.shape[-1] // bin_size, bin_size)\n    data_binned = np.mean(data.reshape(shape), -1)\n    return data_binned\n\nbin_data_mean = bin_data_mean(data, bin_size)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": ["def partition_and_average(data, bin_size):\n    num_bins = data.shape[1] // bin_size\n    binned_data = np.array([row[-num_bins*bin_size:] for row in data])\n    reshaped_data = binned_data.reshape(-1, bin_size)\n    mean_data = reshaped_data.mean(axis=1)\n    mean_data = mean_data.reshape(-1, num_bins)\n    return mean_data\n  \nbin_data_mean = partition_and_average(data, bin_size)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": ["def smoothclamp(x, x_min, x_max):\n    x = (x - x_min) / (x_max - x_min)\n    x = max(0, min(1, x))\n    return (3 - 2*x) * x * x * (x_max - x_min) + x_min\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": ["def smoothclamp(x, x_min, x_max, N):\n    x = (x - x_min) / (x_max - x_min)\n    x = max(0, min(1, x))\n    result = 0\n    for n in range(N+1):\n        result += (np.math.factorial(N)/(np.math.factorial(n)*np.math.factorial(N-n)))*((-1)**n)*(x-((n/N))**N)\n    return result * (x_max - x_min) + x_min\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": ["result = np.correlate(np.concatenate((a, a[:-1])), b, mode='valid')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": ["result = df.values.reshape(4,15,5)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": ["result = df.values.reshape((15, 4, 5))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": ["result = ((a[:, None] & (1 << np.arange(m)))) > 0\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": ["def int_to_bin_array(array, m):\n    return np.array([list(map(int, bin(n)[2:].zfill(m))) for n in array])\n\nresult = int_to_bin_array(a, m)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": ["result = np.array([list(np.binary_repr(i, width=m)) for i in a], dtype=int)\nxor_result = np.bitwise_xor.reduce(result, axis=0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": ["mean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 3*std_dev, mean + 3*std_dev)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": ["mean = np.mean(a)\nstd_dev = np.std(a)\nresult = (mean - 2 * std_dev, mean + 2 * std_dev)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": ["import numpy as np\n\ndef calculate_third_standard_deviation(array):\n    mean = np.mean(array)\n    standard_deviation = np.std(array)\n    lower_bound = mean - 3 * standard_deviation\n    upper_bound = mean + 3 * standard_deviation\n    return (lower_bound, upper_bound)\n  \nresult = calculate_third_standard_deviation(example_a)\nreturn result\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": ["mean = np.mean(a)\nstd_dev = np.std(a)\ntwo_sigma = 2 * std_dev\nlower_bound = mean - two_sigma\nupper_bound = mean + two_sigma\nresult = (a < lower_bound) | (a > upper_bound)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": ["masked_data = np.ma.masked_less(DataArray, 0)\nprob = np.percentile(masked_data.compressed(), percentile)\nprint(prob)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": ["a[zero_rows,:] = 0\na[:,zero_cols] = 0\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": ["a[zero_rows,:] = 0\na[:,zero_cols] = 0\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": ["a[:, 0] = 0\na[1, :] = 0\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": ["mask = (a == np.max(a, axis=1, keepdims=True))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": ["mask = (a == a.min(axis=1)[:,None])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": ["from scipy.stats import pearsonr\n\n# Apply the pearsonr() function to calculate the Pearson correlation coefficient\nresult = pearsonr(post, distance)[0]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": ["result = np.einsum('ij,ik->ijk',X,X)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": ["X = np.linalg.cholesky(Y).transpose(0, 2, 1)[0]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": ["is_contained = number in a\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": ["C = np.setdiff1d(A,B)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": ["C = A[np.isin(A,B)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": ["C = A[np.logical_or.reduce([np.logical_and(B[i]<=A, A<B[i+1]) for i in range(len(B)-1)])]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": ["result = len(a) - rankdata(a).astype(int) + 1\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": ["result = len(a) - rankdata(a, method='max').astype(int)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": ["def reverse_rank(a): \n    ranks = rankdata(a).astype(int)\n    reversed_ranks = len(a) - ranks + 1\n    return reversed_ranks\n\nreverse_rank_example = reverse_rank(example_a)\nprint(reverse_rank_example)\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": ["dists = np.dstack((x_dists, y_dists))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": ["dists = np.dstack((x_dists, y_dists))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": ["result = a[:, second][:, :, third]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": ["arr = np.zeros((20, 10, 10, 2))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": ["l1_norm = LA.norm(X, ord=1, axis=1, keepdims=True)\nresult = X / l1_norm\n</code>\nEND SOLUTION\n<code>\nprint(result)\n</code>"], "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": ["norm = LA.norm(X, axis=1, keepdims=True)\nresult = X / norm\nprint(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": ["row_sums = X.max(axis=1)\nresult = X / row_sums[:, np.newaxis]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": ["conditions  = [df['a'].apply(lambda x: target in str(x))]\nresult = np.select(conditions, choices, default=df['a'])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": ["from scipy.spatial.distance import cdist\nresult = cdist(a, a, 'euclidean')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": ["from scipy.spatial import distance_matrix\nresult = distance_matrix(a, a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": ["distances = np.sqrt(np.sum((a[:, None] - a) ** 2, axis=-1))\n</code>\nEND SOLUTION\nThe function needs to return the result.\n<code>\nreturn distances\n</code>"], "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": ["AVG = np.mean(np.array(NA, dtype=float))\nprint(AVG)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": ["NA = np.where(NA=='inf', np.inf, NA).astype(float)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": ["# convert the strings to proper format using eval\nA = [eval(x) for x in A]\nNA = np.asarray(A)\n# calculate mean\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": ["result = a[a!=0] # remove zero\nresult = result[1:] != result[:-1] # remove adjacent duplicates\nresult = np.insert(result, 0, True) # The first element is also a beginning, so we should surely keep it\nresult = a[a!=0][result] # apply the mask to the nonzero elements\n</code>\nEND SOLUTION\nThis should solve your problem!"], "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": ["a = a[a[:, 0] != 0]\nmask = np.vstack((np.array(True), np.diff(a[:, 0]) != 0))\nresult = a[mask]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": ["df = pd.DataFrame({'lat': lat.ravel(), 'lon': lon.ravel(), 'val': val.ravel()})\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": ["<code>\n    lat = lat.flatten()\n    lon = lon.flatten()\n    val = val.flatten()\n    \n    return pd.DataFrame({ 'lat': lat, 'lon': lon, 'val': val })\n</code>"], "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": ["df = pd.DataFrame({\"lat\": lat.ravel(),\n                   \"lon\": lon.ravel(),\n                   \"val\": val.ravel()})\n\ndf['maximum'] = df.max(axis=1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": ["import numpy as np\nfrom scipy.ndimage import generic_filter\n\ndef view_3x3(arr):\n    padding = ((1, 1), (1, 1))\n    p1 = np.pad(arr, padding, mode='constant')\n    p_shape = (3,3)\n    result = np.lib.stride_tricks.sliding_window_view(p1, p_shape)\n    return result\n\na = np.array([[1,2,3,4],\n       [2,3,4,5],\n       [3,4,5,6],\n       [4,5,6,7]])\nresult = view_3x3(a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": ["result = []\nfor x in range(a.shape[0]):\n    for y in range(a.shape[1]):\n        slice = a[max(0,x-size[0]//2):x+size[0]//2+1,max(0,y-size[1]//2):y+size[1]//2+1]\n        result.append(slice)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": ["result = np.nan_to_num(a).mean()\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": ["def complex_mean(arr):\n    real_parts = [x.real for x in arr if np.isfinite(x)]\n    imaginary_parts = [x.imag for x in arr if np.isfinite(x)]\n    return np.mean(real_parts) + np.mean(imaginary_parts)*1j\n\na = np.array([1 + 0j, 2 + 3j, np.inf + 0j])\nresult = complex_mean(a)\nreturn result\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": ["result = Z[(slice(None),) * (Z.ndim - 1) + (slice(-1, None),)]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": ["slicing = (slice(-1, None),) + (slice(None),) * (a.ndim - 1)\nresult = a[slicing]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": ["result = any((c == cnt).all() for cnt in CNTS)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": ["result = any((np.nan_to_num(array) == np.nan_to_num(c)).all() for array in CNTS)\nprint(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": ["f = intp.interp2d(x_new, y_new, a, kind='linear')\nresult = f(x_new, y_new)\nprint(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": ["df = pd.DataFrame(data)\ndf[name] = df.groupby('D')['Q'].apply(lambda x: x.cumsum())\ndf\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": ["i = np.diag(i)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": ["a *= np.eye(a.shape[0])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": ["start_u = pd.to_datetime(start).value//10**9\nend_u = pd.to_datetime(end).value//10**9\nresult = pd.to_datetime(np.linspace(start_u, end_u, n), unit='s')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": ["try:\n    result = np.where((x==a) & (y==b))[0][0]\nexcept IndexError:\n    result = -1\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": ["result = np.where((x == a) & (y == b))[0]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": ["z = np.polyfit(x, y, 2)\nresult = z\nprint(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": ["result = np.polyfit(x, y, degree)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": ["df = df.subtract(pd.Series(a), axis=0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": ["result = np.einsum('...k,kl->...l', A, B)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": ["scaler = MinMaxScaler()\ntemp = a.flatten().reshape(-1,1)\nscaled_array = scaler.fit_transform(temp)\nresult = scaled_array.reshape(a.shape)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": ["scaler = MinMaxScaler()\n# scaling each row requires transpose\narrT = arr.T\narrT_scaled = scaler.fit_transform(arrT)\nresult = arrT_scaled.T\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": ["scaler = MinMaxScaler()\nshapes = a.shape\nresult = []\nfor m in a.reshape(-1, shapes[-1]):\n    scaled_m = scaler.fit_transform(m.reshape(-1, 1))\n    result.append(scaled_m.reshape(-1))\nresult = np.array(result).reshape(shapes)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": ["arr = np.where(arr < -10, 0, arr)\narr = np.where(arr >= 15, 30, arr+5)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": ["for i in range(arr.shape[0]):\n    arr[i, arr[i,:] < n1[i]] = 0\n    arr[i, arr[i,:] >= n2[i]] = 30\n    arr[i, np.logical_and(arr[i,:] >= n1[i], arr[i,:] < n2[i])] += 5\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": ["# Using the numpy function 'isclose', we can compare these two arrays with a tolerance.\nresult = np.count_nonzero(~np.isclose(s1, s2))\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": ["result = np.isnan(s1) == np.isnan(s2)\nnumber_of_diffs = np.sum(result == False)\nprint(number_of_diffs)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": ["result = all((a[0] == x).all() for x in a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": ["result = all(np.isnan(i).any() for i in a)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": ["result = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant')\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": ["result = np.pad(a, [(0, shape[0]-a.shape[0]), (0, shape[1]-a.shape[1])], mode='constant', constant_values=0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": ["pad_width = ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1]))\nresult = np.pad(a, pad_width, 'constant', constant_values=element)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": ["pad_width = ((0, shape[0] - arr.shape[0]), (0, shape[1] - arr.shape[1]))\n    result = np.pad(arr, pad_width=pad_width, mode='constant', constant_values=0)\n    return result\n### END SOLUTION\n</code>"], "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": ["def pad_with(vector, pad_width, iaxis, kwargs):\n    pad_value = kwargs.get('padder', 0)\n    vector[:pad_width[0]] = pad_value\n    vector[-pad_width[1]:] = pad_value\n    return vector\n\nresult = np.pad(a, ((int((shape[0] - a.shape[0])/2), \n                     (shape[0] - a.shape[0]) - int((shape[0] - a.shape[0])/2)), \n                    (int((shape[1] - a.shape[1])/2), \n                     (shape[1] - a.shape[1]) - int((shape[1] - a.shape[1])/2))), \n                pad_with, padder=0)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": ["a = a.reshape(a.shape[0]//3, 3)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": ["np_indices = np.indices(b.shape)\nresult = a[np_indices[0], np_indices[1], b]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": ["result = np.take_along_axis(a, np.expand_dims(b, axis=-1), axis=-1).squeeze(-1)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": ["N, M, T = a.shape\nresult = a[np.arange(N)[:,None], np.arange(M), b]\n</code>\nEND SOLUTION\n<code>\nprint(result) # should be same as `desired`\n</code>"], "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": ["dims = np.indices(b.shape)\nresult = np.sum(a[dims[0], dims[1], b[dims[0], dims[1]]])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": ["N, M, T = a.shape\nR = np.arange(T)*np.ones((N,M,T))\nmask = R >= np.dstack([b]*T)\nresult = np.sum(a[mask])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": ["df['b'] = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\nresult = df['b'].values.tolist()\nprint(result)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": ["non_empty_columns = np.where(im.max(axis=0)>0)[0]\nnon_empty_rows = np.where(im.max(axis=1)>0)[0]\nresult = im[min(non_empty_rows):max(non_empty_rows)+1, min(non_empty_columns):max(non_empty_columns)+1]\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": ["B = np.argwhere(A)\nstart, stop = B.min(0), B.max(0) + 1\nD = A[start[0]:stop[0], start[1]:stop[1]]\nprint(D)\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": ["mask = im>0\nprint(im[np.ix_(mask.any(1),mask.any(0))])\n</code>\nEND SOLUTION"], "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": ["mask = np.all(im == 0, axis=0)\ncolumn_min = np.max(np.where(~mask)[0])\ncolumn_max = np.min(np.where(~mask)[0])\nmask=np.all(im == 0, axis=1)\nrow_min = np.max(np.where(~mask)[0])\nrow_max = np.min(np.where(~mask)[0])\nresult = im[row_max:row_min+1, column_max:column_min+1]\n</code>\nEND SOLUTION\nresults: <code> print(result)  </code>"], "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": ["<code>\nplt.scatter(x, y, label='x-y')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": ["<code>\nplt.minorticks_on()\nplt.tick_params(axis='x', which='both', bottom=True, top=False, labelbottom=True)\nplt.tick_params(axis='y', which='both', left=True, right=False, labelleft=True)\nplt.grid(which='minor', axis='y', linestyle=':', linewidth=0.5)\n# SOLUTION END\n\nplt.show()\n</code>"], "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": ["<code>\nplt.minorticks_on()\n\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='red')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": ["<code>\nax = plt.gca()\nax.minorticks_on()\nax.tick_params(axis='x', which='minor', bottom=True)\n</code>"], "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": ["<code>\nfor line_style in ['-', '--', '-.', ':']:\n    y = np.random.randn(len(x))\n    \n    plt.plot(x, y, line_style)\n\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Random lines with different styles')\nplt.show()\n</code>"], "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": ["<code>\nline_styles = ['-', '--', '-.', ':']\n\nfor i, style in enumerate(line_styles):\n    plt.plot(x, x + i, style, label=f\"line style: '{style}'\")\n\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": ["<code>\nplt.plot(x, y, 'd-', linewidth=2.0, markersize=12)\nplt.show()\n</code>"], "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": ["<code>\nplt.plot(x, y, 'D-', linewidth=2, markersize=12)\nplt.show()\n</code>"], "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": ["<code>\nax.set(ylim=(0, 40))\nplt.show()\n</code>"], "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": ["<code>\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = 10 * np.random.randn(10)\nplt.plot(x)\n\nx_start, x_end = 2, 4\nplt.axvspan(x_start, x_end, color='red', alpha=0.5)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": ["<code>\nplt.figure()\nplt.plot([0,1],[0,2])\nplt.show()\n</code>"], "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": ["<code>\nplt.figure(figsize=(5, 5))\nplt.plot([0, 1], [0, 2])\nplt.xlim(-1, 2)\nplt.ylim(-1, 3)\nplt.show()\n</code>"], "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": ["<code>\nseaborn.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n</code>"], "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": ["<code>\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(8,6))\nplt.plot(x, y, 'o-', color='blue')\nplt.title('Seaborn Matplotlib Style Plot')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.show()\n</code>"], "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": ["<code>\ndf = pd.DataFrame({\"x\": x, \"y\": y})\n\nsns.lineplot(x=\"x\", y=\"y\", data=df)\nplt.show()\n</code>"], "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": ["<code>\nplt.plot(x, y, marker='+', linewidth=7)\nplt.show()\n</code>"], "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": ["<code>\nplt.legend(fontsize=20)\nplt.show()\n</code>"], "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": ["<code>\nplt.plot(x, y, label='cos function')\nplt.legend(title='xyz', title_fontsize='20')\nplt.show()\n</code>"], "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": ["<code>\nl.set_markerfacecoloralpha(0.2)\nplt.show()\n</code>"], "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": ["<code>\nl.set_markeredgecolor(\"k\")\nl.set_markeredgewidth(1)\n</code>"], "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": ["<code>\nl.set_color(\"red\")\nl.set_markerfacecolor(\"red\")\nl.set_markeredgecolor(\"red\")\nplt.show()\n</code>"], "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": ["<code>\nplt.xticks(rotation=45)\nplt.show()\n</code>"], "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": ["<code>\nplt.xticks(rotation=45)\nplt.show()\n</code>"], "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": ["<code>\nplt.xticks(np.arange(0, max(x), 2))\n# SOLUTION END\n\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend(loc=\"lower right\")\nplt.title(\"A plot of a sine function\")\nplt.show()\n</code>"], "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": ["<code>\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": ["<code>\nplt.imshow(H, cmap='hot', interpolation='nearest')\nplt.colorbar()\nplt.show()\n</code>"], "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": ["<code>\nplt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.show()\n</code>"], "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": ["<code>\nfig, ax = plt.subplots()\n\nsns.lineplot(x=x, y=y)\n\nax.set_xlabel(\"X\", loc='right')\nplt.show()\n</code>"], "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": ["<code>\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\nplt.show()\n</code>"], "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": ["<code>\nplt.title(\"\\n\".join([myTitle[i:i+30] for i in range(0, len(myTitle), 30)]))\nplt.show()\n</code>"], "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": ["<code>\nplt.scatter(x, y)\nplt.gca().invert_yaxis()\nplt.show()\n</code>"], "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": ["<code>\nplt.xticks([0, 1.5])\nplt.show()\n</code>"], "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": ["<code>\nplt.yticks([-1, 1])\nplt.show()\n</code>"], "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": ["<code>\nplt.figure(figsize=(10,8))\n\nplt.scatter(x, np.repeat(3, len(x)), color='blue', label='x', zorder=3)\nplt.scatter(y, np.repeat(2, len(y)), color='red', label='y', zorder=2)\nplt.scatter(z, np.repeat(1, len(z)), color='green', label='z', zorder=1)\n\nplt.yticks([3,2,1], ['x', 'y', 'z'])\nplt.show()\n</code>"], "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": ["<code>\nplt.scatter(x, y, c='blue', edgecolors='black')\nplt.show()\n</code>"], "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": ["<code>\nfig, ax = plt.subplots()\n\nax.plot(x, y)\n\nax.xaxis.set_major_locator(plt.MaxNLocator(integer=True))\nax.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\n\nplt.show()\n</code>"], "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": ["<code>\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()\n</code>"], "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": ["<code>\nsns.lineplot(x=x, y=y, dashes=True)\nplt.show()\n</code>"], "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": ["<code>\nfig, axs = plt.subplots(2, sharex=True)\nfig.suptitle('Aligning x axis using sharex')\naxs[0].plot(x, y1)\naxs[1].plot(x, y2)\nplt.show()\n</code>"], "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": ["<code>\nfig, ax = plt.subplots(2)\n\n# plot x vs y1\nax[0].plot(x, y1)\nax[0].set_title('x vs y1')\nax[0].spines['top'].set_visible(False)\nax[0].spines['right'].set_visible(False)\n\n# plot x vs y2\nax[1].plot(x, y2)\nax[1].set_title('x vs y2')\nax[1].spines['top'].set_visible(False)\nax[1].spines['right'].set_visible(False)\n\nplt.tight_layout()\nplt.show()\n</code>"], "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": ["<code>\nplt.xlabel(\"\")\nplt.show()\n</code>"], "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": ["<code>\nplt.xticks([], [])\nplt.show()\n</code>"], "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": ["<code>\nplt.xticks(ticks=[3, 4])\nplt.grid(axis='x', which='both')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": ["<code>\nplt.yticks(np.arange(-3,5,1))\nplt.grid(axis='y')\nplt.show()\n</code>"], "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": ["<code>\nplt.yticks([3, 4])\nplt.xticks([1, 2])\nplt.grid(axis='y', which='both', linestyle='-', color='grey')\nplt.grid(axis='x', which='both', linestyle='-', color='grey')\nplt.show()\n</code>"], "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": ["<code>\nplt.grid(True)\nplt.show()\n</code>"], "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": ["<code>\nplt.legend(loc='lower right')\nplt.show()\n</code>"], "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": ["<code>\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nfig.tight_layout(pad=5.0)\n\nplt.show()\nplt.clf()\n</code>"], "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": ["<code>\nplt.plot(x, y, label=\"Y\")\nplt.plot(x, z, label=\"Z\")\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": ["<code>\nax.xaxis.tick_top()\n</code>"], "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\nplt.show()\n</code>"], "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": ["<code>\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n</code>"], "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": ["<code>\nplt.plot(x, y)\nplt.tick_params(axis = 'y', direction = 'in', pad = -22)\nplt.gca().yaxis.tick_right() \nplt.show()\n</code>"], "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": ["<code>\nplt.plot(x, y)\nplt.ylabel(\"Y\")\n\n# Make sure ticks are only on the left and labels on the right\nax = plt.gca()\nax.yaxis.tick_left()\nax.yaxis.set_label_position(\"right\")\n\nplt.show()\n</code>"], "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": ["<code>\ng = sns.jointplot(data=tips, x=\"total_bill\", y=\"tip\", kind='reg', color='g')\ng.plot_joint(plt.scatter, c=\"g\", s=30, linewidth=1, marker=\"+\")\ng.ax_joint.collections[0].set_alpha(0)\ng.set_axis_labels(\"$Total Bill$\", \"Tip\")\ng.savefig(\"seabornJointPlot.png\")\nplt.show()\n</code>"], "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": ["<code>\nsns.jointplot(data=tips, x=\"total_bill\", y=\"tip\", kind=\"reg\", color=\"b\", line_kws={'color':'g'})\nplt.show()\n</code>"], "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": ["<code>\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\")\nplt.show()\n</code>"], "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": ["<code>\nfig, ax = plt.subplots()\ndf.plot(kind='bar', ax=ax)\nax.set_xticklabels(df['celltype'], rotation=0)\nplt.show()\n</code>"], "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": ["<code>\ndf.plot.bar(x='celltype', y=['s1', 's2'], rot=45)\nplt.xlabel('Cell Type')\nplt.show()\n</code>"], "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel(\"X\", color='red')\nplt.xticks(color='red')\nplt.show()\n</code>"], "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": ["<code>\nplt.plot(x, y, color='red')\nplt.xlabel('X')\nplt.show()\n</code>"], "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": ["<code>\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation='vertical')\nplt.show()\n</code>"], "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": ["<code>\nimport matplotlib.pyplot as plt\n\nx_values = [0.22058956, 0.33088437, 2.20589566]\nfor x_value in x_values:\n    plt.axvline(x=x_value, color='r')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": ["<code>\nfig, ax = plt.subplots()\n\ncax = ax.matshow(rand_mat, interpolation='nearest')\n\nax.set_xticklabels([''] + xlabels)\nax.set_yticklabels([''] + ylabels[::-1])\n\nax.xaxis.set_ticks_position('top')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": ["<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig, ax = plt.subplots()\nax2 = ax.twinx()\n\nlns1 = ax.plot(time, Swdown, \"-\", label=\"Swdown\")\nlns2 = ax.plot(time, Rn, \"-\", label=\"Rn\")\nlns3 = ax2.plot(time, temp, \"-r\", label=\"temp\")\n\nlns = lns1+lns2+lns3\nlabs = [l.get_label() for l in lns]\nax.legend(lns, labs, loc=0)\n\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\nplt.show()\nplt.clf()\n</code>\n"], "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": ["<code>\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\nax[0].plot(x, y)\nax[0].set_title('Y')\n\nax[1].plot(x, y)\nax[1].set_title('Y')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": ["<code>\nsns.scatterplot(data=df, x=\"bill_length_mm\", y=\"bill_depth_mm\", s=30)\nplt.show()\n</code>"], "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": ["<code>\nplt.figure(figsize=(10,6))\n\nfor i in range(len(a)):\n    plt.scatter(a[i], b[i])\n    plt.text(a[i], b[i], str(c[i]), fontsize=12)\n\nplt.xlabel('a values')\nplt.ylabel('b values')\nplt.title('Scatter plot of a over b, annotated with c values')\nplt.show()\n</code>"], "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": ["<code>\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend\")\nplt.show()\n</code>"], "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": ["<code>\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend\")\nplt.gca().get_legend().get_title().set_weight('bold')\nplt.show()\n</code>"], "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": ["<code>\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n</code>"], "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4), gridspec_kw={'width_ratios': [3, 1]})\n\n# Plot on ax1\nax1.plot(x, y)\nax1.set_title('3 times wider')\n\n# Plot on ax2\nax2.plot(y, x)\nax2.set_title('Normal')\nplt.show()\n<code>"], "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": ["<code>\nplt.hist(x, bins, alpha=0.5, label='x')\nplt.hist(y, bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()\n</code>"], "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": ["<code>\n# Create DataFrame with x and y\ndf = pd.DataFrame({'x': x, 'y': y})\n\n# Create grouped histogram\ndf.plot(kind='hist', alpha=0.5)\n\n# Show plot\nplt.show()\n</code>"], "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": ["<code>\nplt.figure()\nx = range(0, 6)\ny = [(d-b)/(c-a) * (i - a) + b for i in x]\nplt.plot(x, y)\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.show()\n</code>"], "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": ["<code>\nfig, axs = plt.subplots(2, 1)\npcm = axs[0].imshow(x, cmap='viridis', vmin=0, vmax=1)\naxs[1].imshow(y, cmap='viridis', vmin=0, vmax=1)\n\nfig.colorbar(pcm, ax=axs[:], shrink=0.6)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": ["<code>\nplt.figure(figsize=(10, 5))\n\nplt.plot(x[:,0], label='a')\nplt.plot(x[:,1], label='b')\n\nplt.legend(loc='best')\nplt.title(\"Line graph of columns 'a' and 'b'\")\nplt.xlabel(\"Index\")\nplt.ylabel(\"Values\")\n\nplt.show()\n</code>"], "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": ["<code>\nfig, axs = plt.subplots(2)\nfig.suptitle('Y and Z')\n\naxs[0].plot(x, y, 'o-')\naxs[0].set_title('Y over X')\n\naxs[1].plot(a, z, '.-')\naxs[1].set_title('Z over A')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": ["<code>\nx = [point[0] for point in points]\ny = [point[1] for point in points]\n\nplt.plot(x, y)\nplt.yscale('log')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": ["<code>\nplt.plot(x, y)\nplt.title('My Graph', fontsize=20)\nplt.xlabel('x-axis', fontsize=18)\nplt.ylabel('y-axis', fontsize=16)\nplt.show()\n</code>"], "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": ["<code>\nax.plot(x, y)\nax.set_xticks(np.arange(1, 11))\nax.set_yticks(np.arange(1, 11))\n\nplt.show()\n</code>"], "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": ["<code>\nfig, ax = plt.subplots()\n\nfor (line, color) in zip(lines, c):\n    ax.plot(*line, color=color)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": ["<code>\nfig, ax = plt.subplots()\n\nplt.scatter(x, y)\nplt.xscale('log')\nplt.yscale('log')\n\nax.get_xaxis().set_major_formatter(plt.ScalarFormatter())\nax.get_yaxis().set_major_formatter(plt.ScalarFormatter())\n\nplt.show()\n</code>"], "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": ["<code>\nplt.figure()\n\ndf.plot(kind=\"line\", marker='o')\nplt.show()\n</code>"], "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": ["<code>\ndata = np.array(data)\npercentage_data = 100. * data / data.sum()\n\nn, bins, patches = plt.hist(percentage_data, weights=np.ones(len(percentage_data)) / len(percentage_data))\n\nplt.gca().yaxis.set_major_formatter(PercentFormatter(xmax=1))\n\nplt.yticks(np.arange(0, 1.1, 0.1), ['{:.0f}%'.format(x*100) for x in np.arange(0, 1.1, 0.1)])\n\nplt.show()\n</code>"], "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": ["<code>\nplt.figure()\nplt.plot(x, y, 'o-', alpha=1, markerfacecolor='blue', markersize=8, markeredgecolor='black', markeredgewidth=1.5, linewidth=2)\nplt.show()\n</code>"], "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": ["<code>\nfig, ax = plt.subplots(1, 2)\n\nax[0].plot(x, y, label='y')\nax[1].plot(z, a, label='a')\n\nfig.figlegend(loc='upper right')\nplt.show()\n</code>"], "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": ["<code>\nfig, axes = plt.subplots(2, 1, sharex=False)\n\nsns.regplot(x=df[\"bill_length_mm\"], y=df[\"bill_depth_mm\"], ax=axes[0])\naxes[0].set_title(\"RegPlot: Bill Depth mm vs Bill Length mm\")\n\nsns.regplot(x=df[\"bill_length_mm\"], y=df[\"flipper_length_mm\"], ax=axes[1])\naxes[1].set_title(\"RegPlot: Flipper Length mm vs Bill Length mm\")\n\nplt.tight_layout()\nplt.show()\n</code>"], "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": ["<code>\n# get the current x tick labels\ntick_labels = ax.get_xticklabels()\n\n# change the second tick's label\ntick_labels[1].set_text('second')\n\n# set the new tick labels\nax.set_xticklabels(tick_labels)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": ["<code>\nplt.plot(x, y, label=\"$\\lambda$\")\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": ["<code>\nx_ext = plt.xticks()[0].tolist() # Getting existing ticks\nx_ext.extend([2.1, 3, 7.6]) # Extend ticks by extra values\nplt.xticks(x_ext) # Apply ticks\n# SOLUTION END\nplt.show()\n</code>"], "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": ["<code>\nplt.xticks(rotation=-60, ha='left')\nplt.show()\n</code>"], "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": ["<code>\nplt.yticks(rotation=-60, verticalalignment='top')\nplt.show()\n</code>"], "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": ["<code>\nfor label in plt.gca().get_xticklabels():\n    label.set_alpha(0.5)\nplt.show()\n</code>"], "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": ["<code>\nplt.subplots_adjust(left=0, bottom=0.1)\nplt.show()\n</code>"], "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": ["<code>\nplt.margins(y=0, x=0.1)\nplt.show()\n</code>"], "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": ["<code>\nfig, (ax1, ax2) = plt.subplots(1, 2)\nfig.suptitle('Figure')\n\nax1.plot(x, y)\nax1.set_title('Subplot 1')\n\nax2.plot(x, y)\nax2.set_title('Subplot 2')\n\nplt.show()\n</code>"], "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": ["<code>\ndf.plot(kind='line')\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.show()\n</code>"], "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": ["<code>\nplt.figure(figsize=(6,6))\nplt.scatter(x, y, c='b', marker='|', s=500, hatch='///')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Scatter Plot with Dense Hatch Markers')\nplt.show()\n</code>"], "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": ["<code>\nplt.scatter(x, y, edgecolor='none', marker='|')\nplt.show()\n</code>"], "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": ["<code>\nplt.scatter(x, y, marker='*')\nplt.show()\n</code>"], "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": ["<code>\nplt.scatter(x, y, s=100, marker='*|')\nplt.show()\n</code>"], "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": ["<code>\nplt.imshow(data, extent=[0,10,0,10])\nplt.xlim(1, 5)\nplt.ylim(1, 4)\nplt.show()\n</code>"], "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": ["<code>\nplt.stem(x, y, orientation='horizontal')\nplt.show()\n</code>"], "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": ["<code>\nplt.bar(range(len(d)), list(d.values()), align='center', color=list(c.values()))\nplt.xticks(range(len(d)), list(d.keys()))\nplt.show()\n</code>"], "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": ["<code>\nplt.axvline(x=3, color='r', linestyle='-', label=\"cutoff\")\nplt.legend()\nplt.show()\n</code>"], "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": ["<code>\nfig = plt.figure() \nax = fig.add_subplot(111, polar=True)\nax.bar(labels, height)\nplt.show()\n</code>"], "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": ["<code>\nplt.pie(data, labels=l, wedgeprops=dict(width=0.4))\nplt.axis('equal')\nplt.show()\n</code>"], "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": ["<code>\nplt.plot(x, y)\nplt.grid(color = 'b', linestyle = '--', linewidth = 0.5)\nplt.show()\n</code>"], "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": ["<code>\nplt.figure()\nplt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='major', linestyle='', linewidth=0)\nplt.grid(which='minor', linestyle='--', linewidth=0.5, color='gray')\nplt.show()\n</code>"], "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": ["<code>\nplt.pie(sizes, labels=labels, colors=colors)\nplt.title(\"Daily Time Spent\", fontweight='bold')\nplt.show()\n</code>"], "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": ["<code>\nplt.pie(sizes, labels=labels, colors=colors)\nplt.gca().set_aspect(\"equal\")\nplt.title(\"Daily Activities\", fontweight='bold')\nplt.show()\n</code>"], "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": ["<code>\nplt.plot(x, y, marker='o', markersize=10, markerfacecolor='none', markeredgecolor='blue', linestyle='-')\nplt.show()\n</code>"], "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": ["<code>\nplt.axvline(55, color='green')\nplt.show()\n</code>"], "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": ["<code>\nbar_width = 0.35\nbar_location_blue = np.arange(len(blue_bar))\nbar_location_orange = [location + bar_width for location in bar_location_blue]\n\nplt.bar(bar_location_blue, blue_bar, color='b', width=bar_width, edgecolor='grey', label='Blue bar')\nplt.bar(bar_location_orange, orange_bar, color='orange', width=bar_width, edgecolor='grey', label='Orange bar')\n\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Comparison of Categories')\nplt.xticks(bar_location_blue + bar_width / 2, ('Category 1', 'Category 2', 'Category 3'))\nplt.legend()\n\nplt.show()\n</code>"], "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": ["<code>\n\nfig, ax = plt.subplots(2, 1)\n\nax[0].plot(x, y, label='line 1')\nax[1].plot(a, z, label='line 2')\n\nax[0].legend()\n\nplt.show()\n\n</code>"], "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": ["<code>\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar(label='color')\nplt.show()\n</code>"], "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": ["<code>\nplt.figure(figsize=(8,6))\nplt.plot(x, y)\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nplt.show()\n</code>"], "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": ["<code>\nsns.catplot(x=\"sex\", y=\"bill_length_mm\", col=\"species\", data=df, kind=\"bar\", \n            col_wrap=2, height=5, aspect=1, sharey=False)\nplt.show()\n</code>"], "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": ["<code>\nfig, ax = plt.subplots()\ncircle = plt.Circle((0.5, 0.5), 0.2, fill = False)\n\nax.add_patch(circle)\nplt.xlim(0, 1)\nplt.ylim(0, 1)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()\n</code>"], "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": ["<code>\nplt.plot(x, y)\nplt.title(r'$\\boldsymbol{\\phi}$', fontsize=16)\nplt.show()\n</code>"], "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": ["<code>\nplt.plot(x, y, label='Line')\nplt.legend(labelspacing=0.1)\nplt.show()\n</code>"], "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": ["<code>\nplt.plot(x, y, label='Line')\nplt.legend(handlelength=0.3)\nplt.show()\n</code>"], "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": ["<code>\nplt.legend(loc='upper left', bbox_to_anchor=(1.05, 1), borderaxespad=0., ncol=2)\nplt.show()\n</code>"], "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": ["<code>\n# Mark the 4th and 7th points on the line\nplt.plot(x[3], y[3], marker=\"o\", color=\"r\", markersize=10)\nplt.plot(x[6], y[6], marker=\"o\", color=\"r\", markersize=10)\n\n# Display the legend\nplt.legend()\n\n# Show the plot\nplt.show()\n</code>"], "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": ["<code>\nplt.imshow(data, cmap='hot', interpolation='nearest')\nplt.colorbar()\nplt.show()\n</code>"], "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": ["<code>\nplt.plot(x, y)\nplt.title(r\"$\\bf{Figure}$ 1\")\nplt.show()\n</code>"], "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": ["<code>\nsns.pairplot(data=df, x_vars=['x'], y_vars=['y'], hue='id', plot_kws={'alpha': 0.6})\nplt.legend([],[], frameon=False)\nplt.show()\n</code>"], "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": ["<code>\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n</code>"], "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": ["<code>\nplt.scatter(x, y, clip_on=False)\nplt.show()\n</code>"], "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": ["<code>\nplt.scatter(x, y, color='red', edgecolor='black')\nplt.show()\n</code>"], "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": ["<code>\nfig, ax = plt.subplots(2, 2, figsize=(15, 15))\n\nfor i in range(2):\n    for j in range(2):\n        ax[i, j].plot(x, y)\n\nplt.show()\n</code>"], "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": ["<code>\nplt.hist(x, bins=np.arange(0, 11, 2), edgecolor='black')\nplt.show()\n</code>"], "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": ["<code>\nplt.plot(x, y, 'k-')\n\n# Fill between x, y-error and y+error\nplt.fill_between(x, y-error, y+error, alpha=0.5, color='gray')\n\nplt.grid(True)\nplt.show()\n</code>"], "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": ["<code>\nplt.axhline(0, color='white')\nplt.axvline(0, color='white')\nplt.show()\n</code>"], "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": ["<code>\nfor i in range(len(box_position)):\n    ax.errorbar(box_position[i], box_height[i], yerr=box_errors[i], color=c[i])\nplt.show()\n"], "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": ["<code>\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x, y)\naxs[0].set_title('Y')\n\naxs[1].plot(a, z)\naxs[1].set_title('Z', pad=20)\n\nplt.show()\n"], "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": ["<code>\nfig, axs = plt.subplots(4, 4, figsize=(5, 5))\nfig.subplots_adjust(hspace=0.5, wspace=0.5)\n\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].set_xticks(x)\n        axs[i, j].set_yticks(y)\n\nplt.show()\n"], "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": ["<code>\nplt.figure(figsize=(8, 8))\nplt.matshow(d, fignum=1)\nplt.show()\n"], "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": ["<code>\nfig, ax = plt.subplots(1, 1)\n\ntable_data = []\nfor row in df.itertuples():\n    table_data.append(row[1:])\n\ntable = ax.table(cellText=table_data, colLabels=df.columns, loc=\"center\")\ntable.set_fontsize(14)\ntable.scale(1, 1.5)\nax.axis(\"off\")\n\nplt.show()\n"], "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": ["<code>\nfig, ax = plt.subplots()\n\nax.plot(x, y)\n\nax.xaxis.tick_top()\nax.xaxis.tick_bottom()\n\nplt.show()\n"], "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": ["<code>\nfig, ax = plt.subplots()\n\nax.plot(x, y)\n\nax.xaxis.tick_top()\nax.xaxis.tick_bottom()\n\nplt.show()\n"], "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": ["<code>\nplt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False)\nplt.show()\n"], "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": ["<code>\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\n\n# Change the subplots titles\ntitles = [\"Group: Fat\", \"Group: No Fat\"]\nfor ax, title in zip(g.axes.flat, titles):\n    ax.set_title(title)\n\nplt.show()\n"], "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": ["<code>\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_axis_labels(\"Exercise Time\", \"Pulse\")\nplt.show()\n"], "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": ["<code>\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\nplt.ylabel('')\nplt.show()\n"], "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": ["<code>\nplt.plot(x, y, label=\"y\")\nplt.legend(fontsize=8)\nplt.show()\n"], "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": ["<code>\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n"], "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": ["<code>\nplt.plot(x, y, label=\"y\")\nplt.legend(frameon=False)\nplt.show()\n"], "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": ["<code>\nplt.figure()\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.legend()\nplt.show()\n"], "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": ["<code>\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, dodge=True)\nplt.legend([],[], frameon=False)\nplt.show()\n"], "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": ["<code>\ng = sns.FacetGrid(df, row=\"b\", height=2, aspect=4)\ng.map(sns.pointplot, \"a\", \"c\", order=np.arange(1, 31), color=\".3\", ci=None)\n\nfor ax in g.axes.flat:\n    ax.set_xticks(np.arange(0, 30, 1), minor=True)\n    ax.set_xticks(np.arange(0, 30, 2))\n    ax.set_xticklabels(np.arange(1, 31, 2))\n\nplt.show()\n"], "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": ["<code>\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(azim=100, elev=50)\nplt.show()\n"], "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": ["<code>\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.xticks([])\nplt.yticks([])\nplt.show()\n"], "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": ["<code>\ngs = gridspec.GridSpec(nrow, ncol, wspace=0.0, hspace=0.0)\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = plt.subplot(gs[i, j])\n        ax.imshow(x, cmap='viridis')\n        ax.set_xticks([])\n        ax.set_yticks([])\n\nplt.show()\n"], "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": ["x.assign(1)\nresult = x.numpy()\nprint(result)\n"], "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": ["x.assign(114514)\nresult = x.numpy()\nprint(result)\n"], "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": ["labels_tensor = tf.constant(labels)\nresult = tf.one_hot(labels_tensor, depth=10, dtype=tf.int32)\n"], "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": ["labels = tf.constant(labels)\nresult = tf.cast(tf.one_hot(labels, 10), tf.int32)\nresult = 1 - result\n"], "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": ["result = tf.one_hot(labels, depth=10, on_value=0, off_value=1, dtype=tf.int32)\n"], "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": ["labels_tensor = tf.constant(labels)\none_hot_tensor = tf.one_hot(labels_tensor, depth=10, dtype=tf.int32)\nreturn one_hot_tensor\n### END SOLUTION\n\nprint(f())\n"], "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": ["labels_tensor = tf.constant(labels, dtype=tf.int32)\nresult = tf.one_hot(labels_tensor, depth=10, on_value=0, off_value=1, dtype=tf.int32)\nresult = tf.math.abs(result - 1)\n"], "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": ["def my_map_func(i):\n  return [i, i+1, i+2]\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.map(map_func=lambda input: tf.compat.v1.py_func(\n  func=my_map_func, inp=[input], Tout=[tf.int64, tf.int64, tf.int64]\n))\nds = ds.flat_map(tf.data.Dataset.from_tensor_slices)\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(element))\n"], "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": ["def my_map_func(i):\n  return [i, i+1, i+2]\n\nds = tf.data.Dataset.from_tensor_slices(example_input)\nds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(my_map_func(x)))\niterator = tf.compat.v1.data.make_one_shot_iterator(ds)\nnext_element = iterator.get_next()\n\nresult = []\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(next_element))\nprint(result)\n### END SOLUTION\n"], "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": ["lengths = tf.constant([4, 3, 5, 2])\nmax_length = 8\nresult = tf.sequence_mask(lengths, max_length)\nresult = tf.cast(result, tf.int32)\n"], "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": ["max_length = 8\nresult = tf.sequence_mask(lengths, max_length)\nresult = tf.cast(result, tf.int32)\nresult = 1 - result\n"], "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": ["lengths = tf.constant(lengths)\ntotal_length = 8\nmask = tf.sequence_mask(lengths, total_length)\nresult = tf.cast(mask, tf.float32)\n"], "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": ["import numpy as np\n\ndef create_mask(lengths, max_length=8):\n    mask = np.zeros((len(lengths), max_length))\n    for i, length in enumerate(lengths):\n        mask[i, :length] = 1\n    return tf.convert_to_tensor(mask, dtype=tf.int32)\n\nlengths = tf.constant([4, 3, 5, 2])\nmask = create_mask(lengths)\nprint(mask)\n### END SOLUTION\n"], "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": ["max_len = 8\nresult = tf.sequence_mask(lengths, max_len)\nresult = tf.cast(result, tf.float32)\nresult = 1 - result\n"], "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": ["result = tf.transpose([tf.tile(a, [tf.size(b)]), tf.repeat(b, tf.size(a))])\n"], "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": ["<code>\n    a = tf.expand_dims(a, -1)\n    b = tf.expand_dims(b, 0)\n    cartesian_product = tf.stack(tf.meshgrid(a, b), axis=-1)\n    cartesian_product = tf.reshape(cartesian_product, [-1, 2])\n    return cartesian_product\n### END SOLUTION\n\nresult = f(example_a, example_b)\nprint(result)\n"], "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": ["result = tf.reshape(a, (50, 100, 512))\n"], "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": ["result = tf.expand_dims(a, axis=2)\n"], "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": ["result = tf.reshape(a, [1, 50, 100, 1, 512])\n"], "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": ["result = tf.reduce_sum(A, axis=1)\n"], "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": ["result = tf.reduce_prod(A, axis=1)\n"], "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": ["result = tf.math.reciprocal(A)\n"], "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": ["# calculate the square of the difference\ndiff = tf.square(tf.subtract(a, b))\n\n# reduce sum along the last dimension\nresult = tf.reduce_sum(diff, axis=-1)\n"], "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": ["# calculate the square of the difference\ndiff = tf.square(tf.subtract(a, b))\n\n# reduce sum along the first axis (column-wise)\nresult = tf.reduce_sum(diff, axis=0)\n"], "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": ["<code>\n    diff = tf.subtract(A, B)\n    square_diff = tf.square(diff)\n    result = tf.reduce_sum(square_diff, axis=1)\n    return result\n### END SOLUTION\n\nprint(f())\n"], "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": ["indices = tf.stack([y, z], axis=1)\nresult = tf.gather_nd(x, indices)\n"], "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": ["indices = tf.stack([row, col], axis=-1)\nresult = tf.gather_nd(x, indices)\n"], "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": ["<code>\nimport tensorflow as tf\n\nx = [[1,2,3],[4,5,6]]\ny = [0,1]\nz = [1,2]\nx = tf.constant(x)\ny = tf.constant(y)\nz = tf.constant(z)\n\nindices = tf.stack([y, z], axis=1)\nm = tf.gather_nd(x, indices)\n"], "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": ["A = tf.transpose(A, perm=[1, 0, 2])\nB = tf.transpose(B, perm=[1, 0, 2])\nC = tf.tensordot(A, B, axes=[[2], [2]])\nC = tf.transpose(C, perm=[1, 2, 0])\n"], "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": ["result = tf.tensordot(A, B, axes=[[2], [2]])\n"], "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": ["x_tensor = tf.constant(x)\nresult = tf.strings.unicode_transcode(x_tensor, \"UTF-8\", \"UTF-8\")\n"], "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": ["<code>\n    tensor_x = tf.constant(x)\n    result = tf.strings.unicode_decode(tensor_x, 'UTF-8')\n    return result\n### END SOLUTION\n"], "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": ["non_zero_mask = tf.not_equal(x, 0)\nnon_zero_count = tf.reduce_sum(tf.cast(non_zero_mask, tf.float32), axis=-2)\nnon_zero_sum = tf.reduce_sum(tf.where(non_zero_mask, x, 0), axis=-2)\nresult = non_zero_sum / non_zero_count\n"], "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": ["mask = tf.cast(tf.not_equal(x, 0), tf.float32)\nmean = tf.reduce_sum(x, axis=-2) / tf.reduce_sum(mask, axis=-2)\nvariance = tf.reduce_sum(mask * (x - mean[..., None, :]) ** 2, axis=-2) / tf.reduce_sum(mask, axis=-2)\nresult = variance\n"], "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": ["<code>\n    mask = tf.cast(tf.not_equal(x, 0), tf.float32)\n    sum_x = tf.reduce_sum(x, axis=-2)\n    sum_mask = tf.reduce_sum(mask, axis=-2)\n    sum_mask = tf.where(tf.equal(sum_mask, 0), tf.ones_like(sum_mask), sum_mask)\n    result = sum_x / sum_mask\n    return result\n### END SOLUTION\n"], "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": ["tf.random.set_seed(10)\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\nresult = tf.reduce_sum(tf.matmul(A,B))\n"], "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": ["result = tf.argmax(a, axis=1)\n"], "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": ["result = tf.argmax(a, axis=0)\n"], "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": ["<code>\n    result = tf.argmax(a, axis=1)\n    return result\n### END SOLUTION\n\nprint(f())\n"], "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": ["result = tf.argmin(a, axis=0)\n"], "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": ["model.save('my_model', save_format='tf')\n"], "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": ["tf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n"], "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": ["tf.random.set_seed(seed_x)\nresult = 2 + tf.random.uniform(shape=[114], maxval=4, dtype=tf.int32)\n"], "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": ["tf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\nreturn result\n### END SOLUTION\n"], "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": ["result = tf.__version__\nprint(result)\n"], "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": ["logx = np.log(x)\np = np.polyfit(logx, y, 1)\nresult = np.array([p[1], p[0]])\n"], "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": ["logx = np.log(x)\np = np.polyfit(logx, y, 1)\nresult = p\n"], "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": ["def func(x, a, b, c):\n    return a * np.exp(b * x) + c\n\npopt, pcov = scipy.optimize.curve_fit(func, x, y, p0)\nresult = popt\n"], "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": ["statistic, p_value = stats.ks_2samp(x, y)\n"], "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": ["result = stats.ks_2samp(x, y)\nif result.pvalue < alpha:\n    print(\"We reject the null hypothesis\")\nelse:\n    print(\"We can't reject the null hypothesis\")\n"], "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": ["def f(x):\n    a, b, c = x\n    return ((a+b-c)-2)**2 + ((3*a-b-c))**2 + sin(b) + cos(b) + 4\n\nresult = optimize.minimize(f, initial_guess)\n"], "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": ["p_values = scipy.stats.norm.sf(abs(z_scores))\n"], "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": ["p_values = 1 - scipy.stats.norm.cdf(z_scores, mu, sigma)\n"], "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": ["z_scores = [-scipy.stats.norm.ppf(p) for p in p_values]\n"], "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": ["s = np.exp(stddev)\nscale = np.exp(mu)\nresult = stats.lognorm.cdf(x, s, scale=scale)\n"], "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": ["# calculate the expected value and median of the lognormal distribution\nexpected_value = np.exp(mu + (stddev**2 / 2))\nmedian = np.exp(mu)\n"], "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": ["result = sa.multiply(sb)\n"], "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": ["<code>\n    sB = sparse.csr_matrix(sB).transpose()\n    result = sA.multiply(sB)\n    return result\n### END SOLUTION\n"], "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": ["interpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n"], "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": ["interpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n"], "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": ["# define the rotation matrix\ndef rotation_matrix(angle):\n    angle = np.deg2rad(angle)\n    matrix = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])\n    return matrix\n\n# define the center of the image\ncenter = np.array([data_orig.shape[1] / 2, data_orig.shape[0] / 2])\n\n# define the original coordinates with respect to the center of the image\noriginal_coordinates = np.array([x0, y0]) - center\n\n# rotate the coordinates\nrotated_coordinates = np.dot(rotation_matrix(angle), original_coordinates)\n\n# translate the rotated coordinates back to the original frame\nrotated_coordinates += center\n\n# round the coordinates to the nearest integer\nxrot, yrot = np.round(rotated_coordinates).astype(int)\n\n# rotate the image\ndata_rot = rotate(data_orig, angle)\n"], "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": ["result = M.diagonal()\n"], "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": ["result = stats.kstest(np.array(times)/T, 'uniform')\nprint(result)\n"], "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": ["<code>\n    times = np.array(times)\n    times = times / T\n    return stats.kstest(times, 'uniform')\n### END SOLUTION\nresult = f(example_times, example_rate, example_T)\nprint(result)\n"], "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": ["times = np.array(times) / T\nD, p_value = stats.kstest(times, 'uniform')\nresult = p_value > 0.05\n"], "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": ["Feature = sparse.hstack((c1, c2))\n"], "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": ["Feature = sparse.hstack((c1, c2))\n"], "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": ["Feature = sparse.vstack([c1, c2])\n"], "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": ["distances = scipy.spatial.distance.cdist(points1, points2)\nresult = scipy.optimize.linear_sum_assignment(distances)\nresult = result[1]\n"], "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": ["distances = scipy.spatial.distance.cdist(points1, points2, 'cityblock')\nresult = scipy.optimize.linear_sum_assignment(distances)\nresult = result[1]\n"], "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": ["b = sparse.csr_matrix(b.toarray() * (1 - np.eye(*b.shape)))\n"], "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": ["blobs = img > threshold\nlabels, num_labels = ndimage.label(blobs)\nresult = num_labels\n"], "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": ["# Apply threshold\nbinary_img = img < threshold\n\n# Label regions\nlabeled_img, num_regions = ndimage.label(binary_img)\n\nresult = num_regions\n"], "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": ["import numpy as np\nfrom scipy import ndimage\n\n# Generate a random 2D array\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\n\ndef count_regions(img, threshold=0.75):\n    # Apply threshold\n    img = (img > threshold).astype(int)\n    \n    # Label regions\n    labeled, num_regions = ndimage.label(img)\n    \n    return num_regions\n\nnum_regions = count_regions(img)\nprint(num_regions)\n"], "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": ["# Find regions where value exceeds threshold\nlabeled, nr_objects = ndimage.label(img > threshold) \n\n# Calculate center of mass for each region\ncenters_of_mass = ndimage.center_of_mass(img, labeled, range(1, nr_objects+1))\n\n# Calculate distances from top left corner\ndistances = [np.sqrt(x**2 + y**2) for y, x in centers_of_mass]\n\nresult = distances\n"], "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": ["M = (M + M.T).tolil()\n"], "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": ["<code>\n    sA = sA + sA.T - np.diag(sA.diagonal())\n    return sA\n### END SOLUTION\n"], "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": ["eroded_square = scipy.ndimage.binary_erosion(square)\nreconstructed_square = scipy.ndimage.binary_propagation(eroded_square, mask=square)\nfinal_square = np.logical_not(reconstructed_square)\n"], "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": ["labels, num = scipy.ndimage.label(square)\nsizes = scipy.ndimage.sum(square, labels, range(num + 1))\nmask_sizes = sizes == 1\nmask_zeros = labels == 0\nsquare = np.where(mask_sizes[labels] | mask_zeros, 0, square)\n"], "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": ["mean = col.sum() / col.shape[0]\nstandard_deviation = np.sqrt((col.power(2).sum() / col.shape[0]) - (mean ** 2))\n"], "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": ["Max = col.max()\nMin = col.min()\n"], "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": ["from scipy.stats import mode\nfrom scipy.sparse import csc_matrix\n\n# Convert to csc_matrix for efficient column slicing\ncsc = csc_matrix(col)\n\n# Get non-zero elements\nnon_zero_elements = csc.data\n\n# Calculate median\nMedian = np.median(non_zero_elements)\n\n# Calculate mode\nMode = mode(non_zero_elements)[0][0]\n"], "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": ["def fourier(x, *a):\n    ret = a[0] * np.cos(np.pi / tau * x)\n    for deg in range(1, len(a)):\n        ret += a[deg] * np.cos((deg+1) * np.pi / tau * x)\n    return ret\n\np0 = [1.0] * degree\npopt, pcov = curve_fit(fourier, z, Ua, p0=p0)\n"], "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": ["# Create a dictionary to store the coordinates of each unique ID\nid_coords = {i: np.column_stack(np.where(example_array == i)) for i in np.unique(example_array)}\n\n# Create a dictionary to store the pairwise distances\ndistances = {}\n\n# Calculate pairwise distances\nfor id1, coords1 in id_coords.items():\n    for id2, coords2 in id_coords.items():\n        if id1 != id2:\n            dist = scipy.spatial.distance.cdist(coords1, coords2).min()\n            distances[(id1, id2)] = dist\n\nresult = distances\n"], "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": ["# Get unique IDs\nunique_ids = np.unique(example_array)\n\n# Initialize empty list to hold coordinates\ncoords = []\n\n# Loop over unique IDs and get coordinates\nfor id in unique_ids:\n    if id != 0:  # Exclude 0 (background)\n        y, x = np.where(example_array == id)\n        coords.append(list(zip(y, x)))\n\n# Calculate pairwise Manhattan distances\ndistances = scipy.spatial.distance.cdist(coords[0], coords[1], 'cityblock')\n\n# Get minimum distance\nmin_distance = np.min(distances)\n\nresult = min_distance\n"], "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": ["<code>\n    unique_ids = np.unique(example_array)\n    unique_ids = unique_ids[unique_ids != 0]  # Exclude 0 if it's not a valid ID\n    coordinates = {uid: np.column_stack(np.where(example_array == uid)) for uid in unique_ids}\n    distances = scipy.spatial.distance.cdist(coordinates[1], coordinates[2])\n    min_distance = np.min(distances)\n    return min_distance\n"], "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": ["result = np.zeros((5, 100))\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k=2, s=4)\n    result[i, :] = interpolate.splev(x_val, tck, der=0, ext=0)\n"], "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": ["samples = [np.array(x1), np.array(x2), np.array(x3), np.array(x4)]\nstatistic, critical_values, significance_level = ss.anderson_ksamp(samples)\n"], "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": ["result = ss.anderson_ksamp([x1, x2])\nif result.significance_level[2] > result.statistic:\n    result = True\nelse:\n    result = False\n"], "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": ["def rolling_kendall(df, window):\n    result = df.copy()\n    cols = df.columns\n    for i in range(len(cols)):\n        for j in range(i+1, len(cols)):\n            result[cols[i]+cols[j]] = df[cols[i]].rolling(window).corr(df[cols[j]].rolling(window))\n    return result\n\ndf = rolling_kendall(df, 3)\n"], "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": ["result = sa.nnz == 0\n"], "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": ["result = sa.nnz == 0\n"], "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": ["result = block_diag(*a)\n"], "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": ["result = stats.ranksums(pre_course_scores, during_course_scores)\np_value = result.pvalue\n"], "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": ["<code>\n    result = stats.ranksums(pre_course_scores, during_course_scores)\n    p_value = result.pvalue\n    return p_value\n### END SOLUTION\n"], "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": ["n = len(a)\nmean = np.mean(a)\nkurtosis_result = np.sum((a - mean)**4) / ((n - 1) * np.std(a)**4) - 3\n"], "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": ["kurtosis_result = scipy.stats.kurtosis(a, fisher=True, bias=False)\n"], "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": ["interp_func = scipy.interpolate.interp2d(x, y, z, kind='cubic')\nresult = interp_func(s, t)\n"], "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": ["<code>\n    x, y = np.mgrid[-1:1:10j,-2:0:10j]\n    z = (x + y)*np.exp(-6.0 * (x * x + y * y))\n    interp = scipy.interpolate.interp2d(x, y, z, kind='cubic')\n    result = interp(s, t)\n    return result\n### END SOLUTION\n"], "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": ["import numpy as np\n\ndef find_voronoi_tessellations(vor, extraPoints):\n    result = []\n    for point in extraPoints:\n        dist = np.linalg.norm(np.array(vor.points) - point, axis=1)\n        result.append(np.argmin(dist))\n    return np.array(result)\n\nresult = find_voronoi_tessellations(vor, extraPoints)\n"], "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": ["result = []\nfor extra in extraPoints:\n    dist = scipy.spatial.distance.cdist([extra], points)\n    result.append(np.argmin(dist))\nresult = np.array(result)\n"], "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": ["# create a sparse matrix of zeros with size (len(vectors), max_vector_size)\nresult = sparse.lil_matrix((len(vectors), max_vector_size))\n\n# fill the sparse matrix with vectors\nfor i, vector in enumerate(vectors):\n    result[i, :len(vector)] = vector\n"], "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": ["b = scipy.ndimage.median_filter(a, footprint=np.ones((3, 3)), mode='constant', cval=0.0, origin=(0, 1))\n"], "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": ["result = M[row, column]\n"], "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": ["result = [M[i, j] for i, j in zip(row, column)]\n"], "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": ["new_array = scipy.interpolate.interp1d(x, array, axis=0)(x_new)\n"], "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": ["def NormalDistro(u,o2,x):\n    dev = abs((x-u)/o2)\n    P_inner, _ = scipy.integrate.quad(NDfx,-dev,dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return(P)\n\nprob = NormalDistro(u, o2, x)\n"], "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": ["<code>\ndef f(x = 2.5, u = 1, o2 = 3):\n    dev = abs((x-u)/o2)\n    P_inner, _ = scipy.integrate.quad(NDfx,-dev,dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return P\n"], "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": ["def dctmtx(N):\n    x, y = np.meshgrid(range(N), range(N))\n    D = np.sqrt(2.0 / N) * np.cos(np.pi * (2*x + 1) * y / (2.0 * N))\n    D[0] /= np.sqrt(2)\n    return D\n\nresult = dctmtx(N)\n"], "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": ["result = sparse.diags([matrix[0, :-1], matrix[1, :], matrix[2, 1:]], [-1, 0, 1]).toarray()\n"], "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": ["result = np.zeros((N+1, N+1))\ni = np.arange(N+1).reshape(-1, 1)\nj = np.arange(N+1)\nmask = j <= i\nresult[mask] = scipy.stats.binom.pmf(j[mask], i[mask], p)\n"], "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": ["df = df.apply(stats.zscore, axis=1)\n"], "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": ["df = df.apply(stats.zscore)\n"], "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": ["# calculate zscore\nzscore_df = df.apply(stats.zscore, axis=1)\n\n# rename index\ndf.index = pd.MultiIndex.from_tuples([(i, 'data') for i in df.index])\nzscore_df.index = pd.MultiIndex.from_tuples([(i, 'zscore') for i in zscore_df.index])\n\n# concatenate dataframes\nresult = pd.concat([df, zscore_df]).sort_index()\n"], "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": ["# calculate zscore\nzscore = df.apply(stats.zscore)\nzscore.index = [i + ' zscore' for i in df.index]\n\n# concatenate data and zscore\nresult = pd.concat([df, zscore]).sort_index()\n\n# format to 3 decimal places\nresult = result.round(3)\n"], "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": ["result = scipy.optimize.line_search(test_func, test_grad, np.array(starting_point), np.array(direction))\n"], "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": ["y, x = np.indices(shape)\ncenter = np.array([(shape[0]-1)/2, (shape[1]-1)/2])\nresult = distance.cdist(np.column_stack([y.ravel(), x.ravel()]), center.reshape(1, -1)).reshape(shape)\n"], "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": ["center = np.array(shape) / 2.0\ny, x = np.indices(shape)\nresult = np.abs(x - center[1]) + np.abs(y - center[0])\n"], "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": ["<code>\n    y, x = np.indices(shape)\n    center = np.array([(x.max()-x.min())/2.0, (y.max()-y.min())/2.0])\n    return distance.cdist(np.column_stack([x.ravel(), y.ravel()]), center.reshape(1,-1)).reshape(x.shape)\n### END SOLUTION\n"], "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": ["zoom_factors = [new_dim / old_dim for new_dim, old_dim in zip(shape, x.shape)]\nresult = scipy.ndimage.zoom(x, zoom_factors, order=1)\n"], "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": ["def func(x):\n    return a.dot(x ** 2) - y\n\nout = scipy.optimize.least_squares(func, x0)\nprint(out.x)\n"], "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": ["def func(x):\n    return a.dot(x ** 2)\n\ndef objective(x):\n    return np.sum((func(x) - y) ** 2)\n\nout = scipy.optimize.minimize(objective, x0, method='L-BFGS-B', bounds=scipy.optimize.Bounds(x_lower_bounds, np.inf))\nprint(out.x)\n"], "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": ["def dN1_dt_simple(t, N1):\n    return -100 * N1 + np.sin(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n"], "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": ["def dN1_dt(t, N1):\n    if 0 < t < 2*np.pi:\n        return -100 * N1 + t - np.sin(t)\n    else:\n        return -100 * N1 + 2*np.pi\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt, t_span=time_span, y0=[N0,])\nresult = sol.y\n"], "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": ["def dN1_dt_simple(t, N1):\n    return -100 * N1 - np.cos(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n"], "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": ["for t in range (4):\n    cons.append({'type':'ineq', 'fun': lambda x, t=t: x[t]})\nout=minimize(function, x0, method=\"SLSQP\", constraints=cons)\nx=out[\"x\"]\n"], "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": ["result = sparse.vstack((sa, sb))\n"], "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": ["result = sparse.hstack((sa, sb))\n"], "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": ["import numpy as np\nfrom scipy import integrate\n\nc_values = np.loadtxt('cooltemp.dat', unpack=True, usecols=[1])\nresults = []\n\nfor c in c_values:\n    result, error = integrate.quad(lambda x: 2*x*c, 0, 1)\n    results.append(result)\n\nresults = np.array(results)\n"], "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": ["<code>\nimport numpy as np\nfrom scipy import integrate\n\n# Load c values\nc_values = np.loadtxt('cooltemp.dat', unpack=True, usecols=[1])\n\n# Define the function to integrate\ndef f(x, c):\n    return 2 * c * x\n\n# Initialize results array\nresults = []\n\n# Loop over c values\nfor c in c_values:\n    result, error = integrate.quad(f, 0, 1, args=(c,))\n    results.append(result)\n\n# Convert results to numpy array\nresults = np.array(results)\n"], "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": ["for key in V.keys():\n    V[key] += x\n"], "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": ["V.data += x\n"], "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": ["V.data += x\nV = V.tocoo()\n"], "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": ["for i in range(sa.shape[1]):\n    col = sa[:, i].toarray()\n    norm = np.linalg.norm(col)\n    if norm != 0:\n        sa[:, i] = sa[:, i] / norm\n"], "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": ["for i in range(sa.shape[1]):\n    col = sa.getcol(i)\n    col_norm = np.linalg.norm(col.toarray())\n    sa[:, i] = col / col_norm\n"], "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": ["a = (a > 0).astype(int)\n"], "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": ["a = (a > 0).astype(int)\n"], "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": ["distances = scipy.spatial.distance.cdist(centroids, data)\nresult = np.argmin(distances, axis=1)\n"], "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": ["distances = scipy.spatial.distance.cdist(centroids, data)\nclosest = np.argmin(distances, axis=1)\nresult = data[closest]\n"], "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": ["distances = scipy.spatial.distance.cdist(centroids, data)\nsorted_indices = np.argsort(distances, axis=1)\nresult = sorted_indices[:, k]\n"], "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": ["result = np.array([fsolve(lambda a: eqn(x, a, b), x0=0.5) for x, b in zip(xdata, bdata)])\n"], "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": ["result = []\nfor x, a in zip(xdata, adata):\n    roots = fsolve(lambda b: eqn(x, a, b), x0=[0.5, 1.5])\n    roots.sort()\n    result.append(roots)\nresult = np.array(result)\n"], "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": ["def cdf_bekkers(x, a, m, d):\n    result, _ = sp.integrate.quad(bekkers, range_start, x, args=(a, m, d))\n    return result\n\ndef cdf_bekkers_normalized(x):\n    return cdf_bekkers(x, estimated_a, estimated_m, estimated_d) / cdf_bekkers(range_end, estimated_a, estimated_m, estimated_d)\n\nresult = sp.stats.kstest(sample_data, cdf_bekkers_normalized)\n"], "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": ["def cdf(x):\n    result, _ = integrate.quad(bekkers, range_start, x, args=(estimated_a, estimated_m, estimated_d))\n    return result\n\nks_stat, p_value = sp.stats.kstest(sample_data, cdf)\nresult = p_value < 0.05\n"], "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": ["def rolling_integral(df, window):\n    return df.rolling(window).apply(lambda x: integrate.trapz(x, dx=1))\n\nintegral_df = rolling_integral(df['A'], 5)\n"], "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": ["grid_z0 = scipy.interpolate.griddata(x, y, eval, method='linear')\nresult = grid_z0[0]\n"], "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": ["def multinomial_log_likelihood(weights, counts):\n    return np.sum(counts * np.log(weights))\n\ndef constraint(weights):\n    return np.sum(weights) - 1\n\ncounts = a['A1'].value_counts().sort_index().values\ninitial_guess = np.ones(len(counts)) / len(counts)\nresult = sciopt.minimize(lambda weights: -multinomial_log_likelihood(weights, counts), \n                         initial_guess, \n                         constraints={'type': 'eq', 'fun': constraint}, \n                         bounds=[(0, 1) for _ in range(len(counts))])\n\nweights = result.x\n"], "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": ["result = sciopt.minimize(e, [1,1], bounds=(pmin, pmax), args=(x,y))\n"], "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": ["def find_relative_extrema(arr, n):\n    extrema = signal.argrelextrema(arr, np.less_equal, order=n)\n    return extrema[0]\n\nresult = find_relative_extrema(arr, n)\n"], "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": ["result = []\nfor i in range(arr.shape[0]):\n    for j in range(n, arr.shape[1] - n):\n        if all(arr[i][j] <= arr[i][k] for k in range(j - n, j + n + 1)):\n            result.append([i, j])\n"], "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": ["# get numeric columns\nnumeric_cols = df.select_dtypes(include=[np.number]).columns\n\n# get zscore for numeric columns\nz = np.abs(stats.zscore(df[numeric_cols]))\n\n# only keep rows in dataframe with all numeric column zscores less than absolute value of 3\ndf = df[(z < 3).all(axis=1)]\n"], "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": ["data1 = pd.DataFrame(data=np.c_[data['data'], data['target']],\n                     columns=data['feature_names'] + ['target'])\n"], "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": ["data1 = pd.DataFrame(data=np.c_[data['data'], data['target']],\n                     columns=data['feature_names'] + ['target'])\n"], "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": ["data1 = pd.DataFrame(data=np.c_[data['data'], data['target']],\n                     columns=data['feature_names'] + ['target'])\n"], "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": ["df = pd.DataFrame(data=np.c_[data['data'], data['target']],\n                  columns=data['feature_names'] + ['target'])\nreturn df\n### END SOLUTION\n"], "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\ndf_out = df.join(pd.DataFrame(mlb.fit_transform(df.pop('Col3')),\n                          columns=mlb.classes_,\n                          index=df.index))\n"], "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": ["# create a new dataframe from the list in Col3\ndf1 = pd.DataFrame(df['Col3'].to_list())\n\n# get dummies for each unique value in the new dataframe\ndf1 = pd.get_dummies(df1, prefix='', prefix_sep='').groupby(level=0, axis=1).sum()\n\n# join the original dataframe with the new one\ndf_out = df.join(df1)\n"], "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\ndf_out = df.join(pd.DataFrame(mlb.fit_transform(df.pop('Col4')),\n                          columns=mlb.classes_,\n                          index=df.index))\n"], "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\n\ndf_out = df.join(pd.DataFrame(mlb.fit_transform(df.pop('Col3')),\n                          columns=mlb.classes_,\n                          index=df.index))\n"], "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": ["# get the unique elements in the last column\nunique_elements = pd.unique(df[df.columns[-1]].explode())\n\n# create new columns for each unique element\nfor element in unique_elements:\n    df_out[element] = np.where(df[df.columns[-1]].apply(lambda x: element in x), 0, 1)\n"], "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": ["from sklearn.calibration import CalibratedClassifierCV\n\n# Fit model:\nsvmmodel = suppmach.LinearSVC()\ncalibrated_clf = CalibratedClassifierCV(svmmodel, method='sigmoid', cv=5)\ncalibrated_clf.fit(X, y)\nproba = calibrated_clf.predict_proba(x_test)\n"], "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": ["from sklearn.calibration import CalibratedClassifierCV\n\n# Fit base SVM\nmodel.fit(X, y)\n\n# Calibrate model on validation data\ncalibrator = CalibratedClassifierCV(model, cv='prefit')\nmodel_calibrated = calibrator.fit(X, y)\n\n# Get probabilities\nproba = model_calibrated.predict_proba(x_predict)\n"], "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": ["# convert the sparse matrix to a dense matrix\ndense_matrix = transform_output.toarray()\n\n# convert the dense matrix to a dataframe\ndf_transform_output = pd.DataFrame(dense_matrix)\n\n# concatenate the original dataframe with the transformed dataframe\ndf = pd.concat([df_origin, df_transform_output], axis=1)\n"], "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": ["# convert the csr_matrix to a DataFrame\ndf_transformed = pd.DataFrame(transform_output.toarray())\n\n# concatenate the original DataFrame with the transformed DataFrame\ndf = pd.concat([df_origin, df_transformed], axis=1)\n"], "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": ["from sklearn.preprocessing import OneHotEncoder\n\n# Assuming df is your original dataframe and transform_output is the output from OneHotEncoder\none_hot_df = pd.DataFrame(transform_output.toarray(), columns=one_hot_encoder.get_feature_names(input_features=df.columns))\ndf = pd.concat([df, one_hot_df], axis=1)\n### END SOLUTION\n"], "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": ["# To delete a step, you can use the 'steps' attribute which is a list of tuples\n# Let's delete the 'poly' step\nclf.steps = [step for step in clf.steps if step[0] != 'poly']\n"], "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": ["# To delete a step, you can use the 'pop' method\nclf.steps.pop(1) # This will remove the second step ('dim_svm', PCA())\n"], "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": ["# Delete the 2nd step\ndel clf.steps[1]\n"], "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": ["# Insert a step\nclf.steps.insert(1, ('new_step', SVC()))\nprint(clf)\n\n# Delete a step\ndel clf.steps[1]\nprint(clf)\n"], "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": ["# Insert a step\nclf.steps.insert(1, ('new_step', SVC()))\nprint(clf)\n\n# Delete a step\ndel clf.steps[1]\nprint(clf)\n"], "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": ["# Insert a step\nclf.steps.insert(1, ('t1919810', PCA()))\nprint(clf)\n\n# Delete a step\ndel clf.steps[1]\nprint(clf)\n"], "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": ["fit_params = {\"early_stopping_rounds\":42, \n              \"eval_metric\" : \"mae\", \n              \"eval_set\" : [[testX, testY]]}\n\ngridsearch.fit(trainX, trainY, **fit_params)\n\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n"], "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": ["fit_params = {\"early_stopping_rounds\":42, \n              \"eval_metric\" : \"mae\", \n              \"eval_set\" : [[testX, testY]]}\n\nmodel = xgb.XGBRegressor()\ngridsearch = GridSearchCV(estimator=model, \n                          param_grid=paramGrid, \n                          cv=TimeSeriesSplit(n_splits=3).get_n_splits([trainX, trainY]), \n                          verbose=1, \n                          n_jobs=n_jobs, \n                          iid=iid)\n\ngridsearch.fit(trainX, trainY, **fit_params)\n\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n"], "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": ["proba = []\nfor train, test in cv:\n    logreg.fit(X[train], y[train])\n    proba.append(logreg.predict_proba(X[test]))\nproba = np.concatenate(proba)\n"], "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": ["proba = []\nfor train, test in cv:\n    logreg.fit(X[train], y[train])\n    proba.append(logreg.predict_proba(X[test]))\nproba = np.concatenate(proba)\n"], "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": ["inversed = scaler.inverse_transform(scaled)\n"], "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": ["<code>\nfrom sklearn.linear_model import LinearRegression\n\n# Prepare the features and target\nX = data.drop('t', axis=1)\ny = scaled\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Inverse transform the predictions\ninversed_predictions = scaler.inverse_transform(predictions)\n\nreturn inversed_predictions\n### END SOLUTION\n"], "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": ["model_name = model.__class__.__name__\n"], "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": ["model_name = type(model).__name__\n"], "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": ["model_name = model.__class__.__name__\n"], "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": ["tf_idf_out = pipe.named_steps['tf_idf'].fit_transform(data)\n"], "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": ["tf_idf_out = pipe.named_steps['tf_idf'].fit_transform(data)\n"], "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": ["pipe.fit(data, target)\nselect_out = pipe.named_steps['select'].transform(data)\n"], "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": ["clf = GridSearchCV(bc, param_grid)\nclf = clf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n"], "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": ["# reshape X and y to be 2D and 1D respectively\nX = X.reshape(-1, 1)\ny = y.reshape(-1)\n\n# initialize the model\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\n\n# fit the model\nrgr = regressor.fit(X, y)\n\n# make predictions\npredict = rgr.predict(X_test)\n"], "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": ["# reshape your data\nX = np.array(X).reshape(-1, 1)\ny = np.array(y).reshape(-1, 1)\n\n# initialize the model\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\n\n# fit the model\nrgr = regressor.fit(X, y.ravel())\n\n# make predictions\npredict = rgr.predict(X_test)\n"], "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": ["def preprocess(s):\n    return s.upper()\n\ncorpus = ['This is the first document.', 'This document is the second document.', 'And this is the third one.', 'Is this the first document?']\n\nvectorizer = TfidfVectorizer(preprocessor=preprocess)\nX = vectorizer.fit_transform(corpus)\n\nprint(vectorizer.get_feature_names_out())\nprint(X.shape)\n"], "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": ["def prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n"], "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": ["scaler = preprocessing.StandardScaler()\nscaler.fit(data)\ndata_scaled = scaler.transform(data)\ndf_out = pd.DataFrame(data_scaled, columns=data.columns, index=data.index)\n"], "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": ["scaler = preprocessing.StandardScaler()\nscaled_df = scaler.fit_transform(data)\nscaled_df = pd.DataFrame(scaled_df, columns=data.columns, index=data.index)\ndf_out = scaled_df\n"], "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": ["grid.fit(X, y)\ncoef = grid.best_estimator_.named_steps['model'].coef_\nprint(coef)\n"], "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": ["grid.fit(X, y)\ncoef = grid.best_estimator_.named_steps['model'].coef_\nprint(coef)\n"], "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": ["# get feature importances\nimportances = clf.feature_importances_\n# get column names\ncolumn_names = X.columns\n# create a dictionary of feature names and their importance\nfeature_dict = dict(zip(column_names, importances))\n# create a mask of selected features\nmask = model.get_support()\n# get the column names of selected features\nselected_columns = X.columns[mask]\nprint(selected_columns)\n"], "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": ["model = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\nfeature_idx = model.get_support()\nfeature_name = X.columns[feature_idx]\ncolumn_names = feature_name\nprint(column_names)\n"], "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": ["# get feature importances\nimportances = clf.feature_importances_\n\n# map importances with the column names\nfeature_importances = pd.Series(importances, index=X.columns)\n\n# get selected feature names\nselected_features = feature_importances[feature_importances > 0].index\n\ncolumn_names = selected_features\n"], "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": ["model = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\nfeature_idx = model.get_support()\nfeature_name = X.columns[feature_idx]\ncolumn_names = feature_name.tolist()\nprint(column_names)\n"], "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": ["km.fit(X)\ndistances = km.transform(X)\ndist_to_p = distances[:, p]\nclosest_50_indices = np.argsort(dist_to_p)[:50]\nclosest_50_samples = X[closest_50_indices]\n"], "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": ["km.fit(X)\ndistances = km.transform(X)\ndist_to_p = distances[:, p]\nclosest_50_indices = dist_to_p.argsort()[:50]\nclosest_50_samples = X[closest_50_indices]\n"], "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": ["km.fit(X)\ndistances = km.transform(X)\ndist_to_p = distances[:, p]\nclosest_100_indices = np.argsort(dist_to_p)[:100]\nclosest_100_samples = X[closest_100_indices]\n"], "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": ["from sklearn.metrics import pairwise_distances_argmin_min\n\nkm.fit(X)\ndistances, _ = pairwise_distances_argmin_min(km.cluster_centers_[p].reshape(1, -1), X)\nclosest_samples = pd.DataFrame(X).iloc[distances.argsort()[:50], :].values\n\nreturn closest_samples\n### END SOLUTION\n"], "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": ["# Convert categorical variable into dummy/indicator variables\nX_train = pd.get_dummies(X_train)\n"], "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": ["# convert categorical variable to dummy variables\nX_train = pd.get_dummies(X_train, columns=[0])\n"], "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": ["from sklearn.svm import SVR\n\n# create a model with a gaussian kernel\nmodel = SVR(kernel='rbf')\n\n# fit the model\nmodel.fit(X, y)\n\n# predict X\npredict = model.predict(X)\n"], "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": ["from sklearn import svm\n\n# Create a SVM Regressor with Gaussian kernel\nclf = svm.SVR(kernel='rbf')\n\n# Train the model using the training sets\nclf.fit(X, y)\n\n# Predict the response for test dataset\npredict = clf.predict(X)\n"], "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": ["from sklearn.svm import SVR\n\n# create a model with polynomial kernel of degree 2\nmodel = SVR(kernel='poly', degree=2)\n\n# fit the model\nmodel.fit(X, y)\n\n# predict\npredict = model.predict(X)\n"], "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": ["from sklearn.svm import SVR\n\n# create a model\nmodel = SVR(kernel='poly', degree=2)\n\n# fit the model\nmodel.fit(X, y)\n\n# predict\npredict = model.predict(X)\n"], "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": ["from sklearn.metrics.pairwise import cosine_similarity\n\ndef get_tf_idf_query_similarity(documents, queries):\n    vectorizer = TfidfVectorizer()\n    vectorizer.fit_transform(documents)\n    query_vectors = vectorizer.transform(queries)\n    document_vectors = vectorizer.transform(documents)\n    cosine_similarities = cosine_similarity(query_vectors, document_vectors)\n    return cosine_similarities\n\ncosine_similarities_of_queries = get_tf_idf_query_similarity(documents, queries)\n"], "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": ["cosine_similarities_of_queries = []\nfor query in queries:\n    query_vector = tfidf.transform([query])\n    cosine_similarities = np.dot(query_vector, tfidf.idf_)\n    cosine_similarities_of_queries.append(cosine_similarities.toarray())\ncosine_similarities_of_queries = np.concatenate(cosine_similarities_of_queries, axis=0)\n"], "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": ["<code>\n    def solve(queries, documents):\n        tfidf = TfidfVectorizer()\n        tfidf.fit_transform(documents)\n        cosine_similarities_of_queries = []\n        for query in queries:\n            query_vector = tfidf.transform([query])\n            cosine_similarities = cosine_similarity(query_vector, tfidf.transform(documents))\n            cosine_similarities_of_queries.append(cosine_similarities[0])\n        return np.array(cosine_similarities_of_queries)\n    ### END SOLUTION\n"], "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n"], "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\nf = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n\nmlb = MultiLabelBinarizer()\nnew_f = mlb.fit_transform(f)\n"], "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = [\n    ['f1', 'f2', 'f3'],\n    ['f2', 'f4', 'f5', 'f6'],\n    ['f1', 'f2']\n]\n\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n"], "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\n\ndef solve(features):\n    mlb = MultiLabelBinarizer()\n    new_features = mlb.fit_transform(features)\n    return new_features\n### END SOLUTION\n"], "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": ["from sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\n"], "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": ["from sklearn.cluster import AgglomerativeClustering\n\n# Define the structure A of the data. Here a 10 nearest neighbors\nfrom sklearn.neighbors import kneighbors_graph\nconnectivity = kneighbors_graph(data_matrix, n_neighbors=10, include_self=False)\n\n# Make connectivity symmetric\nconnectivity = 0.5 * (connectivity + connectivity.T)\n\nward = AgglomerativeClustering(n_clusters=2, connectivity=connectivity,\n                               linkage='ward').fit(data_matrix)\ncluster_labels = ward.labels_\n"], "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": ["# create a AgglomerativeClustering model\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average')\n# fit model and predict clusters\ncluster_labels = model.fit_predict(data_matrix)\n"], "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": ["simM = [[0,0.6,0.8],[0.6,0,0.111],[0.8,0.111,0]]\ncluster = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average')\ncluster_labels = cluster.fit_predict(simM)\n"], "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": ["Z = scipy.cluster.hierarchy.linkage(data_matrix, 'ward')\ncluster_labels = scipy.cluster.hierarchy.fcluster(Z, 2, criterion='maxclust')\n"], "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": ["distance_matrix = np.array([[0,0.8,0.9],[0.8,0,0.2],[0.9,0.2,0]])\nlinkage_matrix = scipy.cluster.hierarchy.linkage(distance_matrix, 'single')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n"], "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": ["Z = scipy.cluster.hierarchy.linkage(simM, 'ward')\ncluster_labels = scipy.cluster.hierarchy.fcluster(Z, 2, criterion='maxclust')\n"], "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": ["from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n"], "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": ["from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n"], "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": ["from sklearn.preprocessing import PowerTransformer\npt = PowerTransformer(method='box-cox', standardize=False)\nbox_cox_data = pt.fit_transform(data)\n"], "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": ["from sklearn.preprocessing import PowerTransformer\npt = PowerTransformer(method='box-cox')\nbox_cox_data = pt.fit_transform(data)\n"], "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": ["from sklearn.preprocessing import PowerTransformer\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n"], "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": ["from sklearn.preprocessing import PowerTransformer\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n"], "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": ["vectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w\\w+\\b|!|\\?|\\\"|\\'\")\ntransformed_text = vectorizer.fit_transform(text)\n"], "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": ["from sklearn.model_selection import train_test_split\n\n# Load the dataset\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n\n# Split the dataset into features (X) and target (y)\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"], "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": ["from sklearn.model_selection import train_test_split\n\n# Split the data into training and testing sets\ntrain, test = train_test_split(data, test_size=0.2, random_state=42)\n\n# Split the training set into x (features) and y (target)\nx_train = train.iloc[:, :-1]\ny_train = train.iloc[:, -1]\n\n# Split the testing set into x (features) and y (target)\nx_test = test.iloc[:, :-1]\ny_test = test.iloc[:, -1]\n"], "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": ["from sklearn.model_selection import train_test_split\n\n# Load the dataset\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n\n# Split the dataset into features (X) and target (y)\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n"], "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": ["from sklearn.model_selection import train_test_split\n\n# Split the dataset into training and testing sets\ntrain, test = train_test_split(dataset, test_size=0.2, random_state=42)\n\n# Split the training set into x (features) and y (target)\nx_train = train.iloc[:, :-1]\ny_train = train.iloc[:, -1]\n\n# Split the testing set into x (features) and y (target)\nx_test = test.iloc[:, :-1]\ny_test = test.iloc[:, -1]\n\nreturn x_train, y_train, x_test, y_test\n### END SOLUTION\n"], "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": ["mse = df['mse'].values.reshape(-1,1)\nkmeans = KMeans(n_clusters=2, random_state=0).fit(mse)\nlabels = kmeans.labels_\n"], "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": ["from sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"file.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\nf2 = list(range(0, len(f1)))\nX = np.array(list(zip(f1, f2))).reshape(-1,1)\nkmeans = KMeans(n_clusters=2, n_init=10).fit(X)\nlabels = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_\n"], "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": ["lsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(X, y)\nmodel = SelectFromModel(lsvc, prefit=True)\nX_new = model.transform(X)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[model.get_support()]\n"], "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": ["model = LinearSVC(penalty='l1', dual=False)\nmodel.fit(X, y)\ncoef = model.coef_\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[np.abs(coef) > 0]\n"], "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": ["<code>\n    lsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(X, y)\n    model = sklearn.feature_selection.SelectFromModel(lsvc, prefit=True)\n    X_new = model.transform(X)\n    selected_features = model.get_support(indices=True)\n    selected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_features]\n    return selected_feature_names\n### END SOLUTION\n"], "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": ["vocabulary = ['Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX']\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\nX = X.toarray()\n"], "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": ["vocabulary = ['Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX']\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\nX = X.toarray()\n"], "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": ["vocabulary = ['Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX']\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\nX = np.where(X.toarray()>0,1,0)\n"], "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": ["vocabulary = ['Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX']\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names_out()\nX = np.where(X.toarray()>0,1,0)\n"], "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": ["slopes = []\nfor col in df1.columns[1:]:\n    df2 = df1[['Time', col]].dropna()\n    X = df2['Time'].values.reshape(-1, 1)\n    Y = df2[col].values.reshape(-1, 1)\n    slope = LinearRegression().fit(X,Y).coef_[0][0]\n    slopes.append(slope)\n"], "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": ["slopes = []\nfor col in df1.columns:\n    if col != 'Time':\n        df2 = df1[['Time', col]].dropna()\n        X = df2['Time'].values.reshape(-1,1)\n        Y = df2[col].values.reshape(-1,1)\n        slope = LinearRegression().fit(X,Y)\n        m = slope.coef_[0][0]\n        slopes.append(m)\n"], "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": ["le = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ntransformed_df = df\n"], "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": ["le = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ntransformed_df = df\n"], "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": ["le = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\nreturn df\n### END SOLUTION\n"], "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": ["ElasticNet = linear_model.ElasticNet() # create a ElasticNet instance\nElasticNet.fit(X_train, y_train) # fit data\n\n# print(ElasticNet.coef_)\n# print (ElasticNet.intercept_) # print out the coefficients\n\nprint (\"R^2 for training set:\"),\ntraining_set_score = ElasticNet.score(X_train, y_train)\nprint (training_set_score)\n\nprint ('-'*50)\n\nprint (\"R^2 for test set:\"),\ntest_set_score = ElasticNet.score(X_test, y_test)\nprint (test_set_score)\n"], "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": ["flattened = np_array.flatten().reshape(-1, 1)\nscaler = MinMaxScaler()\nscaler.fit(flattened)\ntransformed = scaler.transform(flattened).reshape(np_array.shape)\n"], "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": ["scaler = MinMaxScaler()\nreshaped = np_array.reshape(-1,1)\nscaled = scaler.fit_transform(reshaped)\ntransformed = scaled.reshape(np_array.shape)\n"], "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": ["scaler = MinMaxScaler()\nreshaped = np.reshape(a, (-1,1))\nscaled = scaler.fit_transform(reshaped)\nnew_a = np.reshape(scaled, a.shape)\nreturn new_a\n### END SOLUTION\n"], "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": ["close_buy1 = close.values[:-1]\nm5 = ma50.values[:-1]\nm10 = ma100.values[:-1]\nma20 = ma200.values[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict(b)\n"], "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": ["# Convert your data to pandas DataFrame\ndf = pd.DataFrame(X, columns=['feature1', 'feature2'])\n\n# Convert string data to categorical data\ndf['feature1'] = df['feature1'].astype('category')\n\n# Convert category data to codes\nnew_X = df['feature1'].cat.codes.values\n\n# Now you can fit your model\nclf.fit(new_X.reshape(-1, 1), ['2', '3'])\n"], "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": ["# Convert your data to DataFrame\ndf = pd.DataFrame(X, columns=['feature1', 'feature2'])\n\n# Convert string columns to category\ndf['feature1'] = df['feature1'].astype('category')\n\n# Assign the encoded variable to a new column\ndf['feature1_cat'] = df['feature1'].cat.codes\n\n# Use the new encoded column for training\nnew_X = df[['feature1_cat', 'feature2']].values\nclf.fit(new_X, ['2', '3'])\n"], "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": ["# Convert your data to pandas DataFrame\ndf = pd.DataFrame(X, columns=['feature1', 'feature2'])\n\n# Convert string data to categorical data\ndf['feature1'] = df['feature1'].astype('category')\n\n# Convert category data to codes\nnew_X = df['feature1'].cat.codes.values.reshape(-1, 1)\n\n# Now you can fit your model\nclf.fit(new_X, ['4', '5'])\n"], "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": ["# Seperating the data into dependent and independent variables\nX = dataframe.iloc[:, :-1].values.astype(float)\ny = dataframe.iloc[:, -1].values\n\nlogReg = LogisticRegression()\n\nlogReg.fit(X, y)\n\n# Predicting\npredict = logReg.predict(X)\n"], "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": ["# Split the data into X (features) and y (target)\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1]\n\n# Create and fit the model\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n\n# Make a prediction\npredict = logReg.predict(X)\n"], "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": ["# calculate the index at which to split\nsplit_index = int(features_dataframe.shape[0]*0.2)\n\n# split the data\ntrain_dataframe = features_dataframe[:split_index]\ntest_dataframe = features_dataframe[split_index:]\n"], "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": ["# calculate the index at which to split\nsplit_index = int(len(features_dataframe) * 0.8)\n\n# split the data\ntrain_dataframe = features_dataframe.iloc[split_index:]\ntest_dataframe = features_dataframe.iloc[:split_index]\n"], "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": ["data = features_dataframe.sort_values(\"date\")\ntrain_size = int(0.2 * len(data))\ntrain_dataframe = data[:train_size]\ntest_dataframe = data[train_size:]\nreturn train_dataframe, test_dataframe\n### END SOLUTION\n"], "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": ["for col in ['X2', 'X3']:\n    df[col + '_scale'] = df.groupby('Month')[col].transform(lambda x: scaler.fit_transform(x.values.reshape(-1,1)))\n"], "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": ["for col in ['A2', 'A3']:\n    myData['new_' + col] = myData.groupby('Month')[col].transform(lambda x: scaler.fit_transform(x.values.reshape(-1,1)).flatten())\n"], "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": ["import re\nwords = \"Hello @friend, this is a good day. #good.\"\nwords = re.findall(r'\\b\\w+\\b', words)\ncount = CountVectorizer(lowercase = False)\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names()\nprint(feature_names)\n"], "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": ["count = CountVectorizer(lowercase = False, token_pattern = '[^\\s]+')\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\nprint(feature_names)\n"], "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": ["cv_results = GridSearch_fitted.cv_results_\nfull_results = pd.DataFrame(cv_results)\nfull_results\n"], "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": ["# convert to DataFrame\nresults = pd.DataFrame(GridSearch_fitted.cv_results_)\n\n# sort by mean_fit_time\nfull_results = results.sort_values(by='mean_fit_time')\n"], "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": ["from sklearn.externals import joblib\njoblib.dump(fitted_model, 'sklearn_model.pkl') \n\n# Later you can load back the pickled model (possibly in another Python process) with:\nfitted_model = joblib.load('sklearn_model.pkl') \n"], "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": ["tfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = (1 - sklearn.metrics.pairwise.cosine_similarity(tfidf_matrix))\n"], "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": ["for g in optim.param_groups:\n    g['lr'] = 0.001\n"], "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": ["for g in optim.param_groups:\n    g['lr'] = 0.001\n"], "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": ["for g in optim.param_groups:\n    g['lr'] = 0.0005\n"], "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": ["# define your initial learning rate\ninitial_lr = 0.005\noptim = torch.optim.SGD(..., lr=initial_lr)\n\n# define your conditions for changing the learning rate\n# for example, if the loss increases\nif loss_increases:\n    # decrease the learning rate by half\n    for param_group in optim.param_groups:\n        param_group['lr'] = param_group['lr'] / 2\n"], "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": ["# create a weight matrix for words in training docs\nembedding_matrix = np.zeros((len(word2vec.wv.key_to_index), 100))\n\nfor i in range(len(word2vec.wv.key_to_index)):\n    embedding_vector = word2vec.wv[word2vec.wv.index_to_key[i]]\n    if embedding_vector is not None:\n        embedding_matrix[i] = embedding_vector\n\n# load these weights into PyTorch\nembedding = torch.nn.Embedding.from_pretrained(torch.FloatTensor(embedding_matrix))\n\n# get embeddings\nembedded_input = embedding(input_Tensor)\n"], "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": ["weights = torch.FloatTensor(word2vec.wv.vectors)\nembedding = torch.nn.Embedding.from_pretrained(weights)\nembedded_input = embedding(input_Tensor)\nreturn embedded_input\n### END SOLUTION\n"], "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": ["px = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": ["px = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": ["px = pd.DataFrame(x.numpy())\n"], "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": ["C = B[:, A_log.nonzero().squeeze()]\n"], "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": ["C = B[:, A_logical.nonzero().squeeze()]\n"], "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": ["C = B[:, A_log.nonzero().squeeze()]\n"], "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": ["C = B[:, A_log.nonzero().squeeze()]\n"], "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": ["<code>\nimport torch\n\n# Logical indexing\nA_log = torch.tensor([1, 0, 1], dtype=torch.bool)\n\n# Tensor\nB = torch.tensor([[1, 2, 3], [4, 5, 6]])\n\n# Apply logical indexing on columns\nC = B[:, A_log]\n"], "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": ["C = B[:, A_log.nonzero().squeeze()]\n"], "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": ["C = B.index_select(1, idx)\n"], "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": ["x_tensor = torch.Tensor(np.vstack(x_array))\n"], "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": ["x_tensor = torch.from_numpy(np.vstack(x).astype(np.float))\n"], "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": ["import torch\n\ndef Convert(a):\n    return torch.tensor(a.tolist()).float()\n\na = np.array([\n   np.array([0.5, 1.0, 2.0], dtype=np.float16),\n   np.array([4.0, 6.0, 8.0], dtype=np.float16)\n], dtype=object)\n\nt = Convert(a)\nprint(t)\n### END SOLUTION\n"], "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": ["max_len = max(lens)\nmask = torch.zeros(len(lens), max_len).long()\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n"], "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": ["max_len = max(lens)\nmask = torch.zeros(len(lens), max_len).long()\nfor idx, length in enumerate(lens):\n    mask[idx, :length] = 1\n"], "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": ["max_len = max(lens)\nmask = torch.zeros(len(lens), max_len).long()\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n"], "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": ["import torch\n\ndef get_mask(lens):\n    max_len = max(lens)\n    mask = torch.zeros(len(lens), max_len).long()\n    for idx, length in enumerate(lens):\n        mask[idx, :length] = 1\n    return mask\n\nlens = [3, 5, 4]\nmask = get_mask(lens)\nprint(mask)\n"], "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": ["Tensor_3D = torch.stack([torch.diag(Tensor_2D[i]) for i in range(Tensor_2D.shape[0])])\n"], "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": ["<code>\n    result = torch.stack([torch.diag(t[i]) for i in range(t.shape[0])])\n    return result\n### END SOLUTION\nTensor_3D = Convert(Tensor_2D)\n"], "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": ["a = a.unsqueeze(0) if len(a.shape) == 2 else a\nb = b.unsqueeze(0) if len(b.shape) == 2 else b\nab = torch.cat((a, b), 0)\n"], "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": ["ab = torch.cat((a, b), 0)\n"], "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": ["a = a.unsqueeze(0) if len(a.shape) == 2 else a\nb = b.unsqueeze(0) if len(b.shape) == 2 else b\nab = torch.cat((a, b), 0)\nreturn ab\n### END SOLUTION\n"], "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": ["for i, length in enumerate(lengths):\n    a[i, length:, :] = 0\n"], "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": ["for i, length in enumerate(lengths):\n    a[i, length:, :] = 2333\n"], "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": ["for i, length in enumerate(lengths):\n    a[i, :length, :] = 0\n"], "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": ["for i, length in enumerate(lengths):\n    a[i, :length, :] = 2333\n"], "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": ["list_of_tensors = [torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = torch.stack(list_of_tensors)\n"], "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": ["new_tensors = torch.stack(list)\n"], "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": ["<code>\ndef Convert(lt):\n    return torch.stack(lt)\nlist_of_tensors = [torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = Convert(list_of_tensors)\n"], "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": ["tensor_of_tensors = torch.stack(list_of_tensors)\n"], "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": ["result = torch.tensor([t[i, idx[i]] for i in range(t.shape[0])])\n"], "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": ["result = torch.tensor([t[i, idx[i]] for i in range(t.shape[0])])\n"], "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": ["idx_torch = torch.from_numpy(idx)\nresult = t[torch.arange(t.size(0)), 1-idx_torch]\n"], "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": ["result = torch.gather(x, 1, ids.unsqueeze(1).expand(-1, x.size(2)))\n"], "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": ["ids = ids.unsqueeze(-1).expand(-1, -1, x.size(-1))\nresult = torch.gather(x, 1, ids).squeeze(1)\n"], "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": ["result = torch.sum(x * ids.unsqueeze(-1), dim=1)\n"], "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": ["_, y = torch.max(softmax_output, dim=1)\ny = y.view(-1, 1)\n"], "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": ["_, y = torch.max(softmax_output, dim=1)\ny = y.view(-1, 1)\n"], "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": ["_, y = torch.min(softmax_output, dim=1)\ny = y.view(-1, 1)\n"], "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": ["import torch\n\nsoftmax_output = torch.tensor([[0.2, 0.1, 0.7], [0.6, 0.2, 0.2], [0.1, 0.8, 0.1]])\n\ndef solve(softmax_output):\n    _, predicted = torch.max(softmax_output, 1)\n    return predicted.view(-1, 1)\n\ny = solve(softmax_output)\nprint(y)\n### END SOLUTION\n"], "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": ["_, y = torch.min(softmax_output, dim=1)\ny = y.type(torch.LongTensor)\n"], "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": ["def cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, h, w), target: (n, h, w)\n    n, c, h, w = input.size()\n    # log_p: (n, c, h, w)\n    log_p = F.log_softmax(input, dim=1)\n    # log_p: (n*h*w, c)\n    log_p = log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)\n    log_p = log_p[target.view(n, h, w, 1).repeat(1, 1, 1, c).view(-1, c) >= 0]\n    log_p = log_p.view(-1, c)\n    # target: (n*h*w,)\n    mask = target >= 0\n    target = target[mask]\n    loss = F.nll_loss(log_p, target.view(-1), weight=weight, size_average=False)\n    if size_average:\n        loss /= mask.data.sum()\n    return loss\n\nimages = Variable(torch.randn(5, 3, 4, 4))\nlabels = Variable(torch.LongTensor(5, 4, 4).random_(3))\nloss = cross_entropy2d(images, labels)\n"], "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": ["cnt_equal = torch.sum(A == B)\n"], "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": ["cnt_equal = torch.sum(A == B)\n"], "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": ["cnt_not_equal = torch.sum(A != B)\n"], "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": ["torch.sum(A == B).item()\n### END SOLUTION\n"], "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": ["A = A[-x:]\nB = B[-x:]\ncnt_equal = torch.sum(A == B)\n"], "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": ["A = torch.tensor([1, 2, 3, 4, 5, 6])\nB = torch.tensor([1, 2, 3, 4, 5, 7])\nx = 3\ncnt_not_equal = torch.sum(A[-x:] != B[-x:])\n"], "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": ["tensors_31 = [a[..., i:i+chunk_dim, :] for i in range(a.shape[3] - chunk_dim + 1)]\n"], "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": ["tensors_31 = [a[:,:,i:i+chunk_dim,:,:] for i in range(a.shape[2]-chunk_dim+1)]\n"], "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": ["output[mask.bool()] = clean_input_spectrogram[mask.bool()]\n"], "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": ["output[mask == 0] = clean_input_spectrogram[mask == 0]\n"], "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": ["signed_min = torch.where(torch.abs(x) < torch.abs(y), x, y)\n"], "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": ["signed_max = torch.sign(x) * torch.max(torch.abs(x), torch.abs(y))\n"], "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": ["import torch\n\ndef signed_min(x, y):\n    min_xy = torch.where(torch.abs(x) < torch.abs(y), x, y)\n    return min_xy\n\nx = torch.tensor([1.0, -2.0, 3.0])\ny = torch.tensor([-1.5, 2.5, -3.5])\n\nsigned_min = signed_min(x, y)\nprint(signed_min)\n### END SOLUTION\n"], "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": ["def predict_allCharacters(input):\n    output = MyNet(input)\n    output = torch.nn.functional.softmax(output, dim=1)\n    conf, classes = torch.max(output.reshape(1, 3), 1)\n    class_names = '012'\n    return conf, class_names[classes.item()]\n\nconfidence_score, predicted_class = predict_allCharacters(input)\n"], "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": ["# First, we need to slice the tensors to get the overlapping column\na_last_col = a[:, -1:]\nb_first_col = b[:, :1]\n\n# Then, we calculate the average of the overlapping columns\navg_col = (a_last_col + b_first_col) / 2\n\n# Finally, we concatenate the tensors along the second dimension\nresult = torch.cat((a[:, :-1], avg_col, b[:, 1:]), dim=1)\n"], "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": ["import torch\n\n# Define the tensors\na = torch.Tensor([[1, 2, 3], [1, 2, 3]])\nb = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n\n# Compute the average of the overlapping columns\navg_col = ((a[:,-1] + b[:,0]) / 2).unsqueeze(1)\n\n# Concatenate the tensors\nresult = torch.cat((a[:,:-1], avg_col, b[:,1:]), dim=1)\n\nprint(result)\n"], "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": ["import torch\n\n# Original tensor\nt = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\n\n# Padding tensor\npadding = torch.zeros((1, t.shape[1] + 2))\n\n# Add padding to the left and right\nt_padded = torch.cat((torch.zeros((t.shape[0], 1)), t, torch.zeros((t.shape[0], 1))), dim=1)\n\n# Add padding to the top and bottom\nt_padded = torch.cat((padding, t_padded, padding), dim=0)\n\nresult = t_padded\n"], "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": ["import torch\n\n# Original tensor\nt = torch.tensor([[1, 2], [3, 4]])\n\n# Padding tensor\npadding = torch.zeros((4, 4))\n\n# Insert original tensor into padding tensor\npadding[1:3, 1:3] = t\n\nresult = padding\n"], "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": ["t = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\npadding = torch.full((1, t.shape[1] + 2), -1)\nt = torch.cat((padding, t, padding), dim=0)\npadding = torch.full((t.shape[0], 1), -1)\nt = torch.cat((padding, t, padding), dim=1)\nresult = t\n"], "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": ["W = W.view(hid_dim, 1)\nresult = torch.bmm(data, W).squeeze()\nresult = result.view(10, 2, 3)\n"], "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
